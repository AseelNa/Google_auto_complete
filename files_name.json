[{"ch01.qxd": "0130903086.txt"},{"": "0130903086.txt"},{"1/3/2001": "0130903086.txt"},{"": "0130903086.txt"},{"9:44 AM": "0130903086.txt"},{"": "0130903086.txt"},{"Page 1": "0130903086.txt"},{"": "0130903086.txt"},{"O": "0130903086.txt"},{"": "0130903086.txt"},{"N": "0130903086.txt"},{"": "0130903086.txt"},{"E": "0130903086.txt"},{"": "0130903086.txt"},{"Introduction to": "0130903086.txt"},{"Networking and": "0130903086.txt"},{"the OSI Model": "0130903086.txt"},{"In This Chapter": "0130903086.txt"},{"\u25c6 Local Area Networks": "0130903086.txt"},{"\u25c6 Wide Area Networks": "0130903086.txt"},{"\u25c6 Internetworking": "0130903086.txt"},{"\u25c6 The Seven Layers of": "0130903086.txt"},{"": "0130903086.txt"},{"the OSI Model": "0130903086.txt"},{"": "0130903086.txt"},{"In this chapter, we begin our journey toward the CCNA": "0130903086.txt"},{"certification by examining some networking concepts": "0130903086.txt"},{"key to working with Cisco routers. The most important": "0130903086.txt"},{"concept is a discussion of the OSI model and how data": "0130903086.txt"},{"flows across a network. Once the OSI model is understood, it will be easier to design, use, and, especially,": "0130903086.txt"},{"troubleshoot Cisco networks.": "0130903086.txt"},{"": "0130903086.txt"},{"Introduction to Networking": "0130903086.txt"},{"In the early days of computing, there were mainframe computers. These computers were large and centrally located,": "0130903086.txt"},{"usually in a very cold and climate-controlled environment.": "0130903086.txt"},{"Although processing was performed on the mainframe,": "0130903086.txt"},{"the average user did not walk up to it and start an application. Instead, he or she would sit at a terminal that was connected to the mainframe by some type of cabling. This": "0130903086.txt"},{"terminal, located in a remote location, was the gateway to": "0130903086.txt"},{"the processing power of the mainframe. The terminal performed very little work on its own. In fact, it merely displayed data on the monitor and processed keystrokes to": "0130903086.txt"},{"": "0130903086.txt"},{"1": "0130903086.txt"},{"": "0130903086.txt"},{"\fch01.qxd": "0130903086.txt"},{"": "0130903086.txt"},{"1/3/2001": "0130903086.txt"},{"": "0130903086.txt"},{"2": "0130903086.txt"},{"": "0130903086.txt"},{"9:44 AM": "0130903086.txt"},{"": "0130903086.txt"},{"Chapter 1": "0130903086.txt"},{"": "0130903086.txt"},{"Page 2": "0130903086.txt"},{"": "0130903086.txt"},{"\u2022": "0130903086.txt"},{"": "0130903086.txt"},{"Introduction to Networking and the OSI Model": "0130903086.txt"},{"": "0130903086.txt"},{"send back to the mainframe. For this reason, these terminals were often": "0130903086.txt"},{"called dumb terminals.": "0130903086.txt"},{"As time progressed, more and more users were connecting to the mainframe computer through the terminals. This increased the load on the mainframe, thereby slowing productivity. The mainframe computers were": "0130903086.txt"},{"continually being enhanced and upgraded to keep up with the processing": "0130903086.txt"},{"demand.": "0130903086.txt"},{"Technology started producing smarter terminals to decrease the load on": "0130903086.txt"},{"the mainframe. When the personal computer (PC) became a reality in the late": "0130903086.txt"},{"1980s, the paradigm began to shift. PCs could connect to the mainframe in": "0130903086.txt"},{"place of the dumb terminals, but more importantly, they could process data": "0130903086.txt"},{"on their own. The PC revolution began, and the increasing importance of the": "0130903086.txt"},{"home and office computer was realized.": "0130903086.txt"},{"As PCs began to work in conjunction with the mainframe, new technology was required to efficiently connect them. Local Area Networks, or LANs,": "0130903086.txt"},{"became the term used to describe the way in which computers were connected together to share data. LANs were implemented in a business using": "0130903086.txt"},{"technologies such as Ethernet and Token Ring to connect computers together": "0130903086.txt"},{"using Network Interface Cards, or NICs. LAN connectivity became a new industry market, and new businesses worldwide started operations.": "0130903086.txt"},{"As more and more LANs became operational, it became necessary to": "0130903086.txt"},{"link these networks together across floors, buildings, cities, and even countries; hence, the introduction of the Wide Area Network, or WAN. A WAN is a": "0130903086.txt"},{"means of connecting LANs together across a distance boundary. Typical WAN": "0130903086.txt"},{"connectivity was accomplished through phone lines.": "0130903086.txt"},{"Today, computers throughout the world are connected through WANs,": "0130903086.txt"},{"LANs, and various combinations of the two. Perhaps the most well-known": "0130903086.txt"},{"network is the Internet. The means of connecting all these networks together": "0130903086.txt"},{"to achieve a desired goal is called internetworking, and this is where Cisco": "0130903086.txt"},{"has positioned itself as the world leader.": "0130903086.txt"},{"": "0130903086.txt"},{"The OSI Model": "0130903086.txt"},{"Networking evolved from the basic principle of moving data from one computer to another. The first method involved copying data to a storage media": "0130903086.txt"},{"such as a floppy disk and then taking that storage media to another computer": "0130903086.txt"},{"and copying the data. This was charmingly referred to as sneaker-net. As": "0130903086.txt"},{"more efficient means were discovered\u2014namely, electricity on a copper": "0130903086.txt"},{"wire\u2014networking became more popular. However, there were no standards": "0130903086.txt"},{"in place. This meant that one network manufacturer implemented a different": "0130903086.txt"},{"means of data transfer than another. If you had an IBM network, you purchased only IBM network devices.": "0130903086.txt"},{"In 1984, a group known as the International Organization for Standardization (ISO) created a model called the Open Systems Interconnect (OSI).": "0130903086.txt"},{"This model defined guidelines for interoperability between network manufac-": "0130903086.txt"},{"": "0130903086.txt"},{"\fch01.qxd": "0130903086.txt"},{"": "0130903086.txt"},{"1/3/2001": "0130903086.txt"},{"": "0130903086.txt"},{"9:44 AM": "0130903086.txt"},{"": "0130903086.txt"},{"Page 3": "0130903086.txt"},{"": "0130903086.txt"},{"The OSI Model": "0130903086.txt"},{"": "0130903086.txt"},{"3": "0130903086.txt"},{"": "0130903086.txt"},{"turers. A company could now mix and match network devices and protocols": "0130903086.txt"},{"from various manufacturers in its own network without being locked into": "0130903086.txt"},{"using a single vendor. It also had a great side effect: Competition meant lower": "0130903086.txt"},{"prices.": "0130903086.txt"},{"Although the OSI model defined a set of standards, it is important to": "0130903086.txt"},{"note that it is merely a model. Many other models exist in the networking industry; however, understanding a single model gives us the capability of understanding other models in the future. The OSI model is the most widely": "0130903086.txt"},{"taught as the foundation for this knowledge.": "0130903086.txt"},{"": "0130903086.txt"},{"Why Use a Layered Model?": "0130903086.txt"},{"By using a layered model, we can categorize the procedures that are necessary to transmit data across a network. Let\u2019s explore this in more detail. Imagine that we are developers and we are about to create a new protocol for": "0130903086.txt"},{"communication across a network.": "0130903086.txt"},{"First, we need to define the term protocol: A protocol is a set of": "0130903086.txt"},{"guidelines or rules of communication. Some think of a protocol as a dialect": "0130903086.txt"},{"of a language; this is erroneous. The British and the Americans both": "0130903086.txt"},{"speak the same language: English. However, certain words differ in meaning": "0130903086.txt"},{"between the two countries. The timing of the exchange of words between the two cultures can also lead to difficulties in complete understanding. A protocol, then, is more than just the words of computers. It": "0130903086.txt"},{"also includes the timing and the same dictionary so that at any time, both": "0130903086.txt"},{"computers using the same protocol have an exact, complete understanding": "0130903086.txt"},{"of each other.": "0130903086.txt"},{"Developing a new protocol without a model would be a tedious and": "0130903086.txt"},{"time-consuming task. We would need to reinvent the wheel by recreating": "0130903086.txt"},{"work that has already been done by other developers. We could save time by": "0130903086.txt"},{"cutting and pasting the code, but we would still need to do extensive testing.": "0130903086.txt"},{"Further, when we needed to update the protocol, we would have to redesign": "0130903086.txt"},{"and retest the entire protocol.": "0130903086.txt"},{"However, if we were to use a layered design, we could separate the": "0130903086.txt"},{"processes into specific layers. We could then design, enhance, and test each": "0130903086.txt"},{"individual layer. As the process continued, we would have a complete protocol based on a layered model. When we needed to update code, we would": "0130903086.txt"},{"only have to modify the one layer that needed the updating; the rest of the": "0130903086.txt"},{"layers would not be affected. This allows us to enhance specific functions": "0130903086.txt"},{"easier and quicker.": "0130903086.txt"},{"Further, by using a layered model, we could then license our protocol": "0130903086.txt"},{"to other developers for use in their own networks. If the protocol did not": "0130903086.txt"},{"work on their chosen hardware platform, they could replace one of the layers": "0130903086.txt"},{"with their own version, thereby creating multivendor compatibility.": "0130903086.txt"},{"If we did decide to enhance one of the layers, we could take just that": "0130903086.txt"},{"specific layer and redistribute it to all the developers, thereby making our": "0130903086.txt"},{"protocol even better.": "0130903086.txt"},{"": "0130903086.txt"},{"\fch01.qxd": "0130903086.txt"},{"": "0130903086.txt"},{"1/3/2001": "0130903086.txt"},{"": "0130903086.txt"},{"4": "0130903086.txt"},{"": "0130903086.txt"},{"9:44 AM": "0130903086.txt"},{"": "0130903086.txt"},{"Page 4": "0130903086.txt"},{"": "0130903086.txt"},{"Chapter 1": "0130903086.txt"},{"": "0130903086.txt"},{"\u2022": "0130903086.txt"},{"": "0130903086.txt"},{"Introduction to Networking and the OSI Model": "0130903086.txt"},{"": "0130903086.txt"},{"To summarize, layered modeling allows us to:": "0130903086.txt"},{"\u2022 Create a protocol that can be designed and tested in stages, which, in": "0130903086.txt"},{"turn, reduces the complexity": "0130903086.txt"},{"\u2022 Enhance functionality of the protocol without adversely affecting the": "0130903086.txt"},{"other layers": "0130903086.txt"},{"\u2022 Provide multivendor compatibility": "0130903086.txt"},{"\u2022 Allow for easier troubleshooting by locating the specific layer causing": "0130903086.txt"},{"the problem": "0130903086.txt"},{"": "0130903086.txt"},{"How Does a Model Work?": "0130903086.txt"},{"Before defining how a model works, we must clarify one thing. The OSI": "0130903086.txt"},{"model defines what each layer should do\u2014it does not tell you how to do it.": "0130903086.txt"},{"This allows developers the freedom to choose the best method they can design.": "0130903086.txt"},{"The OSI model is divided into seven layers. Figure 1\u20131 lists the name": "0130903086.txt"},{"and order of each layer. Notice that the bottom layer is identified as the first": "0130903086.txt"},{"layer.": "0130903086.txt"},{"": "0130903086.txt"},{"Application": "0130903086.txt"},{"": "0130903086.txt"},{"Layer 7": "0130903086.txt"},{"": "0130903086.txt"},{"Presentation": "0130903086.txt"},{"": "0130903086.txt"},{"Layer 6": "0130903086.txt"},{"": "0130903086.txt"},{"Session": "0130903086.txt"},{"": "0130903086.txt"},{"Layer 5": "0130903086.txt"},{"": "0130903086.txt"},{"Transport": "0130903086.txt"},{"": "0130903086.txt"},{"Layer 4": "0130903086.txt"},{"": "0130903086.txt"},{"Network": "0130903086.txt"},{"": "0130903086.txt"},{"Layer 3": "0130903086.txt"},{"": "0130903086.txt"},{"Data Link": "0130903086.txt"},{"": "0130903086.txt"},{"Layer 2": "0130903086.txt"},{"": "0130903086.txt"},{"Physical": "0130903086.txt"},{"": "0130903086.txt"},{"Layer 1": "0130903086.txt"},{"": "0130903086.txt"},{"FIGURE 1\u20131": "0130903086.txt"},{"": "0130903086.txt"},{"The seven layers of the OSI model": "0130903086.txt"},{"": "0130903086.txt"},{"It is important to remember the order of the layers in the OSI model.": "0130903086.txt"},{"Doing so creates a better understanding of the network data flow. It is also": "0130903086.txt"},{"needed to pass an exam. Many acrostics can be used to remember the order,": "0130903086.txt"},{"but possibly the most common is": "0130903086.txt"},{"Please": "0130903086.txt"},{"Do": "0130903086.txt"},{"Not": "0130903086.txt"},{"Throw": "0130903086.txt"},{"Sausage": "0130903086.txt"},{"Pizzas": "0130903086.txt"},{"Away": "0130903086.txt"},{"": "0130903086.txt"},{"(Physical": "0130903086.txt"},{"(Data Link": "0130903086.txt"},{"(Network": "0130903086.txt"},{"(Transport": "0130903086.txt"},{"(Session": "0130903086.txt"},{"(Presentation": "0130903086.txt"},{"(Application": "0130903086.txt"},{"": "0130903086.txt"},{"Layer": "0130903086.txt"},{"Layer": "0130903086.txt"},{"Layer": "0130903086.txt"},{"Layer": "0130903086.txt"},{"Layer": "0130903086.txt"},{"Layer": "0130903086.txt"},{"Layer": "0130903086.txt"},{"": "0130903086.txt"},{"1)": "0130903086.txt"},{"2)": "0130903086.txt"},{"3)": "0130903086.txt"},{"4)": "0130903086.txt"},{"5)": "0130903086.txt"},{"6)": "0130903086.txt"},{"7)": "0130903086.txt"},{"": "0130903086.txt"},{"\fch01.qxd": "0130903086.txt"},{"": "0130903086.txt"},{"1/3/2001": "0130903086.txt"},{"": "0130903086.txt"},{"9:44 AM": "0130903086.txt"},{"": "0130903086.txt"},{"Page 5": "0130903086.txt"},{"": "0130903086.txt"},{"The OSI Model": "0130903086.txt"},{"": "0130903086.txt"},{"5": "0130903086.txt"},{"": "0130903086.txt"},{"If we wish to use this acrostic to remember the order of the OSI model,": "0130903086.txt"},{"there are two important items to note. First, this acrostic starts from the bottom (Layer 1) and moves toward the top. Second, there are two Ps, so we": "0130903086.txt"},{"have to remember which is the Physical and which is the Presentation.": "0130903086.txt"},{"Each layer is separated, or encapsulated, from each other layer. This": "0130903086.txt"},{"means that each layer can function on its own. Each layer thinks it is talking": "0130903086.txt"},{"": "0130903086.txt"},{"Application": "0130903086.txt"},{"FIGURE 1\u20132": "0130903086.txt"},{"": "0130903086.txt"},{"Application": "0130903086.txt"},{"": "0130903086.txt"},{"Virtual link between application layers": "0130903086.txt"},{"": "0130903086.txt"},{"directly to the same layer on the remote computer (see Figure 1\u20132) through a": "0130903086.txt"},{"virtual link. Furthermore, each layer can only communicate with the layers": "0130903086.txt"},{"above and below it. In fact, the layer doesn\u2019t know that any other layers even": "0130903086.txt"},{"exist. For example, notice in Figure 1\u20133 that the Transport layer can communicate only with the Network and the Session layers.": "0130903086.txt"},{"": "0130903086.txt"},{"Application": "0130903086.txt"},{"Presentation": "0130903086.txt"},{"Session": "0130903086.txt"},{"": "0130903086.txt"},{"Transport": "0130903086.txt"},{"": "0130903086.txt"},{"Network": "0130903086.txt"},{"Data Link": "0130903086.txt"},{"Physical": "0130903086.txt"},{"FIGURE 1\u20133": "0130903086.txt"},{"": "0130903086.txt"},{"Each layer knows only about the layer above and below": "0130903086.txt"},{"": "0130903086.txt"},{"Finally, the flow of data starts at the Application layer of the sending": "0130903086.txt"},{"computer, flows down the layers, across the wire to the receiving computer,": "0130903086.txt"},{"and then back up the layers to the Application layer (see Figure 1\u20134).": "0130903086.txt"},{"": "0130903086.txt"},{"\fch01.qxd": "0130903086.txt"},{"": "0130903086.txt"},{"1/3/2001": "0130903086.txt"},{"": "0130903086.txt"},{"6": "0130903086.txt"},{"": "0130903086.txt"},{"9:44 AM": "0130903086.txt"},{"": "0130903086.txt"},{"Page 6": "0130903086.txt"},{"": "0130903086.txt"},{"Chapter 1": "0130903086.txt"},{"": "0130903086.txt"},{"FIGURE 1\u20134": "0130903086.txt"},{"": "0130903086.txt"},{"\u2022": "0130903086.txt"},{"": "0130903086.txt"},{"Introduction to Networking and the OSI Model": "0130903086.txt"},{"": "0130903086.txt"},{"Sending Computer": "0130903086.txt"},{"": "0130903086.txt"},{"Receiving Computer": "0130903086.txt"},{"": "0130903086.txt"},{"Application": "0130903086.txt"},{"": "0130903086.txt"},{"Application": "0130903086.txt"},{"": "0130903086.txt"},{"Presentation": "0130903086.txt"},{"": "0130903086.txt"},{"Presentation": "0130903086.txt"},{"": "0130903086.txt"},{"Session": "0130903086.txt"},{"": "0130903086.txt"},{"Session": "0130903086.txt"},{"": "0130903086.txt"},{"Transport": "0130903086.txt"},{"": "0130903086.txt"},{"Transport": "0130903086.txt"},{"": "0130903086.txt"},{"Network": "0130903086.txt"},{"": "0130903086.txt"},{"Network": "0130903086.txt"},{"": "0130903086.txt"},{"Data Link": "0130903086.txt"},{"": "0130903086.txt"},{"Data Link": "0130903086.txt"},{"": "0130903086.txt"},{"Physical": "0130903086.txt"},{"": "0130903086.txt"},{"Physical": "0130903086.txt"},{"": "0130903086.txt"},{"Flow of data from sending computer to receiving computer": "0130903086.txt"},{"": "0130903086.txt"},{"Each layer has a specific function for which it is responsible. Although": "0130903086.txt"},{"the layers start at the bottom, we will examine the layers starting at the top.": "0130903086.txt"},{"": "0130903086.txt"},{"Application Layer (Layer 7)": "0130903086.txt"},{"The Application layer is a buffer between the user interface (what the user": "0130903086.txt"},{"uses to perform work) and the network application. The network application": "0130903086.txt"},{"may be a part of the user application or an Application Programming Interface (API) that is called by the user\u2019s application.": "0130903086.txt"},{"The Application layer is responsible for finding a communication partner on the network. Once a partner is found, it is then responsible for ensuring that there is sufficient network bandwidth to deliver the data.": "0130903086.txt"},{"This layer may also be responsible for synchronizing communication": "0130903086.txt"},{"and providing error checking between the two partners. This ensures that the": "0130903086.txt"},{"application is either sending or receiving, but not both, and that the data": "0130903086.txt"},{"transmitted is the same data received.": "0130903086.txt"},{"Typical applications include a client/server application, an e-mail application, and an application to transfer files using FTP or HTTP.": "0130903086.txt"},{"": "0130903086.txt"},{"Presentation Layer (Layer 6)": "0130903086.txt"},{"The Presentation layer is responsible for the presentation of data to the Application layer. This presentation may take the form of many structures.": "0130903086.txt"},{"For example, when communicating from a PC to a mainframe, data may": "0130903086.txt"},{"need to be converted between ASCII and EBCDIC (a different character formatting method used on many mainframes).": "0130903086.txt"},{"Another structure of data includes multimedia formats used for enhancing our computer experiences. The World Wide Web (WWW) is a fantastic": "0130903086.txt"},{"": "0130903086.txt"},{"\fch01.qxd": "0130903086.txt"},{"": "0130903086.txt"},{"1/3/2001": "0130903086.txt"},{"": "0130903086.txt"},{"9:44 AM": "0130903086.txt"},{"": "0130903086.txt"},{"Page 7": "0130903086.txt"},{"": "0130903086.txt"},{"The OSI Model": "0130903086.txt"},{"": "0130903086.txt"},{"7": "0130903086.txt"},{"": "0130903086.txt"},{"exchange of information that uses many types of multimedia. The Presentation layer must ensure that the application can view the appropriate data": "0130903086.txt"},{"when it is reassembled. Graphic files such as PICT, JPEG, TIFF, and GIF, and": "0130903086.txt"},{"video and sound files such as MPEG and Apple\u2019s QuickTime are examples of": "0130903086.txt"},{"Presentation layer responsibilities.": "0130903086.txt"},{"One final data structure is data encryption. Sometimes, it is vital that we": "0130903086.txt"},{"can send data across a network without someone being able to view our data,": "0130903086.txt"},{"or snoop it. Data encryption is the method that allows us to accomplish this.": "0130903086.txt"},{"": "0130903086.txt"},{"Session Layer (Layer 5)": "0130903086.txt"},{"The Session layer sets up communications between the two partners. This": "0130903086.txt"},{"layer decides on the method of communication: half-duplex or full-duplex.": "0130903086.txt"},{"Half-duplex is the method of sending data only when the other computer is": "0130903086.txt"},{"finished. We can use the telephone to illustrate these methods. As a polite": "0130903086.txt"},{"person (note the word polite), we wait until the other person is finished": "0130903086.txt"},{"speaking before we respond. This is an example of half-duplex. If we were": "0130903086.txt"},{"to both start speaking at the same time, it would take a trained ear to actually": "0130903086.txt"},{"listen to the conversation. This is an example of full-duplex, where both sides": "0130903086.txt"},{"communicate as fast as they are able, at the same time.": "0130903086.txt"},{"The Session layer starts a session by establishing the initial connection": "0130903086.txt"},{"to the communication partner. This initial dialog allows the partners to decide": "0130903086.txt"},{"on the communication method and the protocol to use. When this is finished,": "0130903086.txt"},{"data transfer can occur between the partners. Finally, after all data has been": "0130903086.txt"},{"transferred, the partners disconnect. Using our example of the telephone, this": "0130903086.txt"},{"would be similar to me calling you. The initial \u201cHello\u201d establishes the protocol (roughly equivalent to speaking English versus Spanish) and the method": "0130903086.txt"},{"of communication, half-duplex. After we discuss the new products that Cisco": "0130903086.txt"},{"is introducing and how they will make our lives better (the data transfer), we": "0130903086.txt"},{"then conclude our conversation by saying \u201cGood-bye.\u201d": "0130903086.txt"},{"In the early days of communication, reliability of data across the network was a major concern. With today\u2019s technology, this is less of a concern,": "0130903086.txt"},{"but the Session layer has some error checking included. In order to ensure": "0130903086.txt"},{"that the data has been transferred correctly, the Session layer sets up a checkpoint in the data stream. This checkpoint is a means for the receiving computer to acknowledge to the sender that the data has been received. If data is": "0130903086.txt"},{"missed, the checkpoint acknowledgment back to the sender would indicate": "0130903086.txt"},{"that data is missing, and the sender would then decide what data was missed,": "0130903086.txt"},{"and resend it.": "0130903086.txt"},{"When the sender and receiver negotiate the use of checkpoints in the": "0130903086.txt"},{"data stream, this is called connection-oriented service. We use this method": "0130903086.txt"},{"when reliable delivery of data is required. However, there are times when reliable data is not needed, so to reduce network bandwidth, the checkpoints": "0130903086.txt"},{"will not be used. The sender sends the data through the network and does": "0130903086.txt"},{"not wait for any acknowledgments from the receiver. It is the responsibility of": "0130903086.txt"},{"the Application layer to decide if data is missing. Although less reliable, it is a": "0130903086.txt"},{"quicker method of sending data.": "0130903086.txt"},{"": "0130903086.txt"},{"\fch01.qxd": "0130903086.txt"},{"": "0130903086.txt"},{"1/3/2001": "0130903086.txt"},{"": "0130903086.txt"},{"8": "0130903086.txt"},{"": "0130903086.txt"},{"9:44 AM": "0130903086.txt"},{"": "0130903086.txt"},{"Page 8": "0130903086.txt"},{"": "0130903086.txt"},{"Chapter 1": "0130903086.txt"},{"": "0130903086.txt"},{"\u2022": "0130903086.txt"},{"": "0130903086.txt"},{"Introduction to Networking and the OSI Model": "0130903086.txt"},{"": "0130903086.txt"},{"Examples of the Session layer protocol include:": "0130903086.txt"},{"\u2022 SQL (Structured Query Language). A database language originally developed by IBM.": "0130903086.txt"},{"\u2022 RPC (Remote Procedure Call). A method of running routines on a server": "0130903086.txt"},{"called from the client.": "0130903086.txt"},{"\u2022 X Windows. A graphical-based system used to communicate with Unix": "0130903086.txt"},{"servers.": "0130903086.txt"},{"\u2022 NFS (Network File System). A method of accessing resources on servers.": "0130903086.txt"},{"": "0130903086.txt"},{"Transport Layer (Layer 4)": "0130903086.txt"},{"Although the Session layer is responsible for deciding on the communication": "0130903086.txt"},{"method, the Transport layer implements it. This layer implements the functions necessary to send data to the communication partner. These mechanisms include multiplexing data from different applications, establishing data": "0130903086.txt"},{"integrity, and management of virtual circuits.": "0130903086.txt"},{"Multiplexing is the method of combining data from the upper layers and": "0130903086.txt"},{"sending them through the same data stream. This allows more than one application to communicate with the communication partner at the same time. When": "0130903086.txt"},{"the data reaches the remote partner, the Transport layer then disassembles the": "0130903086.txt"},{"segment and passes the correct data to each of the receiving applications.": "0130903086.txt"},{"Virtual circuits are the methods of setting up a communication path to": "0130903086.txt"},{"the receiver. This path may physically change depending on the network, but": "0130903086.txt"},{"the path remains open through a virtual link. The Transport layer is responsible for establishing, maintaining, and disconnecting the virtual circuits.": "0130903086.txt"},{"Data integrity is essential to passing data across a network. There are": "0130903086.txt"},{"three methods that the Transport layer can use in order to ensure the integrity: buffering, source quench, and windowing. These three methods are": "0130903086.txt"},{"implementations of flow control.": "0130903086.txt"},{"Buffering is maintained on the receiving computer. As data flows in": "0130903086.txt"},{"faster than can be processed, some data is placed in a buffer and held until": "0130903086.txt"},{"the computer has the time to process it. Unfortunately, if the speed of the": "0130903086.txt"},{"data flow is too fast, the buffer will overflow and data will be lost.": "0130903086.txt"},{"Source quench is a technique where the receiving computer can send a": "0130903086.txt"},{"control message back to the sending computer when too much data is being": "0130903086.txt"},{"received. The sending computer then will delay sending any more data until": "0130903086.txt"},{"the receiving computer can finish processing the current data. At this point,": "0130903086.txt"},{"the receiving computer will send another control message back to the sender": "0130903086.txt"},{"telling it to start sending data again.": "0130903086.txt"},{"The last method, windowing, works on the principle that the receiver": "0130903086.txt"},{"tells the sender how much data it can send at one time. This amount sets the": "0130903086.txt"},{"window size. After the receiver receives the data, it will send back an acknowledgment to the sender. This acknowledgment tells the sender which": "0130903086.txt"},{"data segments have been received. The sender will remove the data from the": "0130903086.txt"},{"window and fill it with new data. This process in sometimes referred to as a": "0130903086.txt"},{"sliding window. Any data that has not been received will be resent. In fact,": "0130903086.txt"},{"the sender has a timer on each segment that it sends, so it knows if the data": "0130903086.txt"},{"has not been received. After the timer expires, it will resend the data and": "0130903086.txt"},{"": "0130903086.txt"},{"\fch01.qxd": "0130903086.txt"},{"": "0130903086.txt"},{"1/3/2001": "0130903086.txt"},{"": "0130903086.txt"},{"9:44 AM": "0130903086.txt"},{"": "0130903086.txt"},{"Page 9": "0130903086.txt"},{"": "0130903086.txt"},{"The OSI Model": "0130903086.txt"},{"": "0130903086.txt"},{"9": "0130903086.txt"},{"": "0130903086.txt"},{"wait for the acknowledgment. This method is known as Positive Acknowledgment with Retransmission.": "0130903086.txt"},{"To illustrate window control, let\u2019s look at Figure 1\u20135.": "0130903086.txt"},{"1. The Sender sends a message asking to speak with the Receiver.": "0130903086.txt"},{"2. The Receiver decides on a window size and replies. The reply includes": "0130903086.txt"},{"an acknowledgment to speak with the Sender and the size of the window to use; in this case, four bytes.": "0130903086.txt"},{"3. The Sender then creates a 4-byte window (shown in gray) and places": "0130903086.txt"},{"the first data into it. The data DATA is sent across the network. The Receiver only receives the first two bytes, or DA, and sends back a positive acknowledgment. This packet tells the Sender that it has received": "0130903086.txt"},{"bytes 1 and 2.": "0130903086.txt"},{"4. The Sender then slides the window to start with the third and fourth": "0130903086.txt"},{"bytes and adds two more bytes to the free space. The data TA12 is sent": "0130903086.txt"},{"across the network. The Receiver again sends back a positive acknowledgment to the Sender that the third, fourth, fifth, and sixth bytes have": "0130903086.txt"},{"been received. Both partners will now slide the window four more": "0130903086.txt"},{"bytes, and the Sender will send the seventh through tenth bytes. This": "0130903086.txt"},{"continues until all data has been sent and the two partners agree to stop": "0130903086.txt"},{"communications.": "0130903086.txt"},{"Note that this is a simple example and more communication may be": "0130903086.txt"},{"taking place between the Sender and the Receiver.": "0130903086.txt"},{"": "0130903086.txt"},{"1": "0130903086.txt"},{"Sender": "0130903086.txt"},{"": "0130903086.txt"},{"Receiver": "0130903086.txt"},{"": "0130903086.txt"},{"2": "0130903086.txt"},{"3": "0130903086.txt"},{"D": "0130903086.txt"},{"": "0130903086.txt"},{"A": "0130903086.txt"},{"": "0130903086.txt"},{"T": "0130903086.txt"},{"": "0130903086.txt"},{"A": "0130903086.txt"},{"": "0130903086.txt"},{"D": "0130903086.txt"},{"": "0130903086.txt"},{"A": "0130903086.txt"},{"": "0130903086.txt"},{"D": "0130903086.txt"},{"": "0130903086.txt"},{"A": "0130903086.txt"},{"": "0130903086.txt"},{"4": "0130903086.txt"},{"D": "0130903086.txt"},{"": "0130903086.txt"},{"A": "0130903086.txt"},{"": "0130903086.txt"},{"FIGURE 1\u20135": "0130903086.txt"},{"": "0130903086.txt"},{"T": "0130903086.txt"},{"": "0130903086.txt"},{"A": "0130903086.txt"},{"": "0130903086.txt"},{"1": "0130903086.txt"},{"": "0130903086.txt"},{"2": "0130903086.txt"},{"": "0130903086.txt"},{"T": "0130903086.txt"},{"": "0130903086.txt"},{"A": "0130903086.txt"},{"": "0130903086.txt"},{"1": "0130903086.txt"},{"": "0130903086.txt"},{"2": "0130903086.txt"},{"": "0130903086.txt"},{"Sliding window example": "0130903086.txt"},{"": "0130903086.txt"},{"Network Layer (Layer 3)": "0130903086.txt"},{"The bottom two layers allow the communication partners to communicate": "0130903086.txt"},{"only if they are on the same segment. A segment is defined as all network devices, or nodes, that are directly connected together. Hubs and MAUs (Multistation Access Units) are part of the same segment. If we were to have all the": "0130903086.txt"},{"computers in the world on a single segment, there would be no Internet. Ei-": "0130903086.txt"},{"": "0130903086.txt"},{"\fch01.qxd": "0130903086.txt"},{"": "0130903086.txt"},{"1/3/2001": "0130903086.txt"},{"": "0130903086.txt"},{"10": "0130903086.txt"},{"": "0130903086.txt"},{"9:44 AM": "0130903086.txt"},{"": "0130903086.txt"},{"Page 10": "0130903086.txt"},{"": "0130903086.txt"},{"Chapter 1": "0130903086.txt"},{"": "0130903086.txt"},{"\u2022": "0130903086.txt"},{"": "0130903086.txt"},{"Introduction to Networking and the OSI Model": "0130903086.txt"},{"": "0130903086.txt"},{"ther there would be far too many broadcasts, or the time for a single node to": "0130903086.txt"},{"communicate with another via a token would be ridiculously slow. The function of the Network layer is to identify a remote network and deliver the data": "0130903086.txt"},{"to it. This allows us to have segmentation. These concepts are explored in": "0130903086.txt"},{"more detail in later chapters.": "0130903086.txt"},{"The Network layer enables us to send data to any computer in the": "0130903086.txt"},{"world, as long as there is a physical network connection. However, since we": "0130903086.txt"},{"can\u2019t have a single segment, we must divide these segments up and yet keep": "0130903086.txt"},{"them communicating. The device that allows us to accomplish this spectacular feat is the router, sometimes referred to as a Layer 3 device. The majority": "0130903086.txt"},{"of this book is centered on this specific layer.": "0130903086.txt"},{"A router may know more than one way to get data to its final destination. Again, this is the function of the Network layer. In order for the router": "0130903086.txt"},{"to succeed in this endeavor, it must be able to identify the source segment": "0130903086.txt"},{"and the final destination segment. This is done through network addresses,": "0130903086.txt"},{"also called logical addresses.": "0130903086.txt"},{"A network address consists of two parts, the network portion and the host": "0130903086.txt"},{"portion. As a simple example, suppose the number 1.2 was assigned to your": "0130903086.txt"},{"specific machine. The 1 would identify the network segment and the 2 would": "0130903086.txt"},{"identify you as a specific host on that network. Another computer on your segment would have an address of 1.x, where x would be a unique number. A computer on a different segment might have an address of 2.2, or 3.49. To connect": "0130903086.txt"},{"these two segments together, we would need to place a router.": "0130903086.txt"},{"It is important to note that routers work only with the network address.": "0130903086.txt"},{"They really don\u2019t want to know your specific host address. When a router receives data, it examines the Layer 3 data to determine the destination network": "0130903086.txt"},{"address. It then looks up the address in a table that tells it which route to use": "0130903086.txt"},{"to get the data to its final destination. It places the data on the proper connection, thereby routing the packet from one segment to another. The data": "0130903086.txt"},{"may need to travel through many routers before reaching its destination host.": "0130903086.txt"},{"Each router in the path would perform the same lookup in its table.": "0130903086.txt"},{"Examples of network protocols include:": "0130903086.txt"},{"\u2022 IP (Internet Protocol). A routed protocol used in the TCP/IP suite, made": "0130903086.txt"},{"famous by the Internet.": "0130903086.txt"},{"\u2022 IPX (Internet Packet eXchange). A routed protocol used in the IPX/SPX": "0130903086.txt"},{"protocol suite usually used in Novell environments.": "0130903086.txt"},{"\u2022 RIP (Routing Information Protocol). One of the many routing protocols": "0130903086.txt"},{"implemented on Cisco routers.": "0130903086.txt"},{"\u2022 OSPF (Open Shortest Path First). Another routing protocol used by": "0130903086.txt"},{"Cisco routers.": "0130903086.txt"},{"We discuss the difference between routed protocols and routing protocols later in this book.": "0130903086.txt"},{"": "0130903086.txt"},{"Data Link Layer (Layer 2)": "0130903086.txt"},{"The Data Link layer is the layer connects the software protocols to the": "0130903086.txt"},{"hardware protocols. It is responsible for taking the data from the upper layers": "0130903086.txt"},{"": "0130903086.txt"},{"\fch01.qxd": "0130903086.txt"},{"": "0130903086.txt"},{"1/3/2001": "0130903086.txt"},{"": "0130903086.txt"},{"9:44 AM": "0130903086.txt"},{"": "0130903086.txt"},{"Page 11": "0130903086.txt"},{"": "0130903086.txt"},{"The OSI Model": "0130903086.txt"},{"": "0130903086.txt"},{"11": "0130903086.txt"},{"": "0130903086.txt"},{"and converting it to the bits needed to send across the physical wire, and vice": "0130903086.txt"},{"versa.": "0130903086.txt"},{"The Data Link layer is split into two sublayers, the Logical Link Control": "0130903086.txt"},{"(LLC) and the Media Access Control (MAC). As you can see in Figure 1\u20136, the": "0130903086.txt"},{"MAC sublayer is closer to the Physical layer.": "0130903086.txt"},{"The MAC sublayer defines a physical address, called a MAC address or": "0130903086.txt"},{"hardware address, which is unique to each individual network interface. This allows a way to uniquely identify each network interface on a network, even if": "0130903086.txt"},{"the network interfaces are on the same computer. More importantly, though,": "0130903086.txt"},{"the MAC address can be used in any network that supports the chosen network": "0130903086.txt"},{"interface (Ethernet or Token Ring, for example). This allows us to take a computer from one network running TCP/IP and connect it to another network running IPX/SPX by changing just the Network layer protocol. Remember that the": "0130903086.txt"},{"network address, or logical address, is specific to the Network layer protocol": "0130903086.txt"},{"that is being used. This address may be a unique numbering scheme, as in": "0130903086.txt"},{"TCP/IP, or it may be a copy of the MAC address, as in IPX/SPX.": "0130903086.txt"},{"": "0130903086.txt"},{"Network Layer": "0130903086.txt"},{"Data Link": "0130903086.txt"},{"Layer": "0130903086.txt"},{"": "0130903086.txt"},{"Logical Link Control": "0130903086.txt"},{"Media Access Control": "0130903086.txt"},{"Physical Layer": "0130903086.txt"},{"": "0130903086.txt"},{"FIGURE 1\u20136": "0130903086.txt"},{"": "0130903086.txt"},{"Split layers of the Data Link layer": "0130903086.txt"},{"": "0130903086.txt"},{"A MAC address is a 6-byte value that is usually created by the network": "0130903086.txt"},{"interface manufacturer. The first three bytes are assigned by the IEEE (Institute of Electrical and Electronics Engineers) and are specific to each vendor.": "0130903086.txt"},{"The vendor generates the last three bytes. Examples are shown here where X": "0130903086.txt"},{"can be any hex value from 0 to F.": "0130903086.txt"},{"\u2022 00-00-0C-XX-XX-XX": "0130903086.txt"},{"\u2022 00-E0-98-XX-XX-XX": "0130903086.txt"},{"\u2022 00-10-5A-XX-XX-XX": "0130903086.txt"},{"": "0130903086.txt"},{"Cisco": "0130903086.txt"},{"LinkSys": "0130903086.txt"},{"3Com": "0130903086.txt"},{"": "0130903086.txt"},{"The MAC layer on the receiving computer will take the bits from the": "0130903086.txt"},{"Physical layer and put them in order into a frame. It will also do a CRC": "0130903086.txt"},{"(Cyclic Redundancy Check) to determine if there are any errors in the frame.": "0130903086.txt"},{"It will check the destination hardware address to determine if the data is": "0130903086.txt"},{"meant for it, or if it should be dropped or sent on to the next machine. If the": "0130903086.txt"},{"data is meant for the current computer, it will pass it to the LLC layer.": "0130903086.txt"},{"": "0130903086.txt"},{"\fch01.qxd": "0130903086.txt"},{"": "0130903086.txt"},{"1/3/2001": "0130903086.txt"},{"": "0130903086.txt"},{"12": "0130903086.txt"},{"": "0130903086.txt"},{"9:44 AM": "0130903086.txt"},{"": "0130903086.txt"},{"Page 12": "0130903086.txt"},{"": "0130903086.txt"},{"Chapter 1": "0130903086.txt"},{"": "0130903086.txt"},{"\u2022": "0130903086.txt"},{"": "0130903086.txt"},{"Introduction to Networking and the OSI Model": "0130903086.txt"},{"": "0130903086.txt"},{"The MAC layer can be referred to as the hardware layer. This implies": "0130903086.txt"},{"that the software protocols above it are hidden from the physical media.": "0130903086.txt"},{"The LLC layer is the buffer between the software protocols and the": "0130903086.txt"},{"hardware protocols. It is responsible for taking the data from the Network": "0130903086.txt"},{"layer and sending it to the MAC layer. This allows the software protocols to": "0130903086.txt"},{"run on any type of network architecture, including Ethernet and Token Ring.": "0130903086.txt"},{"When the LLC receives data from the MAC layer, it must determine": "0130903086.txt"},{"which software protocol in the Network layer to send it to. In order to do": "0130903086.txt"},{"this, the LLC includes service access points (SAP) in the header. The Source": "0130903086.txt"},{"SAP (SSAP) identifies the sending protocol and the Destination SAP (DSAP)": "0130903086.txt"},{"identifies the receiving protocol. When the LLC receives the frame from the": "0130903086.txt"},{"MAC sublayer, it can then strip off the header and examine the DSAP. Using": "0130903086.txt"},{"this information, the LLC can now forward the data to the correct Network": "0130903086.txt"},{"layer protocol.": "0130903086.txt"},{"Examples of Data Link protocols include:": "0130903086.txt"},{"\u2022 HDLC (High-Level Data Link Control). A serial communication that is": "0130903086.txt"},{"usually vendor specific.": "0130903086.txt"},{"\u2022 PPP (Point-to-Point Protocol). A low-speed serial protocol.": "0130903086.txt"},{"\u2022 802.3 and 802.2": "0130903086.txt"},{"\u2022 ISDN (Integrated Services Digital Network). A digital communication": "0130903086.txt"},{"method used over copper wire.": "0130903086.txt"},{"\u2022 Frame Relay": "0130903086.txt"},{"": "0130903086.txt"},{"Physical Layer (Layer 1)": "0130903086.txt"},{"The Physical layer does only two things, yet these two things are vital to the": "0130903086.txt"},{"network. It is responsible for sending data and receiving data across a physical medium. This data is sent in bits, either a 0 or a 1. The data may be transmitted as electrical signals (that is, positive and negative voltages), audio": "0130903086.txt"},{"tones, or light.": "0130903086.txt"},{"This layer also defines the Data Terminal Equipment (DTE) and the": "0130903086.txt"},{"Data Circuit-Terminating Equipment (DCE). The DTE is often accessed": "0130903086.txt"},{"through a modem or a Channel Service Unit/Data Service Unit (CSU/DSU)": "0130903086.txt"},{"connected to a PC or a router. The carrier of the WAN signal provides the": "0130903086.txt"},{"DCE equipment. A typical device would be a packet switch, which is responsible for clocking and switching.": "0130903086.txt"},{"Typical interfaces of this layer include:": "0130903086.txt"},{"\u2022 HSSI (High-Speed Serial Interface). A point-to-point connection over": "0130903086.txt"},{"copper wires.": "0130903086.txt"},{"\u2022 V.35. A synchronous communication method developed by the International Telecommunication Union-Telecommunication Standardization": "0130903086.txt"},{"Sector (ITU-T). All the V.xx standards have been created by the ITU-T.": "0130903086.txt"},{"\u2022 EIA/TIA-232. A serial port interface using the RS-232 port.": "0130903086.txt"},{"\u2022 X.21": "0130903086.txt"},{"": "0130903086.txt"},{"\fch01.qxd": "0130903086.txt"},{"": "0130903086.txt"},{"1/3/2001": "0130903086.txt"},{"": "0130903086.txt"},{"9:44 AM": "0130903086.txt"},{"": "0130903086.txt"},{"Page 13": "0130903086.txt"},{"": "0130903086.txt"},{"The OSI Model": "0130903086.txt"},{"": "0130903086.txt"},{"13": "0130903086.txt"},{"": "0130903086.txt"},{"Data Encapsulation Using the OSI Model": "0130903086.txt"},{"As we read through the description of the OSI layers, a question may arise:": "0130903086.txt"},{"Since there may be more than one application using more than one communication partner using more than one protocol, how does the data get to its": "0130903086.txt"},{"destination correctly?": "0130903086.txt"},{"": "0130903086.txt"},{"User Data": "0130903086.txt"},{"Application": "0130903086.txt"},{"Presentation": "0130903086.txt"},{"": "0130903086.txt"},{"Application Header": "0130903086.txt"},{"": "0130903086.txt"},{"User Data": "0130903086.txt"},{"": "0130903086.txt"},{"Presentation Header": "0130903086.txt"},{"": "0130903086.txt"},{"A User Data": "0130903086.txt"},{"": "0130903086.txt"},{"Session": "0130903086.txt"},{"": "0130903086.txt"},{"Session Header": "0130903086.txt"},{"": "0130903086.txt"},{"Transport": "0130903086.txt"},{"": "0130903086.txt"},{"Transport Header": "0130903086.txt"},{"": "0130903086.txt"},{"P A User Data": "0130903086.txt"},{"Message": "0130903086.txt"},{"": "0130903086.txt"},{"Network": "0130903086.txt"},{"": "0130903086.txt"},{"Network Header": "0130903086.txt"},{"": "0130903086.txt"},{"Segment": "0130903086.txt"},{"": "0130903086.txt"},{"Data Link": "0130903086.txt"},{"": "0130903086.txt"},{"Frame Header": "0130903086.txt"},{"": "0130903086.txt"},{"Packet": "0130903086.txt"},{"": "0130903086.txt"},{"Physical": "0130903086.txt"},{"FIGURE 1\u20137": "0130903086.txt"},{"": "0130903086.txt"},{"001011010100010101110": "0130903086.txt"},{"": "0130903086.txt"},{"Data encapsulation flow": "0130903086.txt"},{"": "0130903086.txt"},{"This is accomplished through a process called data encapsulation (see": "0130903086.txt"},{"Figure 1\u20137). Basically, it works like this:": "0130903086.txt"},{"1. A user is working on an application and decides to save the data to a": "0130903086.txt"},{"remote server. The application calls the Application layer to start the": "0130903086.txt"},{"process.": "0130903086.txt"},{"2. The Application layer takes the data and places some information,": "0130903086.txt"},{"called a header, at the beginning. The header tells the Application layer": "0130903086.txt"},{"which user application sent the data.": "0130903086.txt"},{"3. The Application layer then sends the data to the Presentation layer,": "0130903086.txt"},{"where the data conversion takes place. The Presentation layer places a": "0130903086.txt"},{"header on all of the information received from the Application layer (including the Application layer header). This header identifies which protocol in the Application layer to pass it back.": "0130903086.txt"},{"4. The Presentation layer then sends the complete message to the Session": "0130903086.txt"},{"layer. The Session layer sets up the synchronized communication information to speak with the communication partner and appends the information to another header.": "0130903086.txt"},{"5. The Session layer then sends the message to the Transport layer, where": "0130903086.txt"},{"information is placed into the header identifying the source and the destination hosts and the method of connection (connectionless versus": "0130903086.txt"},{"connection-oriented).": "0130903086.txt"},{"": "0130903086.txt"},{"\fch01.qxd": "0130903086.txt"},{"": "0130903086.txt"},{"1/3/2001": "0130903086.txt"},{"": "0130903086.txt"},{"14": "0130903086.txt"},{"": "0130903086.txt"},{"9:44 AM": "0130903086.txt"},{"": "0130903086.txt"},{"Page 14": "0130903086.txt"},{"": "0130903086.txt"},{"Chapter 1": "0130903086.txt"},{"": "0130903086.txt"},{"\u2022": "0130903086.txt"},{"": "0130903086.txt"},{"Introduction to Networking and the OSI Model": "0130903086.txt"},{"": "0130903086.txt"},{"6. The Transport layer then passes the segment to the Network layer,": "0130903086.txt"},{"where the network address for the destination and the source are included in the header.": "0130903086.txt"},{"7. The Network layer passes the packet (connection-oriented) or the datagram (connectionless) to the Data Link layer. The Data Link layer then": "0130903086.txt"},{"includes the SSAP and the DSAP to identify which Transport protocol to": "0130903086.txt"},{"return it to. It also includes the source and the destination MAC addresses.": "0130903086.txt"},{"8. The Data Link layer then passes the frame to the Physical layer for": "0130903086.txt"},{"transmitting on the physical medium as individual bits.": "0130903086.txt"},{"9. Finally, the receiving computer receives the bits and reverses the": "0130903086.txt"},{"process to get the original data to the source application; in this case, a": "0130903086.txt"},{"file server service.": "0130903086.txt"},{"": "0130903086.txt"},{"note": "0130903086.txt"},{"": "0130903086.txt"},{"Note that since the top three layers have similar functionality, we can typically combine all of the data in those layers and simply refer to it as the Protocol Data Unit (PDU). In this Instance, we can substitute the term PDU for the term message.": "0130903086.txt"},{"": "0130903086.txt"},{"In summary:": "0130903086.txt"},{"1. Data encapsulation takes the data from the user,": "0130903086.txt"},{"2. packages it as a message at the Session layer to send to the receiver,": "0130903086.txt"},{"3. encapsulates the segment inside a packet at the Network layer with the": "0130903086.txt"},{"network addressing information,": "0130903086.txt"},{"4. encapsulates this packet into a frame at the Data Link layer with the": "0130903086.txt"},{"MAC addresses,and": "0130903086.txt"},{"5. sends the frame across the wire as individual bits at the Physical layer.": "0130903086.txt"},{"": "0130903086.txt"},{"\fch01.qxd": "0130903086.txt"},{"": "0130903086.txt"},{"1/3/2001": "0130903086.txt"},{"": "0130903086.txt"},{"9:44 AM": "0130903086.txt"},{"": "0130903086.txt"},{"Page 15": "0130903086.txt"},{"": "0130903086.txt"},{"Summary": "0130903086.txt"},{"": "0130903086.txt"},{"The OSI model is a tool used to provide a standard set of": "0130903086.txt"},{"rules for communication across multivendor hardware. Each": "0130903086.txt"},{"layer of the OSI model has a function it must accomplish,": "0130903086.txt"},{"but the method to perform this function is left to the developer. As data flows down each of the layers, encapsulation": "0130903086.txt"},{"takes place allowing for reassembly of the data on the receiving machine. Each layer is responsible in part for the": "0130903086.txt"},{"complete data transfer from the source host to the destination host. Knowing the OSI model will help in troubleshooting Cisco networks.": "0130903086.txt"},{"": "0130903086.txt"},{"\fch01.qxd": "0130903086.txt"},{"": "0130903086.txt"},{"1/3/2001": "0130903086.txt"},{"": "0130903086.txt"},{"9:44 AM": "0130903086.txt"},{"": "0130903086.txt"},{"Page 16": "0130903086.txt"},{"": "0130903086.txt"},{"Scenario Lab 1.1": "0130903086.txt"},{"": "0130903086.txt"},{"You have been asked to begin a large design and implementation project with Network Solutions, Inc. (a fictional company). However, before you are allowed to proceed, the": "0130903086.txt"},{"project manager wants to be sure that you are the correct": "0130903086.txt"},{"person for the job. This person asks you to list the layers of": "0130903086.txt"},{"the OSI model and describe in brief the functions of each": "0130903086.txt"},{"layer. Can you prove you are the correct person for the job?": "0130903086.txt"},{"": "0130903086.txt"},{"\fch01.qxd": "0130903086.txt"},{"": "0130903086.txt"},{"1/3/2001": "0130903086.txt"},{"": "0130903086.txt"},{"9:44 AM": "0130903086.txt"},{"": "0130903086.txt"},{"Page 17": "0130903086.txt"},{"": "0130903086.txt"},{"Exam Objective": "0130903086.txt"},{"Checklist": "0130903086.txt"},{"": "0130903086.txt"},{"By working through this chapter, you should have sufficient": "0130903086.txt"},{"knowledge to answer these exam objectives:": "0130903086.txt"},{"\u2022 Identify and describe the functions of each of the seven": "0130903086.txt"},{"layers of the OSI reference model.": "0130903086.txt"},{"\u2022 Describe data link addresses and network addresses": "0130903086.txt"},{"and identify the key differences between them.": "0130903086.txt"},{"\u2022 Define and describe the function of a MAC address.": "0130903086.txt"},{"\u2022 Identify at least three reasons why the industry uses a": "0130903086.txt"},{"layered model.": "0130903086.txt"},{"\u2022 Define and explain the five conversion steps of data": "0130903086.txt"},{"encapsulation.": "0130903086.txt"},{"\u2022 Define flow control and describe the three basic methods used in networking.": "0130903086.txt"},{"\u2022 List the key internetworking functions of the OSI Network layer and how they are performed in a router.": "0130903086.txt"},{"": "0130903086.txt"},{"\fch01.qxd": "0130903086.txt"},{"": "0130903086.txt"},{"1/3/2001": "0130903086.txt"},{"": "0130903086.txt"},{"9:44 AM": "0130903086.txt"},{"": "0130903086.txt"},{"Page 18": "0130903086.txt"},{"": "0130903086.txt"},{"Practice Questions": "0130903086.txt"},{"": "0130903086.txt"},{"1. The technology used to connect multiple computers together in a single office is called:": "0130903086.txt"},{"a.": "0130903086.txt"},{"b.": "0130903086.txt"},{"c.": "0130903086.txt"},{"d.": "0130903086.txt"},{"": "0130903086.txt"},{"LAN": "0130903086.txt"},{"WAN": "0130903086.txt"},{"MAN": "0130903086.txt"},{"Internet": "0130903086.txt"},{"": "0130903086.txt"},{"2. Connecting multiple networks together using an outside carrier\u2019s signal, such as the telephone service is": "0130903086.txt"},{"known as:": "0130903086.txt"},{"a.": "0130903086.txt"},{"b.": "0130903086.txt"},{"c.": "0130903086.txt"},{"d.": "0130903086.txt"},{"": "0130903086.txt"},{"LAN": "0130903086.txt"},{"WAN": "0130903086.txt"},{"Protocol": "0130903086.txt"},{"Internet": "0130903086.txt"},{"": "0130903086.txt"},{"3. Why should we use layered models in a network architecture? (select all that apply)": "0130903086.txt"},{"a. It tells us exactly how to perform a specific function.": "0130903086.txt"},{"b. It allows us to take a complex method and break": "0130903086.txt"},{"it into smaller, more manageable methods.": "0130903086.txt"},{"c. A change to one layer has no affect on any other": "0130903086.txt"},{"layer.": "0130903086.txt"},{"d. A change to one layer affects all other layers.": "0130903086.txt"},{"e. It restricts us to using only one network vendor.": "0130903086.txt"},{"f. It makes troubleshooting networks easier by being": "0130903086.txt"},{"able to locate the exact layer causing the problem.": "0130903086.txt"},{"": "0130903086.txt"},{"\fch01.qxd": "0130903086.txt"},{"": "0130903086.txt"},{"1/3/2001": "0130903086.txt"},{"": "0130903086.txt"},{"9:44 AM": "0130903086.txt"},{"": "0130903086.txt"},{"Page 19": "0130903086.txt"},{"": "0130903086.txt"},{"Practice Questions": "0130903086.txt"},{"": "0130903086.txt"},{"19": "0130903086.txt"},{"": "0130903086.txt"},{"4. Which layer is responsible for finding a communication partner on the": "0130903086.txt"},{"network?": "0130903086.txt"},{"a.": "0130903086.txt"},{"b.": "0130903086.txt"},{"c.": "0130903086.txt"},{"d.": "0130903086.txt"},{"": "0130903086.txt"},{"Transport": "0130903086.txt"},{"Data Link": "0130903086.txt"},{"Application": "0130903086.txt"},{"Physical": "0130903086.txt"},{"": "0130903086.txt"},{"5. What is the correct order for the shown layers? (bottom to top)": "0130903086.txt"},{"a.": "0130903086.txt"},{"b.": "0130903086.txt"},{"c.": "0130903086.txt"},{"d.": "0130903086.txt"},{"e.": "0130903086.txt"},{"f.": "0130903086.txt"},{"g.": "0130903086.txt"},{"": "0130903086.txt"},{"Presentation": "0130903086.txt"},{"Transport": "0130903086.txt"},{"Application": "0130903086.txt"},{"Network": "0130903086.txt"},{"Data Link": "0130903086.txt"},{"Physical": "0130903086.txt"},{"Session": "0130903086.txt"},{"": "0130903086.txt"},{"6. True or False: The Transport layer can communicate directly with the": "0130903086.txt"},{"Network and Presentation layers.": "0130903086.txt"},{"7. Which of the following are performed at the Presentation layer? (Choose": "0130903086.txt"},{"two)": "0130903086.txt"},{"a. Presening data to the Application layer": "0130903086.txt"},{"b. Setting checkpoints in the data stream for reliability": "0130903086.txt"},{"c. Providing character conversion between dissimilar operating systems (such as PC to mainframe)": "0130903086.txt"},{"d. Adding the network addresses to the header": "0130903086.txt"},{"8. The Presentation layer protocols include? (choose two)": "0130903086.txt"},{"a.": "0130903086.txt"},{"b.": "0130903086.txt"},{"c.": "0130903086.txt"},{"d.": "0130903086.txt"},{"e.": "0130903086.txt"},{"": "0130903086.txt"},{"PICT": "0130903086.txt"},{"SQL": "0130903086.txt"},{"TCP": "0130903086.txt"},{"IPX": "0130903086.txt"},{"JPEG": "0130903086.txt"},{"": "0130903086.txt"},{"9. The function of the Session layer is? (choose two)": "0130903086.txt"},{"a.": "0130903086.txt"},{"b.": "0130903086.txt"},{"c.": "0130903086.txt"},{"d.": "0130903086.txt"},{"": "0130903086.txt"},{"To determine if half-duplex or full-duplex is being used": "0130903086.txt"},{"To present data to the Network layer": "0130903086.txt"},{"To place checkpoints into the data stream for reliability": "0130903086.txt"},{"To provide flow control": "0130903086.txt"},{"": "0130903086.txt"},{"10. The Session layer protocols include? (choose three)": "0130903086.txt"},{"a.": "0130903086.txt"},{"b.": "0130903086.txt"},{"c.": "0130903086.txt"},{"d.": "0130903086.txt"},{"e.": "0130903086.txt"},{"": "0130903086.txt"},{"PICT": "0130903086.txt"},{"SQL": "0130903086.txt"},{"TCP": "0130903086.txt"},{"X Windows": "0130903086.txt"},{"NFS": "0130903086.txt"},{"": "0130903086.txt"},{"\fch01.qxd": "0130903086.txt"},{"": "0130903086.txt"},{"1/3/2001": "0130903086.txt"},{"": "0130903086.txt"},{"20": "0130903086.txt"},{"": "0130903086.txt"},{"9:44 AM": "0130903086.txt"},{"": "0130903086.txt"},{"Chapter 1": "0130903086.txt"},{"": "0130903086.txt"},{"Page 20": "0130903086.txt"},{"": "0130903086.txt"},{"\u2022": "0130903086.txt"},{"": "0130903086.txt"},{"Introduction to Networking and the OSI Model": "0130903086.txt"},{"": "0130903086.txt"},{"11. Which layer is responsible for multiplexing data from upper layers and": "0130903086.txt"},{"placing the data into a segment?": "0130903086.txt"},{"a.": "0130903086.txt"},{"b.": "0130903086.txt"},{"c.": "0130903086.txt"},{"d.": "0130903086.txt"},{"": "0130903086.txt"},{"Transport": "0130903086.txt"},{"Network": "0130903086.txt"},{"Data Link": "0130903086.txt"},{"Physical": "0130903086.txt"},{"": "0130903086.txt"},{"12. Windowing is performed at the Transport layer. What is windowing?": "0130903086.txt"},{"a.": "0130903086.txt"},{"b.": "0130903086.txt"},{"c.": "0130903086.txt"},{"d.": "0130903086.txt"},{"": "0130903086.txt"},{"A": "0130903086.txt"},{"A": "0130903086.txt"},{"A": "0130903086.txt"},{"A": "0130903086.txt"},{"": "0130903086.txt"},{"method": "0130903086.txt"},{"method": "0130903086.txt"},{"method": "0130903086.txt"},{"method": "0130903086.txt"},{"": "0130903086.txt"},{"of": "0130903086.txt"},{"of": "0130903086.txt"},{"of": "0130903086.txt"},{"of": "0130903086.txt"},{"": "0130903086.txt"},{"buffering": "0130903086.txt"},{"session establishment": "0130903086.txt"},{"flow control": "0130903086.txt"},{"character conversion": "0130903086.txt"},{"": "0130903086.txt"},{"13. The Network layer\u2019s primary function is to:": "0130903086.txt"},{"a.": "0130903086.txt"},{"b.": "0130903086.txt"},{"c.": "0130903086.txt"},{"d.": "0130903086.txt"},{"": "0130903086.txt"},{"Add MAC addresses to the packet": "0130903086.txt"},{"Establish a communication path to the communication partner": "0130903086.txt"},{"Provide connection-oriented service": "0130903086.txt"},{"Route data between different network segments": "0130903086.txt"},{"": "0130903086.txt"},{"14. What are the two parts to a network address? (Choose two)": "0130903086.txt"},{"a.": "0130903086.txt"},{"b.": "0130903086.txt"},{"c.": "0130903086.txt"},{"d.": "0130903086.txt"},{"": "0130903086.txt"},{"Source Service Access Point": "0130903086.txt"},{"Host Identifier": "0130903086.txt"},{"MAC address": "0130903086.txt"},{"Network Identifier": "0130903086.txt"},{"": "0130903086.txt"},{"15. The Data Link layer is split into two sublayers. Name them. (choose": "0130903086.txt"},{"two)": "0130903086.txt"},{"a.": "0130903086.txt"},{"b.": "0130903086.txt"},{"c.": "0130903086.txt"},{"d.": "0130903086.txt"},{"": "0130903086.txt"},{"Local Link Control": "0130903086.txt"},{"Logical Link Control": "0130903086.txt"},{"Machine Address Code": "0130903086.txt"},{"Media Access Control": "0130903086.txt"},{"": "0130903086.txt"},{"16. List the functions of the MAC sublayer. (choose three)": "0130903086.txt"},{"a. Unique hardware addresses allow us to switch between different": "0130903086.txt"},{"networks and still be uniquely identified": "0130903086.txt"},{"b. Provides SSAP and DSAP for passing frame to proper Transport": "0130903086.txt"},{"protocol": "0130903086.txt"},{"c. Provides error checking through CRC": "0130903086.txt"},{"d. Provides an interface to the physical medium": "0130903086.txt"},{"e. Acts as a buffer between software and hardware protocols": "0130903086.txt"},{"17. List the functions of the LLC sublayer. (Choose two)": "0130903086.txt"},{"a. Unique hardware addresses allow us to switch between different": "0130903086.txt"},{"networks and still be uniquely identified": "0130903086.txt"},{"b. Provides SSAP and DSAP for passing frames to the proper Network protocol": "0130903086.txt"},{"": "0130903086.txt"},{"\fch01.qxd": "0130903086.txt"},{"": "0130903086.txt"},{"1/3/2001": "0130903086.txt"},{"": "0130903086.txt"},{"9:44 AM": "0130903086.txt"},{"": "0130903086.txt"},{"Page 21": "0130903086.txt"},{"": "0130903086.txt"},{"Practice Questions": "0130903086.txt"},{"": "0130903086.txt"},{"21": "0130903086.txt"},{"": "0130903086.txt"},{"c. Provides error checking through CRC": "0130903086.txt"},{"d. Provides an interface to the physical medium": "0130903086.txt"},{"e. Acts as a buffer between software and hardware protocols": "0130903086.txt"},{"18. Which layer is responsible for creating and disconnecting virtual circuits?": "0130903086.txt"},{"a.": "0130903086.txt"},{"b.": "0130903086.txt"},{"c.": "0130903086.txt"},{"d.": "0130903086.txt"},{"": "0130903086.txt"},{"Presentation": "0130903086.txt"},{"Session": "0130903086.txt"},{"Transport": "0130903086.txt"},{"Network": "0130903086.txt"},{"": "0130903086.txt"},{"19. Which of the following terms describes the address used at the Network": "0130903086.txt"},{"layer?": "0130903086.txt"},{"a.": "0130903086.txt"},{"b.": "0130903086.txt"},{"c.": "0130903086.txt"},{"d.": "0130903086.txt"},{"": "0130903086.txt"},{"Physical": "0130903086.txt"},{"Logical": "0130903086.txt"},{"MAC": "0130903086.txt"},{"Host": "0130903086.txt"},{"": "0130903086.txt"},{"20. Place the following in the correct order of data encapsulation for the": "0130903086.txt"},{"sending node.": "0130903086.txt"},{"a. Encapsulating this packet or datagram into a frame with the MAC": "0130903086.txt"},{"addresses": "0130903086.txt"},{"b. Packaging it as a message to send to the receiver": "0130903086.txt"},{"c. Sending the frame across the wire as individual bits": "0130903086.txt"},{"d. Data encapsulation taking the data from the user": "0130903086.txt"},{"e. Encapsulating the segment inside a packet or datagram with the": "0130903086.txt"},{"network addressing information": "0130903086.txt"},{"21. If your network diagnostic tool identifies a problem with the logical addressing, what layer of the OSI model would you be troubleshooting?": "0130903086.txt"},{"a.": "0130903086.txt"},{"b.": "0130903086.txt"},{"c.": "0130903086.txt"},{"d.": "0130903086.txt"},{"": "0130903086.txt"},{"Transport": "0130903086.txt"},{"Network": "0130903086.txt"},{"Data Link": "0130903086.txt"},{"Physical": "0130903086.txt"},{"": "0130903086.txt"},{"22. What layer would you troubleshoot when no link connectivity is detected?": "0130903086.txt"},{"a.": "0130903086.txt"},{"b.": "0130903086.txt"},{"c.": "0130903086.txt"},{"d.": "0130903086.txt"},{"": "0130903086.txt"},{"Transport": "0130903086.txt"},{"Session": "0130903086.txt"},{"Network": "0130903086.txt"},{"Physical": "0130903086.txt"},{"": "0130903086.txt"},{"23. If two network cards were suspected of having the same MAC address,": "0130903086.txt"},{"what layer would you troubleshoot to determine the conflict?": "0130903086.txt"},{"a.": "0130903086.txt"},{"b.": "0130903086.txt"},{"c.": "0130903086.txt"},{"d.": "0130903086.txt"},{"": "0130903086.txt"},{"Network": "0130903086.txt"},{"Data Link": "0130903086.txt"},{"Physical": "0130903086.txt"},{"Transport": "0130903086.txt"},{"": "0130903086.txt"},{"\fch01.qxd": "0130903086.txt"},{"": "0130903086.txt"},{"1/3/2001": "0130903086.txt"},{"": "0130903086.txt"},{"22": "0130903086.txt"},{"": "0130903086.txt"},{"9:44 AM": "0130903086.txt"},{"": "0130903086.txt"},{"Chapter 1": "0130903086.txt"},{"": "0130903086.txt"},{"Page 22": "0130903086.txt"},{"": "0130903086.txt"},{"\u2022": "0130903086.txt"},{"": "0130903086.txt"},{"Introduction to Networking and the OSI Model": "0130903086.txt"},{"": "0130903086.txt"},{"24. One of your nodes requests a window size of 1. This is having adverse": "0130903086.txt"},{"effects on the network and you need to change it. What layer of the OSI": "0130903086.txt"},{"model is responsible for this?": "0130903086.txt"},{"a.": "0130903086.txt"},{"b.": "0130903086.txt"},{"c.": "0130903086.txt"},{"d.": "0130903086.txt"},{"": "0130903086.txt"},{"Transport": "0130903086.txt"},{"Network": "0130903086.txt"},{"Data Link": "0130903086.txt"},{"Physical": "0130903086.txt"},{"": "0130903086.txt"},{"25. Identify the MAC address:": "0130903086.txt"},{"a.": "0130903086.txt"},{"b.": "0130903086.txt"},{"c.": "0130903086.txt"},{"d.": "0130903086.txt"},{"": "0130903086.txt"},{"00230405": "0130903086.txt"},{"00-23-04-05": "0130903086.txt"},{"f4e3d2c1b0": "0130903086.txt"},{"f4-e3-d2-c1-b0-a9": "0130903086.txt"},{"": "0130903086.txt"},{"\f": "0130903086.txt"},{"Advanced Bash-Scripting Guide": "abs-guide.txt"},{"": "abs-guide.txt"},{"An in-depth exploration of the art of shell scripting": "abs-guide.txt"},{"Mendel Cooper": "abs-guide.txt"},{"": "abs-guide.txt"},{"<thegrendel.abs@gmail.com>": "abs-guide.txt"},{"10": "abs-guide.txt"},{"10 Mar 2014": "abs-guide.txt"},{"Revision History": "abs-guide.txt"},{"Revision 6.5": "abs-guide.txt"},{"'TUNGSTENBERRY' release": "abs-guide.txt"},{"Revision 6.6": "abs-guide.txt"},{"'YTTERBIUMBERRY' release": "abs-guide.txt"},{"Revision 10": "abs-guide.txt"},{"'PUBLICDOMAIN' release": "abs-guide.txt"},{"": "abs-guide.txt"},{"05 Apr 2012": "abs-guide.txt"},{"": "abs-guide.txt"},{"Revised by: mc": "abs-guide.txt"},{"": "abs-guide.txt"},{"27 Nov 2012": "abs-guide.txt"},{"": "abs-guide.txt"},{"Revised by: mc": "abs-guide.txt"},{"": "abs-guide.txt"},{"10 Mar 2014": "abs-guide.txt"},{"": "abs-guide.txt"},{"Revised by: mc": "abs-guide.txt"},{"": "abs-guide.txt"},{"This tutorial assumes no previous knowledge of scripting or programming, yet progresses rapidly toward an": "abs-guide.txt"},{"intermediate/advanced level of instruction . . . all the while sneaking in little nuggets of UNIX\u00ae wisdom and": "abs-guide.txt"},{"lore. It serves as a textbook, a manual for self-study, and as a reference and source of knowledge on shell": "abs-guide.txt"},{"scripting techniques. The exercises and heavily-commented examples invite active reader participation, under": "abs-guide.txt"},{"the premise that the only way to really learn scripting is to write scripts.": "abs-guide.txt"},{"This book is suitable for classroom use as a general introduction to programming concepts.": "abs-guide.txt"},{"This document is herewith granted to the Public Domain. No copyright!": "abs-guide.txt"},{"": "abs-guide.txt"},{"Dedication": "abs-guide.txt"},{"For Anita, the source of all the magic": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"": "abs-guide.txt"},{"Table of Contents": "abs-guide.txt"},{"Chapter 1. Shell Programming!.........................................................................................................................1": "abs-guide.txt"},{"Chapter 2. Starting Off With a Sha-Bang........................................................................................................3": "abs-guide.txt"},{"2.1. Invoking the script............................................................................................................................6": "abs-guide.txt"},{"2.2. Preliminary Exercises.......................................................................................................................6": "abs-guide.txt"},{"Part 2. Basics.......................................................................................................................................................7": "abs-guide.txt"},{"Chapter 3. Special Characters...........................................................................................................................8": "abs-guide.txt"},{"Chapter 4. Introduction to Variables and Parameters..................................................................................30": "abs-guide.txt"},{"4.1. Variable Substitution......................................................................................................................30": "abs-guide.txt"},{"4.2. Variable Assignment.......................................................................................................................33": "abs-guide.txt"},{"4.3. Bash Variables Are Untyped..........................................................................................................34": "abs-guide.txt"},{"4.4. Special Variable Types...................................................................................................................35": "abs-guide.txt"},{"Chapter 5. Quoting...........................................................................................................................................41": "abs-guide.txt"},{"5.1. Quoting Variables...........................................................................................................................41": "abs-guide.txt"},{"5.2. Escaping..........................................................................................................................................43": "abs-guide.txt"},{"Chapter 6. Exit and Exit Status.......................................................................................................................51": "abs-guide.txt"},{"Chapter 7. Tests................................................................................................................................................54": "abs-guide.txt"},{"7.1. Test Constructs...............................................................................................................................54": "abs-guide.txt"},{"7.2. File test operators............................................................................................................................62": "abs-guide.txt"},{"7.3. Other Comparison Operators..........................................................................................................65": "abs-guide.txt"},{"7.4. Nested if/then Condition Tests.......................................................................................................70": "abs-guide.txt"},{"7.5. Testing Your Knowledge of Tests..................................................................................................71": "abs-guide.txt"},{"Chapter 8. Operations and Related Topics....................................................................................................72": "abs-guide.txt"},{"8.1. Operators.........................................................................................................................................72": "abs-guide.txt"},{"8.2. Numerical Constants.......................................................................................................................78": "abs-guide.txt"},{"8.3. The Double-Parentheses Construct.................................................................................................80": "abs-guide.txt"},{"8.4. Operator Precedence.......................................................................................................................81": "abs-guide.txt"},{"Part 3. Beyond the Basics.................................................................................................................................84": "abs-guide.txt"},{"Chapter 9. Another Look at Variables...........................................................................................................85": "abs-guide.txt"},{"9.1. Internal Variables............................................................................................................................85": "abs-guide.txt"},{"9.2. Typing variables: declare or typeset.............................................................................................104": "abs-guide.txt"},{"9.2.1. Another use for declare.......................................................................................................107": "abs-guide.txt"},{"9.3. $RANDOM: generate random integer..........................................................................................107": "abs-guide.txt"},{"Chapter 10. Manipulating Variables.............................................................................................................119": "abs-guide.txt"},{"10.1. Manipulating Strings...................................................................................................................119": "abs-guide.txt"},{"10.1.1. Manipulating strings using awk........................................................................................127": "abs-guide.txt"},{"10.1.2. Further Reference..............................................................................................................127": "abs-guide.txt"},{"10.2. Parameter Substitution................................................................................................................128": "abs-guide.txt"},{"i": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"": "abs-guide.txt"},{"Table of Contents": "abs-guide.txt"},{"Chapter 11. Loops and Branches..................................................................................................................138": "abs-guide.txt"},{"11.1. Loops..........................................................................................................................................138": "abs-guide.txt"},{"11.2. Nested Loops..............................................................................................................................152": "abs-guide.txt"},{"11.3. Loop Control...............................................................................................................................153": "abs-guide.txt"},{"11.4. Testing and Branching................................................................................................................156": "abs-guide.txt"},{"Chapter 12. Command Substitution.............................................................................................................165": "abs-guide.txt"},{"Chapter 13. Arithmetic Expansion................................................................................................................171": "abs-guide.txt"},{"Chapter 14. Recess Time................................................................................................................................172": "abs-guide.txt"},{"Part 4. Commands..........................................................................................................................................173": "abs-guide.txt"},{"Chapter 15. Internal Commands and Builtins.............................................................................................181": "abs-guide.txt"},{"15.1. Job Control Commands..............................................................................................................210": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands...........................................................................215": "abs-guide.txt"},{"16.1. Basic Commands........................................................................................................................215": "abs-guide.txt"},{"16.2. Complex Commands...................................................................................................................221": "abs-guide.txt"},{"16.3. Time / Date Commands..............................................................................................................231": "abs-guide.txt"},{"16.4. Text Processing Commands........................................................................................................235": "abs-guide.txt"},{"16.5. File and Archiving Commands...................................................................................................258": "abs-guide.txt"},{"16.6. Communications Commands......................................................................................................276": "abs-guide.txt"},{"16.7. Terminal Control Commands.....................................................................................................291": "abs-guide.txt"},{"16.8. Math Commands.........................................................................................................................292": "abs-guide.txt"},{"16.9. Miscellaneous Commands..........................................................................................................303": "abs-guide.txt"},{"Chapter 17. System and Administrative Commands..................................................................................318": "abs-guide.txt"},{"17.1. Analyzing a System Script..........................................................................................................349": "abs-guide.txt"},{"Part 5. Advanced Topics.................................................................................................................................351": "abs-guide.txt"},{"Chapter 18. Regular Expressions..................................................................................................................353": "abs-guide.txt"},{"18.1. A Brief Introduction to Regular Expressions..............................................................................353": "abs-guide.txt"},{"18.2. Globbing.....................................................................................................................................357": "abs-guide.txt"},{"Chapter 19. Here Documents.........................................................................................................................359": "abs-guide.txt"},{"19.1. Here Strings................................................................................................................................369": "abs-guide.txt"},{"Chapter 20. I/O Redirection...........................................................................................................................373": "abs-guide.txt"},{"20.1. Using exec...................................................................................................................................376": "abs-guide.txt"},{"20.2. Redirecting Code Blocks............................................................................................................379": "abs-guide.txt"},{"20.3. Applications................................................................................................................................384": "abs-guide.txt"},{"Chapter 21. Subshells.....................................................................................................................................386": "abs-guide.txt"},{"": "abs-guide.txt"},{"ii": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"": "abs-guide.txt"},{"Table of Contents": "abs-guide.txt"},{"Chapter 22. Restricted Shells.........................................................................................................................391": "abs-guide.txt"},{"Chapter 23. Process Substitution...................................................................................................................393": "abs-guide.txt"},{"Chapter 24. Functions....................................................................................................................................398": "abs-guide.txt"},{"24.1. Complex Functions and Function Complexities.........................................................................402": "abs-guide.txt"},{"24.2. Local Variables...........................................................................................................................413": "abs-guide.txt"},{"24.2.1. Local variables and recursion............................................................................................414": "abs-guide.txt"},{"24.3. Recursion Without Local Variables............................................................................................417": "abs-guide.txt"},{"Chapter 25. Aliases.........................................................................................................................................420": "abs-guide.txt"},{"Chapter 26. List Constructs...........................................................................................................................423": "abs-guide.txt"},{"Chapter 27. Arrays.........................................................................................................................................427": "abs-guide.txt"},{"Chapter 28. Indirect References....................................................................................................................456": "abs-guide.txt"},{"Chapter 29. /dev and /proc.............................................................................................................................460": "abs-guide.txt"},{"29.1. /dev..............................................................................................................................................460": "abs-guide.txt"},{"29.2. /proc............................................................................................................................................463": "abs-guide.txt"},{"Chapter 30. Network Programming.............................................................................................................469": "abs-guide.txt"},{"Chapter 31. Of Zeros and Nulls.....................................................................................................................472": "abs-guide.txt"},{"Chapter 32. Debugging...................................................................................................................................476": "abs-guide.txt"},{"Chapter 33. Options........................................................................................................................................487": "abs-guide.txt"},{"Chapter 34. Gotchas.......................................................................................................................................490": "abs-guide.txt"},{"Chapter 35. Scripting With Style..................................................................................................................499": "abs-guide.txt"},{"35.1. Unofficial Shell Scripting Stylesheet..........................................................................................499": "abs-guide.txt"},{"Chapter 36. Miscellany...................................................................................................................................502": "abs-guide.txt"},{"36.1. Interactive and non-interactive shells and scripts.......................................................................502": "abs-guide.txt"},{"36.2. Shell Wrappers............................................................................................................................503": "abs-guide.txt"},{"36.3. Tests and Comparisons: Alternatives..........................................................................................509": "abs-guide.txt"},{"36.4. Recursion: a script calling itself..................................................................................................509": "abs-guide.txt"},{"36.5. \"Colorizing\" Scripts....................................................................................................................512": "abs-guide.txt"},{"36.6. Optimizations..............................................................................................................................525": "abs-guide.txt"},{"36.7. Assorted Tips..............................................................................................................................528": "abs-guide.txt"},{"36.7.1. Ideas for more powerful scripts.........................................................................................528": "abs-guide.txt"},{"36.7.2. Widgets..............................................................................................................................539": "abs-guide.txt"},{"36.8. Security Issues............................................................................................................................541": "abs-guide.txt"},{"36.8.1. Infected Shell Scripts.........................................................................................................541": "abs-guide.txt"},{"36.8.2. Hiding Shell Script Source................................................................................................541": "abs-guide.txt"},{"iii": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"": "abs-guide.txt"},{"Table of Contents": "abs-guide.txt"},{"Chapter 36. Miscellany": "abs-guide.txt"},{"36.8.3. Writing Secure Shell Scripts.............................................................................................541": "abs-guide.txt"},{"36.9. Portability Issues.........................................................................................................................541": "abs-guide.txt"},{"36.9.1. A Test Suite.......................................................................................................................542": "abs-guide.txt"},{"36.10. Shell Scripting Under Windows...............................................................................................543": "abs-guide.txt"},{"Chapter 37. Bash, versions 2, 3, and 4..........................................................................................................544": "abs-guide.txt"},{"37.1. Bash, version 2............................................................................................................................544": "abs-guide.txt"},{"37.2. Bash, version 3............................................................................................................................548": "abs-guide.txt"},{"37.2.1. Bash, version 3.1...............................................................................................................551": "abs-guide.txt"},{"37.2.2. Bash, version 3.2...............................................................................................................552": "abs-guide.txt"},{"37.3. Bash, version 4............................................................................................................................552": "abs-guide.txt"},{"37.3.1. Bash, version 4.1...............................................................................................................559": "abs-guide.txt"},{"37.3.2. Bash, version 4.2...............................................................................................................560": "abs-guide.txt"},{"Chapter 38. Endnotes.....................................................................................................................................564": "abs-guide.txt"},{"38.1. Author's Note..............................................................................................................................564": "abs-guide.txt"},{"38.2. About the Author........................................................................................................................564": "abs-guide.txt"},{"38.3. Where to Go For Help.................................................................................................................565": "abs-guide.txt"},{"38.4. Tools Used to Produce This Book..............................................................................................565": "abs-guide.txt"},{"38.4.1. Hardware...........................................................................................................................565": "abs-guide.txt"},{"38.4.2. Software and Printware.....................................................................................................565": "abs-guide.txt"},{"38.5. Credits.........................................................................................................................................566": "abs-guide.txt"},{"38.6. Disclaimer...................................................................................................................................567": "abs-guide.txt"},{"Bibliography....................................................................................................................................................569": "abs-guide.txt"},{"Appendix A. Contributed Scripts..................................................................................................................577": "abs-guide.txt"},{"Appendix B. Reference Cards........................................................................................................................787": "abs-guide.txt"},{"Appendix C. A Sed and Awk Micro-Primer................................................................................................792": "abs-guide.txt"},{"C.1. Sed................................................................................................................................................792": "abs-guide.txt"},{"C.2. Awk..............................................................................................................................................795": "abs-guide.txt"},{"Appendix D. Parsing and Managing Pathnames.........................................................................................798": "abs-guide.txt"},{"Appendix E. Exit Codes With Special Meanings.........................................................................................802": "abs-guide.txt"},{"Appendix F. A Detailed Introduction to I/O and I/O Redirection.............................................................803": "abs-guide.txt"},{"Appendix G. Command-Line Options..........................................................................................................805": "abs-guide.txt"},{"G.1. Standard Command-Line Options...............................................................................................805": "abs-guide.txt"},{"G.2. Bash Command-Line Options......................................................................................................806": "abs-guide.txt"},{"Appendix H. Important Files.........................................................................................................................808": "abs-guide.txt"},{"": "abs-guide.txt"},{"iv": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"": "abs-guide.txt"},{"Table of Contents": "abs-guide.txt"},{"Appendix I. Important System Directories..................................................................................................809": "abs-guide.txt"},{"Appendix J. An Introduction to Programmable Completion.....................................................................811": "abs-guide.txt"},{"Appendix K. Localization...............................................................................................................................814": "abs-guide.txt"},{"Appendix L. History Commands...................................................................................................................818": "abs-guide.txt"},{"Appendix M. Sample .bashrc and .bash_profile Files.................................................................................820": "abs-guide.txt"},{"Appendix N. Converting DOS Batch Files to Shell Scripts.........................................................................837": "abs-guide.txt"},{"Appendix O. Exercises....................................................................................................................................841": "abs-guide.txt"},{"O.1. Analyzing Scripts.........................................................................................................................841": "abs-guide.txt"},{"O.2. Writing Scripts.............................................................................................................................843": "abs-guide.txt"},{"Appendix P. Revision History........................................................................................................................853": "abs-guide.txt"},{"Appendix Q. Download and Mirror Sites.....................................................................................................856": "abs-guide.txt"},{"Appendix R. To Do List..................................................................................................................................857": "abs-guide.txt"},{"Appendix S. Copyright...................................................................................................................................858": "abs-guide.txt"},{"Appendix T. ASCII Table..............................................................................................................................860": "abs-guide.txt"},{"Index....................................................................................................................................................862": "abs-guide.txt"},{"Notes..............................................................................................................................................899": "abs-guide.txt"},{"": "abs-guide.txt"},{"v": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fChapter 1. Shell Programming!": "abs-guide.txt"},{"No programming language is perfect. There is": "abs-guide.txt"},{"not even a single best language; there are only": "abs-guide.txt"},{"languages well suited or perhaps poorly suited": "abs-guide.txt"},{"for particular purposes.": "abs-guide.txt"},{"--Herbert Mayer": "abs-guide.txt"},{"A working knowledge of shell scripting is essential to anyone wishing to become reasonably proficient at": "abs-guide.txt"},{"system administration, even if they do not anticipate ever having to actually write a script. Consider that as a": "abs-guide.txt"},{"Linux machine boots up, it executes the shell scripts in /etc/rc.d to restore the system configuration and": "abs-guide.txt"},{"set up services. A detailed understanding of these startup scripts is important for analyzing the behavior of a": "abs-guide.txt"},{"system, and possibly modifying it.": "abs-guide.txt"},{"The craft of scripting is not hard to master, since scripts can be built in bite-sized sections and there is only a": "abs-guide.txt"},{"fairly small set of shell-specific operators and options [1] to learn. The syntax is simple -- even austere -similar to that of invoking and chaining together utilities at the command line, and there are only a few \"rules\"": "abs-guide.txt"},{"governing their use. Most short scripts work right the first time, and debugging even the longer ones is": "abs-guide.txt"},{"straightforward.": "abs-guide.txt"},{"": "abs-guide.txt"},{"In the early days of personal computing, the BASIC language enabled": "abs-guide.txt"},{"anyone reasonably computer proficient to write programs on an early": "abs-guide.txt"},{"generation of microcomputers. Decades later, the Bash scripting": "abs-guide.txt"},{"language enables anyone with a rudimentary knowledge of Linux or": "abs-guide.txt"},{"UNIX to do the same on modern machines.": "abs-guide.txt"},{"We now have miniaturized single-board computers with amazing": "abs-guide.txt"},{"capabilities, such as the Raspberry Pi.": "abs-guide.txt"},{"Bash scripting provides a way to explore the capabilities of these": "abs-guide.txt"},{"fascinating devices.": "abs-guide.txt"},{"": "abs-guide.txt"},{"A shell script is a quick-and-dirty method of prototyping a complex application. Getting even a limited subset": "abs-guide.txt"},{"of the functionality to work in a script is often a useful first stage in project development. In this way, the": "abs-guide.txt"},{"structure of the application can be tested and tinkered with, and the major pitfalls found before proceeding to": "abs-guide.txt"},{"the final coding in C, C++, Java, Perl, or Python.": "abs-guide.txt"},{"Shell scripting hearkens back to the classic UNIX philosophy of breaking complex projects into simpler": "abs-guide.txt"},{"subtasks, of chaining together components and utilities. Many consider this a better, or at least more": "abs-guide.txt"},{"esthetically pleasing approach to problem solving than using one of the new generation of high-powered": "abs-guide.txt"},{"all-in-one languages, such as Perl, which attempt to be all things to all people, but at the cost of forcing you to": "abs-guide.txt"},{"alter your thinking processes to fit the tool.": "abs-guide.txt"},{"According to Herbert Mayer, \"a useful language needs arrays, pointers, and a generic mechanism for building": "abs-guide.txt"},{"data structures.\" By these criteria, shell scripting falls somewhat short of being \"useful.\" Or, perhaps not. . . .": "abs-guide.txt"},{"": "abs-guide.txt"},{"When not to use shell scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 1. Shell Programming!": "abs-guide.txt"},{"": "abs-guide.txt"},{"1": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"\u2022 Resource-intensive tasks, especially where speed is a factor (sorting, hashing, recursion [2] ...)": "abs-guide.txt"},{"\u2022 Procedures involving heavy-duty math operations, especially floating point arithmetic, arbitrary": "abs-guide.txt"},{"precision calculations, or complex numbers (use C++ or FORTRAN instead)": "abs-guide.txt"},{"\u2022 Cross-platform portability required (use C or Java instead)": "abs-guide.txt"},{"\u2022 Complex applications, where structured programming is a necessity (type-checking of variables,": "abs-guide.txt"},{"function prototypes, etc.)": "abs-guide.txt"},{"\u2022 Mission-critical applications upon which you are betting the future of the company": "abs-guide.txt"},{"\u2022 Situations where security is important, where you need to guarantee the integrity of your system and": "abs-guide.txt"},{"protect against intrusion, cracking, and vandalism": "abs-guide.txt"},{"\u2022 Project consists of subcomponents with interlocking dependencies": "abs-guide.txt"},{"\u2022 Extensive file operations required (Bash is limited to serial file access, and that only in a": "abs-guide.txt"},{"particularly clumsy and inefficient line-by-line fashion.)": "abs-guide.txt"},{"\u2022 Need native support for multi-dimensional arrays": "abs-guide.txt"},{"\u2022 Need data structures, such as linked lists or trees": "abs-guide.txt"},{"\u2022 Need to generate / manipulate graphics or GUIs": "abs-guide.txt"},{"\u2022 Need direct access to system hardware or external peripherals": "abs-guide.txt"},{"\u2022 Need port or socket I/O": "abs-guide.txt"},{"\u2022 Need to use libraries or interface with legacy code": "abs-guide.txt"},{"\u2022 Proprietary, closed-source applications (Shell scripts put the source code right out in the open for all": "abs-guide.txt"},{"the world to see.)": "abs-guide.txt"},{"If any of the above applies, consider a more powerful scripting language -- perhaps Perl, Tcl, Python, Ruby": "abs-guide.txt"},{"-- or possibly a compiled language such as C, C++, or Java. Even then, prototyping the application as a": "abs-guide.txt"},{"shell script might still be a useful development step.": "abs-guide.txt"},{"We will be using Bash, an acronym [3] for \"Bourne-Again shell\" and a pun on Stephen Bourne's now classic": "abs-guide.txt"},{"Bourne shell. Bash has become a de facto standard for shell scripting on most flavors of UNIX. Most of the": "abs-guide.txt"},{"principles this book covers apply equally well to scripting with other shells, such as the Korn Shell, from": "abs-guide.txt"},{"which Bash derives some of its features, [4] and the C Shell and its variants. (Note that C Shell programming": "abs-guide.txt"},{"is not recommended due to certain inherent problems, as pointed out in an October, 1993 Usenet post by Tom": "abs-guide.txt"},{"Christiansen.)": "abs-guide.txt"},{"What follows is a tutorial on shell scripting. It relies heavily on examples to illustrate various features of the": "abs-guide.txt"},{"shell. The example scripts work -- they've been tested, insofar as possible -- and some of them are even useful": "abs-guide.txt"},{"in real life. The reader can play with the actual working code of the examples in the source archive": "abs-guide.txt"},{"(scriptname.sh or scriptname.bash), [5] give them execute permission (chmod u+rx": "abs-guide.txt"},{"scriptname), then run them to see what happens. Should the source archive not be available, then": "abs-guide.txt"},{"cut-and-paste from the HTML or pdf rendered versions. Be aware that some of the scripts presented here": "abs-guide.txt"},{"introduce features before they are explained, and this may require the reader to temporarily skip ahead for": "abs-guide.txt"},{"enlightenment.": "abs-guide.txt"},{"Unless otherwise noted, the author of this book wrote the example scripts that follow.": "abs-guide.txt"},{"His countenance was bold and bashed not.": "abs-guide.txt"},{"--Edmund Spenser": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 1. Shell Programming!": "abs-guide.txt"},{"": "abs-guide.txt"},{"2": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fChapter 2. Starting Off With a Sha-Bang": "abs-guide.txt"},{"Shell programming is a 1950s juke box . . .": "abs-guide.txt"},{"--Larry Wall": "abs-guide.txt"},{"In the simplest case, a script is nothing more than a list of system commands stored in a file. At the very least,": "abs-guide.txt"},{"this saves the effort of retyping that particular sequence of commands each time it is invoked.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 2-1. cleanup: A script to clean up log files in /var/log": "abs-guide.txt"},{"# Cleanup": "abs-guide.txt"},{"# Run as root, of course.": "abs-guide.txt"},{"cd /var/log": "abs-guide.txt"},{"cat /dev/null > messages": "abs-guide.txt"},{"cat /dev/null > wtmp": "abs-guide.txt"},{"echo \"Log files cleaned up.\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"There is nothing unusual here, only a set of commands that could just as easily have been invoked one by one": "abs-guide.txt"},{"from the command-line on the console or in a terminal window. The advantages of placing the commands in a": "abs-guide.txt"},{"script go far beyond not having to retype them time and again. The script becomes a program -- a tool -- and it": "abs-guide.txt"},{"can easily be modified or customized for a particular application.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 2-2. cleanup: An improved clean-up script": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# Proper header for a Bash script.": "abs-guide.txt"},{"# Cleanup, version 2": "abs-guide.txt"},{"# Run as root, of course.": "abs-guide.txt"},{"# Insert code here to print error message and exit if not root.": "abs-guide.txt"},{"LOG_DIR=/var/log": "abs-guide.txt"},{"# Variables are better than hard-coded values.": "abs-guide.txt"},{"cd $LOG_DIR": "abs-guide.txt"},{"cat /dev/null > messages": "abs-guide.txt"},{"cat /dev/null > wtmp": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo \"Logs cleaned up.\"": "abs-guide.txt"},{"exit # The right and proper method of \"exiting\" from a script.": "abs-guide.txt"},{"# A bare \"exit\" (no parameter) returns the exit status": "abs-guide.txt"},{"#+ of the preceding command.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Now that's beginning to look like a real script. But we can go even farther . . .": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 2-3. cleanup: An enhanced and generalized version of above scripts.": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# Cleanup, version 3": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 2. Starting Off With a Sha-Bang": "abs-guide.txt"},{"": "abs-guide.txt"},{"3": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"Warning:": "abs-guide.txt"},{"------This script uses quite a number of features that will be explained": "abs-guide.txt"},{"later on.": "abs-guide.txt"},{"By the time you've finished the first half of the book,": "abs-guide.txt"},{"there should be nothing mysterious about it.": "abs-guide.txt"},{"": "abs-guide.txt"},{"LOG_DIR=/var/log": "abs-guide.txt"},{"ROOT_UID=0": "abs-guide.txt"},{"#": "abs-guide.txt"},{"LINES=50": "abs-guide.txt"},{"#": "abs-guide.txt"},{"E_XCD=86": "abs-guide.txt"},{"#": "abs-guide.txt"},{"E_NOTROOT=87": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Only users with $UID 0 have root privileges.": "abs-guide.txt"},{"Default number of lines saved.": "abs-guide.txt"},{"Can't change directory?": "abs-guide.txt"},{"Non-root exit error.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Run as root, of course.": "abs-guide.txt"},{"if [ \"$UID\" -ne \"$ROOT_UID\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Must be root to run this script.\"": "abs-guide.txt"},{"exit $E_NOTROOT": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"if [ -n \"$1\" ]": "abs-guide.txt"},{"# Test whether command-line argument is present (non-empty).": "abs-guide.txt"},{"then": "abs-guide.txt"},{"lines=$1": "abs-guide.txt"},{"else": "abs-guide.txt"},{"lines=$LINES # Default, if not specified on command-line.": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#*": "abs-guide.txt"},{"": "abs-guide.txt"},{"Stephane Chazelas suggests the following,": "abs-guide.txt"},{"as a better way of checking command-line arguments,": "abs-guide.txt"},{"but this is still a bit advanced for this stage of the tutorial.": "abs-guide.txt"},{"E_WRONGARGS=85": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Non-numerical argument (bad argument format).": "abs-guide.txt"},{"": "abs-guide.txt"},{"case \"$1\" in": "abs-guide.txt"},{"\"\"": "abs-guide.txt"},{") lines=50;;": "abs-guide.txt"},{"*[!0-9]*) echo \"Usage: `basename $0` lines-to-cleanup\";": "abs-guide.txt"},{"exit $E_WRONGARGS;;": "abs-guide.txt"},{"*": "abs-guide.txt"},{") lines=$1;;": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"Skip ahead to \"Loops\" chapter to decipher all this.": "abs-guide.txt"},{"": "abs-guide.txt"},{"cd $LOG_DIR": "abs-guide.txt"},{"if [ `pwd` != \"$LOG_DIR\" ]": "abs-guide.txt"},{"": "abs-guide.txt"},{"# or": "abs-guide.txt"},{"if [ \"$PWD\" != \"$LOG_DIR\" ]": "abs-guide.txt"},{"# Not in /var/log?": "abs-guide.txt"},{"": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Can't change to $LOG_DIR.\"": "abs-guide.txt"},{"exit $E_XCD": "abs-guide.txt"},{"fi # Doublecheck if in right directory before messing with log file.": "abs-guide.txt"},{"# Far more efficient is:": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# cd /var/log || {": "abs-guide.txt"},{"#": "abs-guide.txt"},{"echo \"Cannot change to necessary directory.\" >&2": "abs-guide.txt"},{"#": "abs-guide.txt"},{"exit $E_XCD;": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 2. Starting Off With a Sha-Bang": "abs-guide.txt"},{"": "abs-guide.txt"},{"4": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# }": "abs-guide.txt"},{"": "abs-guide.txt"},{"tail -n $lines messages > mesg.temp # Save last section of message log file.": "abs-guide.txt"},{"mv mesg.temp messages": "abs-guide.txt"},{"# Rename it as system log file.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# cat /dev/null > messages": "abs-guide.txt"},{"#* No longer needed, as the above method is safer.": "abs-guide.txt"},{"cat /dev/null > wtmp # ': > wtmp' and '> wtmp' have the same effect.": "abs-guide.txt"},{"echo \"Log files cleaned up.\"": "abs-guide.txt"},{"# Note that there are other log files in /var/log not affected": "abs-guide.txt"},{"#+ by this script.": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"# A zero return value from the script upon exit indicates success": "abs-guide.txt"},{"#+ to the shell.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Since you may not wish to wipe out the entire system log, this version of the script keeps the last section of": "abs-guide.txt"},{"the message log intact. You will constantly discover ways of fine-tuning previously written scripts for": "abs-guide.txt"},{"increased effectiveness.": "abs-guide.txt"},{"***": "abs-guide.txt"},{"The sha-bang ( #!) [6] at the head of a script tells your system that this file is a set of commands to be fed to": "abs-guide.txt"},{"the command interpreter indicated. The #! is actually a two-byte [7] magic number, a special marker that": "abs-guide.txt"},{"designates a file type, or in this case an executable shell script (type man magic for more details on this": "abs-guide.txt"},{"fascinating topic). Immediately following the sha-bang is a path name. This is the path to the program that": "abs-guide.txt"},{"interprets the commands in the script, whether it be a shell, a programming language, or a utility. This": "abs-guide.txt"},{"command interpreter then executes the commands in the script, starting at the top (the line following the": "abs-guide.txt"},{"sha-bang line), and ignoring comments. [8]": "abs-guide.txt"},{"#!/bin/sh": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"#!/usr/bin/perl": "abs-guide.txt"},{"#!/usr/bin/tcl": "abs-guide.txt"},{"#!/bin/sed -f": "abs-guide.txt"},{"#!/bin/awk -f": "abs-guide.txt"},{"": "abs-guide.txt"},{"Each of the above script header lines calls a different command interpreter, be it /bin/sh, the default shell": "abs-guide.txt"},{"(bash in a Linux system) or otherwise. [9] Using #!/bin/sh, the default Bourne shell in most commercial": "abs-guide.txt"},{"variants of UNIX, makes the script portable to non-Linux machines, though you sacrifice Bash-specific": "abs-guide.txt"},{"features. The script will, however, conform to the POSIX [10] sh standard.": "abs-guide.txt"},{"Note that the path given at the \"sha-bang\" must be correct, otherwise an error message -- usually \"Command": "abs-guide.txt"},{"not found.\" -- will be the only result of running the script. [11]": "abs-guide.txt"},{"#! can be omitted if the script consists only of a set of generic system commands, using no internal shell": "abs-guide.txt"},{"directives. The second example, above, requires the initial #!, since the variable assignment line, lines=50,": "abs-guide.txt"},{"uses a shell-specific construct. [12] Note again that #!/bin/sh invokes the default shell interpreter, which": "abs-guide.txt"},{"defaults to /bin/bash on a Linux machine.": "abs-guide.txt"},{"This tutorial encourages a modular approach to constructing a script. Make note of and collect": "abs-guide.txt"},{"\"boilerplate\" code snippets that might be useful in future scripts. Eventually you will build quite an": "abs-guide.txt"},{"Chapter 2. Starting Off With a Sha-Bang": "abs-guide.txt"},{"": "abs-guide.txt"},{"5": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"extensive library of nifty routines. As an example, the following script prolog tests whether the script has": "abs-guide.txt"},{"been invoked with the correct number of parameters.": "abs-guide.txt"},{"E_WRONG_ARGS=85": "abs-guide.txt"},{"script_parameters=\"-a -h -m -z\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"-a = all, -h = help, etc.": "abs-guide.txt"},{"if [ $# -ne $Number_of_expected_args ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Usage: `basename $0` $script_parameters\"": "abs-guide.txt"},{"# `basename $0` is the script's filename.": "abs-guide.txt"},{"exit $E_WRONG_ARGS": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"Many times, you will write a script that carries out one particular task. The first script in this chapter is": "abs-guide.txt"},{"an example. Later, it might occur to you to generalize the script to do other, similar tasks. Replacing the": "abs-guide.txt"},{"literal (\"hard-wired\") constants by variables is a step in that direction, as is replacing repetitive code": "abs-guide.txt"},{"blocks by functions.": "abs-guide.txt"},{"": "abs-guide.txt"},{"2.1. Invoking the script": "abs-guide.txt"},{"Having written the script, you can invoke it by sh scriptname, [13] or alternatively bash": "abs-guide.txt"},{"scriptname. (Not recommended is using sh <scriptname, since this effectively disables reading from": "abs-guide.txt"},{"stdin within the script.) Much more convenient is to make the script itself directly executable with a chmod.": "abs-guide.txt"},{"Either:": "abs-guide.txt"},{"chmod 555 scriptname (gives everyone read/execute permission) [14]": "abs-guide.txt"},{"or": "abs-guide.txt"},{"chmod +rx scriptname (gives everyone read/execute permission)": "abs-guide.txt"},{"chmod u+rx scriptname (gives only the script owner read/execute permission)": "abs-guide.txt"},{"Having made the script executable, you may now test it by ./scriptname. [15] If it begins with a": "abs-guide.txt"},{"\"sha-bang\" line, invoking the script calls the correct command interpreter to run it.": "abs-guide.txt"},{"As a final step, after testing and debugging, you would likely want to move it to /usr/local/bin (as root,": "abs-guide.txt"},{"of course), to make the script available to yourself and all other users as a systemwide executable. The script": "abs-guide.txt"},{"could then be invoked by simply typing scriptname [ENTER] from the command-line.": "abs-guide.txt"},{"": "abs-guide.txt"},{"2.2. Preliminary Exercises": "abs-guide.txt"},{"1. System administrators often write scripts to automate common tasks. Give several instances where": "abs-guide.txt"},{"such scripts would be useful.": "abs-guide.txt"},{"2. Write a script that upon invocation shows the time and date, lists all logged-in users, and gives the": "abs-guide.txt"},{"system uptime. The script then saves this information to a logfile.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 2. Starting Off With a Sha-Bang": "abs-guide.txt"},{"": "abs-guide.txt"},{"6": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fPart 2. Basics": "abs-guide.txt"},{"Table of Contents": "abs-guide.txt"},{"3. Special Characters": "abs-guide.txt"},{"4. Introduction to Variables and Parameters": "abs-guide.txt"},{"4.1. Variable Substitution": "abs-guide.txt"},{"4.2. Variable Assignment": "abs-guide.txt"},{"4.3. Bash Variables Are Untyped": "abs-guide.txt"},{"4.4. Special Variable Types": "abs-guide.txt"},{"5. Quoting": "abs-guide.txt"},{"5.1. Quoting Variables": "abs-guide.txt"},{"5.2. Escaping": "abs-guide.txt"},{"6. Exit and Exit Status": "abs-guide.txt"},{"7. Tests": "abs-guide.txt"},{"7.1. Test Constructs": "abs-guide.txt"},{"7.2. File test operators": "abs-guide.txt"},{"7.3. Other Comparison Operators": "abs-guide.txt"},{"7.4. Nested if/then Condition Tests": "abs-guide.txt"},{"7.5. Testing Your Knowledge of Tests": "abs-guide.txt"},{"8. Operations and Related Topics": "abs-guide.txt"},{"8.1. Operators": "abs-guide.txt"},{"8.2. Numerical Constants": "abs-guide.txt"},{"8.3. The Double-Parentheses Construct": "abs-guide.txt"},{"8.4. Operator Precedence": "abs-guide.txt"},{"": "abs-guide.txt"},{"Part 2. Basics": "abs-guide.txt"},{"": "abs-guide.txt"},{"7": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fChapter 3. Special Characters": "abs-guide.txt"},{"What makes a character special? If it has a meaning beyond its literal meaning, a meta-meaning, then we refer": "abs-guide.txt"},{"to it as a special character. Along with commands and keywords, special characters are building blocks of": "abs-guide.txt"},{"Bash scripts.": "abs-guide.txt"},{"Special Characters Found In Scripts and Elsewhere": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Comments. Lines beginning with a # (with the exception of #!) are comments and will not be": "abs-guide.txt"},{"executed.": "abs-guide.txt"},{"# This line is a comment.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Comments may also occur following the end of a command.": "abs-guide.txt"},{"echo \"A comment will follow.\" # Comment here.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^ Note whitespace before #": "abs-guide.txt"},{"": "abs-guide.txt"},{"Comments may also follow whitespace at the beginning of a line.": "abs-guide.txt"},{"# A tab precedes this comment.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Comments may even be embedded within a pipe.": "abs-guide.txt"},{"initial=( `cat \"$startfile\" | sed -e '/#/d' | tr -d '\\n' |\\": "abs-guide.txt"},{"# Delete lines containing '#' comment character.": "abs-guide.txt"},{"sed -e 's/\\./\\. /g' -e 's/_/_ /g'` )": "abs-guide.txt"},{"# Excerpted from life.sh script": "abs-guide.txt"},{"": "abs-guide.txt"},{"A command may not follow a comment on the same line. There is no method of": "abs-guide.txt"},{"terminating the comment, in order for \"live code\" to begin on the same line. Use a new": "abs-guide.txt"},{"line for the next command.": "abs-guide.txt"},{"Of course, a quoted or an escaped # in an echo statement does not begin a comment.": "abs-guide.txt"},{"Likewise, a # appears in certain parameter-substitution constructs and in numerical": "abs-guide.txt"},{"constant expressions.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"\"The # here does not begin a comment.\"": "abs-guide.txt"},{"'The # here does not begin a comment.'": "abs-guide.txt"},{"The \\# here does not begin a comment.": "abs-guide.txt"},{"The # here begins a comment.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo ${PATH#*:}": "abs-guide.txt"},{"echo $(( 2#101011 ))": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Parameter substitution, not a comment.": "abs-guide.txt"},{"# Base conversion, not a comment.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Thanks, S.C.": "abs-guide.txt"},{"": "abs-guide.txt"},{"The standard quoting and escape characters (\" ' \\) escape the #.": "abs-guide.txt"},{"Certain pattern matching operations also use the #.": "abs-guide.txt"},{";": "abs-guide.txt"},{"Command separator [semicolon]. Permits putting two or more commands on the same line.": "abs-guide.txt"},{"echo hello; echo there": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 3. Special Characters": "abs-guide.txt"},{"": "abs-guide.txt"},{"8": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"if [ -x \"$filename\" ]; then": "abs-guide.txt"},{"# Note the space after the semicolon.": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"^^": "abs-guide.txt"},{"echo \"File $filename exists.\"; cp $filename $filename.bak": "abs-guide.txt"},{"else": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^^": "abs-guide.txt"},{"echo \"File $filename not found.\"; touch $filename": "abs-guide.txt"},{"fi; echo \"File test complete.\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"Note that the \";\" sometimes needs to be escaped.": "abs-guide.txt"},{";;": "abs-guide.txt"},{"Terminator in a case option [double semicolon].": "abs-guide.txt"},{"case \"$variable\" in": "abs-guide.txt"},{"abc) echo \"\\$variable = abc\" ;;": "abs-guide.txt"},{"xyz) echo \"\\$variable = xyz\" ;;": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"": "abs-guide.txt"},{";;&, ;&": "abs-guide.txt"},{"Terminators in a case option (version 4+ of Bash).": "abs-guide.txt"},{".": "abs-guide.txt"},{"\"dot\" command [period]. Equivalent to source (see Example 15-22). This is a bash builtin.": "abs-guide.txt"},{".": "abs-guide.txt"},{"\"dot\", as a component of a filename. When working with filenames, a leading dot is the prefix of a": "abs-guide.txt"},{"\"hidden\" file, a file that an ls will not normally show.": "abs-guide.txt"},{"bash$ touch .hidden-file": "abs-guide.txt"},{"bash$ ls -l": "abs-guide.txt"},{"total 10": "abs-guide.txt"},{"-rw-r--r-1 bozo": "abs-guide.txt"},{"-rw-r--r-1 bozo": "abs-guide.txt"},{"-rw-r--r-1 bozo": "abs-guide.txt"},{"": "abs-guide.txt"},{"bash$ ls -al": "abs-guide.txt"},{"total 14": "abs-guide.txt"},{"drwxrwxr-x": "abs-guide.txt"},{"drwx------rw-r--r--rw-r--r--rw-r--r--rw-rw-r--": "abs-guide.txt"},{"": "abs-guide.txt"},{"2": "abs-guide.txt"},{"52": "abs-guide.txt"},{"1": "abs-guide.txt"},{"1": "abs-guide.txt"},{"1": "abs-guide.txt"},{"1": "abs-guide.txt"},{"": "abs-guide.txt"},{"bozo": "abs-guide.txt"},{"bozo": "abs-guide.txt"},{"bozo": "abs-guide.txt"},{"bozo": "abs-guide.txt"},{"bozo": "abs-guide.txt"},{"bozo": "abs-guide.txt"},{"": "abs-guide.txt"},{"bozo": "abs-guide.txt"},{"bozo": "abs-guide.txt"},{"bozo": "abs-guide.txt"},{"bozo": "abs-guide.txt"},{"bozo": "abs-guide.txt"},{"bozo": "abs-guide.txt"},{"": "abs-guide.txt"},{"4034 Jul 18 22:04 data1.addressbook": "abs-guide.txt"},{"4602 May 25 13:58 data1.addressbook.bak": "abs-guide.txt"},{"877 Dec 17 2000 employment.addressbook": "abs-guide.txt"},{"": "abs-guide.txt"},{"1024": "abs-guide.txt"},{"3072": "abs-guide.txt"},{"4034": "abs-guide.txt"},{"4602": "abs-guide.txt"},{"877": "abs-guide.txt"},{"0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Aug": "abs-guide.txt"},{"Aug": "abs-guide.txt"},{"Jul": "abs-guide.txt"},{"May": "abs-guide.txt"},{"Dec": "abs-guide.txt"},{"Aug": "abs-guide.txt"},{"": "abs-guide.txt"},{"29": "abs-guide.txt"},{"29": "abs-guide.txt"},{"18": "abs-guide.txt"},{"25": "abs-guide.txt"},{"17": "abs-guide.txt"},{"29": "abs-guide.txt"},{"": "abs-guide.txt"},{"20:54": "abs-guide.txt"},{"20:51": "abs-guide.txt"},{"22:04": "abs-guide.txt"},{"13:58": "abs-guide.txt"},{"2000": "abs-guide.txt"},{"20:54": "abs-guide.txt"},{"": "abs-guide.txt"},{"./": "abs-guide.txt"},{"../": "abs-guide.txt"},{"data1.addressbook": "abs-guide.txt"},{"data1.addressbook.bak": "abs-guide.txt"},{"employment.addressbook": "abs-guide.txt"},{".hidden-file": "abs-guide.txt"},{"": "abs-guide.txt"},{"When considering directory names, a single dot represents the current working directory, and two dots": "abs-guide.txt"},{"denote the parent directory.": "abs-guide.txt"},{"bash$ pwd": "abs-guide.txt"},{"/home/bozo/projects": "abs-guide.txt"},{"bash$ cd .": "abs-guide.txt"},{"bash$ pwd": "abs-guide.txt"},{"/home/bozo/projects": "abs-guide.txt"},{"bash$ cd ..": "abs-guide.txt"},{"bash$ pwd": "abs-guide.txt"},{"/home/bozo/": "abs-guide.txt"},{"": "abs-guide.txt"},{"The dot often appears as the destination (directory) of a file movement command, in this context": "abs-guide.txt"},{"meaning current directory.": "abs-guide.txt"},{"Chapter 3. Special Characters": "abs-guide.txt"},{"": "abs-guide.txt"},{"9": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"bash$ cp /home/bozo/current_work/junk/* .": "abs-guide.txt"},{"": "abs-guide.txt"},{"Copy all the \"junk\" files to $PWD.": "abs-guide.txt"},{".": "abs-guide.txt"},{"\"dot\" character match. When matching characters, as part of a regular expression, a \"dot\" matches a": "abs-guide.txt"},{"single character.": "abs-guide.txt"},{"\"": "abs-guide.txt"},{"partial quoting [double quote]. \"STRING\" preserves (from interpretation) most of the special": "abs-guide.txt"},{"characters within STRING. See Chapter 5.": "abs-guide.txt"},{"'": "abs-guide.txt"},{"full quoting [single quote]. 'STRING' preserves all special characters within STRING. This is a": "abs-guide.txt"},{"stronger form of quoting than \"STRING\". See Chapter 5.": "abs-guide.txt"},{",": "abs-guide.txt"},{"comma operator. The comma operator [16] links together a series of arithmetic operations. All are": "abs-guide.txt"},{"evaluated, but only the last one is returned.": "abs-guide.txt"},{"let \"t2 = ((a = 9, 15 / 3))\"": "abs-guide.txt"},{"# Set \"a = 9\" and \"t2 = 15 / 3\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"The comma operator can also concatenate strings.": "abs-guide.txt"},{"for file in /{,usr/}bin/*calc": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^": "abs-guide.txt"},{"Find all executable files ending in \"calc\"": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"in /bin and /usr/bin directories.": "abs-guide.txt"},{"do": "abs-guide.txt"},{"if [ -x \"$file\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo $file": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"done": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"/bin/ipcalc": "abs-guide.txt"},{"/usr/bin/kcalc": "abs-guide.txt"},{"/usr/bin/oidcalc": "abs-guide.txt"},{"/usr/bin/oocalc": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Thank you, Rory Winston, for pointing this out.": "abs-guide.txt"},{"": "abs-guide.txt"},{",, ,": "abs-guide.txt"},{"Lowercase conversion in parameter substitution (added in version 4 of Bash).": "abs-guide.txt"},{"\\": "abs-guide.txt"},{"escape [backslash]. A quoting mechanism for single characters.": "abs-guide.txt"},{"\\X escapes the character X. This has the effect of \"quoting\" X, equivalent to 'X'. The \\ may be used to": "abs-guide.txt"},{"quote \" and ', so they are expressed literally.": "abs-guide.txt"},{"See Chapter 5 for an in-depth explanation of escaped characters.": "abs-guide.txt"},{"/": "abs-guide.txt"},{"Filename path separator [forward slash]. Separates the components of a filename (as in": "abs-guide.txt"},{"/home/bozo/projects/Makefile).": "abs-guide.txt"},{"This is also the division arithmetic operator.": "abs-guide.txt"},{"`": "abs-guide.txt"},{"command substitution. The `command` construct makes available the output of command for": "abs-guide.txt"},{"assignment to a variable. This is also known as backquotes or backticks.": "abs-guide.txt"},{"Chapter 3. Special Characters": "abs-guide.txt"},{"": "abs-guide.txt"},{"10": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{":": "abs-guide.txt"},{"null command [colon]. This is the shell equivalent of a \"NOP\" (no op, a do-nothing operation). It": "abs-guide.txt"},{"may be considered a synonym for the shell builtin true. The \":\" command is itself a Bash builtin, and": "abs-guide.txt"},{"its exit status is true (0).": "abs-guide.txt"},{":": "abs-guide.txt"},{"echo $?": "abs-guide.txt"},{"": "abs-guide.txt"},{"# 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Endless loop:": "abs-guide.txt"},{"while :": "abs-guide.txt"},{"do": "abs-guide.txt"},{"operation-1": "abs-guide.txt"},{"operation-2": "abs-guide.txt"},{"...": "abs-guide.txt"},{"operation-n": "abs-guide.txt"},{"done": "abs-guide.txt"},{"# Same as:": "abs-guide.txt"},{"#": "abs-guide.txt"},{"while true": "abs-guide.txt"},{"#": "abs-guide.txt"},{"do": "abs-guide.txt"},{"#": "abs-guide.txt"},{"...": "abs-guide.txt"},{"#": "abs-guide.txt"},{"done": "abs-guide.txt"},{"": "abs-guide.txt"},{"Placeholder in if/then test:": "abs-guide.txt"},{"if condition": "abs-guide.txt"},{"then :": "abs-guide.txt"},{"# Do nothing and branch ahead": "abs-guide.txt"},{"else": "abs-guide.txt"},{"# Or else ...": "abs-guide.txt"},{"take-some-action": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"Provide a placeholder where a binary operation is expected, see Example 8-2 and default parameters.": "abs-guide.txt"},{": ${username=`whoami`}": "abs-guide.txt"},{"# ${username=`whoami`}": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Gives an error without the leading :": "abs-guide.txt"},{"unless \"username\" is a command or builtin...": "abs-guide.txt"},{"": "abs-guide.txt"},{": ${1?\"Usage: $0 ARGUMENT\"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"# From \"usage-message.sh example script.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Provide a placeholder where a command is expected in a here document. See Example 19-10.": "abs-guide.txt"},{"Evaluate string of variables using parameter substitution (as in Example 10-7).": "abs-guide.txt"},{": ${HOSTNAME?} ${USER?} ${MAIL?}": "abs-guide.txt"},{"# Prints error message": "abs-guide.txt"},{"#+ if one or more of essential environmental variables not set.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Variable expansion / substring replacement.": "abs-guide.txt"},{"In combination with the > redirection operator, truncates a file to zero length, without changing its": "abs-guide.txt"},{"permissions. If the file did not previously exist, creates it.": "abs-guide.txt"},{": > data.xxx": "abs-guide.txt"},{"": "abs-guide.txt"},{"# File \"data.xxx\" now empty.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Same effect as": "abs-guide.txt"},{"cat /dev/null >data.xxx": "abs-guide.txt"},{"# However, this does not fork a new process, since \":\" is a builtin.": "abs-guide.txt"},{"": "abs-guide.txt"},{"See also Example 16-15.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 3. Special Characters": "abs-guide.txt"},{"": "abs-guide.txt"},{"11": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"In combination with the >> redirection operator, has no effect on a pre-existing target file (: >>": "abs-guide.txt"},{"target_file). If the file did not previously exist, creates it.": "abs-guide.txt"},{"This applies to regular files, not pipes, symlinks, and certain special files.": "abs-guide.txt"},{"May be used to begin a comment line, although this is not recommended. Using # for a comment": "abs-guide.txt"},{"turns off error checking for the remainder of that line, so almost anything may appear in a comment.": "abs-guide.txt"},{"However, this is not the case with :.": "abs-guide.txt"},{": This is a comment that generates an error, ( if [ $x -eq 3] ).": "abs-guide.txt"},{"": "abs-guide.txt"},{"The \":\" serves as a field separator, in /etc/passwd, and in the $PATH variable.": "abs-guide.txt"},{"bash$ echo $PATH": "abs-guide.txt"},{"/usr/local/bin:/bin:/usr/bin:/usr/X11R6/bin:/sbin:/usr/sbin:/usr/games": "abs-guide.txt"},{"": "abs-guide.txt"},{"A colon is acceptable as a function name.": "abs-guide.txt"},{":()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"echo \"The name of this function is \"$FUNCNAME\" \"": "abs-guide.txt"},{"# Why use a colon as a function name?": "abs-guide.txt"},{"# It's a way of obfuscating your code.": "abs-guide.txt"},{"}": "abs-guide.txt"},{":": "abs-guide.txt"},{"# The name of this function is :": "abs-guide.txt"},{"": "abs-guide.txt"},{"This is not portable behavior, and therefore not a recommended practice. In fact, more recent releases": "abs-guide.txt"},{"of Bash do not permit this usage. An underscore _ works, though.": "abs-guide.txt"},{"": "abs-guide.txt"},{"A colon can serve as a placeholder in an otherwise empty function.": "abs-guide.txt"},{"not_empty ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{":": "abs-guide.txt"},{"} # Contains a : (null command), and so is not empty.": "abs-guide.txt"},{"": "abs-guide.txt"},{"!": "abs-guide.txt"},{"reverse (or negate) the sense of a test or exit status [bang]. The ! operator inverts the exit status of": "abs-guide.txt"},{"the command to which it is applied (see Example 6-2). It also inverts the meaning of a test operator.": "abs-guide.txt"},{"This can, for example, change the sense of equal ( = ) to not-equal ( != ). The ! operator is a Bash": "abs-guide.txt"},{"keyword.": "abs-guide.txt"},{"In a different context, the ! also appears in indirect variable references.": "abs-guide.txt"},{"In yet another context, from the command line, the ! invokes the Bash history mechanism (see": "abs-guide.txt"},{"Appendix L). Note that within a script, the history mechanism is disabled.": "abs-guide.txt"},{"*": "abs-guide.txt"},{"wild card [asterisk]. The * character serves as a \"wild card\" for filename expansion in globbing. By": "abs-guide.txt"},{"itself, it matches every filename in a given directory.": "abs-guide.txt"},{"bash$ echo *": "abs-guide.txt"},{"abs-book.sgml add-drive.sh agram.sh alias.sh": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 3. Special Characters": "abs-guide.txt"},{"": "abs-guide.txt"},{"12": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"The * also represents any number (or zero) characters in a regular expression.": "abs-guide.txt"},{"*": "abs-guide.txt"},{"arithmetic operator. In the context of arithmetic operations, the * denotes multiplication.": "abs-guide.txt"},{"** A double asterisk can represent the exponentiation operator or extended file-match globbing.": "abs-guide.txt"},{"?": "abs-guide.txt"},{"test operator. Within certain expressions, the ? indicates a test for a condition.": "abs-guide.txt"},{"": "abs-guide.txt"},{"In a double-parentheses construct, the ? can serve as an element of a C-style trinary operator. [17]": "abs-guide.txt"},{"condition?result-if-true:result-if-false": "abs-guide.txt"},{"(( var0 = var1<98?9:21 ))": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^ ^": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [ \"$var1\" -lt 98 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"var0=9": "abs-guide.txt"},{"else": "abs-guide.txt"},{"var0=21": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"In a parameter substitution expression, the ? tests whether a variable has been set.": "abs-guide.txt"},{"?": "abs-guide.txt"},{"wild card. The ? character serves as a single-character \"wild card\" for filename expansion in": "abs-guide.txt"},{"globbing, as well as representing one character in an extended regular expression.": "abs-guide.txt"},{"$": "abs-guide.txt"},{"Variable substitution (contents of a variable).": "abs-guide.txt"},{"var1=5": "abs-guide.txt"},{"var2=23skidoo": "abs-guide.txt"},{"echo $var1": "abs-guide.txt"},{"echo $var2": "abs-guide.txt"},{"": "abs-guide.txt"},{"# 5": "abs-guide.txt"},{"# 23skidoo": "abs-guide.txt"},{"": "abs-guide.txt"},{"A $ prefixing a variable name indicates the value the variable holds.": "abs-guide.txt"},{"$": "abs-guide.txt"},{"end-of-line. In a regular expression, a \"$\" addresses the end of a line of text.": "abs-guide.txt"},{"${}": "abs-guide.txt"},{"Parameter substitution.": "abs-guide.txt"},{"$' ... '": "abs-guide.txt"},{"Quoted string expansion. This construct expands single or multiple escaped octal or hex values into": "abs-guide.txt"},{"ASCII [18] or Unicode characters.": "abs-guide.txt"},{"$*, $@": "abs-guide.txt"},{"positional parameters.": "abs-guide.txt"},{"$?": "abs-guide.txt"},{"exit status variable. The $? variable holds the exit status of a command, a function, or of the script": "abs-guide.txt"},{"itself.": "abs-guide.txt"},{"$$": "abs-guide.txt"},{"process ID variable. The $$ variable holds the process ID [19] of the script in which it appears.": "abs-guide.txt"},{"()": "abs-guide.txt"},{"command group.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 3. Special Characters": "abs-guide.txt"},{"": "abs-guide.txt"},{"13": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"(a=hello; echo $a)": "abs-guide.txt"},{"": "abs-guide.txt"},{"A listing of commands within parentheses starts a subshell.": "abs-guide.txt"},{"Variables inside parentheses, within the subshell, are not visible to the rest of the": "abs-guide.txt"},{"script. The parent process, the script, cannot read variables created in the child": "abs-guide.txt"},{"process, the subshell.": "abs-guide.txt"},{"a=123": "abs-guide.txt"},{"( a=321; )": "abs-guide.txt"},{"echo \"a = $a\"": "abs-guide.txt"},{"# a = 123": "abs-guide.txt"},{"# \"a\" within parentheses acts like a local variable.": "abs-guide.txt"},{"": "abs-guide.txt"},{"array initialization.": "abs-guide.txt"},{"Array=(element1 element2 element3)": "abs-guide.txt"},{"": "abs-guide.txt"},{"{xxx,yyy,zzz,...}": "abs-guide.txt"},{"Brace expansion.": "abs-guide.txt"},{"echo \\\"{These,words,are,quoted}\\\"": "abs-guide.txt"},{"# \"These\" \"words\" \"are\" \"quoted\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# \" prefix and suffix": "abs-guide.txt"},{"": "abs-guide.txt"},{"cat {file1,file2,file3} > combined_file": "abs-guide.txt"},{"# Concatenates the files file1, file2, and file3 into combined_file.": "abs-guide.txt"},{"cp file22.{txt,backup}": "abs-guide.txt"},{"# Copies \"file22.txt\" to \"file22.backup\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"A command may act upon a comma-separated list of file specs within braces. [20] Filename": "abs-guide.txt"},{"expansion (globbing) applies to the file specs between the braces.": "abs-guide.txt"},{"No spaces allowed within the braces unless the spaces are quoted or escaped.": "abs-guide.txt"},{"echo {file1,file2}\\ :{\\ A,\" B\",' C'}": "abs-guide.txt"},{"file1 : A file1 : B file1 : C file2 : A file2 : B file2 :": "abs-guide.txt"},{"C": "abs-guide.txt"},{"{a..z}": "abs-guide.txt"},{"Extended Brace expansion.": "abs-guide.txt"},{"echo {a..z} # a b c d e f g h i j k l m n o p q r s t u v w x y z": "abs-guide.txt"},{"# Echoes characters between a and z.": "abs-guide.txt"},{"echo {0..3} # 0 1 2 3": "abs-guide.txt"},{"# Echoes characters between 0 and 3.": "abs-guide.txt"},{"": "abs-guide.txt"},{"base64_charset=( {A..Z} {a..z} {0..9} + / = )": "abs-guide.txt"},{"# Initializing an array, using extended brace expansion.": "abs-guide.txt"},{"# From vladz's \"base64.sh\" example script.": "abs-guide.txt"},{"": "abs-guide.txt"},{"The {a..z} extended brace expansion construction is a feature introduced in version 3 of Bash.": "abs-guide.txt"},{"{}": "abs-guide.txt"},{"Block of code [curly brackets]. Also referred to as an inline group, this construct, in effect, creates": "abs-guide.txt"},{"an anonymous function (a function without a name). However, unlike in a \"standard\" function, the": "abs-guide.txt"},{"Chapter 3. Special Characters": "abs-guide.txt"},{"": "abs-guide.txt"},{"14": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"variables inside a code block remain visible to the remainder of the script.": "abs-guide.txt"},{"bash$ { local a;": "abs-guide.txt"},{"a=123; }": "abs-guide.txt"},{"bash: local: can only be used in a": "abs-guide.txt"},{"function": "abs-guide.txt"},{"": "abs-guide.txt"},{"a=123": "abs-guide.txt"},{"{ a=321; }": "abs-guide.txt"},{"echo \"a = $a\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# a = 321": "abs-guide.txt"},{"": "abs-guide.txt"},{"(value inside code block)": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Thanks, S.C.": "abs-guide.txt"},{"": "abs-guide.txt"},{"The code block enclosed in braces may have I/O redirected to and from it.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 3-1. Code blocks and I/O redirection": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# Reading lines in /etc/fstab.": "abs-guide.txt"},{"File=/etc/fstab": "abs-guide.txt"},{"{": "abs-guide.txt"},{"read line1": "abs-guide.txt"},{"read line2": "abs-guide.txt"},{"} < $File": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"\"First line in $File is:\"": "abs-guide.txt"},{"\"$line1\"": "abs-guide.txt"},{"\"Second line in $File is:\"": "abs-guide.txt"},{"\"$line2\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"# Now, how do you parse the separate fields of each line?": "abs-guide.txt"},{"# Hint: use awk, or . . .": "abs-guide.txt"},{"# . . . Hans-Joerg Diers suggests using the \"set\" Bash builtin.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 3-2. Saving the output of a code block to a file": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# rpm-check.sh": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Queries an rpm file for description, listing,": "abs-guide.txt"},{"and whether it can be installed.": "abs-guide.txt"},{"Saves output to a file.": "abs-guide.txt"},{"This script illustrates using a code block.": "abs-guide.txt"},{"": "abs-guide.txt"},{"SUCCESS=0": "abs-guide.txt"},{"E_NOARGS=65": "abs-guide.txt"},{"if [ -z \"$1\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 3. Special Characters": "abs-guide.txt"},{"": "abs-guide.txt"},{"15": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"echo \"Usage: `basename $0` rpm-file\"": "abs-guide.txt"},{"exit $E_NOARGS": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"{ # Begin code block.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"Archive Description:\"": "abs-guide.txt"},{"rpm -qpi $1": "abs-guide.txt"},{"# Query description.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"Archive Listing:\"": "abs-guide.txt"},{"rpm -qpl $1": "abs-guide.txt"},{"# Query listing.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"rpm -i --test $1 # Query whether rpm file can be installed.": "abs-guide.txt"},{"if [ \"$?\" -eq $SUCCESS ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"$1 can be installed.\"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo \"$1 cannot be installed.\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"# End code block.": "abs-guide.txt"},{"} > \"$1.test\"": "abs-guide.txt"},{"# Redirects output of everything in block to file.": "abs-guide.txt"},{"echo \"Results of rpm test in file $1.test\"": "abs-guide.txt"},{"# See rpm man page for explanation of options.": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Unlike a command group within (parentheses), as above, a code block enclosed by": "abs-guide.txt"},{"{braces} will not normally launch a subshell. [21]": "abs-guide.txt"},{"It is possible to iterate a code block using a non-standard for-loop.": "abs-guide.txt"},{"{}": "abs-guide.txt"},{"placeholder for text. Used after xargs -i (replace strings option). The {} double curly brackets are a": "abs-guide.txt"},{"placeholder for output text.": "abs-guide.txt"},{"ls . | xargs -i -t cp ./{} $1": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^^": "abs-guide.txt"},{"^^": "abs-guide.txt"},{"# From \"ex42.sh\" (copydir.sh) example.": "abs-guide.txt"},{"": "abs-guide.txt"},{"{} \\;": "abs-guide.txt"},{"pathname. Mostly used in find constructs. This is not a shell builtin.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Definition: A pathname is a filename that includes the complete path. As an example,": "abs-guide.txt"},{"/home/bozo/Notes/Thursday/schedule.txt. This is sometimes referred to as the": "abs-guide.txt"},{"absolute path.": "abs-guide.txt"},{"The \";\" ends the -exec option of a find command sequence. It needs to be escaped to": "abs-guide.txt"},{"protect it from interpretation by the shell.": "abs-guide.txt"},{"[]": "abs-guide.txt"},{"test.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 3. Special Characters": "abs-guide.txt"},{"": "abs-guide.txt"},{"16": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"Test expression between [ ]. Note that [ is part of the shell builtin test (and a synonym for it), not a": "abs-guide.txt"},{"link to the external command /usr/bin/test.": "abs-guide.txt"},{"[[ ]]": "abs-guide.txt"},{"test.": "abs-guide.txt"},{"Test expression between [[ ]]. More flexible than the single-bracket [ ] test, this is a shell keyword.": "abs-guide.txt"},{"See the discussion on the [[ ... ]] construct.": "abs-guide.txt"},{"[]": "abs-guide.txt"},{"array element.": "abs-guide.txt"},{"In the context of an array, brackets set off the numbering of each element of that array.": "abs-guide.txt"},{"Array[1]=slot_1": "abs-guide.txt"},{"echo ${Array[1]}": "abs-guide.txt"},{"": "abs-guide.txt"},{"[]": "abs-guide.txt"},{"range of characters.": "abs-guide.txt"},{"As part of a regular expression, brackets delineate a range of characters to match.": "abs-guide.txt"},{"$[ ... ]": "abs-guide.txt"},{"integer expansion.": "abs-guide.txt"},{"Evaluate integer expression between $[ ].": "abs-guide.txt"},{"a=3": "abs-guide.txt"},{"b=7": "abs-guide.txt"},{"echo $[$a+$b]": "abs-guide.txt"},{"echo $[$a*$b]": "abs-guide.txt"},{"": "abs-guide.txt"},{"# 10": "abs-guide.txt"},{"# 21": "abs-guide.txt"},{"": "abs-guide.txt"},{"Note that this usage is deprecated, and has been replaced by the (( ... )) construct.": "abs-guide.txt"},{"(( ))": "abs-guide.txt"},{"integer expansion.": "abs-guide.txt"},{"Expand and evaluate integer expression between (( )).": "abs-guide.txt"},{"See the discussion on the (( ... )) construct.": "abs-guide.txt"},{"> &> >& >> < <>": "abs-guide.txt"},{"redirection.": "abs-guide.txt"},{"scriptname >filename redirects the output of scriptname to file filename. Overwrite": "abs-guide.txt"},{"filename if it already exists.": "abs-guide.txt"},{"": "abs-guide.txt"},{"command &>filename redirects both the stdout and the stderr of command to filename.": "abs-guide.txt"},{"This is useful for suppressing output when testing for a condition. For example, let us": "abs-guide.txt"},{"test whether a certain command exists.": "abs-guide.txt"},{"bash$ type bogus_command &>/dev/null": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 3. Special Characters": "abs-guide.txt"},{"": "abs-guide.txt"},{"17": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"bash$ echo $?": "abs-guide.txt"},{"1": "abs-guide.txt"},{"": "abs-guide.txt"},{"Or in a script:": "abs-guide.txt"},{"command_test () { type \"$1\" &>/dev/null; }": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^": "abs-guide.txt"},{"cmd=rmdir": "abs-guide.txt"},{"# Legitimate command.": "abs-guide.txt"},{"command_test $cmd; echo $?": "abs-guide.txt"},{"# 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"cmd=bogus_command": "abs-guide.txt"},{"# Illegitimate command": "abs-guide.txt"},{"command_test $cmd; echo $?": "abs-guide.txt"},{"# 1": "abs-guide.txt"},{"": "abs-guide.txt"},{"command >&2 redirects stdout of command to stderr.": "abs-guide.txt"},{"scriptname >>filename appends the output of scriptname to file filename. If": "abs-guide.txt"},{"filename does not already exist, it is created.": "abs-guide.txt"},{"": "abs-guide.txt"},{"[i]<>filename opens file filename for reading and writing, and assigns file descriptor i to it. If": "abs-guide.txt"},{"filename does not exist, it is created.": "abs-guide.txt"},{"process substitution.": "abs-guide.txt"},{"(command)>": "abs-guide.txt"},{"<(command)": "abs-guide.txt"},{"In a different context, the \"<\" and \">\" characters act as string comparison operators.": "abs-guide.txt"},{"In yet another context, the \"<\" and \">\" characters act as integer comparison operators. See also": "abs-guide.txt"},{"Example 16-9.": "abs-guide.txt"},{"<<": "abs-guide.txt"},{"redirection used in a here document.": "abs-guide.txt"},{"<<<": "abs-guide.txt"},{"redirection used in a here string.": "abs-guide.txt"},{"<, >": "abs-guide.txt"},{"ASCII comparison.": "abs-guide.txt"},{"veg1=carrots": "abs-guide.txt"},{"veg2=tomatoes": "abs-guide.txt"},{"if [[ \"$veg1\" < \"$veg2\" ]]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Although $veg1 precede $veg2 in the dictionary,\"": "abs-guide.txt"},{"echo -n \"this does not necessarily imply anything \"": "abs-guide.txt"},{"echo \"about my culinary preferences.\"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo \"What kind of dictionary are you using, anyhow?\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"\\<, \\>": "abs-guide.txt"},{"word boundary in a regular expression.": "abs-guide.txt"},{"Chapter 3. Special Characters": "abs-guide.txt"},{"": "abs-guide.txt"},{"18": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"bash$ grep '\\<the\\>' textfile": "abs-guide.txt"},{"|": "abs-guide.txt"},{"pipe. Passes the output (stdout) of a previous command to the input (stdin) of the next one, or to": "abs-guide.txt"},{"the shell. This is a method of chaining commands together.": "abs-guide.txt"},{"echo ls -l | sh": "abs-guide.txt"},{"# Passes the output of \"echo ls -l\" to the shell,": "abs-guide.txt"},{"#+ with the same result as a simple \"ls -l\".": "abs-guide.txt"},{"": "abs-guide.txt"},{"cat *.lst | sort | uniq": "abs-guide.txt"},{"# Merges and sorts all \".lst\" files, then deletes duplicate lines.": "abs-guide.txt"},{"": "abs-guide.txt"},{"A pipe, as a classic method of interprocess communication, sends the stdout of one process to the": "abs-guide.txt"},{"stdin of another. In a typical case, a command, such as cat or echo, pipes a stream of data to a": "abs-guide.txt"},{"filter, a command that transforms its input for processing. [22]": "abs-guide.txt"},{"cat $filename1 $filename2 | grep $search_word": "abs-guide.txt"},{"For an interesting note on the complexity of using UNIX pipes, see the UNIX FAQ, Part 3.": "abs-guide.txt"},{"The output of a command or commands may be piped to a script.": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# uppercase.sh : Changes input to uppercase.": "abs-guide.txt"},{"tr 'a-z' 'A-Z'": "abs-guide.txt"},{"# Letter ranges must be quoted": "abs-guide.txt"},{"#+ to prevent filename generation from single-letter filenames.": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Now, let us pipe the output of ls -l to this script.": "abs-guide.txt"},{"bash$ ls -l | ./uppercase.sh": "abs-guide.txt"},{"-RW-RW-R-1 BOZO BOZO": "abs-guide.txt"},{"-RW-RW-R-1 BOZO BOZO": "abs-guide.txt"},{"-RW-R--R-1 BOZO BOZO": "abs-guide.txt"},{"": "abs-guide.txt"},{"109 APR 7 19:49 1.TXT": "abs-guide.txt"},{"109 APR 14 16:48 2.TXT": "abs-guide.txt"},{"725 APR 20 20:56 DATA-FILE": "abs-guide.txt"},{"": "abs-guide.txt"},{"The stdout of each process in a pipe must be read as the stdin of the next. If this": "abs-guide.txt"},{"is not the case, the data stream will block, and the pipe will not behave as expected.": "abs-guide.txt"},{"cat file1 file2 | ls -l | sort": "abs-guide.txt"},{"# The output from \"cat file1 file2\" disappears.": "abs-guide.txt"},{"": "abs-guide.txt"},{"A pipe runs as a child process, and therefore cannot alter script variables.": "abs-guide.txt"},{"variable=\"initial_value\"": "abs-guide.txt"},{"echo \"new_value\" | read variable": "abs-guide.txt"},{"echo \"variable = $variable\"": "abs-guide.txt"},{"# variable = initial_value": "abs-guide.txt"},{"": "abs-guide.txt"},{"If one of the commands in the pipe aborts, this prematurely terminates execution of the": "abs-guide.txt"},{"pipe. Called a broken pipe, this condition sends a SIGPIPE signal.": "abs-guide.txt"},{">|": "abs-guide.txt"},{"force redirection (even if the noclobber option is set). This will forcibly overwrite an existing file.": "abs-guide.txt"},{"||": "abs-guide.txt"},{"Chapter 3. Special Characters": "abs-guide.txt"},{"": "abs-guide.txt"},{"19": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"OR logical operator. In a test construct, the || operator causes a return of 0 (success) if either of the": "abs-guide.txt"},{"linked test conditions is true.": "abs-guide.txt"},{"&": "abs-guide.txt"},{"Run job in background. A command followed by an & will run in the background.": "abs-guide.txt"},{"bash$ sleep 10 &": "abs-guide.txt"},{"[1] 850": "abs-guide.txt"},{"[1]+ Done": "abs-guide.txt"},{"": "abs-guide.txt"},{"sleep 10": "abs-guide.txt"},{"": "abs-guide.txt"},{"Within a script, commands and even loops may run in the background.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 3-3. Running a loop in the background": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# background-loop.sh": "abs-guide.txt"},{"for i in 1 2 3 4 5 6 7 8 9 10": "abs-guide.txt"},{"# First loop.": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo -n \"$i \"": "abs-guide.txt"},{"done & # Run this loop in background.": "abs-guide.txt"},{"# Will sometimes execute after second loop.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"# This 'echo' sometimes will not display.": "abs-guide.txt"},{"": "abs-guide.txt"},{"for i in 11 12 13 14 15 16 17 18 19 20": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo -n \"$i \"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Second loop.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# This 'echo' sometimes will not display.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# ======================================================": "abs-guide.txt"},{"# The expected output from the script:": "abs-guide.txt"},{"# 1 2 3 4 5 6 7 8 9 10": "abs-guide.txt"},{"# 11 12 13 14 15 16 17 18 19 20": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Sometimes, though, you get:": "abs-guide.txt"},{"11 12 13 14 15 16 17 18 19 20": "abs-guide.txt"},{"1 2 3 4 5 6 7 8 9 10 bozo $": "abs-guide.txt"},{"(The second 'echo' doesn't execute. Why?)": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Occasionally also:": "abs-guide.txt"},{"# 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20": "abs-guide.txt"},{"# (The first 'echo' doesn't execute. Why?)": "abs-guide.txt"},{"# Very rarely something like:": "abs-guide.txt"},{"# 11 12 13 1 2 3 4 5 6 7 8 9 10 14 15 16 17 18 19 20": "abs-guide.txt"},{"# The foreground loop preempts the background one.": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"# Nasimuddin Ansari suggests adding": "abs-guide.txt"},{"sleep 1": "abs-guide.txt"},{"#+ after the": "abs-guide.txt"},{"echo -n \"$i\"": "abs-guide.txt"},{"in lines 6 and 14,": "abs-guide.txt"},{"#+ for some real fun.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 3. Special Characters": "abs-guide.txt"},{"": "abs-guide.txt"},{"20": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"A command run in the background within a script may cause the script to hang,": "abs-guide.txt"},{"waiting for a keystroke. Fortunately, there is a remedy for this.": "abs-guide.txt"},{"&&": "abs-guide.txt"},{"AND logical operator. In a test construct, the && operator causes a return of 0 (success) only if both": "abs-guide.txt"},{"the linked test conditions are true.": "abs-guide.txt"},{"option, prefix. Option flag for a command or filter. Prefix for an operator. Prefix for a default": "abs-guide.txt"},{"parameter in parameter substitution.": "abs-guide.txt"},{"COMMAND -[Option1][Option2][...]": "abs-guide.txt"},{"ls -al": "abs-guide.txt"},{"sort -dfu $filename": "abs-guide.txt"},{"if [ $file1 -ot $file2 ]": "abs-guide.txt"},{"then #": "abs-guide.txt"},{"^": "abs-guide.txt"},{"echo \"File $file1 is older than $file2.\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"if [ \"$a\" -eq \"$b\" ]": "abs-guide.txt"},{"then #": "abs-guide.txt"},{"^": "abs-guide.txt"},{"echo \"$a is equal to $b.\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"if [ \"$c\" -eq 24 -a \"$d\" -eq 47 ]": "abs-guide.txt"},{"then #": "abs-guide.txt"},{"^": "abs-guide.txt"},{"^": "abs-guide.txt"},{"echo \"$c equals 24 and $d equals 47.\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"param2=${param1:-$DEFAULTVAL}": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^": "abs-guide.txt"},{"": "abs-guide.txt"},{"-The double-dash -- prefixes long (verbatim) options to commands.": "abs-guide.txt"},{"sort --ignore-leading-blanks": "abs-guide.txt"},{"Used with a Bash builtin, it means the end of options to that particular command.": "abs-guide.txt"},{"This provides a handy means of removing files whose names begin with a dash.": "abs-guide.txt"},{"bash$ ls -l": "abs-guide.txt"},{"-rw-r--r-- 1 bozo bozo 0 Nov 25 12:29 -badname": "abs-guide.txt"},{"": "abs-guide.txt"},{"bash$ rm -- -badname": "abs-guide.txt"},{"bash$ ls -l": "abs-guide.txt"},{"total 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"The double-dash is also used in conjunction with set.": "abs-guide.txt"},{"set -- $variable (as in Example 15-18)": "abs-guide.txt"},{"Chapter 3. Special Characters": "abs-guide.txt"},{"": "abs-guide.txt"},{"21": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"redirection from/to stdin or stdout [dash].": "abs-guide.txt"},{"bash$ cat abc": "abs-guide.txt"},{"abc": "abs-guide.txt"},{"...": "abs-guide.txt"},{"Ctl-D": "abs-guide.txt"},{"": "abs-guide.txt"},{"As expected, cat - echoes stdin, in this case keyboarded user input, to stdout. But, does I/O": "abs-guide.txt"},{"redirection using - have real-world applications?": "abs-guide.txt"},{"(cd /source/directory && tar cf - . ) | (cd /dest/directory && tar xpvf -)": "abs-guide.txt"},{"# Move entire file tree from one directory to another": "abs-guide.txt"},{"# [courtesy Alan Cox <a.cox@swansea.ac.uk>, with a minor change]": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"1) cd /source/directory": "abs-guide.txt"},{"Source directory, where the files to be moved are.": "abs-guide.txt"},{"2) &&": "abs-guide.txt"},{"\"And-list\": if the 'cd' operation successful,": "abs-guide.txt"},{"then execute the next command.": "abs-guide.txt"},{"3) tar cf - .": "abs-guide.txt"},{"The 'c' option 'tar' archiving command creates a new archive,": "abs-guide.txt"},{"the 'f' (file) option, followed by '-' designates the target file": "abs-guide.txt"},{"as stdout, and do it in current directory tree ('.').": "abs-guide.txt"},{"4) |": "abs-guide.txt"},{"Piped to ...": "abs-guide.txt"},{"5) ( ... )": "abs-guide.txt"},{"a subshell": "abs-guide.txt"},{"6) cd /dest/directory": "abs-guide.txt"},{"Change to the destination directory.": "abs-guide.txt"},{"7) &&": "abs-guide.txt"},{"\"And-list\", as above": "abs-guide.txt"},{"8) tar xpvf Unarchive ('x'), preserve ownership and file permissions ('p'),": "abs-guide.txt"},{"and send verbose messages to stdout ('v'),": "abs-guide.txt"},{"reading data from stdin ('f' followed by '-').": "abs-guide.txt"},{"Note that 'x' is a command, and 'p', 'v', 'f' are options.": "abs-guide.txt"},{"Whew!": "abs-guide.txt"},{"": "abs-guide.txt"},{"# More elegant than, but equivalent to:": "abs-guide.txt"},{"#": "abs-guide.txt"},{"cd source/directory": "abs-guide.txt"},{"#": "abs-guide.txt"},{"tar cf - . | (cd ../dest/directory; tar xpvf -)": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Also having same effect:": "abs-guide.txt"},{"# cp -a /source/directory/* /dest/directory": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Or:": "abs-guide.txt"},{"# cp -a /source/directory/* /source/directory/.[^.]* /dest/directory": "abs-guide.txt"},{"#": "abs-guide.txt"},{"If there are hidden files in /source/directory.": "abs-guide.txt"},{"bunzip2 -c linux-2.6.16.tar.bz2 | tar xvf # --uncompress tar file-| --then pass it to \"tar\"-# If \"tar\" has not been patched to handle \"bunzip2\",": "abs-guide.txt"},{"#+ this needs to be done in two discrete steps, using a pipe.": "abs-guide.txt"},{"# The purpose of the exercise is to unarchive \"bzipped\" kernel source.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 3. Special Characters": "abs-guide.txt"},{"": "abs-guide.txt"},{"22": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"Note that in this context the \"-\" is not itself a Bash operator, but rather an option recognized by certain": "abs-guide.txt"},{"UNIX utilities that write to stdout, such as tar, cat, etc.": "abs-guide.txt"},{"bash$ echo \"whatever\" | cat whatever": "abs-guide.txt"},{"": "abs-guide.txt"},{"Where a filename is expected, - redirects output to stdout (sometimes seen with tar cf), or": "abs-guide.txt"},{"accepts input from stdin, rather than from a file. This is a method of using a file-oriented utility as": "abs-guide.txt"},{"a filter in a pipe.": "abs-guide.txt"},{"bash$ file": "abs-guide.txt"},{"Usage: file [-bciknvzL] [-f namefile] [-m magicfiles] file...": "abs-guide.txt"},{"": "abs-guide.txt"},{"By itself on the command-line, file fails with an error message.": "abs-guide.txt"},{"Add a \"-\" for a more useful result. This causes the shell to await user input.": "abs-guide.txt"},{"bash$ file abc": "abs-guide.txt"},{"standard input:": "abs-guide.txt"},{"": "abs-guide.txt"},{"ASCII text": "abs-guide.txt"},{"": "abs-guide.txt"},{"bash$ file #!/bin/bash": "abs-guide.txt"},{"standard input:": "abs-guide.txt"},{"": "abs-guide.txt"},{"Bourne-Again shell script text executable": "abs-guide.txt"},{"": "abs-guide.txt"},{"Now the command accepts input from stdin and analyzes it.": "abs-guide.txt"},{"The \"-\" can be used to pipe stdout to other commands. This permits such stunts as prepending lines": "abs-guide.txt"},{"to a file.": "abs-guide.txt"},{"Using diff to compare a file with a section of another:": "abs-guide.txt"},{"grep Linux file1 | diff file2 Finally, a real-world example using - with tar.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 3-4. Backup of all files changed in last day": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# Backs up all files in current directory modified within last 24 hours": "abs-guide.txt"},{"#+ in a \"tarball\" (tarred and gzipped file).": "abs-guide.txt"},{"BACKUPFILE=backup-$(date +%m-%d-%Y)": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Embeds date in backup filename.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Thanks, Joshua Tschida, for the idea.": "abs-guide.txt"},{"archive=${1:-$BACKUPFILE}": "abs-guide.txt"},{"# If no backup-archive filename specified on command-line,": "abs-guide.txt"},{"#+ it will default to \"backup-MM-DD-YYYY.tar.gz.\"": "abs-guide.txt"},{"tar cvf - `find . -mtime -1 -type f -print` > $archive.tar": "abs-guide.txt"},{"gzip $archive.tar": "abs-guide.txt"},{"echo \"Directory $PWD backed up in archive file \\\"$archive.tar.gz\\\".\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 3. Special Characters": "abs-guide.txt"},{"": "abs-guide.txt"},{"23": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# Stephane Chazelas points out that the above code will fail": "abs-guide.txt"},{"#+ if there are too many files found": "abs-guide.txt"},{"#+ or if any filenames contain blank characters.": "abs-guide.txt"},{"# He suggests the following alternatives:": "abs-guide.txt"},{"# ------------------------------------------------------------------#": "abs-guide.txt"},{"find . -mtime -1 -type f -print0 | xargs -0 tar rvf \"$archive.tar\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"using the GNU version of \"find\".": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"find . -mtime -1 -type f -exec tar rvf \"$archive.tar\" '{}' \\;": "abs-guide.txt"},{"#": "abs-guide.txt"},{"portable to other UNIX flavors, but much slower.": "abs-guide.txt"},{"# -------------------------------------------------------------------": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Filenames beginning with \"-\" may cause problems when coupled with the \"-\"": "abs-guide.txt"},{"redirection operator. A script should check for this and add an appropriate prefix to": "abs-guide.txt"},{"such filenames, for example ./-FILENAME, $PWD/-FILENAME, or": "abs-guide.txt"},{"$PATHNAME/-FILENAME.": "abs-guide.txt"},{"If the value of a variable begins with a -, this may likewise create problems.": "abs-guide.txt"},{"var=\"-n\"": "abs-guide.txt"},{"echo $var": "abs-guide.txt"},{"# Has the effect of \"echo -n\", and outputs nothing.": "abs-guide.txt"},{"": "abs-guide.txt"},{"previous working directory. A cd - command changes to the previous working directory. This uses": "abs-guide.txt"},{"the $OLDPWD environmental variable.": "abs-guide.txt"},{"Do not confuse the \"-\" used in this sense with the \"-\" redirection operator just": "abs-guide.txt"},{"discussed. The interpretation of the \"-\" depends on the context in which it appears.": "abs-guide.txt"},{"Minus. Minus sign in an arithmetic operation.": "abs-guide.txt"},{"=": "abs-guide.txt"},{"Equals. Assignment operator": "abs-guide.txt"},{"a=28": "abs-guide.txt"},{"echo $a": "abs-guide.txt"},{"": "abs-guide.txt"},{"# 28": "abs-guide.txt"},{"": "abs-guide.txt"},{"In a different context, the \"=\" is a string comparison operator.": "abs-guide.txt"},{"+": "abs-guide.txt"},{"Plus. Addition arithmetic operator.": "abs-guide.txt"},{"In a different context, the + is a Regular Expression operator.": "abs-guide.txt"},{"+": "abs-guide.txt"},{"Option. Option flag for a command or filter.": "abs-guide.txt"},{"Certain commands and builtins use the + to enable certain options and the - to disable them. In": "abs-guide.txt"},{"parameter substitution, the + prefixes an alternate value that a variable expands to.": "abs-guide.txt"},{"%": "abs-guide.txt"},{"modulo. Modulo (remainder of a division) arithmetic operation.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 3. Special Characters": "abs-guide.txt"},{"": "abs-guide.txt"},{"24": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"let \"z = 5 % 3\"": "abs-guide.txt"},{"echo $z # 2": "abs-guide.txt"},{"": "abs-guide.txt"},{"In a different context, the % is a pattern matching operator.": "abs-guide.txt"},{"~": "abs-guide.txt"},{"home directory [tilde]. This corresponds to the $HOME internal variable. ~bozo is bozo's home": "abs-guide.txt"},{"directory, and ls ~bozo lists the contents of it. ~/ is the current user's home directory, and ls ~/ lists the": "abs-guide.txt"},{"contents of it.": "abs-guide.txt"},{"bash$ echo ~bozo": "abs-guide.txt"},{"/home/bozo": "abs-guide.txt"},{"bash$ echo ~": "abs-guide.txt"},{"/home/bozo": "abs-guide.txt"},{"bash$ echo ~/": "abs-guide.txt"},{"/home/bozo/": "abs-guide.txt"},{"bash$ echo ~:": "abs-guide.txt"},{"/home/bozo:": "abs-guide.txt"},{"bash$ echo ~nonexistent-user": "abs-guide.txt"},{"~nonexistent-user": "abs-guide.txt"},{"": "abs-guide.txt"},{"~+": "abs-guide.txt"},{"current working directory. This corresponds to the $PWD internal variable.": "abs-guide.txt"},{"~previous working directory. This corresponds to the $OLDPWD internal variable.": "abs-guide.txt"},{"=~": "abs-guide.txt"},{"regular expression match. This operator was introduced with version 3 of Bash.": "abs-guide.txt"},{"^": "abs-guide.txt"},{"beginning-of-line. In a regular expression, a \"^\" addresses the beginning of a line of text.": "abs-guide.txt"},{"^, ^^": "abs-guide.txt"},{"Uppercase conversion in parameter substitution (added in version 4 of Bash).": "abs-guide.txt"},{"Control Characters": "abs-guide.txt"},{"change the behavior of the terminal or text display. A control character is a CONTROL + key": "abs-guide.txt"},{"combination (pressed simultaneously). A control character may also be written in octal or": "abs-guide.txt"},{"hexadecimal notation, following an escape.": "abs-guide.txt"},{"Control characters are not normally useful inside a script.": "abs-guide.txt"},{"\u25ca Ctl-A": "abs-guide.txt"},{"Moves cursor to beginning of line of text (on the command-line).": "abs-guide.txt"},{"\u25ca Ctl-B": "abs-guide.txt"},{"Backspace (nondestructive).": "abs-guide.txt"},{"\u25ca": "abs-guide.txt"},{"Ctl-C": "abs-guide.txt"},{"Break. Terminate a foreground job.": "abs-guide.txt"},{"\u25ca": "abs-guide.txt"},{"Ctl-D": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 3. Special Characters": "abs-guide.txt"},{"": "abs-guide.txt"},{"25": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"Log out from a shell (similar to exit).": "abs-guide.txt"},{"EOF (end-of-file). This also terminates input from stdin.": "abs-guide.txt"},{"When typing text on the console or in an xterm window, Ctl-D erases the character under": "abs-guide.txt"},{"the cursor. When there are no characters present, Ctl-D logs out of the session, as expected.": "abs-guide.txt"},{"In an xterm window, this has the effect of closing the window.": "abs-guide.txt"},{"\u25ca Ctl-E": "abs-guide.txt"},{"Moves cursor to end of line of text (on the command-line).": "abs-guide.txt"},{"\u25ca Ctl-F": "abs-guide.txt"},{"Moves cursor forward one character position (on the command-line).": "abs-guide.txt"},{"\u25ca": "abs-guide.txt"},{"Ctl-G": "abs-guide.txt"},{"BEL. On some old-time teletype terminals, this would actually ring a bell. In an xterm it": "abs-guide.txt"},{"might beep.": "abs-guide.txt"},{"\u25ca": "abs-guide.txt"},{"Ctl-H": "abs-guide.txt"},{"Rubout (destructive backspace). Erases characters the cursor backs over while backspacing.": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# Embedding Ctl-H in a string.": "abs-guide.txt"},{"a=\"^H^H\"": "abs-guide.txt"},{"echo \"abcdef\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo -n \"abcdef$a \"": "abs-guide.txt"},{"# Space at end ^": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo -n \"abcdef$a\"": "abs-guide.txt"},{"# No space at end": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Two Ctl-H's -- backspaces": "abs-guide.txt"},{"# ctl-V ctl-H, using vi/vim": "abs-guide.txt"},{"# abcdef": "abs-guide.txt"},{"# abcd f": "abs-guide.txt"},{"^ Backspaces twice.": "abs-guide.txt"},{"# abcdef": "abs-guide.txt"},{"^ Doesn't backspace (why?).": "abs-guide.txt"},{"# Results may not be quite as expected.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo; echo": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Constantin Hagemeier suggests trying:": "abs-guide.txt"},{"a=$'\\010\\010'": "abs-guide.txt"},{"a=$'\\b\\b'": "abs-guide.txt"},{"a=$'\\x08\\x08'": "abs-guide.txt"},{"But, this does not change the results.": "abs-guide.txt"},{"": "abs-guide.txt"},{"########################################": "abs-guide.txt"},{"# Now, try this.": "abs-guide.txt"},{"rubout=\"^H^H^H^H^H\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# 5 x Ctl-H.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo -n \"12345678\"": "abs-guide.txt"},{"sleep 2": "abs-guide.txt"},{"echo -n \"$rubout\"": "abs-guide.txt"},{"sleep 2": "abs-guide.txt"},{"": "abs-guide.txt"},{"\u25ca Ctl-I": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 3. Special Characters": "abs-guide.txt"},{"": "abs-guide.txt"},{"26": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"Horizontal tab.": "abs-guide.txt"},{"\u25ca": "abs-guide.txt"},{"Ctl-J": "abs-guide.txt"},{"Newline (line feed). In a script, may also be expressed in octal notation -- '\\012' or in": "abs-guide.txt"},{"hexadecimal -- '\\x0a'.": "abs-guide.txt"},{"\u25ca Ctl-K": "abs-guide.txt"},{"Vertical tab.": "abs-guide.txt"},{"When typing text on the console or in an xterm window, Ctl-K erases from the character": "abs-guide.txt"},{"under the cursor to end of line. Within a script, Ctl-K may behave differently, as in Lee Lee": "abs-guide.txt"},{"Maschmeyer's example, below.": "abs-guide.txt"},{"\u25ca Ctl-L": "abs-guide.txt"},{"Formfeed (clear the terminal screen). In a terminal, this has the same effect as the clear": "abs-guide.txt"},{"command. When sent to a printer, a Ctl-L causes an advance to end of the paper sheet.": "abs-guide.txt"},{"\u25ca": "abs-guide.txt"},{"Ctl-M": "abs-guide.txt"},{"Carriage return.": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# Thank you, Lee Maschmeyer, for this example.": "abs-guide.txt"},{"read -n 1 -s -p \\": "abs-guide.txt"},{"$'Control-M leaves cursor at beginning of this line. Press Enter. \\x0d'": "abs-guide.txt"},{"# Of course, '0d' is the hex equivalent of Control-M.": "abs-guide.txt"},{"echo >&2": "abs-guide.txt"},{"# The '-s' makes anything typed silent,": "abs-guide.txt"},{"#+ so it is necessary to go to new line explicitly.": "abs-guide.txt"},{"read -n 1 -s -p $'Control-J leaves cursor on next line. \\x0a'": "abs-guide.txt"},{"# '0a' is the hex equivalent of Control-J, linefeed.": "abs-guide.txt"},{"echo >&2": "abs-guide.txt"},{"###": "abs-guide.txt"},{"read -n 1 -s -p $'And Control-K\\x0bgoes straight down.'": "abs-guide.txt"},{"echo >&2": "abs-guide.txt"},{"# Control-K is vertical tab.": "abs-guide.txt"},{"# A better example of the effect of a vertical tab is:": "abs-guide.txt"},{"var=$'\\x0aThis is the bottom line\\x0bThis is the top line\\x0a'": "abs-guide.txt"},{"echo \"$var\"": "abs-guide.txt"},{"# This works the same way as the above example. However:": "abs-guide.txt"},{"echo \"$var\" | col": "abs-guide.txt"},{"# This causes the right end of the line to be higher than the left end.": "abs-guide.txt"},{"# It also explains why we started and ended with a line feed -#+ to avoid a garbled screen.": "abs-guide.txt"},{"# As Lee Maschmeyer explains:": "abs-guide.txt"},{"# -------------------------# In the [first vertical tab example] . . . the vertical tab": "abs-guide.txt"},{"#+ makes the printing go straight down without a carriage return.": "abs-guide.txt"},{"# This is true only on devices, such as the Linux console,": "abs-guide.txt"},{"#+ that can't go \"backward.\"": "abs-guide.txt"},{"# The real purpose of VT is to go straight UP, not down.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 3. Special Characters": "abs-guide.txt"},{"": "abs-guide.txt"},{"27": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"It can be used to print superscripts on a printer.": "abs-guide.txt"},{"The col utility can be used to emulate the proper behavior of VT.": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"\u25ca Ctl-N": "abs-guide.txt"},{"Erases a line of text recalled from history buffer [23] (on the command-line).": "abs-guide.txt"},{"\u25ca Ctl-O": "abs-guide.txt"},{"Issues a newline (on the command-line).": "abs-guide.txt"},{"\u25ca Ctl-P": "abs-guide.txt"},{"Recalls last command from history buffer (on the command-line).": "abs-guide.txt"},{"\u25ca Ctl-Q": "abs-guide.txt"},{"Resume (XON).": "abs-guide.txt"},{"This resumes stdin in a terminal.": "abs-guide.txt"},{"\u25ca Ctl-R": "abs-guide.txt"},{"Backwards search for text in history buffer (on the command-line).": "abs-guide.txt"},{"\u25ca Ctl-S": "abs-guide.txt"},{"Suspend (XOFF).": "abs-guide.txt"},{"This freezes stdin in a terminal. (Use Ctl-Q to restore input.)": "abs-guide.txt"},{"\u25ca Ctl-T": "abs-guide.txt"},{"Reverses the position of the character the cursor is on with the previous character (on the": "abs-guide.txt"},{"command-line).": "abs-guide.txt"},{"\u25ca Ctl-U": "abs-guide.txt"},{"Erase a line of input, from the cursor backward to beginning of line. In some settings, Ctl-U": "abs-guide.txt"},{"erases the entire line of input, regardless of cursor position.": "abs-guide.txt"},{"\u25ca Ctl-V": "abs-guide.txt"},{"When inputting text, Ctl-V permits inserting control characters. For example, the following": "abs-guide.txt"},{"two are equivalent:": "abs-guide.txt"},{"echo -e '\\x0a'": "abs-guide.txt"},{"echo <Ctl-V><Ctl-J>": "abs-guide.txt"},{"": "abs-guide.txt"},{"Ctl-V is primarily useful from within a text editor.": "abs-guide.txt"},{"\u25ca Ctl-W": "abs-guide.txt"},{"When typing text on the console or in an xterm window, Ctl-W erases from the character": "abs-guide.txt"},{"under the cursor backwards to the first instance of whitespace. In some settings, Ctl-W": "abs-guide.txt"},{"erases backwards to first non-alphanumeric character.": "abs-guide.txt"},{"\u25ca Ctl-X": "abs-guide.txt"},{"In certain word processing programs, Cuts highlighted text and copies to clipboard.": "abs-guide.txt"},{"\u25ca Ctl-Y": "abs-guide.txt"},{"Chapter 3. Special Characters": "abs-guide.txt"},{"": "abs-guide.txt"},{"28": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"Pastes back text previously erased (with Ctl-U or Ctl-W).": "abs-guide.txt"},{"\u25ca Ctl-Z": "abs-guide.txt"},{"Pauses a foreground job.": "abs-guide.txt"},{"Substitute operation in certain word processing applications.": "abs-guide.txt"},{"EOF (end-of-file) character in the MSDOS filesystem.": "abs-guide.txt"},{"Whitespace": "abs-guide.txt"},{"functions as a separator between commands and/or variables. Whitespace consists of either": "abs-guide.txt"},{"spaces, tabs, blank lines, or any combination thereof. [24] In some contexts, such as variable": "abs-guide.txt"},{"assignment, whitespace is not permitted, and results in a syntax error.": "abs-guide.txt"},{"Blank lines have no effect on the action of a script, and are therefore useful for visually separating": "abs-guide.txt"},{"functional sections.": "abs-guide.txt"},{"$IFS, the special variable separating fields of input to certain commands. It defaults to whitespace.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Definition: A field is a discrete chunk of data expressed as a string of consecutive characters.": "abs-guide.txt"},{"Separating each field from adjacent fields is either whitespace or some other designated character": "abs-guide.txt"},{"(often determined by the $IFS). In some contexts, a field may be called a record.": "abs-guide.txt"},{"To preserve whitespace within a string or in a variable, use quoting.": "abs-guide.txt"},{"UNIX filters can target and operate on whitespace using the POSIX character class [:space:].": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 3. Special Characters": "abs-guide.txt"},{"": "abs-guide.txt"},{"29": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fChapter 4. Introduction to Variables and": "abs-guide.txt"},{"Parameters": "abs-guide.txt"},{"Variables are how programming and scripting languages represent data. A variable is nothing more than a": "abs-guide.txt"},{"label, a name assigned to a location or set of locations in computer memory holding an item of data.": "abs-guide.txt"},{"Variables appear in arithmetic operations and manipulation of quantities, and in string parsing.": "abs-guide.txt"},{"": "abs-guide.txt"},{"4.1. Variable Substitution": "abs-guide.txt"},{"The name of a variable is a placeholder for its value, the data it holds. Referencing (retrieving) its value is": "abs-guide.txt"},{"called variable substitution.": "abs-guide.txt"},{"$": "abs-guide.txt"},{"Let us carefully distinguish between the name of a variable and its value. If variable1 is the name": "abs-guide.txt"},{"of a variable, then $variable1 is a reference to its value, the data item it contains. [25]": "abs-guide.txt"},{"bash$ variable1=23": "abs-guide.txt"},{"": "abs-guide.txt"},{"bash$ echo variable1": "abs-guide.txt"},{"variable1": "abs-guide.txt"},{"bash$ echo $variable1": "abs-guide.txt"},{"23": "abs-guide.txt"},{"": "abs-guide.txt"},{"The only times a variable appears \"naked\" -- without the $ prefix -- is when declared or assigned,": "abs-guide.txt"},{"when unset, when exported, in an arithmetic expression within double parentheses (( ... )), or in the": "abs-guide.txt"},{"special case of a variable representing a signal (see Example 32-5). Assignment may be with an = (as": "abs-guide.txt"},{"in var1=27), in a read statement, and at the head of a loop (for var2 in 1 2 3).": "abs-guide.txt"},{"Enclosing a referenced value in double quotes (\" ... \") does not interfere with variable substitution.": "abs-guide.txt"},{"This is called partial quoting, sometimes referred to as \"weak quoting.\" Using single quotes (' ... ')": "abs-guide.txt"},{"causes the variable name to be used literally, and no substitution will take place. This is full quoting,": "abs-guide.txt"},{"sometimes referred to as 'strong quoting.' See Chapter 5 for a detailed discussion.": "abs-guide.txt"},{"Note that $variable is actually a simplified form of ${variable}. In contexts where the": "abs-guide.txt"},{"$variable syntax causes an error, the longer form may work (see Section 10.2, below).": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 4-1. Variable assignment and substitution": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# ex9.sh": "abs-guide.txt"},{"# Variables: assignment and substitution": "abs-guide.txt"},{"a=375": "abs-guide.txt"},{"hello=$a": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^ ^": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 4. Introduction to Variables and Parameters": "abs-guide.txt"},{"": "abs-guide.txt"},{"30": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"#------------------------------------------------------------------------# No space permitted on either side of = sign when initializing variables.": "abs-guide.txt"},{"# What happens if there is a space?": "abs-guide.txt"},{"# \"VARIABLE =value\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^": "abs-guide.txt"},{"#% Script tries to run \"VARIABLE\" command with one argument, \"=value\".": "abs-guide.txt"},{"# \"VARIABLE= value\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^": "abs-guide.txt"},{"#% Script tries to run \"value\" command with": "abs-guide.txt"},{"#+ the environmental variable \"VARIABLE\" set to \"\".": "abs-guide.txt"},{"#-------------------------------------------------------------------------": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo hello": "abs-guide.txt"},{"# hello": "abs-guide.txt"},{"# Not a variable reference, just the string \"hello\" ...": "abs-guide.txt"},{"echo $hello": "abs-guide.txt"},{"# 375": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^": "abs-guide.txt"},{"This *is* a variable reference.": "abs-guide.txt"},{"echo ${hello} # 375": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Likewise a variable reference, as above.": "abs-guide.txt"},{"# Quoting . . .": "abs-guide.txt"},{"echo \"$hello\"": "abs-guide.txt"},{"echo \"${hello}\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# 375": "abs-guide.txt"},{"# 375": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"hello=\"A B C": "abs-guide.txt"},{"D\"": "abs-guide.txt"},{"echo $hello": "abs-guide.txt"},{"# A B C D": "abs-guide.txt"},{"echo \"$hello\" # A B C": "abs-guide.txt"},{"D": "abs-guide.txt"},{"# As we see, echo $hello": "abs-guide.txt"},{"and": "abs-guide.txt"},{"echo \"$hello\"": "abs-guide.txt"},{"# =======================================": "abs-guide.txt"},{"# Quoting a variable preserves whitespace.": "abs-guide.txt"},{"# =======================================": "abs-guide.txt"},{"": "abs-guide.txt"},{"give different results.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo '$hello' # $hello": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^": "abs-guide.txt"},{"^": "abs-guide.txt"},{"# Variable referencing disabled (escaped) by single quotes,": "abs-guide.txt"},{"#+ which causes the \"$\" to be interpreted literally.": "abs-guide.txt"},{"# Notice the effect of different types of quoting.": "abs-guide.txt"},{"": "abs-guide.txt"},{"hello=": "abs-guide.txt"},{"# Setting it to a null value.": "abs-guide.txt"},{"echo \"\\$hello (null value) = $hello\"": "abs-guide.txt"},{"# $hello (null value) =": "abs-guide.txt"},{"# Note that setting a variable to a null value is not the same as": "abs-guide.txt"},{"#+ unsetting it, although the end result is the same (see below).": "abs-guide.txt"},{"# -------------------------------------------------------------# It is permissible to set multiple variables on the same line,": "abs-guide.txt"},{"#+ if separated by white space.": "abs-guide.txt"},{"# Caution, this may reduce legibility, and may not be portable.": "abs-guide.txt"},{"var1=21 var2=22": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"var1=$var1": "abs-guide.txt"},{"": "abs-guide.txt"},{"var3=$V3": "abs-guide.txt"},{"var2=$var2": "abs-guide.txt"},{"": "abs-guide.txt"},{"var3=$var3\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 4. Introduction to Variables and Parameters": "abs-guide.txt"},{"": "abs-guide.txt"},{"31": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# May cause problems with legacy versions of \"sh\" . . .": "abs-guide.txt"},{"# -------------------------------------------------------------echo; echo": "abs-guide.txt"},{"numbers=\"one two three\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^": "abs-guide.txt"},{"^": "abs-guide.txt"},{"other_numbers=\"1 2 3\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^ ^": "abs-guide.txt"},{"# If there is whitespace embedded within a variable,": "abs-guide.txt"},{"#+ then quotes are necessary.": "abs-guide.txt"},{"# other_numbers=1 2 3": "abs-guide.txt"},{"# Gives an error message.": "abs-guide.txt"},{"echo \"numbers = $numbers\"": "abs-guide.txt"},{"echo \"other_numbers = $other_numbers\"": "abs-guide.txt"},{"# other_numbers = 1 2 3": "abs-guide.txt"},{"# Escaping the whitespace also works.": "abs-guide.txt"},{"mixed_bag=2\\ ---\\ Whatever": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^": "abs-guide.txt"},{"^ Space after escape (\\).": "abs-guide.txt"},{"echo \"$mixed_bag\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# 2 --- Whatever": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo; echo": "abs-guide.txt"},{"echo \"uninitialized_variable = $uninitialized_variable\"": "abs-guide.txt"},{"# Uninitialized variable has null value (no value at all!).": "abs-guide.txt"},{"uninitialized_variable=": "abs-guide.txt"},{"# Declaring, but not initializing it -#+ same as setting it to a null value, as above.": "abs-guide.txt"},{"echo \"uninitialized_variable = $uninitialized_variable\"": "abs-guide.txt"},{"# It still has a null value.": "abs-guide.txt"},{"uninitialized_variable=23": "abs-guide.txt"},{"# Set it.": "abs-guide.txt"},{"unset uninitialized_variable": "abs-guide.txt"},{"# Unset it.": "abs-guide.txt"},{"echo \"uninitialized_variable = $uninitialized_variable\"": "abs-guide.txt"},{"# uninitialized_variable =": "abs-guide.txt"},{"# It still has a null value.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"An uninitialized variable has a \"null\" value -- no assigned value at all (not zero!).": "abs-guide.txt"},{"if [ -z \"$unassigned\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"\\$unassigned is NULL.\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# $unassigned is NULL.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Using a variable before assigning a value to it may cause problems. It is nevertheless": "abs-guide.txt"},{"possible to perform arithmetic operations on an uninitialized variable.": "abs-guide.txt"},{"echo \"$uninitialized\"": "abs-guide.txt"},{"let \"uninitialized += 5\"": "abs-guide.txt"},{"echo \"$uninitialized\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# (blank line)": "abs-guide.txt"},{"# Add 5 to it.": "abs-guide.txt"},{"# 5": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Conclusion:": "abs-guide.txt"},{"# An uninitialized variable has no value,": "abs-guide.txt"},{"#+ however it evaluates as 0 in an arithmetic operation.": "abs-guide.txt"},{"": "abs-guide.txt"},{"See also Example 15-23.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 4. Introduction to Variables and Parameters": "abs-guide.txt"},{"": "abs-guide.txt"},{"32": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"": "abs-guide.txt"},{"4.2. Variable Assignment": "abs-guide.txt"},{"=": "abs-guide.txt"},{"the assignment operator (no space before and after)": "abs-guide.txt"},{"Do not confuse this with = and -eq, which test, rather than assign!": "abs-guide.txt"},{"Note that = can be either an assignment or a test operator, depending on context.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 4-2. Plain Variable Assignment": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# Naked variables": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"# When is a variable \"naked\", i.e., lacking the '$' in front?": "abs-guide.txt"},{"# When it is being assigned, rather than referenced.": "abs-guide.txt"},{"# Assignment": "abs-guide.txt"},{"a=879": "abs-guide.txt"},{"echo \"The value of \\\"a\\\" is $a.\"": "abs-guide.txt"},{"# Assignment using 'let'": "abs-guide.txt"},{"let a=16+5": "abs-guide.txt"},{"echo \"The value of \\\"a\\\" is now $a.\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"# In a 'for' loop (really, a type of disguised assignment):": "abs-guide.txt"},{"echo -n \"Values of \\\"a\\\" in the loop are: \"": "abs-guide.txt"},{"for a in 7 8 9 11": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo -n \"$a \"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"# In": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"read": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"a 'read' statement (also a type of assignment):": "abs-guide.txt"},{"-n \"Enter \\\"a\\\" \"": "abs-guide.txt"},{"a": "abs-guide.txt"},{"\"The value of \\\"a\\\" is now $a.\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 4-3. Variable Assignment, plain and fancy": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"a=23": "abs-guide.txt"},{"echo $a": "abs-guide.txt"},{"b=$a": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Simple case": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 4. Introduction to Variables and Parameters": "abs-guide.txt"},{"": "abs-guide.txt"},{"33": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"echo $b": "abs-guide.txt"},{"# Now, getting a little bit fancier (command substitution).": "abs-guide.txt"},{"a=`echo Hello!`": "abs-guide.txt"},{"# Assigns result of 'echo' command to 'a' ...": "abs-guide.txt"},{"echo $a": "abs-guide.txt"},{"# Note that including an exclamation mark (!) within a": "abs-guide.txt"},{"#+ command substitution construct will not work from the command-line,": "abs-guide.txt"},{"#+ since this triggers the Bash \"history mechanism.\"": "abs-guide.txt"},{"# Inside a script, however, the history functions are disabled by default.": "abs-guide.txt"},{"a=`ls -l`": "abs-guide.txt"},{"echo $a": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"$a\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Assigns result of 'ls -l' command to 'a'": "abs-guide.txt"},{"# Unquoted, however, it removes tabs and newlines.": "abs-guide.txt"},{"# The quoted variable preserves whitespace.": "abs-guide.txt"},{"# (See the chapter on \"Quoting.\")": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Variable assignment using the $(...) mechanism (a newer method than backquotes). This is likewise a": "abs-guide.txt"},{"form of command substitution.": "abs-guide.txt"},{"# From /etc/rc.d/rc.local": "abs-guide.txt"},{"R=$(cat /etc/redhat-release)": "abs-guide.txt"},{"arch=$(uname -m)": "abs-guide.txt"},{"": "abs-guide.txt"},{"4.3. Bash Variables Are Untyped": "abs-guide.txt"},{"Unlike many other programming languages, Bash does not segregate its variables by \"type.\" Essentially, Bash": "abs-guide.txt"},{"variables are character strings, but, depending on context, Bash permits arithmetic operations and": "abs-guide.txt"},{"comparisons on variables. The determining factor is whether the value of a variable contains only digits.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 4-4. Integer or string?": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# int-or-string.sh": "abs-guide.txt"},{"a=2334": "abs-guide.txt"},{"let \"a += 1\"": "abs-guide.txt"},{"echo \"a = $a \"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Integer.": "abs-guide.txt"},{"": "abs-guide.txt"},{"b=${a/23/BB}": "abs-guide.txt"},{"echo \"b = $b\"": "abs-guide.txt"},{"declare -i b": "abs-guide.txt"},{"echo \"b = $b\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"let \"b += 1\"": "abs-guide.txt"},{"echo \"b = $b\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"# BB35 + 1": "abs-guide.txt"},{"# b = 1": "abs-guide.txt"},{"# Bash sets the \"integer value\" of a string to 0.": "abs-guide.txt"},{"": "abs-guide.txt"},{"c=BB34": "abs-guide.txt"},{"echo \"c = $c\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# c = BB34": "abs-guide.txt"},{"": "abs-guide.txt"},{"# a = 2335": "abs-guide.txt"},{"# Integer, still.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Substitute \"BB\" for \"23\".": "abs-guide.txt"},{"This transforms $b into a string.": "abs-guide.txt"},{"b = BB35": "abs-guide.txt"},{"Declaring it an integer doesn't help.": "abs-guide.txt"},{"b = BB35": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 4. Introduction to Variables and Parameters": "abs-guide.txt"},{"": "abs-guide.txt"},{"34": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"d=${c/BB/23}": "abs-guide.txt"},{"echo \"d = $d\"": "abs-guide.txt"},{"let \"d += 1\"": "abs-guide.txt"},{"echo \"d = $d\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Substitute \"23\" for \"BB\".": "abs-guide.txt"},{"This makes $d an integer.": "abs-guide.txt"},{"d = 2334": "abs-guide.txt"},{"2334 + 1": "abs-guide.txt"},{"d = 2335": "abs-guide.txt"},{"": "abs-guide.txt"},{"# What about null variables?": "abs-guide.txt"},{"e=''": "abs-guide.txt"},{"# ... Or e=\"\" ... Or e=": "abs-guide.txt"},{"echo \"e = $e\"": "abs-guide.txt"},{"# e =": "abs-guide.txt"},{"let \"e += 1\"": "abs-guide.txt"},{"# Arithmetic operations allowed on a null variable?": "abs-guide.txt"},{"echo \"e = $e\"": "abs-guide.txt"},{"# e = 1": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"# Null variable transformed into an integer.": "abs-guide.txt"},{"# What about undeclared variables?": "abs-guide.txt"},{"echo \"f = $f\"": "abs-guide.txt"},{"# f =": "abs-guide.txt"},{"let \"f += 1\"": "abs-guide.txt"},{"# Arithmetic operations allowed?": "abs-guide.txt"},{"echo \"f = $f\"": "abs-guide.txt"},{"# f = 1": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"# Undeclared variable transformed into an integer.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# However ...": "abs-guide.txt"},{"let \"f /= $undecl_var\"": "abs-guide.txt"},{"# Divide by zero?": "abs-guide.txt"},{"#": "abs-guide.txt"},{"let: f /= : syntax error: operand expected (error token is \" \")": "abs-guide.txt"},{"# Syntax error! Variable $undecl_var is not set to zero here!": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# But still ...": "abs-guide.txt"},{"let \"f /= 0\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"let: f /= 0: division by 0 (error token is \"0\")": "abs-guide.txt"},{"# Expected behavior.": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Bash": "abs-guide.txt"},{"when": "abs-guide.txt"},{"But,": "abs-guide.txt"},{"It's": "abs-guide.txt"},{"": "abs-guide.txt"},{"(usually) sets the \"integer value\" of null to zero": "abs-guide.txt"},{"performing an arithmetic operation.": "abs-guide.txt"},{"don't try this at home, folks!": "abs-guide.txt"},{"undocumented and probably non-portable behavior.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Conclusion: Variables in Bash are untyped,": "abs-guide.txt"},{"#+ with all attendant consequences.": "abs-guide.txt"},{"exit $?": "abs-guide.txt"},{"": "abs-guide.txt"},{"Untyped variables are both a blessing and a curse. They permit more flexibility in scripting and make it easier": "abs-guide.txt"},{"to grind out lines of code (and give you enough rope to hang yourself!). However, they likewise permit subtle": "abs-guide.txt"},{"errors to creep in and encourage sloppy programming habits.": "abs-guide.txt"},{"To lighten the burden of keeping track of variable types in a script, Bash does permit declaring variables.": "abs-guide.txt"},{"": "abs-guide.txt"},{"4.4. Special Variable Types": "abs-guide.txt"},{"Local variables": "abs-guide.txt"},{"Variables visible only within a code block or function (see also local variables in functions)": "abs-guide.txt"},{"Environmental variables": "abs-guide.txt"},{"Variables that affect the behavior of the shell and user interface": "abs-guide.txt"},{"In a more general context, each process has an \"environment\", that is, a group of": "abs-guide.txt"},{"variables that the process may reference. In this sense, the shell behaves like any other": "abs-guide.txt"},{"Chapter 4. Introduction to Variables and Parameters": "abs-guide.txt"},{"": "abs-guide.txt"},{"35": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"process.": "abs-guide.txt"},{"Every time a shell starts, it creates shell variables that correspond to its own": "abs-guide.txt"},{"environmental variables. Updating or adding new environmental variables causes the": "abs-guide.txt"},{"shell to update its environment, and all the shell's child processes (the commands it": "abs-guide.txt"},{"executes) inherit this environment.": "abs-guide.txt"},{"The space allotted to the environment is limited. Creating too many environmental": "abs-guide.txt"},{"variables or ones that use up excessive space may cause problems.": "abs-guide.txt"},{"bash$ eval \"`seq 10000 | sed -e 's/.*/export var&=ZZZZZZZZZZZZZZ/'`\"": "abs-guide.txt"},{"bash$ du": "abs-guide.txt"},{"bash: /usr/bin/du: Argument list too long": "abs-guide.txt"},{"": "abs-guide.txt"},{"Note: this \"error\" has been fixed, as of kernel version 2.6.23.": "abs-guide.txt"},{"(Thank you, St\u00e9phane Chazelas for the clarification, and for providing the above": "abs-guide.txt"},{"example.)": "abs-guide.txt"},{"If a script sets environmental variables, they need to be \"exported,\" that is, reported to the": "abs-guide.txt"},{"environment local to the script. This is the function of the export command.": "abs-guide.txt"},{"": "abs-guide.txt"},{"A script can export variables only to child processes, that is, only to commands or": "abs-guide.txt"},{"processes which that particular script initiates. A script invoked from the": "abs-guide.txt"},{"command-line cannot export variables back to the command-line environment.": "abs-guide.txt"},{"Child processes cannot export variables back to the parent processes that spawned": "abs-guide.txt"},{"them.": "abs-guide.txt"},{"Definition: A child process is a subprocess launched by another process, its": "abs-guide.txt"},{"parent.": "abs-guide.txt"},{"Positional parameters": "abs-guide.txt"},{"Arguments passed to the script from the command line [26] : $0, $1, $2, $3 . . .": "abs-guide.txt"},{"$0 is the name of the script itself, $1 is the first argument, $2 the second, $3 the third, and so forth.": "abs-guide.txt"},{"[27] After $9, the arguments must be enclosed in brackets, for example, ${10}, ${11}, ${12}.": "abs-guide.txt"},{"The special variables $* and $@ denote all the positional parameters.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 4-5. Positional Parameters": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# Call this script with at least 10 parameters, for example": "abs-guide.txt"},{"# ./scriptname 1 2 3 4 5 6 7 8 9 10": "abs-guide.txt"},{"MINPARAMS=10": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"The name of this script is \\\"$0\\\".\"": "abs-guide.txt"},{"# Adds ./ for current directory": "abs-guide.txt"},{"echo \"The name of this script is \\\"`basename $0`\\\".\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 4. Introduction to Variables and Parameters": "abs-guide.txt"},{"": "abs-guide.txt"},{"36": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# Strips out path name info (see 'basename')": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"if [ -n \"$1\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Parameter #1 is $1\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Tested variable is quoted.": "abs-guide.txt"},{"# Need quotes to escape #": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [ -n \"$2\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Parameter #2 is $2\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"if [ -n \"$3\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Parameter #3 is $3\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# ...": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [ -n \"${10}\" ] # Parameters > $9 must be enclosed in {brackets}.": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Parameter #10 is ${10}\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"echo \"-----------------------------------\"": "abs-guide.txt"},{"echo \"All the command-line parameters are: \"$*\"\"": "abs-guide.txt"},{"if [ $# -lt \"$MINPARAMS\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"This script needs at least $MINPARAMS command-line arguments!\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Bracket notation for positional parameters leads to a fairly simple way of referencing the last": "abs-guide.txt"},{"argument passed to a script on the command-line. This also requires indirect referencing.": "abs-guide.txt"},{"": "abs-guide.txt"},{"args=$#": "abs-guide.txt"},{"# Number of args passed.": "abs-guide.txt"},{"lastarg=${!args}": "abs-guide.txt"},{"# Note: This is an *indirect reference* to $args ...": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Or:": "abs-guide.txt"},{"lastarg=${!#}": "abs-guide.txt"},{"(Thanks, Chris Monson.)": "abs-guide.txt"},{"# This is an *indirect reference* to the $# variable.": "abs-guide.txt"},{"# Note that lastarg=${!$#} doesn't work.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Some scripts can perform different operations, depending on which name they are invoked with. For": "abs-guide.txt"},{"this to work, the script needs to check $0, the name it was invoked by. [28] There must also exist": "abs-guide.txt"},{"symbolic links to all the alternate names of the script. See Example 16-2.": "abs-guide.txt"},{"": "abs-guide.txt"},{"If a script expects a command-line parameter but is invoked without one, this may": "abs-guide.txt"},{"cause a null variable assignment, generally an undesirable result. One way to prevent": "abs-guide.txt"},{"this is to append an extra character to both sides of the assignment statement using the": "abs-guide.txt"},{"Chapter 4. Introduction to Variables and Parameters": "abs-guide.txt"},{"": "abs-guide.txt"},{"37": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"expected positional parameter.": "abs-guide.txt"},{"variable1_=$1_ # Rather than variable1=$1": "abs-guide.txt"},{"# This will prevent an error, even if positional parameter is absent.": "abs-guide.txt"},{"critical_argument01=$variable1_": "abs-guide.txt"},{"# The extra character can be stripped off later, like so.": "abs-guide.txt"},{"variable1=${variable1_/_/}": "abs-guide.txt"},{"# Side effects only if $variable1_ begins with an underscore.": "abs-guide.txt"},{"# This uses one of the parameter substitution templates discussed later.": "abs-guide.txt"},{"# (Leaving out the replacement pattern results in a deletion.)": "abs-guide.txt"},{"# A more straightforward way of dealing with this is": "abs-guide.txt"},{"#+ to simply test whether expected positional parameters have been passed.": "abs-guide.txt"},{"if [ -z $1 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"exit $E_MISSING_POS_PARAM": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"However, as Fabian Kreutz points out,": "abs-guide.txt"},{"the above method may have unexpected side-effects.": "abs-guide.txt"},{"A better method is parameter substitution:": "abs-guide.txt"},{"${1:-$DefaultVal}": "abs-guide.txt"},{"See the \"Parameter Substition\" section": "abs-guide.txt"},{"in the \"Variables Revisited\" chapter.": "abs-guide.txt"},{"": "abs-guide.txt"},{"---": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 4-6. wh, whois domain name lookup": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# ex18.sh": "abs-guide.txt"},{"# Does a 'whois domain-name' lookup on any of 3 alternate servers:": "abs-guide.txt"},{"#": "abs-guide.txt"},{"ripe.net, cw.net, radb.net": "abs-guide.txt"},{"# Place this script -- renamed 'wh' -- in /usr/local/bin": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Requires symbolic links:": "abs-guide.txt"},{"ln -s /usr/local/bin/wh /usr/local/bin/wh-ripe": "abs-guide.txt"},{"ln -s /usr/local/bin/wh /usr/local/bin/wh-apnic": "abs-guide.txt"},{"ln -s /usr/local/bin/wh /usr/local/bin/wh-tucows": "abs-guide.txt"},{"": "abs-guide.txt"},{"E_NOARGS=75": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [ -z \"$1\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Usage: `basename $0` [domain-name]\"": "abs-guide.txt"},{"exit $E_NOARGS": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# Check script": "abs-guide.txt"},{"case `basename": "abs-guide.txt"},{"\"wh\"": "abs-guide.txt"},{"\"wh-ripe\"": "abs-guide.txt"},{"\"wh-apnic\"": "abs-guide.txt"},{"\"wh-cw\"": "abs-guide.txt"},{"*": "abs-guide.txt"},{"": "abs-guide.txt"},{"name and call proper server.": "abs-guide.txt"},{"$0` in": "abs-guide.txt"},{"# Or:": "abs-guide.txt"},{"case ${0##*/} in": "abs-guide.txt"},{") whois $1@whois.tucows.com;;": "abs-guide.txt"},{") whois $1@whois.ripe.net;;": "abs-guide.txt"},{") whois $1@whois.apnic.net;;": "abs-guide.txt"},{") whois $1@whois.cw.net;;": "abs-guide.txt"},{") echo \"Usage: `basename $0` [domain-name]\";;": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 4. Introduction to Variables and Parameters": "abs-guide.txt"},{"": "abs-guide.txt"},{"38": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"exit $?": "abs-guide.txt"},{"": "abs-guide.txt"},{"---": "abs-guide.txt"},{"": "abs-guide.txt"},{"The shift command reassigns the positional parameters, in effect shifting them to the left one notch.": "abs-guide.txt"},{"$1 <--- $2, $2 <--- $3, $3 <--- $4, etc.": "abs-guide.txt"},{"The old $1 disappears, but $0 (the script name) does not change. If you use a large number of": "abs-guide.txt"},{"positional parameters to a script, shift lets you access those past 10, although {bracket} notation also": "abs-guide.txt"},{"permits this.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 4-7. Using shift": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# shft.sh: Using 'shift' to step through all the positional parameters.": "abs-guide.txt"},{"# Name this script something like shft.sh,": "abs-guide.txt"},{"#+ and invoke it with some parameters.": "abs-guide.txt"},{"#+ For example:": "abs-guide.txt"},{"#": "abs-guide.txt"},{"sh shft.sh a b c def 83 barndoor": "abs-guide.txt"},{"until [ -z \"$1\" ]": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo -n \"$1 \"": "abs-guide.txt"},{"shift": "abs-guide.txt"},{"done": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Until all parameters used up . . .": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Extra linefeed.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# But, what happens to the \"used-up\" parameters?": "abs-guide.txt"},{"echo \"$2\"": "abs-guide.txt"},{"# Nothing echoes!": "abs-guide.txt"},{"# When $2 shifts into $1 (and there is no $3 to shift into $2)": "abs-guide.txt"},{"#+ then $2 remains empty.": "abs-guide.txt"},{"# So, it is not a parameter *copy*, but a *move*.": "abs-guide.txt"},{"exit": "abs-guide.txt"},{"# See also the echo-params.sh script for a \"shiftless\"": "abs-guide.txt"},{"#+ alternative method of stepping through the positional params.": "abs-guide.txt"},{"": "abs-guide.txt"},{"The shift command can take a numerical parameter indicating how many positions to shift.": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# shift-past.sh": "abs-guide.txt"},{"shift 3": "abs-guide.txt"},{"# Shift 3 positions.": "abs-guide.txt"},{"# n=3; shift $n": "abs-guide.txt"},{"# Has the same effect.": "abs-guide.txt"},{"echo \"$1\"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"# ======================== #": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 4. Introduction to Variables and Parameters": "abs-guide.txt"},{"": "abs-guide.txt"},{"39": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"": "abs-guide.txt"},{"$ sh shift-past.sh 1 2 3 4 5": "abs-guide.txt"},{"4": "abs-guide.txt"},{"# However, as Eleni Fragkiadaki, points out,": "abs-guide.txt"},{"#+ attempting a 'shift' past the number of": "abs-guide.txt"},{"#+ positional parameters ($#) returns an exit status of 1,": "abs-guide.txt"},{"#+ and the positional parameters themselves do not change.": "abs-guide.txt"},{"# This means possibly getting stuck in an endless loop. . . .": "abs-guide.txt"},{"# For example:": "abs-guide.txt"},{"#": "abs-guide.txt"},{"until [ -z \"$1\" ]": "abs-guide.txt"},{"#": "abs-guide.txt"},{"do": "abs-guide.txt"},{"#": "abs-guide.txt"},{"echo -n \"$1 \"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"shift 20": "abs-guide.txt"},{"# If less than 20 pos params,": "abs-guide.txt"},{"#": "abs-guide.txt"},{"done": "abs-guide.txt"},{"#+ then loop never ends!": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# When in doubt, add a sanity check. . . .": "abs-guide.txt"},{"#": "abs-guide.txt"},{"shift 20 || break": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^^^^^^^^": "abs-guide.txt"},{"": "abs-guide.txt"},{"The shift command works in a similar fashion on parameters passed to a function. See": "abs-guide.txt"},{"Example 36-18.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 4. Introduction to Variables and Parameters": "abs-guide.txt"},{"": "abs-guide.txt"},{"40": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fChapter 5. Quoting": "abs-guide.txt"},{"Quoting means just that, bracketing a string in quotes. This has the effect of protecting special characters in": "abs-guide.txt"},{"the string from reinterpretation or expansion by the shell or shell script. (A character is \"special\" if it has an": "abs-guide.txt"},{"interpretation other than its literal meaning. For example, the asterisk * represents a wild card character in": "abs-guide.txt"},{"globbing and Regular Expressions).": "abs-guide.txt"},{"bash$ ls -l [Vv]*": "abs-guide.txt"},{"-rw-rw-r-1 bozo bozo": "abs-guide.txt"},{"-rw-rw-r-1 bozo bozo": "abs-guide.txt"},{"-rw-rw-r-1 bozo bozo": "abs-guide.txt"},{"": "abs-guide.txt"},{"324 Apr 2 15:05 VIEWDATA.BAT": "abs-guide.txt"},{"507 May 4 14:25 vartrace.sh": "abs-guide.txt"},{"539 Apr 14 17:11 viewdata.sh": "abs-guide.txt"},{"": "abs-guide.txt"},{"bash$ ls -l '[Vv]*'": "abs-guide.txt"},{"ls: [Vv]*: No such file or directory": "abs-guide.txt"},{"": "abs-guide.txt"},{"In everyday speech or writing, when we \"quote\" a phrase, we set it apart and give it special meaning. In a": "abs-guide.txt"},{"Bash script, when we quote a string, we set it apart and protect its literal meaning.": "abs-guide.txt"},{"Certain programs and utilities reinterpret or expand special characters in a quoted string. An important use of": "abs-guide.txt"},{"quoting is protecting a command-line parameter from the shell, but still letting the calling program expand it.": "abs-guide.txt"},{"bash$ grep '[Ff]irst' *.txt": "abs-guide.txt"},{"file1.txt:This is the first line of file1.txt.": "abs-guide.txt"},{"file2.txt:This is the First line of file2.txt.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Note that the unquoted grep [Ff]irst *.txt works under the Bash shell. [29]": "abs-guide.txt"},{"Quoting can also suppress echo's \"appetite\" for newlines.": "abs-guide.txt"},{"bash$ echo $(ls -l)": "abs-guide.txt"},{"total 8 -rw-rw-r-- 1 bo bo 13 Aug 21 12:57 t.sh -rw-rw-r-- 1 bo bo 78 Aug 21 12:57 u.sh": "abs-guide.txt"},{"": "abs-guide.txt"},{"bash$ echo \"$(ls -l)\"": "abs-guide.txt"},{"total 8": "abs-guide.txt"},{"-rw-rw-r-- 1 bo bo 13 Aug 21 12:57 t.sh": "abs-guide.txt"},{"-rw-rw-r-- 1 bo bo 78 Aug 21 12:57 u.sh": "abs-guide.txt"},{"": "abs-guide.txt"},{"5.1. Quoting Variables": "abs-guide.txt"},{"When referencing a variable, it is generally advisable to enclose its name in double quotes. This prevents": "abs-guide.txt"},{"reinterpretation of all special characters within the quoted string -- except $, ` (backquote), and \\ (escape). [30]": "abs-guide.txt"},{"Keeping $ as a special character within double quotes permits referencing a quoted variable": "abs-guide.txt"},{"(\"$variable\"), that is, replacing the variable with its value (see Example 4-1, above).": "abs-guide.txt"},{"": "abs-guide.txt"},{"Use double quotes to prevent word splitting. [31] An argument enclosed in double quotes presents itself as a": "abs-guide.txt"},{"single word, even if it contains whitespace separators.": "abs-guide.txt"},{"": "abs-guide.txt"},{"List=\"one two three\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 5. Quoting": "abs-guide.txt"},{"": "abs-guide.txt"},{"41": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"for a in $List": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo \"$a\"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"# one": "abs-guide.txt"},{"# two": "abs-guide.txt"},{"# three": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Splits the variable in parts at whitespace.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo \"---\"": "abs-guide.txt"},{"for a in \"$List\"": "abs-guide.txt"},{"do #": "abs-guide.txt"},{"^": "abs-guide.txt"},{"^": "abs-guide.txt"},{"echo \"$a\"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"# one two three": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Preserves whitespace in a single variable.": "abs-guide.txt"},{"": "abs-guide.txt"},{"A more elaborate example:": "abs-guide.txt"},{"variable1=\"a variable containing five words\"": "abs-guide.txt"},{"COMMAND This is $variable1": "abs-guide.txt"},{"# Executes COMMAND with 7 arguments:": "abs-guide.txt"},{"# \"This\" \"is\" \"a\" \"variable\" \"containing\" \"five\" \"words\"": "abs-guide.txt"},{"COMMAND \"This is $variable1\" # Executes COMMAND with 1 argument:": "abs-guide.txt"},{"# \"This is a variable containing five words\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"variable2=\"\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Empty.": "abs-guide.txt"},{"": "abs-guide.txt"},{"COMMAND $variable2 $variable2 $variable2": "abs-guide.txt"},{"# Executes COMMAND with no arguments.": "abs-guide.txt"},{"COMMAND \"$variable2\" \"$variable2\" \"$variable2\"": "abs-guide.txt"},{"# Executes COMMAND with 3 empty arguments.": "abs-guide.txt"},{"COMMAND \"$variable2 $variable2 $variable2\"": "abs-guide.txt"},{"# Executes COMMAND with 1 argument (2 spaces).": "abs-guide.txt"},{"# Thanks, St\u00e9phane Chazelas.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Enclosing the arguments to an echo statement in double quotes is necessary only when word splitting or": "abs-guide.txt"},{"preservation of whitespace is an issue.": "abs-guide.txt"},{"Example 5-1. Echoing Weird Variables": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# weirdvars.sh: Echoing weird variables.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"var=\"'(]\\\\{}\\$\\\"\"": "abs-guide.txt"},{"echo $var": "abs-guide.txt"},{"# '(]\\{}$\"": "abs-guide.txt"},{"echo \"$var\"": "abs-guide.txt"},{"# '(]\\{}$\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"Doesn't make a difference.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"IFS='\\'": "abs-guide.txt"},{"echo $var": "abs-guide.txt"},{"echo \"$var\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# '(] {}$\"": "abs-guide.txt"},{"# '(]\\{}$\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"\\ converted to space. Why?": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Examples above supplied by Stephane Chazelas.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 5. Quoting": "abs-guide.txt"},{"": "abs-guide.txt"},{"42": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"var2=\"\\\\\\\\\\\"\"": "abs-guide.txt"},{"echo $var2": "abs-guide.txt"},{"#": "abs-guide.txt"},{"\"": "abs-guide.txt"},{"echo \"$var2\"": "abs-guide.txt"},{"# \\\\\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"# But ... var2=\"\\\\\\\\\"\" is illegal. Why?": "abs-guide.txt"},{"var3='\\\\\\\\'": "abs-guide.txt"},{"echo \"$var3\"": "abs-guide.txt"},{"# \\\\\\\\": "abs-guide.txt"},{"# Strong quoting works, though.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# ************************************************************ #": "abs-guide.txt"},{"# As the first example above shows, nesting quotes is permitted.": "abs-guide.txt"},{"echo \"$(echo '\"')\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^": "abs-guide.txt"},{"^": "abs-guide.txt"},{"": "abs-guide.txt"},{"# \"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# At times this comes in useful.": "abs-guide.txt"},{"var1=\"Two bits\"": "abs-guide.txt"},{"echo \"\\$var1 = \"$var1\"\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^": "abs-guide.txt"},{"^": "abs-guide.txt"},{"": "abs-guide.txt"},{"# $var1 = Two bits": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Or, as Chris Hiestand points out ...": "abs-guide.txt"},{"if [[ \"$(du \"$My_File1\")\" -gt \"$(du \"$My_File2\")\" ]]": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^": "abs-guide.txt"},{"^": "abs-guide.txt"},{"^ ^": "abs-guide.txt"},{"^": "abs-guide.txt"},{"^": "abs-guide.txt"},{"^ ^": "abs-guide.txt"},{"then": "abs-guide.txt"},{"...": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# ************************************************************ #": "abs-guide.txt"},{"": "abs-guide.txt"},{"Single quotes (' ') operate similarly to double quotes, but do not permit referencing variables, since the special": "abs-guide.txt"},{"meaning of $ is turned off. Within single quotes, every special character except ' gets interpreted literally.": "abs-guide.txt"},{"Consider single quotes (\"full quoting\") to be a stricter method of quoting than double quotes (\"partial": "abs-guide.txt"},{"quoting\").": "abs-guide.txt"},{"Since even the escape character (\\) gets a literal interpretation within single quotes, trying to enclose a": "abs-guide.txt"},{"single quote within single quotes will not yield the expected result.": "abs-guide.txt"},{"echo \"Why can't I write 's between single quotes\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"# The roundabout method.": "abs-guide.txt"},{"echo 'Why can'\\''t I write '\"'\"'s between single quotes'": "abs-guide.txt"},{"#": "abs-guide.txt"},{"|-------| |----------|": "abs-guide.txt"},{"|-----------------------|": "abs-guide.txt"},{"# Three single-quoted strings, with escaped and quoted single quotes between.": "abs-guide.txt"},{"# This example courtesy of St\u00e9phane Chazelas.": "abs-guide.txt"},{"": "abs-guide.txt"},{"5.2. Escaping": "abs-guide.txt"},{"Escaping is a method of quoting single characters. The escape (\\) preceding a character tells the shell to": "abs-guide.txt"},{"interpret that character literally.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 5. Quoting": "abs-guide.txt"},{"": "abs-guide.txt"},{"43": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"With certain commands and utilities, such as echo and sed, escaping a character may have the opposite": "abs-guide.txt"},{"effect - it can toggle on a special meaning for that character.": "abs-guide.txt"},{"Special meanings of certain escaped characters": "abs-guide.txt"},{"used with echo and sed": "abs-guide.txt"},{"\\n": "abs-guide.txt"},{"means newline": "abs-guide.txt"},{"\\r": "abs-guide.txt"},{"means return": "abs-guide.txt"},{"\\t": "abs-guide.txt"},{"means tab": "abs-guide.txt"},{"\\v": "abs-guide.txt"},{"means vertical tab": "abs-guide.txt"},{"\\b": "abs-guide.txt"},{"means backspace": "abs-guide.txt"},{"\\a": "abs-guide.txt"},{"means alert (beep or flash)": "abs-guide.txt"},{"\\0xx": "abs-guide.txt"},{"translates to the octal ASCII equivalent of 0nn, where nn is a string of digits": "abs-guide.txt"},{"": "abs-guide.txt"},{"The $' ... ' quoted string-expansion construct is a mechanism that uses escaped": "abs-guide.txt"},{"octal or hex values to assign ASCII characters to variables, e.g., quote=$'\\042'.": "abs-guide.txt"},{"Example 5-2. Escaped Characters": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# escaped.sh: escaped characters": "abs-guide.txt"},{"#############################################################": "abs-guide.txt"},{"### First, let's show some basic escaped-character usage. ###": "abs-guide.txt"},{"#############################################################": "abs-guide.txt"},{"# Escaping a newline.": "abs-guide.txt"},{"# -----------------echo \"\"": "abs-guide.txt"},{"echo \"This will print": "abs-guide.txt"},{"as two lines.\"": "abs-guide.txt"},{"# This will print": "abs-guide.txt"},{"# as two lines.": "abs-guide.txt"},{"echo \"This will print \\": "abs-guide.txt"},{"as one line.\"": "abs-guide.txt"},{"# This will print as one line.": "abs-guide.txt"},{"echo; echo": "abs-guide.txt"},{"echo \"=============\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo \"\\v\\v\\v\\v\"": "abs-guide.txt"},{"# Prints \\v\\v\\v\\v literally.": "abs-guide.txt"},{"# Use the -e option with 'echo' to print escaped characters.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 5. Quoting": "abs-guide.txt"},{"": "abs-guide.txt"},{"44": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"\"=============\"": "abs-guide.txt"},{"\"VERTICAL TABS\"": "abs-guide.txt"},{"-e \"\\v\\v\\v\\v\"": "abs-guide.txt"},{"# Prints 4 vertical tabs.": "abs-guide.txt"},{"\"==============\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo \"QUOTATION MARK\"": "abs-guide.txt"},{"echo -e \"\\042\"": "abs-guide.txt"},{"# Prints \" (quote, octal ASCII character 42).": "abs-guide.txt"},{"echo \"==============\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# The $'\\X' construct makes the -e option unnecessary.": "abs-guide.txt"},{"echo; echo \"NEWLINE and (maybe) BEEP\"": "abs-guide.txt"},{"echo $'\\n'": "abs-guide.txt"},{"# Newline.": "abs-guide.txt"},{"echo $'\\a'": "abs-guide.txt"},{"# Alert (beep).": "abs-guide.txt"},{"# May only flash, not beep, depending on terminal.": "abs-guide.txt"},{"# We have seen $'\\nnn\" string expansion, and now . . .": "abs-guide.txt"},{"# =================================================================== #": "abs-guide.txt"},{"# Version 2 of Bash introduced the $'\\nnn' string expansion construct.": "abs-guide.txt"},{"# =================================================================== #": "abs-guide.txt"},{"echo \"Introducing the \\$\\' ... \\' string-expansion construct . . . \"": "abs-guide.txt"},{"echo \". . . featuring more quotation marks.\"": "abs-guide.txt"},{"echo $'\\t \\042 \\t'": "abs-guide.txt"},{"# Quote (\") framed by tabs.": "abs-guide.txt"},{"# Note that '\\nnn' is an octal value.": "abs-guide.txt"},{"# It also works with hexadecimal values, in an $'\\xhhh' construct.": "abs-guide.txt"},{"echo $'\\t \\x22 \\t' # Quote (\") framed by tabs.": "abs-guide.txt"},{"# Thank you, Greg Keraunen, for pointing this out.": "abs-guide.txt"},{"# Earlier Bash versions allowed '\\x022'.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Assigning ASCII characters to a variable.": "abs-guide.txt"},{"# ---------------------------------------quote=$'\\042'": "abs-guide.txt"},{"# \" assigned to a variable.": "abs-guide.txt"},{"echo \"$quote Quoted string $quote and this lies outside the quotes.\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"# Concatenating ASCII chars in a variable.": "abs-guide.txt"},{"triple_underline=$'\\137\\137\\137' # 137 is octal ASCII code for '_'.": "abs-guide.txt"},{"echo \"$triple_underline UNDERLINE $triple_underline\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"ABC=$'\\101\\102\\103\\010'": "abs-guide.txt"},{"echo $ABC": "abs-guide.txt"},{"": "abs-guide.txt"},{"# 101, 102, 103 are octal A, B, C.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"escape=$'\\033'": "abs-guide.txt"},{"# 033 is octal for escape.": "abs-guide.txt"},{"echo \"\\\"escape\\\" echoes as $escape\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"no visible output.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 5. Quoting": "abs-guide.txt"},{"": "abs-guide.txt"},{"45": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"A more elaborate example:": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 5-3. Detecting key-presses": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# Author: Sigurd Solaas, 20 Apr 2011": "abs-guide.txt"},{"# Used in ABS Guide with permission.": "abs-guide.txt"},{"# Requires version 4.2+ of Bash.": "abs-guide.txt"},{"key=\"no value yet\"": "abs-guide.txt"},{"while true; do": "abs-guide.txt"},{"clear": "abs-guide.txt"},{"echo \"Bash Extra Keys Demo. Keys to try:\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"* Insert, Delete, Home, End, Page_Up and Page_Down\"": "abs-guide.txt"},{"echo \"* The four arrow keys\"": "abs-guide.txt"},{"echo \"* Tab, enter, escape, and space key\"": "abs-guide.txt"},{"echo \"* The letter and number keys, etc.\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"": "abs-guide.txt"},{"d = show date/time\"": "abs-guide.txt"},{"echo \"": "abs-guide.txt"},{"q = quit\"": "abs-guide.txt"},{"echo \"================================\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"# Convert the separate home-key to home-key_num_7:": "abs-guide.txt"},{"if [ \"$key\" = $'\\x1b\\x4f\\x48' ]; then": "abs-guide.txt"},{"key=$'\\x1b\\x5b\\x31\\x7e'": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Quoted string-expansion construct.": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# Convert the separate end-key to end-key_num_1.": "abs-guide.txt"},{"if [ \"$key\" = $'\\x1b\\x4f\\x46' ]; then": "abs-guide.txt"},{"key=$'\\x1b\\x5b\\x34\\x7e'": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"case \"$key\" in": "abs-guide.txt"},{"$'\\x1b\\x5b\\x32\\x7e') # Insert": "abs-guide.txt"},{"echo Insert Key": "abs-guide.txt"},{";;": "abs-guide.txt"},{"$'\\x1b\\x5b\\x33\\x7e') # Delete": "abs-guide.txt"},{"echo Delete Key": "abs-guide.txt"},{";;": "abs-guide.txt"},{"$'\\x1b\\x5b\\x31\\x7e') # Home_key_num_7": "abs-guide.txt"},{"echo Home Key": "abs-guide.txt"},{";;": "abs-guide.txt"},{"$'\\x1b\\x5b\\x34\\x7e') # End_key_num_1": "abs-guide.txt"},{"echo End Key": "abs-guide.txt"},{";;": "abs-guide.txt"},{"$'\\x1b\\x5b\\x35\\x7e') # Page_Up": "abs-guide.txt"},{"echo Page_Up": "abs-guide.txt"},{";;": "abs-guide.txt"},{"$'\\x1b\\x5b\\x36\\x7e') # Page_Down": "abs-guide.txt"},{"echo Page_Down": "abs-guide.txt"},{";;": "abs-guide.txt"},{"$'\\x1b\\x5b\\x41') # Up_arrow": "abs-guide.txt"},{"echo Up arrow": "abs-guide.txt"},{";;": "abs-guide.txt"},{"$'\\x1b\\x5b\\x42') # Down_arrow": "abs-guide.txt"},{"echo Down arrow": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 5. Quoting": "abs-guide.txt"},{"": "abs-guide.txt"},{"46": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{";;": "abs-guide.txt"},{"$'\\x1b\\x5b\\x43') # Right_arrow": "abs-guide.txt"},{"echo Right arrow": "abs-guide.txt"},{";;": "abs-guide.txt"},{"$'\\x1b\\x5b\\x44') # Left_arrow": "abs-guide.txt"},{"echo Left arrow": "abs-guide.txt"},{";;": "abs-guide.txt"},{"$'\\x09') # Tab": "abs-guide.txt"},{"echo Tab Key": "abs-guide.txt"},{";;": "abs-guide.txt"},{"$'\\x0a') # Enter": "abs-guide.txt"},{"echo Enter Key": "abs-guide.txt"},{";;": "abs-guide.txt"},{"$'\\x1b') # Escape": "abs-guide.txt"},{"echo Escape Key": "abs-guide.txt"},{";;": "abs-guide.txt"},{"$'\\x20') # Space": "abs-guide.txt"},{"echo Space Key": "abs-guide.txt"},{";;": "abs-guide.txt"},{"d)": "abs-guide.txt"},{"date": "abs-guide.txt"},{";;": "abs-guide.txt"},{"q)": "abs-guide.txt"},{"echo Time to quit...": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{";;": "abs-guide.txt"},{"*)": "abs-guide.txt"},{"echo You pressed: \\'\"$key\"\\'": "abs-guide.txt"},{";;": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"================================\"": "abs-guide.txt"},{"unset K1 K2 K3": "abs-guide.txt"},{"read -s -N1 -p \"Press a key: \"": "abs-guide.txt"},{"K1=\"$REPLY\"": "abs-guide.txt"},{"read -s -N2 -t 0.001": "abs-guide.txt"},{"K2=\"$REPLY\"": "abs-guide.txt"},{"read -s -N1 -t 0.001": "abs-guide.txt"},{"K3=\"$REPLY\"": "abs-guide.txt"},{"key=\"$K1$K2$K3\"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"exit $?": "abs-guide.txt"},{"": "abs-guide.txt"},{"See also Example 37-1.": "abs-guide.txt"},{"\\\"": "abs-guide.txt"},{"gives the quote its literal meaning": "abs-guide.txt"},{"echo \"Hello\"": "abs-guide.txt"},{"echo \"\\\"Hello\\\" ... he said.\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Hello": "abs-guide.txt"},{"# \"Hello\" ... he said.": "abs-guide.txt"},{"": "abs-guide.txt"},{"\\$": "abs-guide.txt"},{"gives the dollar sign its literal meaning (variable name following \\$ will not be referenced)": "abs-guide.txt"},{"echo \"\\$variable01\"": "abs-guide.txt"},{"echo \"The book cost \\$7.98.\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# $variable01": "abs-guide.txt"},{"# The book cost $7.98.": "abs-guide.txt"},{"": "abs-guide.txt"},{"\\\\": "abs-guide.txt"},{"Chapter 5. Quoting": "abs-guide.txt"},{"": "abs-guide.txt"},{"47": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"gives the backslash its literal meaning": "abs-guide.txt"},{"echo \"\\\\\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Results in \\": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Whereas . . .": "abs-guide.txt"},{"echo \"\\\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Invokes secondary prompt from the command-line.": "abs-guide.txt"},{"# In a script, gives an error message.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# However . . .": "abs-guide.txt"},{"echo '\\'": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Results in \\": "abs-guide.txt"},{"": "abs-guide.txt"},{"The behavior of \\ depends on whether it is escaped, strong-quoted, weak-quoted, or appearing within": "abs-guide.txt"},{"command substitution or a here document.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"\\z": "abs-guide.txt"},{"\\\\z": "abs-guide.txt"},{"'\\z'": "abs-guide.txt"},{"'\\\\z'": "abs-guide.txt"},{"\"\\z\"": "abs-guide.txt"},{"\"\\\\z\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"`echo": "abs-guide.txt"},{"`echo": "abs-guide.txt"},{"`echo": "abs-guide.txt"},{"`echo": "abs-guide.txt"},{"`echo": "abs-guide.txt"},{"`echo": "abs-guide.txt"},{"`echo": "abs-guide.txt"},{"`echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"\\z`": "abs-guide.txt"},{"\\\\z`": "abs-guide.txt"},{"\\\\\\z`": "abs-guide.txt"},{"\\\\\\\\z`": "abs-guide.txt"},{"\\\\\\\\\\\\z`": "abs-guide.txt"},{"\\\\\\\\\\\\\\z`": "abs-guide.txt"},{"\"\\z\"`": "abs-guide.txt"},{"\"\\\\z\"`": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Simple escaping and quoting": "abs-guide.txt"},{"z": "abs-guide.txt"},{"\\z": "abs-guide.txt"},{"\\z": "abs-guide.txt"},{"\\\\z": "abs-guide.txt"},{"\\z": "abs-guide.txt"},{"\\z": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Command substitution": "abs-guide.txt"},{"z": "abs-guide.txt"},{"z": "abs-guide.txt"},{"\\z": "abs-guide.txt"},{"\\z": "abs-guide.txt"},{"\\z": "abs-guide.txt"},{"\\\\z": "abs-guide.txt"},{"\\z": "abs-guide.txt"},{"\\z": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Here document": "abs-guide.txt"},{"cat <<EOF": "abs-guide.txt"},{"\\z": "abs-guide.txt"},{"EOF": "abs-guide.txt"},{"": "abs-guide.txt"},{"# \\z": "abs-guide.txt"},{"": "abs-guide.txt"},{"cat <<EOF": "abs-guide.txt"},{"\\\\z": "abs-guide.txt"},{"EOF": "abs-guide.txt"},{"": "abs-guide.txt"},{"# \\z": "abs-guide.txt"},{"": "abs-guide.txt"},{"# These examples supplied by St\u00e9phane Chazelas.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Elements of a string assigned to a variable may be escaped, but the escape character alone may not be": "abs-guide.txt"},{"assigned to a variable.": "abs-guide.txt"},{"variable=\\": "abs-guide.txt"},{"echo \"$variable\"": "abs-guide.txt"},{"# Will not work - gives an error message:": "abs-guide.txt"},{"# test.sh: : command not found": "abs-guide.txt"},{"# A \"naked\" escape cannot safely be assigned to a variable.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# What actually happens here is that the \"\\\" escapes the newline and": "abs-guide.txt"},{"#+ the effect is": "abs-guide.txt"},{"variable=echo \"$variable\"": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"invalid variable assignment": "abs-guide.txt"},{"variable=\\": "abs-guide.txt"},{"23skidoo": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 5. Quoting": "abs-guide.txt"},{"": "abs-guide.txt"},{"48": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"echo \"$variable\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# 23skidoo": "abs-guide.txt"},{"# This works, since the second line": "abs-guide.txt"},{"#+ is a valid variable assignment.": "abs-guide.txt"},{"": "abs-guide.txt"},{"variable=\\": "abs-guide.txt"},{"#": "abs-guide.txt"},{"\\^": "abs-guide.txt"},{"escape followed by space": "abs-guide.txt"},{"echo \"$variable\"": "abs-guide.txt"},{"# space": "abs-guide.txt"},{"variable=\\\\": "abs-guide.txt"},{"echo \"$variable\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# \\": "abs-guide.txt"},{"": "abs-guide.txt"},{"variable=\\\\\\": "abs-guide.txt"},{"echo \"$variable\"": "abs-guide.txt"},{"# Will not work - gives an error message:": "abs-guide.txt"},{"# test.sh: \\: command not found": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# First escape escapes second one, but the third one is left \"naked\",": "abs-guide.txt"},{"#+ with same result as first instance, above.": "abs-guide.txt"},{"variable=\\\\\\\\": "abs-guide.txt"},{"echo \"$variable\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# \\\\": "abs-guide.txt"},{"# Second and fourth escapes escaped.": "abs-guide.txt"},{"# This is o.k.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Escaping a space can prevent word splitting in a command's argument list.": "abs-guide.txt"},{"file_list=\"/bin/cat /bin/gzip /bin/more /usr/bin/less /usr/bin/emacs-20.7\"": "abs-guide.txt"},{"# List of files as argument(s) to a command.": "abs-guide.txt"},{"# Add two files to the list, and list all.": "abs-guide.txt"},{"ls -l /usr/X11R6/bin/xsetroot /sbin/dump $file_list": "abs-guide.txt"},{"echo \"-------------------------------------------------------------------------\"": "abs-guide.txt"},{"# What happens if we escape a couple of spaces?": "abs-guide.txt"},{"ls -l /usr/X11R6/bin/xsetroot\\ /sbin/dump\\ $file_list": "abs-guide.txt"},{"# Error: the first three files concatenated into a single argument to 'ls -l'": "abs-guide.txt"},{"#": "abs-guide.txt"},{"because the two escaped spaces prevent argument (word) splitting.": "abs-guide.txt"},{"": "abs-guide.txt"},{"The escape also provides a means of writing a multi-line command. Normally, each separate line constitutes a": "abs-guide.txt"},{"different command, but an escape at the end of a line escapes the newline character, and the command": "abs-guide.txt"},{"sequence continues on to the next line.": "abs-guide.txt"},{"(cd /source/directory && tar cf - . ) | \\": "abs-guide.txt"},{"(cd /dest/directory && tar xpvf -)": "abs-guide.txt"},{"# Repeating Alan Cox's directory tree copy command,": "abs-guide.txt"},{"# but split into two lines for increased legibility.": "abs-guide.txt"},{"# As an alternative:": "abs-guide.txt"},{"tar cf - -C /source/directory . |": "abs-guide.txt"},{"tar xpvf - -C /dest/directory": "abs-guide.txt"},{"# See note below.": "abs-guide.txt"},{"# (Thanks, St\u00e9phane Chazelas.)": "abs-guide.txt"},{"": "abs-guide.txt"},{"If a script line ends with a |, a pipe character, then a \\, an escape, is not strictly necessary. It is, however,": "abs-guide.txt"},{"good programming practice to always escape the end of a line of code that continues to the following": "abs-guide.txt"},{"line.": "abs-guide.txt"},{"echo \"foo": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 5. Quoting": "abs-guide.txt"},{"": "abs-guide.txt"},{"49": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"bar\"": "abs-guide.txt"},{"#foo": "abs-guide.txt"},{"#bar": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo 'foo": "abs-guide.txt"},{"bar'": "abs-guide.txt"},{"# No difference yet.": "abs-guide.txt"},{"#foo": "abs-guide.txt"},{"#bar": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo foo\\": "abs-guide.txt"},{"bar": "abs-guide.txt"},{"# Newline escaped.": "abs-guide.txt"},{"#foobar": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"foo\\": "abs-guide.txt"},{"bar\"": "abs-guide.txt"},{"# Same here, as \\ still interpreted as escape within weak quotes.": "abs-guide.txt"},{"#foobar": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo 'foo\\": "abs-guide.txt"},{"bar'": "abs-guide.txt"},{"# Escape character \\ taken literally because of strong quoting.": "abs-guide.txt"},{"#foo\\": "abs-guide.txt"},{"#bar": "abs-guide.txt"},{"# Examples suggested by St\u00e9phane Chazelas.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 5. Quoting": "abs-guide.txt"},{"": "abs-guide.txt"},{"50": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fChapter 6. Exit and Exit Status": "abs-guide.txt"},{"... there are dark corners in the Bourne shell, and": "abs-guide.txt"},{"people use all of them.": "abs-guide.txt"},{"--Chet Ramey": "abs-guide.txt"},{"The exit command terminates a script, just as in a C program. It can also return a value, which is available to": "abs-guide.txt"},{"the script's parent process.": "abs-guide.txt"},{"Every command returns an exit status (sometimes referred to as a return status or exit code). A successful": "abs-guide.txt"},{"command returns a 0, while an unsuccessful one returns a non-zero value that usually can be interpreted as an": "abs-guide.txt"},{"error code. Well-behaved UNIX commands, programs, and utilities return a 0 exit code upon successful": "abs-guide.txt"},{"completion, though there are some exceptions.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Likewise, functions within a script and the script itself return an exit status. The last command executed in the": "abs-guide.txt"},{"function or script determines the exit status. Within a script, an exit nnn command may be used to deliver": "abs-guide.txt"},{"an nnn exit status to the shell (nnn must be an integer in the 0 - 255 range).": "abs-guide.txt"},{"When a script ends with an exit that has no parameter, the exit status of the script is the exit status of the": "abs-guide.txt"},{"last command executed in the script (previous to the exit).": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"COMMAND_1": "abs-guide.txt"},{". . .": "abs-guide.txt"},{"COMMAND_LAST": "abs-guide.txt"},{"# Will exit with status of last command.": "abs-guide.txt"},{"exit": "abs-guide.txt"},{"": "abs-guide.txt"},{"The equivalent of a bare exit is exit $? or even just omitting the exit.": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"COMMAND_1": "abs-guide.txt"},{". . .": "abs-guide.txt"},{"COMMAND_LAST": "abs-guide.txt"},{"# Will exit with status of last command.": "abs-guide.txt"},{"exit $?": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"COMMAND1": "abs-guide.txt"},{". . .": "abs-guide.txt"},{"COMMAND_LAST": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 6. Exit and Exit Status": "abs-guide.txt"},{"": "abs-guide.txt"},{"51": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# Will exit with status of last command.": "abs-guide.txt"},{"": "abs-guide.txt"},{"$? reads the exit status of the last command executed. After a function returns, $? gives the exit status of the": "abs-guide.txt"},{"last command executed in the function. This is Bash's way of giving functions a \"return value.\" [32]": "abs-guide.txt"},{"Following the execution of a pipe, a $? gives the exit status of the last command executed.": "abs-guide.txt"},{"After a script terminates, a $? from the command-line gives the exit status of the script, that is, the last": "abs-guide.txt"},{"command executed in the script, which is, by convention, 0 on success or an integer in the range 1 - 255 on": "abs-guide.txt"},{"error.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 6-1. exit / exit status": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"echo hello": "abs-guide.txt"},{"echo $?": "abs-guide.txt"},{"# Exit status 0 returned because command executed successfully.": "abs-guide.txt"},{"lskdf": "abs-guide.txt"},{"echo $?": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Unrecognized command.": "abs-guide.txt"},{"# Non-zero exit status returned -- command failed to execute.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"exit 113": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Will return 113 to shell.": "abs-guide.txt"},{"# To verify this, type \"echo $?\" after script terminates.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# By convention, an 'exit 0' indicates success,": "abs-guide.txt"},{"#+ while a non-zero exit value means an error or anomalous condition.": "abs-guide.txt"},{"# See the \"Exit Codes With Special Meanings\" appendix.": "abs-guide.txt"},{"": "abs-guide.txt"},{"$? is especially useful for testing the result of a command in a script (see Example 16-35 and Example 16-20).": "abs-guide.txt"},{"The !, the logical not qualifier, reverses the outcome of a test or command, and this affects its exit status.": "abs-guide.txt"},{"Example 6-2. Negating a condition using !": "abs-guide.txt"},{"true": "abs-guide.txt"},{"# The \"true\" builtin.": "abs-guide.txt"},{"echo \"exit status of \\\"true\\\" = $?\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"! true": "abs-guide.txt"},{"echo \"exit status of \\\"! true\\\" = $?\"": "abs-guide.txt"},{"# 1": "abs-guide.txt"},{"# Note that the \"!\" needs a space between it and the command.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"!true": "abs-guide.txt"},{"leads to a \"command not found\" error": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# The '!' operator prefixing a command invokes the Bash history mechanism.": "abs-guide.txt"},{"true": "abs-guide.txt"},{"!true": "abs-guide.txt"},{"# No error this time, but no negation either.": "abs-guide.txt"},{"# It just repeats the previous command (true).": "abs-guide.txt"},{"": "abs-guide.txt"},{"# =========================================================== #": "abs-guide.txt"},{"# Preceding a _pipe_ with ! inverts the exit status returned.": "abs-guide.txt"},{"ls | bogus_command": "abs-guide.txt"},{"# bash: bogus_command: command not found": "abs-guide.txt"},{"echo $?": "abs-guide.txt"},{"# 127": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 6. Exit and Exit Status": "abs-guide.txt"},{"": "abs-guide.txt"},{"52": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"! ls | bogus_command": "abs-guide.txt"},{"# bash: bogus_command: command not found": "abs-guide.txt"},{"echo $?": "abs-guide.txt"},{"# 0": "abs-guide.txt"},{"# Note that the ! does not change the execution of the pipe.": "abs-guide.txt"},{"# Only the exit status changes.": "abs-guide.txt"},{"# =========================================================== #": "abs-guide.txt"},{"# Thanks, St\u00e9phane Chazelas and Kristopher Newsome.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Certain exit status codes have reserved meanings and should not be user-specified in a script.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 6. Exit and Exit Status": "abs-guide.txt"},{"": "abs-guide.txt"},{"53": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fChapter 7. Tests": "abs-guide.txt"},{"Every reasonably complete programming language can test for a condition, then act according to the result of": "abs-guide.txt"},{"the test. Bash has the test command, various bracket and parenthesis operators, and the if/then construct.": "abs-guide.txt"},{"": "abs-guide.txt"},{"7.1. Test Constructs": "abs-guide.txt"},{"\u2022 An if/then construct tests whether the exit status of a list of commands is 0 (since 0 means \"success\"": "abs-guide.txt"},{"by UNIX convention), and if so, executes one or more commands.": "abs-guide.txt"},{"\u2022 There exists a dedicated command called [ (left bracket special character). It is a synonym for test,": "abs-guide.txt"},{"and a builtin for efficiency reasons. This command considers its arguments as comparison expressions": "abs-guide.txt"},{"or file tests and returns an exit status corresponding to the result of the comparison (0 for true, 1 for": "abs-guide.txt"},{"false).": "abs-guide.txt"},{"\u2022 With version 2.02, Bash introduced the [[ ... ]] extended test command, which performs comparisons": "abs-guide.txt"},{"in a manner more familiar to programmers from other languages. Note that [[ is a keyword, not a": "abs-guide.txt"},{"command.": "abs-guide.txt"},{"Bash sees [[ $a -lt $b ]] as a single element, which returns an exit status.": "abs-guide.txt"},{"\u2022": "abs-guide.txt"},{"The (( ... )) and let ... constructs return an exit status, according to whether the arithmetic expressions": "abs-guide.txt"},{"they evaluate expand to a non-zero value. These arithmetic-expansion constructs may therefore be": "abs-guide.txt"},{"used to perform arithmetic comparisons.": "abs-guide.txt"},{"(( 0 && 1 ))": "abs-guide.txt"},{"echo $?": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# And so ...": "abs-guide.txt"},{"let \"num = ((": "abs-guide.txt"},{"echo $num": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# But ...": "abs-guide.txt"},{"let \"num = ((": "abs-guide.txt"},{"echo $?": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Logical AND": "abs-guide.txt"},{"1": "abs-guide.txt"},{"": "abs-guide.txt"},{"***": "abs-guide.txt"},{"": "abs-guide.txt"},{"0 && 1 ))\"": "abs-guide.txt"},{"0": "abs-guide.txt"},{"0 && 1 ))\"": "abs-guide.txt"},{"1": "abs-guide.txt"},{"***": "abs-guide.txt"},{"": "abs-guide.txt"},{"(( 200 || 11 ))": "abs-guide.txt"},{"echo $?": "abs-guide.txt"},{"# 0": "abs-guide.txt"},{"***": "abs-guide.txt"},{"# ...": "abs-guide.txt"},{"let \"num = (( 200 || 11 ))\"": "abs-guide.txt"},{"echo $num": "abs-guide.txt"},{"# 1": "abs-guide.txt"},{"let \"num = (( 200 || 11 ))\"": "abs-guide.txt"},{"echo $?": "abs-guide.txt"},{"# 0": "abs-guide.txt"},{"***": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Logical OR": "abs-guide.txt"},{"": "abs-guide.txt"},{"(( 200 | 11 ))": "abs-guide.txt"},{"echo $?": "abs-guide.txt"},{"# ...": "abs-guide.txt"},{"let \"num = (( 200 | 11 ))\"": "abs-guide.txt"},{"echo $num": "abs-guide.txt"},{"let \"num = (( 200 | 11 ))\"": "abs-guide.txt"},{"echo $?": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Bitwise OR": "abs-guide.txt"},{"# 0": "abs-guide.txt"},{"***": "abs-guide.txt"},{"": "abs-guide.txt"},{"# 203": "abs-guide.txt"},{"# 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"***": "abs-guide.txt"},{"": "abs-guide.txt"},{"# The \"let\" construct returns the same exit status": "abs-guide.txt"},{"#+ as the double-parentheses arithmetic expansion.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 7. Tests": "abs-guide.txt"},{"": "abs-guide.txt"},{"54": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"Again, note that the exit status of an arithmetic expression is not an error value.": "abs-guide.txt"},{"var=-2 && (( var+=2 ))": "abs-guide.txt"},{"echo $?": "abs-guide.txt"},{"": "abs-guide.txt"},{"# 1": "abs-guide.txt"},{"": "abs-guide.txt"},{"var=-2 && (( var+=2 )) && echo $var": "abs-guide.txt"},{"# Will not echo $var!": "abs-guide.txt"},{"": "abs-guide.txt"},{"\u2022": "abs-guide.txt"},{"An if can test any command, not just conditions enclosed within brackets.": "abs-guide.txt"},{"if cmp a b &> /dev/null # Suppress output.": "abs-guide.txt"},{"then echo \"Files a and b are identical.\"": "abs-guide.txt"},{"else echo \"Files a and b differ.\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# The very useful \"if-grep\" construct:": "abs-guide.txt"},{"# ----------------------------------if grep -q Bash file": "abs-guide.txt"},{"then echo \"File contains at least one occurrence of Bash.\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"word=Linux": "abs-guide.txt"},{"letter_sequence=inu": "abs-guide.txt"},{"if echo \"$word\" | grep -q \"$letter_sequence\"": "abs-guide.txt"},{"# The \"-q\" option to grep suppresses output.": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"$letter_sequence found in $word\"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo \"$letter_sequence not found in $word\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"if COMMAND_WHOSE_EXIT_STATUS_IS_0_UNLESS_ERROR_OCCURRED": "abs-guide.txt"},{"then echo \"Command succeeded.\"": "abs-guide.txt"},{"else echo \"Command failed.\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"\u2022 These last two examples courtesy of St\u00e9phane Chazelas.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 7-1. What is truth?": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# Tip:": "abs-guide.txt"},{"# If you're unsure how a certain condition might evaluate,": "abs-guide.txt"},{"#+ test it in an if-test.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"Testing \\\"0\\\"\"": "abs-guide.txt"},{"if [ 0 ]": "abs-guide.txt"},{"# zero": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"0 is true.\"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"# Or else ...": "abs-guide.txt"},{"echo \"0 is false.\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# 0 is true.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 7. Tests": "abs-guide.txt"},{"": "abs-guide.txt"},{"55": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"echo \"Testing \\\"1\\\"\"": "abs-guide.txt"},{"if [ 1 ]": "abs-guide.txt"},{"# one": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"1 is true.\"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo \"1 is false.\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# 1 is true.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"Testing": "abs-guide.txt"},{"if [ -1 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"-1 is": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo \"-1 is": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"\\\"-1\\\"\"": "abs-guide.txt"},{"# minus one": "abs-guide.txt"},{"true.\"": "abs-guide.txt"},{"false.\"": "abs-guide.txt"},{"# -1 is true.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"Testing \\\"NULL\\\"\"": "abs-guide.txt"},{"if [ ]": "abs-guide.txt"},{"# NULL (empty condition)": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"NULL is true.\"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo \"NULL is false.\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# NULL is false.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"Testing \\\"xyz\\\"\"": "abs-guide.txt"},{"if [ xyz ]": "abs-guide.txt"},{"# string": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Random string is true.\"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo \"Random string is false.\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# Random string is true.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"Testing \\\"\\$xyz\\\"\"": "abs-guide.txt"},{"if [ $xyz ]": "abs-guide.txt"},{"# Tests if $xyz is null, but...": "abs-guide.txt"},{"# it's only an uninitialized variable.": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Uninitialized variable is true.\"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo \"Uninitialized variable is false.\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# Uninitialized variable is false.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"Testing \\\"-n \\$xyz\\\"\"": "abs-guide.txt"},{"if [ -n \"$xyz\" ]": "abs-guide.txt"},{"# More pedantically correct.": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Uninitialized variable is true.\"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo \"Uninitialized variable is false.\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# Uninitialized variable is false.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 7. Tests": "abs-guide.txt"},{"": "abs-guide.txt"},{"56": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"xyz=": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Initialized, but set to null value.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo \"Testing \\\"-n \\$xyz\\\"\"": "abs-guide.txt"},{"if [ -n \"$xyz\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Null variable is true.\"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo \"Null variable is false.\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# Null variable is false.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"# When is \"false\" true?": "abs-guide.txt"},{"echo \"Testing \\\"false\\\"\"": "abs-guide.txt"},{"if [ \"false\" ]": "abs-guide.txt"},{"# It seems that \"false\" is just a string ...": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"\\\"false\\\" is true.\" #+ and it tests true.": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo \"\\\"false\\\" is false.\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# \"false\" is true.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"Testing \\\"\\$false\\\"\" # Again, uninitialized variable.": "abs-guide.txt"},{"if [ \"$false\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"\\\"\\$false\\\" is true.\"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo \"\\\"\\$false\\\" is false.\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# \"$false\" is false.": "abs-guide.txt"},{"# Now, we get the expected result.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"What would happen if we tested the uninitialized variable \"$true\"?": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Exercise. Explain the behavior of Example 7-1, above.": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [ condition-true ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"command 1": "abs-guide.txt"},{"command 2": "abs-guide.txt"},{"...": "abs-guide.txt"},{"else # Or else ...": "abs-guide.txt"},{"# Adds default code block executing if original condition tests false.": "abs-guide.txt"},{"command 3": "abs-guide.txt"},{"command 4": "abs-guide.txt"},{"...": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"When if and then are on same line in a condition test, a semicolon must terminate the if statement. Both if": "abs-guide.txt"},{"and then are keywords. Keywords (or commands) begin statements, and before a new statement on the": "abs-guide.txt"},{"same line begins, the old one must terminate.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 7. Tests": "abs-guide.txt"},{"": "abs-guide.txt"},{"57": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"if [ -x \"$filename\" ]; then": "abs-guide.txt"},{"": "abs-guide.txt"},{"Else if and elif": "abs-guide.txt"},{"elif": "abs-guide.txt"},{"elif is a contraction for else if. The effect is to nest an inner if/then construct within an outer one.": "abs-guide.txt"},{"if [ condition1 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"command1": "abs-guide.txt"},{"command2": "abs-guide.txt"},{"command3": "abs-guide.txt"},{"elif [ condition2 ]": "abs-guide.txt"},{"# Same as else if": "abs-guide.txt"},{"then": "abs-guide.txt"},{"command4": "abs-guide.txt"},{"command5": "abs-guide.txt"},{"else": "abs-guide.txt"},{"default-command": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"The if test condition-true construct is the exact equivalent of if [ condition-true ]. As": "abs-guide.txt"},{"it happens, the left bracket, [ , is a token [33] which invokes the test command. The closing right bracket, ] , in": "abs-guide.txt"},{"an if/test should not therefore be strictly necessary, however newer versions of Bash require it.": "abs-guide.txt"},{"": "abs-guide.txt"},{"The test command is a Bash builtin which tests file types and compares strings. Therefore, in a Bash": "abs-guide.txt"},{"script, test does not call the external /usr/bin/test binary, which is part of the sh-utils package.": "abs-guide.txt"},{"Likewise, [ does not call /usr/bin/[, which is linked to /usr/bin/test.": "abs-guide.txt"},{"bash$ type test": "abs-guide.txt"},{"test is a shell builtin": "abs-guide.txt"},{"bash$ type '['": "abs-guide.txt"},{"[ is a shell builtin": "abs-guide.txt"},{"bash$ type '[['": "abs-guide.txt"},{"[[ is a shell keyword": "abs-guide.txt"},{"bash$ type ']]'": "abs-guide.txt"},{"]] is a shell keyword": "abs-guide.txt"},{"bash$ type ']'": "abs-guide.txt"},{"bash: type: ]: not found": "abs-guide.txt"},{"": "abs-guide.txt"},{"If, for some reason, you wish to use /usr/bin/test in a Bash script, then specify it by full": "abs-guide.txt"},{"pathname.": "abs-guide.txt"},{"Example 7-2. Equivalence of test, /usr/bin/test, [ ], and /usr/bin/[": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"if test -z \"$1\"": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"No command-line arguments.\"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo \"First command-line argument is $1.\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 7. Tests": "abs-guide.txt"},{"": "abs-guide.txt"},{"58": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"if /usr/bin/test -z \"$1\"": "abs-guide.txt"},{"# Equivalent to \"test\" builtin.": "abs-guide.txt"},{"# ^^^^^^^^^^^^^": "abs-guide.txt"},{"# Specifying full pathname.": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"No command-line arguments.\"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo \"First command-line argument is $1.\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"if [ -z \"$1\" ]": "abs-guide.txt"},{"# Functionally identical to above code blocks.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"if [ -z \"$1\"": "abs-guide.txt"},{"should work, but...": "abs-guide.txt"},{"#+ Bash responds to a missing close-bracket with an error message.": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"No command-line arguments.\"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo \"First command-line argument is $1.\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"if /usr/bin/[ -z \"$1\" ]": "abs-guide.txt"},{"# Again, functionally identical to above.": "abs-guide.txt"},{"# if /usr/bin/[ -z \"$1\"": "abs-guide.txt"},{"# Works, but gives an error message.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Note:": "abs-guide.txt"},{"#": "abs-guide.txt"},{"This has been fixed in Bash, version 3.x.": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"No command-line arguments.\"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo \"First command-line argument is $1.\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"The [[ ]] construct is the more versatile Bash version of [ ]. This is the extended test command, adopted from": "abs-guide.txt"},{"ksh88.": "abs-guide.txt"},{"***": "abs-guide.txt"},{"No filename expansion or word splitting takes place between [[ and ]], but there is parameter expansion and": "abs-guide.txt"},{"command substitution.": "abs-guide.txt"},{"file=/etc/passwd": "abs-guide.txt"},{"if [[ -e $file ]]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Password file exists.\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"Using the [[ ... ]] test construct, rather than [ ... ] can prevent many logic errors in scripts. For example, the": "abs-guide.txt"},{"&&, ||, <, and > operators work within a [[ ]] test, despite giving an error within a [ ] construct.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 7. Tests": "abs-guide.txt"},{"": "abs-guide.txt"},{"59": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"Arithmetic evaluation of octal / hexadecimal constants takes place automatically within a [[ ... ]] construct.": "abs-guide.txt"},{"# [[ Octal and hexadecimal evaluation ]]": "abs-guide.txt"},{"# Thank you, Moritz Gronbach, for pointing this out.": "abs-guide.txt"},{"": "abs-guide.txt"},{"decimal=15": "abs-guide.txt"},{"octal=017": "abs-guide.txt"},{"hex=0x0f": "abs-guide.txt"},{"": "abs-guide.txt"},{"# = 15 (decimal)": "abs-guide.txt"},{"# = 15 (decimal)": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [ \"$decimal\" -eq \"$octal\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"$decimal equals $octal\"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo \"$decimal is not equal to $octal\"": "abs-guide.txt"},{"# 15 is not equal to 017": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# Doesn't evaluate within [ single brackets ]!": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [[ \"$decimal\" -eq \"$octal\" ]]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"$decimal equals $octal\"": "abs-guide.txt"},{"# 15 equals 017": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo \"$decimal is not equal to $octal\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# Evaluates within [[ double brackets ]]!": "abs-guide.txt"},{"if [[ \"$decimal\" -eq \"$hex\" ]]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"$decimal equals $hex\"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo \"$decimal is not equal to $hex\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# [[ $hexadecimal ]] also evaluates!": "abs-guide.txt"},{"": "abs-guide.txt"},{"# 15 equals 0x0f": "abs-guide.txt"},{"": "abs-guide.txt"},{"Following an if, neither the test command nor the test brackets ( [ ] or [[ ]] ) are strictly necessary.": "abs-guide.txt"},{"dir=/home/bozo": "abs-guide.txt"},{"if cd \"$dir\" 2>/dev/null; then": "abs-guide.txt"},{"echo \"Now in $dir.\"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo \"Can't change to $dir.\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"# \"2>/dev/null\" hides error message.": "abs-guide.txt"},{"": "abs-guide.txt"},{"The \"if COMMAND\" construct returns the exit status of COMMAND.": "abs-guide.txt"},{"Similarly, a condition within test brackets may stand alone without an if, when used in combination with": "abs-guide.txt"},{"a list construct.": "abs-guide.txt"},{"var1=20": "abs-guide.txt"},{"var2=22": "abs-guide.txt"},{"[ \"$var1\" -ne \"$var2\" ] && echo \"$var1 is not equal to $var2\"": "abs-guide.txt"},{"home=/home/bozo": "abs-guide.txt"},{"[ -d \"$home\" ] || echo \"$home directory does not exist.\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"The (( )) construct expands and evaluates an arithmetic expression. If the expression evaluates as zero, it": "abs-guide.txt"},{"returns an exit status of 1, or \"false\". A non-zero expression returns an exit status of 0, or \"true\". This is in": "abs-guide.txt"},{"marked contrast to using the test and [ ] constructs previously discussed.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 7. Tests": "abs-guide.txt"},{"": "abs-guide.txt"},{"60": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"Example 7-3. Arithmetic Tests using (( ))": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# arith-tests.sh": "abs-guide.txt"},{"# Arithmetic tests.": "abs-guide.txt"},{"# The (( ... )) construct evaluates and tests numerical expressions.": "abs-guide.txt"},{"# Exit status opposite from [ ... ] construct!": "abs-guide.txt"},{"(( 0 ))": "abs-guide.txt"},{"echo \"Exit status of \\\"(( 0 ))\\\" is $?.\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# 1": "abs-guide.txt"},{"": "abs-guide.txt"},{"(( 1 ))": "abs-guide.txt"},{"echo \"Exit status of \\\"(( 1 ))\\\" is $?.\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"(( 5 > 4 ))": "abs-guide.txt"},{"echo \"Exit status of \\\"(( 5 > 4 ))\\\" is $?.\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# true": "abs-guide.txt"},{"# 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"(( 5 > 9 ))": "abs-guide.txt"},{"echo \"Exit status of \\\"(( 5 > 9 ))\\\" is $?.\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# false": "abs-guide.txt"},{"# 1": "abs-guide.txt"},{"": "abs-guide.txt"},{"(( 5 == 5 ))": "abs-guide.txt"},{"echo \"Exit status of \\\"(( 5 == 5 ))\\\" is $?.\"": "abs-guide.txt"},{"# (( 5 = 5 )) gives an error message.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# true": "abs-guide.txt"},{"# 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"(( 5 - 5 ))": "abs-guide.txt"},{"echo \"Exit status of \\\"(( 5 - 5 ))\\\" is $?.\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# 0": "abs-guide.txt"},{"# 1": "abs-guide.txt"},{"": "abs-guide.txt"},{"(( 5 / 4 ))": "abs-guide.txt"},{"echo \"Exit status of \\\"(( 5 / 4 ))\\\" is $?.\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Division o.k.": "abs-guide.txt"},{"# 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"(( 1 / 2 ))": "abs-guide.txt"},{"echo \"Exit status of \\\"(( 1 / 2 ))\\\" is $?.\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Division result < 1.": "abs-guide.txt"},{"# Rounded off to 0.": "abs-guide.txt"},{"# 1": "abs-guide.txt"},{"": "abs-guide.txt"},{"(( 1 / 0 )) 2>/dev/null": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^^^^^^^^^^^": "abs-guide.txt"},{"echo \"Exit status of \\\"(( 1 / 0 ))\\\" is $?.\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Illegal division by 0.": "abs-guide.txt"},{"# 1": "abs-guide.txt"},{"": "abs-guide.txt"},{"# What effect does the \"2>/dev/null\" have?": "abs-guide.txt"},{"# What would happen if it were removed?": "abs-guide.txt"},{"# Try removing it, then rerunning the script.": "abs-guide.txt"},{"# ======================================= #": "abs-guide.txt"},{"# (( ... )) also useful in an if-then test.": "abs-guide.txt"},{"var1=5": "abs-guide.txt"},{"var2=4": "abs-guide.txt"},{"if (( var1 > var2 ))": "abs-guide.txt"},{"then #^": "abs-guide.txt"},{"^": "abs-guide.txt"},{"Note: Not $var1, $var2. Why?": "abs-guide.txt"},{"echo \"$var1 is greater than $var2\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# 5 is greater than 4": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 7. Tests": "abs-guide.txt"},{"": "abs-guide.txt"},{"61": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"": "abs-guide.txt"},{"7.2. File test operators": "abs-guide.txt"},{"Returns true if...": "abs-guide.txt"},{"-e": "abs-guide.txt"},{"file exists": "abs-guide.txt"},{"-a": "abs-guide.txt"},{"file exists": "abs-guide.txt"},{"This is identical in effect to -e. It has been \"deprecated,\" [34] and its use is discouraged.": "abs-guide.txt"},{"-f": "abs-guide.txt"},{"file is a regular file (not a directory or device file)": "abs-guide.txt"},{"-s": "abs-guide.txt"},{"file is not zero size": "abs-guide.txt"},{"-d": "abs-guide.txt"},{"file is a directory": "abs-guide.txt"},{"-b": "abs-guide.txt"},{"file is a block device": "abs-guide.txt"},{"-c": "abs-guide.txt"},{"file is a character device": "abs-guide.txt"},{"device0=\"/dev/sda2\"": "abs-guide.txt"},{"# /": "abs-guide.txt"},{"(root directory)": "abs-guide.txt"},{"if [ -b \"$device0\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"$device0 is a block device.\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# /dev/sda2 is a block device.": "abs-guide.txt"},{"": "abs-guide.txt"},{"device1=\"/dev/ttyS1\"": "abs-guide.txt"},{"# PCMCIA modem card.": "abs-guide.txt"},{"if [ -c \"$device1\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"$device1 is a character device.\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# /dev/ttyS1 is a character device.": "abs-guide.txt"},{"": "abs-guide.txt"},{"-p": "abs-guide.txt"},{"file is a pipe": "abs-guide.txt"},{"function show_input_type()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"[ -p /dev/fd/0 ] && echo PIPE || echo STDIN": "abs-guide.txt"},{"}": "abs-guide.txt"},{"show_input_type \"Input\"": "abs-guide.txt"},{"echo \"Input\" | show_input_type": "abs-guide.txt"},{"": "abs-guide.txt"},{"# STDIN": "abs-guide.txt"},{"# PIPE": "abs-guide.txt"},{"": "abs-guide.txt"},{"# This example courtesy of Carl Anderson.": "abs-guide.txt"},{"": "abs-guide.txt"},{"-h": "abs-guide.txt"},{"file is a symbolic link": "abs-guide.txt"},{"-L": "abs-guide.txt"},{"Chapter 7. Tests": "abs-guide.txt"},{"": "abs-guide.txt"},{"62": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"file is a symbolic link": "abs-guide.txt"},{"-S": "abs-guide.txt"},{"file is a socket": "abs-guide.txt"},{"-t": "abs-guide.txt"},{"file (descriptor) is associated with a terminal device": "abs-guide.txt"},{"This test option may be used to check whether the stdin [ -t 0 ] or stdout [ -t 1 ] in a": "abs-guide.txt"},{"given script is a terminal.": "abs-guide.txt"},{"-r": "abs-guide.txt"},{"file has read permission (for the user running the test)": "abs-guide.txt"},{"-w": "abs-guide.txt"},{"file has write permission (for the user running the test)": "abs-guide.txt"},{"-x": "abs-guide.txt"},{"file has execute permission (for the user running the test)": "abs-guide.txt"},{"-g": "abs-guide.txt"},{"set-group-id (sgid) flag set on file or directory": "abs-guide.txt"},{"If a directory has the sgid flag set, then a file created within that directory belongs to the group that": "abs-guide.txt"},{"owns the directory, not necessarily to the group of the user who created the file. This may be useful": "abs-guide.txt"},{"for a directory shared by a workgroup.": "abs-guide.txt"},{"-u": "abs-guide.txt"},{"set-user-id (suid) flag set on file": "abs-guide.txt"},{"A binary owned by root with set-user-id flag set runs with root privileges, even when an": "abs-guide.txt"},{"ordinary user invokes it. [35] This is useful for executables (such as pppd and cdrecord) that need to": "abs-guide.txt"},{"access system hardware. Lacking the suid flag, these binaries could not be invoked by a non-root": "abs-guide.txt"},{"user.": "abs-guide.txt"},{"-rwsr-xr-t": "abs-guide.txt"},{"": "abs-guide.txt"},{"1 root": "abs-guide.txt"},{"": "abs-guide.txt"},{"178236 Oct": "abs-guide.txt"},{"": "abs-guide.txt"},{"2": "abs-guide.txt"},{"": "abs-guide.txt"},{"2000 /usr/sbin/pppd": "abs-guide.txt"},{"": "abs-guide.txt"},{"A file with the suid flag set shows an s in its permissions.": "abs-guide.txt"},{"-k": "abs-guide.txt"},{"sticky bit set": "abs-guide.txt"},{"Commonly known as the sticky bit, the save-text-mode flag is a special type of file permission. If a": "abs-guide.txt"},{"file has this flag set, that file will be kept in cache memory, for quicker access. [36] If set on a": "abs-guide.txt"},{"directory, it restricts write permission. Setting the sticky bit adds a t to the permissions on the file or": "abs-guide.txt"},{"directory listing. This restricts altering or deleting specific files in that directory to the owner of those": "abs-guide.txt"},{"files.": "abs-guide.txt"},{"drwxrwxrwt": "abs-guide.txt"},{"": "abs-guide.txt"},{"7 root": "abs-guide.txt"},{"": "abs-guide.txt"},{"1024 May 19 21:26 tmp/": "abs-guide.txt"},{"": "abs-guide.txt"},{"If a user does not own a directory that has the sticky bit set, but has write permission in that directory,": "abs-guide.txt"},{"she can only delete those files that she owns in it. This keeps users from inadvertently overwriting or": "abs-guide.txt"},{"deleting each other's files in a publicly accessible directory, such as /tmp. (The owner of the": "abs-guide.txt"},{"directory or root can, of course, delete or rename files there.)": "abs-guide.txt"},{"-O": "abs-guide.txt"},{"you are owner of file": "abs-guide.txt"},{"-G": "abs-guide.txt"},{"group-id of file same as yours": "abs-guide.txt"},{"Chapter 7. Tests": "abs-guide.txt"},{"": "abs-guide.txt"},{"63": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"-N": "abs-guide.txt"},{"file modified since it was last read": "abs-guide.txt"},{"f1 -nt f2": "abs-guide.txt"},{"file f1 is newer than f2": "abs-guide.txt"},{"f1 -ot f2": "abs-guide.txt"},{"file f1 is older than f2": "abs-guide.txt"},{"f1 -ef f2": "abs-guide.txt"},{"files f1 and f2 are hard links to the same file": "abs-guide.txt"},{"!": "abs-guide.txt"},{"\"not\" -- reverses the sense of the tests above (returns true if condition absent).": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 7-4. Testing for broken links": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# broken-link.sh": "abs-guide.txt"},{"# Written by Lee bigelow <ligelowbee@yahoo.com>": "abs-guide.txt"},{"# Used in ABS Guide with permission.": "abs-guide.txt"},{"# A pure shell script to find dead symlinks and output them quoted": "abs-guide.txt"},{"#+ so they can be fed to xargs and dealt with :)": "abs-guide.txt"},{"#+ eg. sh broken-link.sh /somedir /someotherdir|xargs rm": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# This, however, is a better method:": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# find \"somedir\" -type l -print0|\\": "abs-guide.txt"},{"# xargs -r0 file|\\": "abs-guide.txt"},{"# grep \"broken symbolic\"|": "abs-guide.txt"},{"# sed -e 's/^\\|: *broken symbolic.*$/\"/g'": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+ but that wouldn't be pure Bash, now would it.": "abs-guide.txt"},{"# Caution: beware the /proc file system and any circular links!": "abs-guide.txt"},{"################################################################": "abs-guide.txt"},{"": "abs-guide.txt"},{"# If no args are passed to the script set directories-to-search": "abs-guide.txt"},{"#+ to current directory. Otherwise set the directories-to-search": "abs-guide.txt"},{"#+ to the args passed.": "abs-guide.txt"},{"######################": "abs-guide.txt"},{"[ $# -eq 0 ] && directorys=`pwd` || directorys=$@": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Setup the": "abs-guide.txt"},{"#+ for files": "abs-guide.txt"},{"# If one of": "abs-guide.txt"},{"#+ send that": "abs-guide.txt"},{"##########": "abs-guide.txt"},{"": "abs-guide.txt"},{"function linkchk to check the directory it is passed": "abs-guide.txt"},{"that are links and don't exist, then print them quoted.": "abs-guide.txt"},{"the elements in the directory is a subdirectory then": "abs-guide.txt"},{"subdirectory to the linkcheck function.": "abs-guide.txt"},{"": "abs-guide.txt"},{"linkchk () {": "abs-guide.txt"},{"for element in $1/*; do": "abs-guide.txt"},{"[ -h \"$element\" -a ! -e \"$element\" ] && echo \\\"$element\\\"": "abs-guide.txt"},{"[ -d \"$element\" ] && linkchk $element": "abs-guide.txt"},{"# Of course, '-h' tests for symbolic link, '-d' for directory.": "abs-guide.txt"},{"done": "abs-guide.txt"},{"}": "abs-guide.txt"},{"# Send each arg that was passed to the script to the linkchk() function": "abs-guide.txt"},{"#+ if it is a valid directoy. If not, then print the error message": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 7. Tests": "abs-guide.txt"},{"": "abs-guide.txt"},{"64": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"#+ and usage info.": "abs-guide.txt"},{"##################": "abs-guide.txt"},{"for directory in $directorys; do": "abs-guide.txt"},{"if [ -d $directory ]": "abs-guide.txt"},{"then linkchk $directory": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo \"$directory is not a directory\"": "abs-guide.txt"},{"echo \"Usage: $0 dir1 dir2 ...\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"done": "abs-guide.txt"},{"exit $?": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 31-1, Example 11-8, Example 11-3, Example 31-3, and Example A-1 also illustrate uses of the file": "abs-guide.txt"},{"test operators.": "abs-guide.txt"},{"": "abs-guide.txt"},{"7.3. Other Comparison Operators": "abs-guide.txt"},{"A binary comparison operator compares two variables or quantities. Note that integer and string comparison": "abs-guide.txt"},{"use a different set of operators.": "abs-guide.txt"},{"integer comparison": "abs-guide.txt"},{"-eq": "abs-guide.txt"},{"is equal to": "abs-guide.txt"},{"if [ \"$a\" -eq \"$b\" ]": "abs-guide.txt"},{"-ne": "abs-guide.txt"},{"is not equal to": "abs-guide.txt"},{"if [ \"$a\" -ne \"$b\" ]": "abs-guide.txt"},{"-gt": "abs-guide.txt"},{"is greater than": "abs-guide.txt"},{"if [ \"$a\" -gt \"$b\" ]": "abs-guide.txt"},{"-ge": "abs-guide.txt"},{"is greater than or equal to": "abs-guide.txt"},{"if [ \"$a\" -ge \"$b\" ]": "abs-guide.txt"},{"-lt": "abs-guide.txt"},{"is less than": "abs-guide.txt"},{"if [ \"$a\" -lt \"$b\" ]": "abs-guide.txt"},{"-le": "abs-guide.txt"},{"is less than or equal to": "abs-guide.txt"},{"if [ \"$a\" -le \"$b\" ]": "abs-guide.txt"},{"<": "abs-guide.txt"},{"is less than (within double parentheses)": "abs-guide.txt"},{"((\"$a\" < \"$b\"))": "abs-guide.txt"},{"<=": "abs-guide.txt"},{"is less than or equal to (within double parentheses)": "abs-guide.txt"},{"Chapter 7. Tests": "abs-guide.txt"},{"": "abs-guide.txt"},{"65": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"((\"$a\" <= \"$b\"))": "abs-guide.txt"},{">": "abs-guide.txt"},{"is greater than (within double parentheses)": "abs-guide.txt"},{"((\"$a\" > \"$b\"))": "abs-guide.txt"},{">=": "abs-guide.txt"},{"is greater than or equal to (within double parentheses)": "abs-guide.txt"},{"((\"$a\" >= \"$b\"))": "abs-guide.txt"},{"string comparison": "abs-guide.txt"},{"=": "abs-guide.txt"},{"is equal to": "abs-guide.txt"},{"if [ \"$a\" = \"$b\" ]": "abs-guide.txt"},{"Note the whitespace framing the =.": "abs-guide.txt"},{"if [ \"$a\"=\"$b\" ] is not equivalent to the above.": "abs-guide.txt"},{"==": "abs-guide.txt"},{"is equal to": "abs-guide.txt"},{"if [ \"$a\" == \"$b\" ]": "abs-guide.txt"},{"This is a synonym for =.": "abs-guide.txt"},{"The == comparison operator behaves differently within a double-brackets test than": "abs-guide.txt"},{"within single brackets.": "abs-guide.txt"},{"[[ $a == z* ]]": "abs-guide.txt"},{"# True if $a starts with an \"z\" (pattern matching).": "abs-guide.txt"},{"[[ $a == \"z*\" ]] # True if $a is equal to z* (literal matching).": "abs-guide.txt"},{"[ $a == z* ]": "abs-guide.txt"},{"# File globbing and word splitting take place.": "abs-guide.txt"},{"[ \"$a\" == \"z*\" ] # True if $a is equal to z* (literal matching).": "abs-guide.txt"},{"# Thanks, St\u00e9phane Chazelas": "abs-guide.txt"},{"": "abs-guide.txt"},{"!=": "abs-guide.txt"},{"is not equal to": "abs-guide.txt"},{"if [ \"$a\" != \"$b\" ]": "abs-guide.txt"},{"This operator uses pattern matching within a [[ ... ]] construct.": "abs-guide.txt"},{"<": "abs-guide.txt"},{"is less than, in ASCII alphabetical order": "abs-guide.txt"},{"if [[ \"$a\" < \"$b\" ]]": "abs-guide.txt"},{"if [ \"$a\" \\< \"$b\" ]": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 7. Tests": "abs-guide.txt"},{"": "abs-guide.txt"},{"66": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"Note that the \"<\" needs to be escaped within a [ ] construct.": "abs-guide.txt"},{">": "abs-guide.txt"},{"is greater than, in ASCII alphabetical order": "abs-guide.txt"},{"if [[ \"$a\" > \"$b\" ]]": "abs-guide.txt"},{"if [ \"$a\" \\> \"$b\" ]": "abs-guide.txt"},{"Note that the \">\" needs to be escaped within a [ ] construct.": "abs-guide.txt"},{"See Example 27-11 for an application of this comparison operator.": "abs-guide.txt"},{"-z": "abs-guide.txt"},{"string is null, that is, has zero length": "abs-guide.txt"},{"String=''": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Zero-length (\"null\") string variable.": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [ -z \"$String\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"\\$String is null.\"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo \"\\$String is NOT null.\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# $String is null.": "abs-guide.txt"},{"": "abs-guide.txt"},{"-n": "abs-guide.txt"},{"string is not null.": "abs-guide.txt"},{"The -n test requires that the string be quoted within the test brackets. Using an": "abs-guide.txt"},{"unquoted string with ! -z, or even just the unquoted string alone within test brackets": "abs-guide.txt"},{"(see Example 7-6) normally works, however, this is an unsafe practice. Always quote a": "abs-guide.txt"},{"tested string. [37]": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 7-5. Arithmetic and string comparisons": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"a=4": "abs-guide.txt"},{"b=5": "abs-guide.txt"},{"# Here \"a\" and \"b\" can be treated either as integers or strings.": "abs-guide.txt"},{"# There is some blurring between the arithmetic and string comparisons,": "abs-guide.txt"},{"#+ since Bash variables are not strongly typed.": "abs-guide.txt"},{"# Bash permits integer operations and comparisons on variables": "abs-guide.txt"},{"#+ whose value consists of all-integer characters.": "abs-guide.txt"},{"# Caution advised, however.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"if [ \"$a\" -ne \"$b\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"$a is not equal to $b\"": "abs-guide.txt"},{"echo \"(arithmetic comparison)\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 7. Tests": "abs-guide.txt"},{"": "abs-guide.txt"},{"67": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"if [ \"$a\" != \"$b\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"$a is not equal to $b.\"": "abs-guide.txt"},{"echo \"(string comparison)\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"\"4\" != \"5\"": "abs-guide.txt"},{"# ASCII 52 != ASCII 53": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# In this particular instance, both \"-ne\" and \"!=\" work.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 7-6. Testing whether a string is null": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# str-test.sh: Testing null strings and unquoted strings,": "abs-guide.txt"},{"#+ but not strings and sealing wax, not to mention cabbages and kings . . .": "abs-guide.txt"},{"# Using": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [ ... ]": "abs-guide.txt"},{"": "abs-guide.txt"},{"# If a string has not been initialized, it has no defined value.": "abs-guide.txt"},{"# This state is called \"null\" (not the same as zero!).": "abs-guide.txt"},{"if [ -n $string1 ]": "abs-guide.txt"},{"# string1 has not been declared or initialized.": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"String \\\"string1\\\" is not null.\"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo \"String \\\"string1\\\" is null.\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# Wrong result.": "abs-guide.txt"},{"# Shows $string1 as not null, although it was not initialized.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"# Let's try it again.": "abs-guide.txt"},{"if [ -n \"$string1\" ] # This time, $string1 is quoted.": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"String \\\"string1\\\" is not null.\"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo \"String \\\"string1\\\" is null.\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# Quote strings within test brackets!": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"if [ $string1 ]": "abs-guide.txt"},{"# This time, $string1 stands naked.": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"String \\\"string1\\\" is not null.\"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo \"String \\\"string1\\\" is null.\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# This works fine.": "abs-guide.txt"},{"# The [ ... ] test operator alone detects whether the string is null.": "abs-guide.txt"},{"# However it is good practice to quote it (if [ \"$string1\" ]).": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# As Stephane Chazelas points out,": "abs-guide.txt"},{"#": "abs-guide.txt"},{"if [ $string1 ]": "abs-guide.txt"},{"has one argument, \"]\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"if [ \"$string1\" ] has two arguments, the empty \"$string1\" and \"]\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 7. Tests": "abs-guide.txt"},{"": "abs-guide.txt"},{"68": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"": "abs-guide.txt"},{"string1=initialized": "abs-guide.txt"},{"if [ $string1 ]": "abs-guide.txt"},{"# Again, $string1 stands unquoted.": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"String \\\"string1\\\" is not null.\"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo \"String \\\"string1\\\" is null.\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# Again, gives correct result.": "abs-guide.txt"},{"# Still, it is better to quote it (\"$string1\"), because . . .": "abs-guide.txt"},{"": "abs-guide.txt"},{"string1=\"a = b\"": "abs-guide.txt"},{"if [ $string1 ]": "abs-guide.txt"},{"# Again, $string1 stands unquoted.": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"String \\\"string1\\\" is not null.\"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo \"String \\\"string1\\\" is null.\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# Not quoting \"$string1\" now gives wrong result!": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Thank you, also, Florian Wisser, for the \"heads-up\".": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 7-7. zmore": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# zmore": "abs-guide.txt"},{"# View gzipped files with 'more' filter.": "abs-guide.txt"},{"E_NOARGS=85": "abs-guide.txt"},{"E_NOTFOUND=86": "abs-guide.txt"},{"E_NOTGZIP=87": "abs-guide.txt"},{"if [ $# -eq 0 ] # same effect as: if [ -z \"$1\" ]": "abs-guide.txt"},{"# $1 can exist, but be empty: zmore \"\" arg2 arg3": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Usage: `basename $0` filename\" >&2": "abs-guide.txt"},{"# Error message to stderr.": "abs-guide.txt"},{"exit $E_NOARGS": "abs-guide.txt"},{"# Returns 85 as exit status of script (error code).": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"filename=$1": "abs-guide.txt"},{"if [ ! -f \"$filename\" ]": "abs-guide.txt"},{"# Quoting $filename allows for possible spaces.": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"File $filename not found!\" >&2": "abs-guide.txt"},{"# Error message to stderr.": "abs-guide.txt"},{"exit $E_NOTFOUND": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"if [ ${filename##*.} != \"gz\" ]": "abs-guide.txt"},{"# Using bracket in variable substitution.": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"File $1 is not a gzipped file!\"": "abs-guide.txt"},{"exit $E_NOTGZIP": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"zcat $1 | more": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 7. Tests": "abs-guide.txt"},{"": "abs-guide.txt"},{"69": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# Uses the 'more' filter.": "abs-guide.txt"},{"# May substitute 'less' if desired.": "abs-guide.txt"},{"exit $?": "abs-guide.txt"},{"# Script returns exit status of pipe.": "abs-guide.txt"},{"# Actually \"exit $?\" is unnecessary, as the script will, in any case,": "abs-guide.txt"},{"#+ return the exit status of the last command executed.": "abs-guide.txt"},{"": "abs-guide.txt"},{"compound comparison": "abs-guide.txt"},{"-a": "abs-guide.txt"},{"logical and": "abs-guide.txt"},{"exp1 -a exp2 returns true if both exp1 and exp2 are true.": "abs-guide.txt"},{"-o": "abs-guide.txt"},{"logical or": "abs-guide.txt"},{"exp1 -o exp2 returns true if either exp1 or exp2 is true.": "abs-guide.txt"},{"These are similar to the Bash comparison operators && and ||, used within double brackets.": "abs-guide.txt"},{"[[ condition1 && condition2 ]]": "abs-guide.txt"},{"": "abs-guide.txt"},{"The -o and -a operators work with the test command or occur within single test brackets.": "abs-guide.txt"},{"if [ \"$expr1\" -a \"$expr2\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Both expr1 and expr2 are true.\"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo \"Either expr1 or expr2 is false.\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"But, as rihad points out:": "abs-guide.txt"},{"[ 1 -eq 1 ] && [ -n \"`echo true 1>&2`\" ]": "abs-guide.txt"},{"# true": "abs-guide.txt"},{"[ 1 -eq 2 ] && [ -n \"`echo true 1>&2`\" ]": "abs-guide.txt"},{"# (no output)": "abs-guide.txt"},{"# ^^^^^^^ False condition. So far, everything as expected.": "abs-guide.txt"},{"# However ...": "abs-guide.txt"},{"[ 1 -eq 2 -a -n \"`echo true 1>&2`\" ]": "abs-guide.txt"},{"# true": "abs-guide.txt"},{"# ^^^^^^^ False condition. So, why \"true\" output?": "abs-guide.txt"},{"# Is it because both condition clauses within brackets evaluate?": "abs-guide.txt"},{"[[ 1 -eq 2 && -n \"`echo true 1>&2`\" ]]": "abs-guide.txt"},{"# (no output)": "abs-guide.txt"},{"# No, that's not it.": "abs-guide.txt"},{"# Apparently && and || \"short-circuit\" while -a and -o do not.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Refer to Example 8-3, Example 27-17, and Example A-29 to see compound comparison operators in action.": "abs-guide.txt"},{"": "abs-guide.txt"},{"7.4. Nested if/then Condition Tests": "abs-guide.txt"},{"Condition tests using the if/then construct may be nested. The net result is equivalent to using the &&": "abs-guide.txt"},{"compound comparison operator.": "abs-guide.txt"},{"a=3": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 7. Tests": "abs-guide.txt"},{"": "abs-guide.txt"},{"70": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"if [ \"$a\" -gt 0 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"if [ \"$a\" -lt 5 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"The value of \\\"a\\\" lies somewhere between 0 and 5.\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# Same result as:": "abs-guide.txt"},{"if [ \"$a\" -gt 0 ] && [ \"$a\" -lt 5 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"The value of \\\"a\\\" lies somewhere between 0 and 5.\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 37-4 and Example 17-11 demonstrate nested if/then condition tests.": "abs-guide.txt"},{"": "abs-guide.txt"},{"7.5. Testing Your Knowledge of Tests": "abs-guide.txt"},{"The systemwide xinitrc file can be used to launch the X server. This file contains quite a number of if/then": "abs-guide.txt"},{"tests. The following is excerpted from an \"ancient\" version of xinitrc (Red Hat 7.1, or thereabouts).": "abs-guide.txt"},{"if [ -f $HOME/.Xclients ]; then": "abs-guide.txt"},{"exec $HOME/.Xclients": "abs-guide.txt"},{"elif [ -f /etc/X11/xinit/Xclients ]; then": "abs-guide.txt"},{"exec /etc/X11/xinit/Xclients": "abs-guide.txt"},{"else": "abs-guide.txt"},{"# failsafe settings. Although we should never get here": "abs-guide.txt"},{"# (we provide fallbacks in Xclients as well) it can't hurt.": "abs-guide.txt"},{"xclock -geometry 100x100-5+5 &": "abs-guide.txt"},{"xterm -geometry 80x50-50+150 &": "abs-guide.txt"},{"if [ -f /usr/bin/netscape -a -f /usr/share/doc/HTML/index.html ]; then": "abs-guide.txt"},{"netscape /usr/share/doc/HTML/index.html &": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"Explain the test constructs in the above snippet, then examine an updated version of the file,": "abs-guide.txt"},{"/etc/X11/xinit/xinitrc, and analyze the if/then test constructs there. You may need to refer ahead to": "abs-guide.txt"},{"the discussions of grep, sed, and regular expressions.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 7. Tests": "abs-guide.txt"},{"": "abs-guide.txt"},{"71": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fChapter 8. Operations and Related Topics": "abs-guide.txt"},{"8.1. Operators": "abs-guide.txt"},{"assignment": "abs-guide.txt"},{"variable assignment": "abs-guide.txt"},{"Initializing or changing the value of a variable": "abs-guide.txt"},{"=": "abs-guide.txt"},{"All-purpose assignment operator, which works for both arithmetic and string assignments.": "abs-guide.txt"},{"var=27": "abs-guide.txt"},{"category=minerals": "abs-guide.txt"},{"": "abs-guide.txt"},{"# No spaces allowed after the \"=\".": "abs-guide.txt"},{"": "abs-guide.txt"},{"Do not confuse the \"=\" assignment operator with the = test operator.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"=": "abs-guide.txt"},{"": "abs-guide.txt"},{"as a test operator": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [ \"$string1\" = \"$string2\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"command": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# if [ \"X$string1\" = \"X$string2\" ] is safer,": "abs-guide.txt"},{"#+ to prevent an error message should one of the variables be empty.": "abs-guide.txt"},{"# (The prepended \"X\" characters cancel out.)": "abs-guide.txt"},{"": "abs-guide.txt"},{"arithmetic operators": "abs-guide.txt"},{"+": "abs-guide.txt"},{"plus": "abs-guide.txt"},{"minus": "abs-guide.txt"},{"*": "abs-guide.txt"},{"multiplication": "abs-guide.txt"},{"/": "abs-guide.txt"},{"division": "abs-guide.txt"},{"**": "abs-guide.txt"},{"exponentiation": "abs-guide.txt"},{"# Bash, version 2.02, introduced the \"**\" exponentiation operator.": "abs-guide.txt"},{"let \"z=5**3\"": "abs-guide.txt"},{"echo \"z = $z\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# 5 * 5 * 5": "abs-guide.txt"},{"# z = 125": "abs-guide.txt"},{"": "abs-guide.txt"},{"%": "abs-guide.txt"},{"modulo, or mod (returns the remainder of an integer division operation)": "abs-guide.txt"},{"bash$ expr 5 % 3": "abs-guide.txt"},{"2": "abs-guide.txt"},{"": "abs-guide.txt"},{"5/3 = 1, with remainder 2": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 8. Operations and Related Topics": "abs-guide.txt"},{"": "abs-guide.txt"},{"72": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"This operator finds use in, among other things, generating numbers within a specific range (see": "abs-guide.txt"},{"Example 9-11 and Example 9-15) and formatting program output (see Example 27-16 and Example": "abs-guide.txt"},{"A-6). It can even be used to generate prime numbers, (see Example A-15). Modulo turns up": "abs-guide.txt"},{"surprisingly often in numerical recipes.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 8-1. Greatest common divisor": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# gcd.sh: greatest common divisor": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Uses Euclid's algorithm": "abs-guide.txt"},{"# The \"greatest common divisor\" (gcd) of two integers": "abs-guide.txt"},{"#+ is the largest integer that will divide both, leaving no remainder.": "abs-guide.txt"},{"# Euclid's algorithm uses successive division.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"In each pass,": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"dividend <--- divisor": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"divisor <--- remainder": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"until remainder = 0.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"The gcd = dividend, on the final pass.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# For an excellent discussion of Euclid's algorithm, see": "abs-guide.txt"},{"#+ Jim Loy's site, http://www.jimloy.com/number/euclids.htm.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# -----------------------------------------------------# Argument check": "abs-guide.txt"},{"ARGS=2": "abs-guide.txt"},{"E_BADARGS=85": "abs-guide.txt"},{"if [ $# -ne \"$ARGS\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Usage: `basename $0` first-number second-number\"": "abs-guide.txt"},{"exit $E_BADARGS": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# ------------------------------------------------------": "abs-guide.txt"},{"": "abs-guide.txt"},{"gcd ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"dividend=$1": "abs-guide.txt"},{"divisor=$2": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Arbitrary assignment.": "abs-guide.txt"},{"#! It doesn't matter which of the two is larger.": "abs-guide.txt"},{"# Why not?": "abs-guide.txt"},{"": "abs-guide.txt"},{"remainder=1": "abs-guide.txt"},{"": "abs-guide.txt"},{"# If an uninitialized variable is used inside": "abs-guide.txt"},{"#+ test brackets, an error message results.": "abs-guide.txt"},{"": "abs-guide.txt"},{"until [ \"$remainder\" -eq 0 ]": "abs-guide.txt"},{"do": "abs-guide.txt"},{"# ^^^^^^^^^^ Must be previously initialized!": "abs-guide.txt"},{"let \"remainder = $dividend % $divisor\"": "abs-guide.txt"},{"dividend=$divisor": "abs-guide.txt"},{"# Now repeat with 2 smallest numbers.": "abs-guide.txt"},{"divisor=$remainder": "abs-guide.txt"},{"done": "abs-guide.txt"},{"# Euclid's algorithm": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Last $dividend is the gcd.": "abs-guide.txt"},{"": "abs-guide.txt"},{"gcd $1 $2": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 8. Operations and Related Topics": "abs-guide.txt"},{"": "abs-guide.txt"},{"73": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"echo; echo \"GCD of $1 and $2 = $dividend\"; echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Exercises :": "abs-guide.txt"},{"# --------# 1) Check command-line arguments to make sure they are integers,": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"and exit the script with an appropriate error message if not.": "abs-guide.txt"},{"# 2) Rewrite the gcd () function to use local variables.": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"+=": "abs-guide.txt"},{"plus-equal (increment variable by a constant) [38]": "abs-guide.txt"},{"let \"var += 5\" results in var being incremented by 5.": "abs-guide.txt"},{"-=": "abs-guide.txt"},{"minus-equal (decrement variable by a constant)": "abs-guide.txt"},{"*=": "abs-guide.txt"},{"times-equal (multiply variable by a constant)": "abs-guide.txt"},{"let \"var *= 4\" results in var being multiplied by 4.": "abs-guide.txt"},{"/=": "abs-guide.txt"},{"slash-equal (divide variable by a constant)": "abs-guide.txt"},{"%=": "abs-guide.txt"},{"mod-equal (remainder of dividing variable by a constant)": "abs-guide.txt"},{"Arithmetic operators often occur in an expr or let expression.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 8-2. Using Arithmetic Operations": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# Counting to 11 in 10 different ways.": "abs-guide.txt"},{"n=1; echo -n \"$n \"": "abs-guide.txt"},{"let \"n = $n + 1\"": "abs-guide.txt"},{"echo -n \"$n \"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# let \"n = n + 1\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"also works.": "abs-guide.txt"},{"": "abs-guide.txt"},{": $((n = $n + 1))": "abs-guide.txt"},{"# \":\" necessary because otherwise Bash attempts": "abs-guide.txt"},{"#+ to interpret \"$((n = $n + 1))\" as a command.": "abs-guide.txt"},{"echo -n \"$n \"": "abs-guide.txt"},{"(( n = n + 1 ))": "abs-guide.txt"},{"# A simpler alternative to the method above.": "abs-guide.txt"},{"# Thanks, David Lombard, for pointing this out.": "abs-guide.txt"},{"echo -n \"$n \"": "abs-guide.txt"},{"n=$(($n + 1))": "abs-guide.txt"},{"echo -n \"$n \"": "abs-guide.txt"},{": $[ n = $n + 1 ]": "abs-guide.txt"},{"# \":\" necessary because otherwise Bash attempts": "abs-guide.txt"},{"#+ to interpret \"$[ n = $n + 1 ]\" as a command.": "abs-guide.txt"},{"# Works even if \"n\" was initialized as a string.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 8. Operations and Related Topics": "abs-guide.txt"},{"": "abs-guide.txt"},{"74": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"echo -n \"$n \"": "abs-guide.txt"},{"n=$[ $n + 1 ]": "abs-guide.txt"},{"# Works even if \"n\" was initialized as a string.": "abs-guide.txt"},{"#* Avoid this type of construct, since it is obsolete and nonportable.": "abs-guide.txt"},{"# Thanks, Stephane Chazelas.": "abs-guide.txt"},{"echo -n \"$n \"": "abs-guide.txt"},{"# Now for C-style increment operators.": "abs-guide.txt"},{"# Thanks, Frank Wang, for pointing this out.": "abs-guide.txt"},{"let \"n++\"": "abs-guide.txt"},{"echo -n \"$n \"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# let \"++n\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"also works.": "abs-guide.txt"},{"": "abs-guide.txt"},{"(( n++ ))": "abs-guide.txt"},{"echo -n \"$n \"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# (( ++n ))": "abs-guide.txt"},{"": "abs-guide.txt"},{"also works.": "abs-guide.txt"},{"": "abs-guide.txt"},{": $(( n++ ))": "abs-guide.txt"},{"echo -n \"$n \"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# : $(( ++n )) also works.": "abs-guide.txt"},{"": "abs-guide.txt"},{": $[ n++ ]": "abs-guide.txt"},{"echo -n \"$n \"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# : $[ ++n ] also works": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Integer variables in older versions of Bash were signed long (32-bit) integers, in the range of": "abs-guide.txt"},{"-2147483648 to 2147483647. An operation that took a variable outside these limits gave an erroneous": "abs-guide.txt"},{"result.": "abs-guide.txt"},{"echo $BASH_VERSION": "abs-guide.txt"},{"a=2147483646": "abs-guide.txt"},{"echo \"a = $a\"": "abs-guide.txt"},{"let \"a+=1\"": "abs-guide.txt"},{"echo \"a = $a\"": "abs-guide.txt"},{"let \"a+=1\"": "abs-guide.txt"},{"echo \"a = $a\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# 1.14": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"a = 2147483646": "abs-guide.txt"},{"Increment \"a\".": "abs-guide.txt"},{"a = 2147483647": "abs-guide.txt"},{"increment \"a\" again, past the limit.": "abs-guide.txt"},{"a = -2147483648": "abs-guide.txt"},{"ERROR: out of range,": "abs-guide.txt"},{"+": "abs-guide.txt"},{"and the leftmost bit, the sign bit,": "abs-guide.txt"},{"+": "abs-guide.txt"},{"has been set, making the result negative.": "abs-guide.txt"},{"": "abs-guide.txt"},{"As of version >= 2.05b, Bash supports 64-bit integers.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Bash does not understand floating point arithmetic. It treats numbers containing a decimal point as": "abs-guide.txt"},{"strings.": "abs-guide.txt"},{"a=1.5": "abs-guide.txt"},{"let \"b = $a + 1.3\" # Error.": "abs-guide.txt"},{"# t2.sh: let: b = 1.5 + 1.3: syntax error in expression": "abs-guide.txt"},{"#": "abs-guide.txt"},{"(error token is \".5 + 1.3\")": "abs-guide.txt"},{"echo \"b = $b\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# b=1": "abs-guide.txt"},{"": "abs-guide.txt"},{"Use bc in scripts that that need floating point calculations or math library functions.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 8. Operations and Related Topics": "abs-guide.txt"},{"": "abs-guide.txt"},{"75": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"bitwise operators. The bitwise operators seldom make an appearance in shell scripts. Their chief use seems to": "abs-guide.txt"},{"be manipulating and testing values read from ports or sockets. \"Bit flipping\" is more relevant to compiled": "abs-guide.txt"},{"languages, such as C and C++, which provide direct access to system hardware. However, see vladz's": "abs-guide.txt"},{"ingenious use of bitwise operators in his base64.sh (Example A-54) script.": "abs-guide.txt"},{"bitwise operators": "abs-guide.txt"},{"<<": "abs-guide.txt"},{"bitwise left shift (multiplies by 2 for each shift position)": "abs-guide.txt"},{"<<=": "abs-guide.txt"},{"left-shift-equal": "abs-guide.txt"},{"let \"var <<= 2\" results in var left-shifted 2 bits (multiplied by 4)": "abs-guide.txt"},{">>": "abs-guide.txt"},{"bitwise right shift (divides by 2 for each shift position)": "abs-guide.txt"},{">>=": "abs-guide.txt"},{"right-shift-equal (inverse of <<=)": "abs-guide.txt"},{"&": "abs-guide.txt"},{"bitwise AND": "abs-guide.txt"},{"&=": "abs-guide.txt"},{"bitwise AND-equal": "abs-guide.txt"},{"|": "abs-guide.txt"},{"bitwise OR": "abs-guide.txt"},{"|=": "abs-guide.txt"},{"bitwise OR-equal": "abs-guide.txt"},{"~": "abs-guide.txt"},{"bitwise NOT": "abs-guide.txt"},{"^": "abs-guide.txt"},{"bitwise XOR": "abs-guide.txt"},{"^=": "abs-guide.txt"},{"bitwise XOR-equal": "abs-guide.txt"},{"logical (boolean) operators": "abs-guide.txt"},{"!": "abs-guide.txt"},{"NOT": "abs-guide.txt"},{"if [ ! -f $FILENAME ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"...": "abs-guide.txt"},{"": "abs-guide.txt"},{"&&": "abs-guide.txt"},{"AND": "abs-guide.txt"},{"if [ $condition1 ] && [ $condition2 ]": "abs-guide.txt"},{"# Same as: if [ $condition1 -a $condition2 ]": "abs-guide.txt"},{"# Returns true if both condition1 and condition2 hold true...": "abs-guide.txt"},{"if [[ $condition1 && $condition2 ]]": "abs-guide.txt"},{"# Also works.": "abs-guide.txt"},{"# Note that && operator not permitted inside brackets": "abs-guide.txt"},{"#+ of [ ... ] construct.": "abs-guide.txt"},{"": "abs-guide.txt"},{"&& may also be used, depending on context, in an and list to concatenate commands.": "abs-guide.txt"},{"Chapter 8. Operations and Related Topics": "abs-guide.txt"},{"": "abs-guide.txt"},{"76": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"||": "abs-guide.txt"},{"OR": "abs-guide.txt"},{"if [ $condition1 ] || [ $condition2 ]": "abs-guide.txt"},{"# Same as: if [ $condition1 -o $condition2 ]": "abs-guide.txt"},{"# Returns true if either condition1 or condition2 holds true...": "abs-guide.txt"},{"if [[ $condition1 || $condition2 ]]": "abs-guide.txt"},{"# Also works.": "abs-guide.txt"},{"# Note that || operator not permitted inside brackets": "abs-guide.txt"},{"#+ of a [ ... ] construct.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Bash tests the exit status of each statement linked with a logical operator.": "abs-guide.txt"},{"Example 8-3. Compound Condition Tests Using && and ||": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"a=24": "abs-guide.txt"},{"b=47": "abs-guide.txt"},{"if [ \"$a\" -eq 24 ] && [ \"$b\" -eq 47 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Test #1 succeeds.\"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo \"Test #1 fails.\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# ERROR:": "abs-guide.txt"},{"if [ \"$a\" -eq 24 && \"$b\" -eq 47 ]": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"attempts to execute ' [ \"$a\" -eq 24 '": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"and fails to finding matching ']'.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Note: if [[ $a -eq 24 && $b -eq 24 ]] works.": "abs-guide.txt"},{"# The double-bracket if-test is more flexible": "abs-guide.txt"},{"#+ than the single-bracket version.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"(The \"&&\" has a different meaning in line 17 than in line 6.)": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Thanks, Stephane Chazelas, for pointing this out.": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [ \"$a\" -eq 98 ] || [ \"$b\" -eq 47 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Test #2 succeeds.\"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo \"Test #2 fails.\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"# The -a and -o options provide": "abs-guide.txt"},{"#+ an alternative compound condition test.": "abs-guide.txt"},{"# Thanks to Patrick Callahan for pointing this out.": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [ \"$a\" -eq 24 -a \"$b\" -eq 47 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Test #3 succeeds.\"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo \"Test #3 fails.\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 8. Operations and Related Topics": "abs-guide.txt"},{"": "abs-guide.txt"},{"77": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"if [ \"$a\" -eq 98 -o \"$b\" -eq 47 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Test #4 succeeds.\"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo \"Test #4 fails.\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"a=rhino": "abs-guide.txt"},{"b=crocodile": "abs-guide.txt"},{"if [ \"$a\" = rhino ] && [ \"$b\" = crocodile ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Test #5 succeeds.\"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo \"Test #5 fails.\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"The && and || operators also find use in an arithmetic context.": "abs-guide.txt"},{"bash$ echo $(( 1 && 2 )) $((3 && 0)) $((4 || 0)) $((0 || 0))": "abs-guide.txt"},{"1 0 1 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"miscellaneous operators": "abs-guide.txt"},{",": "abs-guide.txt"},{"Comma operator": "abs-guide.txt"},{"The comma operator chains together two or more arithmetic operations. All the operations are": "abs-guide.txt"},{"evaluated (with possible side effects. [39]": "abs-guide.txt"},{"let \"t1 = ((5 + 3, 7 - 1, 15 - 4))\"": "abs-guide.txt"},{"echo \"t1 = $t1\"": "abs-guide.txt"},{"^^^^^^ # t1 = 11": "abs-guide.txt"},{"# Here t1 is set to the result of the last operation. Why?": "abs-guide.txt"},{"let \"t2 = ((a = 9, 15 / 3))\"": "abs-guide.txt"},{"echo \"t2 = $t2": "abs-guide.txt"},{"a = $a\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Set \"a\" and calculate \"t2\".": "abs-guide.txt"},{"# t2 = 5": "abs-guide.txt"},{"a = 9": "abs-guide.txt"},{"": "abs-guide.txt"},{"The comma operator finds use mainly in for loops. See Example 11-13.": "abs-guide.txt"},{"": "abs-guide.txt"},{"8.2. Numerical Constants": "abs-guide.txt"},{"A shell script interprets a number as decimal (base 10), unless that number has a special prefix or notation. A": "abs-guide.txt"},{"number preceded by a 0 is octal (base 8). A number preceded by 0x is hexadecimal (base 16). A": "abs-guide.txt"},{"number with an embedded # evaluates as BASE#NUMBER (with range and notational restrictions).": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 8-4. Representation of numerical constants": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# numbers.sh: Representation of numbers in different bases.": "abs-guide.txt"},{"# Decimal: the default": "abs-guide.txt"},{"let \"dec = 32\"": "abs-guide.txt"},{"echo \"decimal number = $dec\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 8. Operations and Related Topics": "abs-guide.txt"},{"": "abs-guide.txt"},{"# 32": "abs-guide.txt"},{"": "abs-guide.txt"},{"78": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# Nothing out of the ordinary here.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Octal: numbers preceded by '0' (zero)": "abs-guide.txt"},{"let \"oct = 032\"": "abs-guide.txt"},{"echo \"octal number = $oct\"": "abs-guide.txt"},{"# Expresses result in decimal.": "abs-guide.txt"},{"# --------- ------ -- -------": "abs-guide.txt"},{"": "abs-guide.txt"},{"# 26": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Hexadecimal: numbers preceded by '0x' or '0X'": "abs-guide.txt"},{"let \"hex = 0x32\"": "abs-guide.txt"},{"echo \"hexadecimal number = $hex\"": "abs-guide.txt"},{"# 50": "abs-guide.txt"},{"echo $((0x9abc))": "abs-guide.txt"},{"# 39612": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^^": "abs-guide.txt"},{"^^": "abs-guide.txt"},{"double-parentheses arithmetic expansion/evaluation": "abs-guide.txt"},{"# Expresses result in decimal.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Other bases: BASE#NUMBER": "abs-guide.txt"},{"# BASE between 2 and 64.": "abs-guide.txt"},{"# NUMBER must use symbols within the BASE range, see below.": "abs-guide.txt"},{"": "abs-guide.txt"},{"let \"bin = 2#111100111001101\"": "abs-guide.txt"},{"echo \"binary number = $bin\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# 31181": "abs-guide.txt"},{"": "abs-guide.txt"},{"let \"b32 = 32#77\"": "abs-guide.txt"},{"echo \"base-32 number = $b32\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# 231": "abs-guide.txt"},{"": "abs-guide.txt"},{"let \"b64 = 64#@_\"": "abs-guide.txt"},{"echo \"base-64 number = $b64\"": "abs-guide.txt"},{"# 4031": "abs-guide.txt"},{"# This notation only works for a limited range (2 - 64) of ASCII characters.": "abs-guide.txt"},{"# 10 digits + 26 lowercase characters + 26 uppercase characters + @ + _": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo $((36#zz)) $((2#10101010)) $((16#AF16)) $((53#1aA))": "abs-guide.txt"},{"# 1295 170 44822 3375": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"Important note:": "abs-guide.txt"},{"-------------Using a digit out of range of the specified base notation": "abs-guide.txt"},{"gives an error message.": "abs-guide.txt"},{"": "abs-guide.txt"},{"let \"bad_oct = 081\"": "abs-guide.txt"},{"# (Partial) error message output:": "abs-guide.txt"},{"# bad_oct = 081: value too great for base (error token is \"081\")": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Octal numbers use only digits in the range 0 - 7.": "abs-guide.txt"},{"exit $?": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Exit value = 1 (error)": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Thanks, Rich Bartell and Stephane Chazelas, for clarification.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 8. Operations and Related Topics": "abs-guide.txt"},{"": "abs-guide.txt"},{"79": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"": "abs-guide.txt"},{"8.3. The Double-Parentheses Construct": "abs-guide.txt"},{"Similar to the let command, the (( ... )) construct permits arithmetic expansion and evaluation. In its simplest": "abs-guide.txt"},{"form, a=$(( 5 + 3 )) would set a to 5 + 3, or 8. However, this double-parentheses construct is also a": "abs-guide.txt"},{"mechanism for allowing C-style manipulation of variables in Bash, for example, (( var++ )).": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 8-5. C-style manipulation of variables": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# c-vars.sh": "abs-guide.txt"},{"# Manipulating a variable, C-style, using the (( ... )) construct.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"(( a = 23 ))": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Setting a value, C-style,": "abs-guide.txt"},{"#+ with spaces on both sides of the \"=\".": "abs-guide.txt"},{"echo \"a (initial value) = $a\"": "abs-guide.txt"},{"# 23": "abs-guide.txt"},{"(( a++ ))": "abs-guide.txt"},{"# Post-increment 'a', C-style.": "abs-guide.txt"},{"echo \"a (after a++) = $a\"": "abs-guide.txt"},{"# 24": "abs-guide.txt"},{"(( a-- ))": "abs-guide.txt"},{"# Post-decrement 'a', C-style.": "abs-guide.txt"},{"echo \"a (after a--) = $a\"": "abs-guide.txt"},{"# 23": "abs-guide.txt"},{"": "abs-guide.txt"},{"(( ++a ))": "abs-guide.txt"},{"# Pre-increment 'a', C-style.": "abs-guide.txt"},{"echo \"a (after ++a) = $a\"": "abs-guide.txt"},{"# 24": "abs-guide.txt"},{"(( --a ))": "abs-guide.txt"},{"# Pre-decrement 'a', C-style.": "abs-guide.txt"},{"echo \"a (after --a) = $a\"": "abs-guide.txt"},{"# 23": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"########################################################": "abs-guide.txt"},{"# Note that, as in C, pre- and post-decrement operators": "abs-guide.txt"},{"#+ have different side-effects.": "abs-guide.txt"},{"n=1; let --n && echo \"True\" || echo \"False\"": "abs-guide.txt"},{"n=1; let n-- && echo \"True\" || echo \"False\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# False": "abs-guide.txt"},{"# True": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Thanks, Jeroen Domburg.": "abs-guide.txt"},{"########################################################": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"(( t = a<45?7:11 ))": "abs-guide.txt"},{"# C-style trinary operator.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^ ^ ^": "abs-guide.txt"},{"echo \"If a < 45, then t = 7, else t = 11.\" # a = 23": "abs-guide.txt"},{"echo \"t = $t \"": "abs-guide.txt"},{"# t = 7": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"# ----------------# Easter Egg alert!": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 8. Operations and Related Topics": "abs-guide.txt"},{"": "abs-guide.txt"},{"80": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# ----------------# Chet Ramey seems to have snuck a bunch of undocumented C-style": "abs-guide.txt"},{"#+ constructs into Bash (actually adapted from ksh, pretty much).": "abs-guide.txt"},{"# In the Bash docs, Ramey calls (( ... )) shell arithmetic,": "abs-guide.txt"},{"#+ but it goes far beyond that.": "abs-guide.txt"},{"# Sorry, Chet, the secret is out.": "abs-guide.txt"},{"# See also \"for\" and \"while\" loops using the (( ... )) construct.": "abs-guide.txt"},{"# These work only with version 2.04 or later of Bash.": "abs-guide.txt"},{"exit": "abs-guide.txt"},{"": "abs-guide.txt"},{"See also Example 11-13 and Example 8-4.": "abs-guide.txt"},{"": "abs-guide.txt"},{"8.4. Operator Precedence": "abs-guide.txt"},{"In a script, operations execute in order of precedence: the higher precedence operations execute before the": "abs-guide.txt"},{"lower precedence ones. [40]": "abs-guide.txt"},{"": "abs-guide.txt"},{"Table 8-1. Operator Precedence": "abs-guide.txt"},{"Operator": "abs-guide.txt"},{"": "abs-guide.txt"},{"Meaning": "abs-guide.txt"},{"": "abs-guide.txt"},{"var++ var-++var --var": "abs-guide.txt"},{"": "abs-guide.txt"},{"post-increment, post-decrement": "abs-guide.txt"},{"pre-increment, pre-decrement": "abs-guide.txt"},{"": "abs-guide.txt"},{"! ~": "abs-guide.txt"},{"": "abs-guide.txt"},{"negation": "abs-guide.txt"},{"": "abs-guide.txt"},{"logical / bitwise, inverts sense of": "abs-guide.txt"},{"following operator": "abs-guide.txt"},{"": "abs-guide.txt"},{"**": "abs-guide.txt"},{"* / %": "abs-guide.txt"},{"+ -": "abs-guide.txt"},{"": "abs-guide.txt"},{"exponentiation": "abs-guide.txt"},{"multiplication, division, modulo": "abs-guide.txt"},{"addition, subtraction": "abs-guide.txt"},{"": "abs-guide.txt"},{"arithmetic operation": "abs-guide.txt"},{"arithmetic operation": "abs-guide.txt"},{"arithmetic operation": "abs-guide.txt"},{"": "abs-guide.txt"},{"<< >>": "abs-guide.txt"},{"": "abs-guide.txt"},{"left, right shift": "abs-guide.txt"},{"": "abs-guide.txt"},{"bitwise": "abs-guide.txt"},{"": "abs-guide.txt"},{"-z -n": "abs-guide.txt"},{"unary comparison": "abs-guide.txt"},{"-e -f -t -x, etc.": "abs-guide.txt"},{"unary comparison": "abs-guide.txt"},{"< -lt > -gt <= -le >= -ge compound comparison": "abs-guide.txt"},{"-nt -ot -ef": "abs-guide.txt"},{"compound comparison": "abs-guide.txt"},{"== -eq != -ne": "abs-guide.txt"},{"equality / inequality": "abs-guide.txt"},{"&": "abs-guide.txt"},{"^": "abs-guide.txt"},{"|": "abs-guide.txt"},{"": "abs-guide.txt"},{"AND": "abs-guide.txt"},{"XOR": "abs-guide.txt"},{"OR": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 8. Operations and Related Topics": "abs-guide.txt"},{"": "abs-guide.txt"},{"Comments": "abs-guide.txt"},{"HIGHEST PRECEDENCE": "abs-guide.txt"},{"C-style operators": "abs-guide.txt"},{"": "abs-guide.txt"},{"string is/is-not null": "abs-guide.txt"},{"file-test": "abs-guide.txt"},{"string and integer": "abs-guide.txt"},{"file-test": "abs-guide.txt"},{"test operators, string and integer": "abs-guide.txt"},{"bitwise": "abs-guide.txt"},{"exclusive OR, bitwise": "abs-guide.txt"},{"bitwise": "abs-guide.txt"},{"": "abs-guide.txt"},{"81": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"&& -a": "abs-guide.txt"},{"|| -o": "abs-guide.txt"},{"": "abs-guide.txt"},{"AND": "abs-guide.txt"},{"OR": "abs-guide.txt"},{"": "abs-guide.txt"},{"logical, compound comparison": "abs-guide.txt"},{"logical, compound comparison": "abs-guide.txt"},{"": "abs-guide.txt"},{"?:": "abs-guide.txt"},{"=": "abs-guide.txt"},{"": "abs-guide.txt"},{"trinary operator": "abs-guide.txt"},{"assignment": "abs-guide.txt"},{"": "abs-guide.txt"},{"C-style": "abs-guide.txt"},{"(do not confuse with equality": "abs-guide.txt"},{"test)": "abs-guide.txt"},{"times-equal, divide-equal,": "abs-guide.txt"},{"mod-equal, etc.": "abs-guide.txt"},{"": "abs-guide.txt"},{"*= /= %= += -= <<= >>= &= combination assignment": "abs-guide.txt"},{"": "abs-guide.txt"},{",": "abs-guide.txt"},{"": "abs-guide.txt"},{"comma": "abs-guide.txt"},{"": "abs-guide.txt"},{"links a sequence of operations": "abs-guide.txt"},{"LOWEST PRECEDENCE": "abs-guide.txt"},{"": "abs-guide.txt"},{"In practice, all you really need to remember is the following:": "abs-guide.txt"},{"\u2022 The \"My Dear Aunt Sally\" mantra (multiply, divide, add, subtract) for the familiar arithmetic": "abs-guide.txt"},{"operations.": "abs-guide.txt"},{"\u2022 The compound logical operators, &&, ||, -a, and -o have low precedence.": "abs-guide.txt"},{"\u2022 The order of evaluation of equal-precedence operators is usually left-to-right.": "abs-guide.txt"},{"Now, let's utilize our knowledge of operator precedence to analyze a couple of lines from the": "abs-guide.txt"},{"/etc/init.d/functions file, as found in the Fedora Core Linux distro.": "abs-guide.txt"},{"while [ -n \"$remaining\" -a \"$retry\" -gt 0 ]; do": "abs-guide.txt"},{"# This looks rather daunting at first glance.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Separate the conditions:": "abs-guide.txt"},{"while [ -n \"$remaining\" -a \"$retry\" -gt 0 ]; do": "abs-guide.txt"},{"#": "abs-guide.txt"},{"--condition 1-- ^^ --condition 2#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"If variable \"$remaining\" is not zero length": "abs-guide.txt"},{"AND (-a)": "abs-guide.txt"},{"variable \"$retry\" is greater-than zero": "abs-guide.txt"},{"then": "abs-guide.txt"},{"the [ expresion-within-condition-brackets ] returns success (0)": "abs-guide.txt"},{"and the while-loop executes an iteration.": "abs-guide.txt"},{"==============================================================": "abs-guide.txt"},{"Evaluate \"condition 1\" and \"condition 2\" ***before***": "abs-guide.txt"},{"ANDing them. Why? Because the AND (-a) has a lower precedence": "abs-guide.txt"},{"than the -n and -gt operators,": "abs-guide.txt"},{"and therefore gets evaluated *last*.": "abs-guide.txt"},{"": "abs-guide.txt"},{"#################################################################": "abs-guide.txt"},{"if [ -f /etc/sysconfig/i18n -a -z \"${NOLOCALE:-}\" ] ; then": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Again, separate the conditions:": "abs-guide.txt"},{"if [ -f /etc/sysconfig/i18n -a -z \"${NOLOCALE:-}\" ] ; then": "abs-guide.txt"},{"#": "abs-guide.txt"},{"--condition 1--------- ^^ --condition 2----# If file \"/etc/sysconfig/i18n\" exists": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"AND (-a)": "abs-guide.txt"},{"#+ variable $NOLOCALE is zero length": "abs-guide.txt"},{"#+ then": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 8. Operations and Related Topics": "abs-guide.txt"},{"": "abs-guide.txt"},{"82": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"the [ test-expresion-within-condition-brackets ] returns success (0)": "abs-guide.txt"},{"and the commands following execute.": "abs-guide.txt"},{"As before, the AND (-a) gets evaluated *last*": "abs-guide.txt"},{"because it has the lowest precedence of the operators within": "abs-guide.txt"},{"the test brackets.": "abs-guide.txt"},{"==============================================================": "abs-guide.txt"},{"Note:": "abs-guide.txt"},{"${NOLOCALE:-} is a parameter expansion that seems redundant.": "abs-guide.txt"},{"But, if $NOLOCALE has not been declared, it gets set to *null*,": "abs-guide.txt"},{"in effect declaring it.": "abs-guide.txt"},{"This makes a difference in some contexts.": "abs-guide.txt"},{"": "abs-guide.txt"},{"To avoid confusion or error in a complex sequence of test operators, break up the sequence into": "abs-guide.txt"},{"bracketed sections.": "abs-guide.txt"},{"if [ \"$v1\" -gt \"$v2\" -o \"$v1\" -lt \"$v2\"": "abs-guide.txt"},{"# Unclear what's going on here...": "abs-guide.txt"},{"": "abs-guide.txt"},{"-a": "abs-guide.txt"},{"": "abs-guide.txt"},{"-e \"$filename\" ]": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [[ \"$v1\" -gt \"$v2\" ]] || [[ \"$v1\" -lt \"$v2\" ]] && [[ -e \"$filename\" ]]": "abs-guide.txt"},{"# Much better -- the condition tests are grouped in logical sections.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 8. Operations and Related Topics": "abs-guide.txt"},{"": "abs-guide.txt"},{"83": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fPart 3. Beyond the Basics": "abs-guide.txt"},{"Table of Contents": "abs-guide.txt"},{"9. Another Look at Variables": "abs-guide.txt"},{"9.1. Internal Variables": "abs-guide.txt"},{"9.2. Typing variables: declare or typeset": "abs-guide.txt"},{"9.3. $RANDOM: generate random integer": "abs-guide.txt"},{"10. Manipulating Variables": "abs-guide.txt"},{"10.1. Manipulating Strings": "abs-guide.txt"},{"10.2. Parameter Substitution": "abs-guide.txt"},{"11. Loops and Branches": "abs-guide.txt"},{"11.1. Loops": "abs-guide.txt"},{"11.2. Nested Loops": "abs-guide.txt"},{"11.3. Loop Control": "abs-guide.txt"},{"11.4. Testing and Branching": "abs-guide.txt"},{"12. Command Substitution": "abs-guide.txt"},{"13. Arithmetic Expansion": "abs-guide.txt"},{"14. Recess Time": "abs-guide.txt"},{"": "abs-guide.txt"},{"Part 3. Beyond the Basics": "abs-guide.txt"},{"": "abs-guide.txt"},{"84": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fChapter 9. Another Look at Variables": "abs-guide.txt"},{"Used properly, variables can add power and flexibility to scripts. This requires learning their subtleties and": "abs-guide.txt"},{"nuances.": "abs-guide.txt"},{"": "abs-guide.txt"},{"9.1. Internal Variables": "abs-guide.txt"},{"Builtin variables:": "abs-guide.txt"},{"variables affecting bash script behavior": "abs-guide.txt"},{"$BASH": "abs-guide.txt"},{"The path to the Bash binary itself": "abs-guide.txt"},{"bash$ echo $BASH": "abs-guide.txt"},{"/bin/bash": "abs-guide.txt"},{"": "abs-guide.txt"},{"$BASH_ENV": "abs-guide.txt"},{"An environmental variable pointing to a Bash startup file to be read when a script is invoked": "abs-guide.txt"},{"$BASH_SUBSHELL": "abs-guide.txt"},{"A variable indicating the subshell level. This is a new addition to Bash, version 3.": "abs-guide.txt"},{"See Example 21-1 for usage.": "abs-guide.txt"},{"$BASHPID": "abs-guide.txt"},{"Process ID of the current instance of Bash. This is not the same as the $$ variable, but it often gives": "abs-guide.txt"},{"the same result.": "abs-guide.txt"},{"bash4$ echo $$": "abs-guide.txt"},{"11015": "abs-guide.txt"},{"": "abs-guide.txt"},{"bash4$ echo $BASHPID": "abs-guide.txt"},{"11015": "abs-guide.txt"},{"": "abs-guide.txt"},{"bash4$ ps ax | grep bash4": "abs-guide.txt"},{"11015 pts/2": "abs-guide.txt"},{"R": "abs-guide.txt"},{"0:00 bash4": "abs-guide.txt"},{"": "abs-guide.txt"},{"But ...": "abs-guide.txt"},{"#!/bin/bash4": "abs-guide.txt"},{"echo \"\\$\\$ outside of subshell = $$\"": "abs-guide.txt"},{"echo \"\\$BASH_SUBSHELL outside of subshell = $BASH_SUBSHELL\"": "abs-guide.txt"},{"echo \"\\$BASHPID outside of subshell = $BASHPID\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# 9602": "abs-guide.txt"},{"# 0": "abs-guide.txt"},{"# 9602": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"( echo \"\\$\\$ inside of subshell = $$\"": "abs-guide.txt"},{"echo \"\\$BASH_SUBSHELL inside of subshell = $BASH_SUBSHELL\"": "abs-guide.txt"},{"echo \"\\$BASHPID inside of subshell = $BASHPID\" )": "abs-guide.txt"},{"# Note that $$ returns PID of parent process.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# 9602": "abs-guide.txt"},{"# 1": "abs-guide.txt"},{"# 9603": "abs-guide.txt"},{"": "abs-guide.txt"},{"$BASH_VERSINFO[n]": "abs-guide.txt"},{"A 6-element array containing version information about the installed release of Bash. This is similar": "abs-guide.txt"},{"to $BASH_VERSION, below, but a bit more detailed.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 9. Another Look at Variables": "abs-guide.txt"},{"": "abs-guide.txt"},{"85": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# Bash version info:": "abs-guide.txt"},{"for n in 0 1 2 3 4 5": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo \"BASH_VERSINFO[$n] = ${BASH_VERSINFO[$n]}\"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"BASH_VERSINFO[0]": "abs-guide.txt"},{"BASH_VERSINFO[1]": "abs-guide.txt"},{"BASH_VERSINFO[2]": "abs-guide.txt"},{"BASH_VERSINFO[3]": "abs-guide.txt"},{"BASH_VERSINFO[4]": "abs-guide.txt"},{"BASH_VERSINFO[5]": "abs-guide.txt"},{"": "abs-guide.txt"},{"=": "abs-guide.txt"},{"=": "abs-guide.txt"},{"=": "abs-guide.txt"},{"=": "abs-guide.txt"},{"=": "abs-guide.txt"},{"=": "abs-guide.txt"},{"": "abs-guide.txt"},{"3": "abs-guide.txt"},{"00": "abs-guide.txt"},{"14": "abs-guide.txt"},{"1": "abs-guide.txt"},{"release": "abs-guide.txt"},{"i386-redhat-linux-gnu": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Major version no.": "abs-guide.txt"},{"Minor version no.": "abs-guide.txt"},{"Patch level.": "abs-guide.txt"},{"Build version.": "abs-guide.txt"},{"Release status.": "abs-guide.txt"},{"Architecture": "abs-guide.txt"},{"(same as $MACHTYPE).": "abs-guide.txt"},{"": "abs-guide.txt"},{"$BASH_VERSION": "abs-guide.txt"},{"The version of Bash installed on the system": "abs-guide.txt"},{"bash$ echo $BASH_VERSION": "abs-guide.txt"},{"3.2.25(1)-release": "abs-guide.txt"},{"": "abs-guide.txt"},{"tcsh% echo $BASH_VERSION": "abs-guide.txt"},{"BASH_VERSION: Undefined variable.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Checking $BASH_VERSION is a good method of determining which shell is running. $SHELL does": "abs-guide.txt"},{"not necessarily give the correct answer.": "abs-guide.txt"},{"$CDPATH": "abs-guide.txt"},{"A colon-separated list of search paths available to the cd command, similar in function to the $PATH": "abs-guide.txt"},{"variable for binaries. The $CDPATH variable may be set in the local ~/.bashrc file.": "abs-guide.txt"},{"bash$ cd bash-doc": "abs-guide.txt"},{"bash: cd: bash-doc: No such file or directory": "abs-guide.txt"},{"": "abs-guide.txt"},{"bash$ CDPATH=/usr/share/doc": "abs-guide.txt"},{"bash$ cd bash-doc": "abs-guide.txt"},{"/usr/share/doc/bash-doc": "abs-guide.txt"},{"": "abs-guide.txt"},{"bash$ echo $PWD": "abs-guide.txt"},{"/usr/share/doc/bash-doc": "abs-guide.txt"},{"": "abs-guide.txt"},{"$DIRSTACK": "abs-guide.txt"},{"The top value in the directory stack [41] (affected by pushd and popd)": "abs-guide.txt"},{"This builtin variable corresponds to the dirs command, however dirs shows the entire contents of the": "abs-guide.txt"},{"directory stack.": "abs-guide.txt"},{"$EDITOR": "abs-guide.txt"},{"The default editor invoked by a script, usually vi or emacs.": "abs-guide.txt"},{"$EUID": "abs-guide.txt"},{"\"effective\" user ID number": "abs-guide.txt"},{"Identification number of whatever identity the current user has assumed, perhaps by means of su.": "abs-guide.txt"},{"The $EUID is not necessarily the same as the $UID.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 9. Another Look at Variables": "abs-guide.txt"},{"": "abs-guide.txt"},{"86": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"$FUNCNAME": "abs-guide.txt"},{"Name of the current function": "abs-guide.txt"},{"xyz23 ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"echo \"$FUNCNAME now executing.\"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"# xyz23 now executing.": "abs-guide.txt"},{"": "abs-guide.txt"},{"xyz23": "abs-guide.txt"},{"echo \"FUNCNAME = $FUNCNAME\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# FUNCNAME =": "abs-guide.txt"},{"# Null value outside a function.": "abs-guide.txt"},{"": "abs-guide.txt"},{"See also Example A-50.": "abs-guide.txt"},{"$GLOBIGNORE": "abs-guide.txt"},{"A list of filename patterns to be excluded from matching in globbing.": "abs-guide.txt"},{"$GROUPS": "abs-guide.txt"},{"Groups current user belongs to": "abs-guide.txt"},{"This is a listing (array) of the group id numbers for current user, as recorded in /etc/passwd and": "abs-guide.txt"},{"/etc/group.": "abs-guide.txt"},{"root# echo $GROUPS": "abs-guide.txt"},{"0": "abs-guide.txt"},{"": "abs-guide.txt"},{"root# echo ${GROUPS[1]}": "abs-guide.txt"},{"1": "abs-guide.txt"},{"": "abs-guide.txt"},{"root# echo ${GROUPS[5]}": "abs-guide.txt"},{"6": "abs-guide.txt"},{"": "abs-guide.txt"},{"$HOME": "abs-guide.txt"},{"Home directory of the user, usually /home/username (see Example 10-7)": "abs-guide.txt"},{"$HOSTNAME": "abs-guide.txt"},{"The hostname command assigns the system host name at bootup in an init script. However, the": "abs-guide.txt"},{"gethostname() function sets the Bash internal variable $HOSTNAME. See also Example 10-7.": "abs-guide.txt"},{"$HOSTTYPE": "abs-guide.txt"},{"host type": "abs-guide.txt"},{"Like $MACHTYPE, identifies the system hardware.": "abs-guide.txt"},{"bash$ echo $HOSTTYPE": "abs-guide.txt"},{"i686": "abs-guide.txt"},{"": "abs-guide.txt"},{"$IFS": "abs-guide.txt"},{"internal field separator": "abs-guide.txt"},{"This variable determines how Bash recognizes fields, or word boundaries, when it interprets character": "abs-guide.txt"},{"strings.": "abs-guide.txt"},{"": "abs-guide.txt"},{"$IFS defaults to whitespace (space, tab, and newline), but may be changed, for example, to parse a": "abs-guide.txt"},{"comma-separated data file. Note that $* uses the first character held in $IFS. See Example 5-1.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 9. Another Look at Variables": "abs-guide.txt"},{"": "abs-guide.txt"},{"87": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"bash$ echo \"$IFS\"": "abs-guide.txt"},{"(With $IFS set to default, a blank line displays.)": "abs-guide.txt"},{"": "abs-guide.txt"},{"bash$ echo \"$IFS\" | cat -vte": "abs-guide.txt"},{"^I$": "abs-guide.txt"},{"$": "abs-guide.txt"},{"(Show whitespace: here a single space, ^I [horizontal tab],": "abs-guide.txt"},{"and newline, and display \"$\" at end-of-line.)": "abs-guide.txt"},{"": "abs-guide.txt"},{"bash$ bash -c 'set w x y z; IFS=\":-;\"; echo \"$*\"'": "abs-guide.txt"},{"w:x:y:z": "abs-guide.txt"},{"(Read commands from string and assign any arguments to pos params.)": "abs-guide.txt"},{"": "abs-guide.txt"},{"Set $IFS to eliminate whitespace in pathnames.": "abs-guide.txt"},{"IFS=\"$(printf '\\n\\t')\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Per David Wheeler.": "abs-guide.txt"},{"": "abs-guide.txt"},{"$IFS does not handle whitespace the same as it does other characters.": "abs-guide.txt"},{"Example 9-1. $IFS and whitespace": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# ifs.sh": "abs-guide.txt"},{"": "abs-guide.txt"},{"var1=\"a+b+c\"": "abs-guide.txt"},{"var2=\"d-e-f\"": "abs-guide.txt"},{"var3=\"g,h,i\"": "abs-guide.txt"},{"IFS=+": "abs-guide.txt"},{"# The plus sign will be interpreted as a separator.": "abs-guide.txt"},{"echo $var1": "abs-guide.txt"},{"# a b c": "abs-guide.txt"},{"echo $var2": "abs-guide.txt"},{"# d-e-f": "abs-guide.txt"},{"echo $var3": "abs-guide.txt"},{"# g,h,i": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"IFS=\"-\"": "abs-guide.txt"},{"# The plus sign reverts to default interpretation.": "abs-guide.txt"},{"# The minus sign will be interpreted as a separator.": "abs-guide.txt"},{"echo $var1": "abs-guide.txt"},{"# a+b+c": "abs-guide.txt"},{"echo $var2": "abs-guide.txt"},{"# d e f": "abs-guide.txt"},{"echo $var3": "abs-guide.txt"},{"# g,h,i": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"IFS=\",\"": "abs-guide.txt"},{"# The comma will be interpreted as a separator.": "abs-guide.txt"},{"# The minus sign reverts to default interpretation.": "abs-guide.txt"},{"echo $var1": "abs-guide.txt"},{"# a+b+c": "abs-guide.txt"},{"echo $var2": "abs-guide.txt"},{"# d-e-f": "abs-guide.txt"},{"echo $var3": "abs-guide.txt"},{"# g h i": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 9. Another Look at Variables": "abs-guide.txt"},{"": "abs-guide.txt"},{"88": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"IFS=\" \"": "abs-guide.txt"},{"# The space character will be interpreted as a separator.": "abs-guide.txt"},{"# The comma reverts to default interpretation.": "abs-guide.txt"},{"echo $var1": "abs-guide.txt"},{"# a+b+c": "abs-guide.txt"},{"echo $var2": "abs-guide.txt"},{"# d-e-f": "abs-guide.txt"},{"echo $var3": "abs-guide.txt"},{"# g,h,i": "abs-guide.txt"},{"# ======================================================== #": "abs-guide.txt"},{"# However ...": "abs-guide.txt"},{"# $IFS treats whitespace differently than other characters.": "abs-guide.txt"},{"output_args_one_per_line()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"for arg": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo \"[$arg]\"": "abs-guide.txt"},{"done # ^": "abs-guide.txt"},{"^": "abs-guide.txt"},{"Embed within brackets, for your viewing pleasure.": "abs-guide.txt"},{"}": "abs-guide.txt"},{"echo; echo \"IFS=\\\" \\\"\"": "abs-guide.txt"},{"echo \"-------\"": "abs-guide.txt"},{"IFS=\" \"": "abs-guide.txt"},{"var=\" a b c": "abs-guide.txt"},{"\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^ ^^": "abs-guide.txt"},{"^^^": "abs-guide.txt"},{"output_args_one_per_line $var": "abs-guide.txt"},{"# [a]": "abs-guide.txt"},{"# [b]": "abs-guide.txt"},{"# [c]": "abs-guide.txt"},{"": "abs-guide.txt"},{"# output_args_one_per_line `echo \" a": "abs-guide.txt"},{"": "abs-guide.txt"},{"b c": "abs-guide.txt"},{"": "abs-guide.txt"},{"\"`": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo; echo \"IFS=:\"": "abs-guide.txt"},{"echo \"-----\"": "abs-guide.txt"},{"IFS=:": "abs-guide.txt"},{"var=\":a::b:c:::\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^ ^^": "abs-guide.txt"},{"^^^": "abs-guide.txt"},{"output_args_one_per_line $var": "abs-guide.txt"},{"# []": "abs-guide.txt"},{"# [a]": "abs-guide.txt"},{"# []": "abs-guide.txt"},{"# [b]": "abs-guide.txt"},{"# [c]": "abs-guide.txt"},{"# []": "abs-guide.txt"},{"# []": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Same pattern as above,": "abs-guide.txt"},{"#+ but substituting \":\" for \" \"": "abs-guide.txt"},{"": "abs-guide.txt"},{"...": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Note \"empty\" brackets.": "abs-guide.txt"},{"# The same thing happens with the \"FS\" field separator in awk.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"exit": "abs-guide.txt"},{"": "abs-guide.txt"},{"(Many thanks, St\u00e9phane Chazelas, for clarification and above examples.)": "abs-guide.txt"},{"See also Example 16-41, Example 11-8, and Example 19-14 for instructive examples of using $IFS.": "abs-guide.txt"},{"$IGNOREEOF": "abs-guide.txt"},{"Ignore EOF: how many end-of-files (control-D) the shell will ignore before logging out.": "abs-guide.txt"},{"$LC_COLLATE": "abs-guide.txt"},{"Chapter 9. Another Look at Variables": "abs-guide.txt"},{"": "abs-guide.txt"},{"89": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"Often set in the .bashrc or /etc/profile files, this variable controls collation order in filename": "abs-guide.txt"},{"expansion and pattern matching. If mishandled, LC_COLLATE can cause unexpected results in": "abs-guide.txt"},{"filename globbing.": "abs-guide.txt"},{"As of version 2.05 of Bash, filename globbing no longer distinguishes between": "abs-guide.txt"},{"lowercase and uppercase letters in a character range between brackets. For example, ls": "abs-guide.txt"},{"[A-M]* would match both File1.txt and file1.txt. To revert to the customary": "abs-guide.txt"},{"behavior of bracket matching, set LC_COLLATE to C by an export": "abs-guide.txt"},{"LC_COLLATE=C in /etc/profile and/or ~/.bashrc.": "abs-guide.txt"},{"$LC_CTYPE": "abs-guide.txt"},{"This internal variable controls character interpretation in globbing and pattern matching.": "abs-guide.txt"},{"$LINENO": "abs-guide.txt"},{"This variable is the line number of the shell script in which this variable appears. It has significance": "abs-guide.txt"},{"only within the script in which it appears, and is chiefly useful for debugging purposes.": "abs-guide.txt"},{"# *** BEGIN DEBUG BLOCK ***": "abs-guide.txt"},{"last_cmd_arg=$_ # Save it.": "abs-guide.txt"},{"echo \"At line number $LINENO, variable \\\"v1\\\" = $v1\"": "abs-guide.txt"},{"echo \"Last command argument processed = $last_cmd_arg\"": "abs-guide.txt"},{"# *** END DEBUG BLOCK ***": "abs-guide.txt"},{"": "abs-guide.txt"},{"$MACHTYPE": "abs-guide.txt"},{"machine type": "abs-guide.txt"},{"Identifies the system hardware.": "abs-guide.txt"},{"bash$ echo $MACHTYPE": "abs-guide.txt"},{"i686": "abs-guide.txt"},{"": "abs-guide.txt"},{"$OLDPWD": "abs-guide.txt"},{"Old working directory (\"OLD-Print-Working-Directory\", previous directory you were in).": "abs-guide.txt"},{"$OSTYPE": "abs-guide.txt"},{"operating system type": "abs-guide.txt"},{"bash$ echo $OSTYPE": "abs-guide.txt"},{"linux": "abs-guide.txt"},{"": "abs-guide.txt"},{"$PATH": "abs-guide.txt"},{"Path to binaries, usually /usr/bin/, /usr/X11R6/bin/, /usr/local/bin, etc.": "abs-guide.txt"},{"When given a command, the shell automatically does a hash table search on the directories listed in": "abs-guide.txt"},{"the path for the executable. The path is stored in the environmental variable, $PATH, a list of": "abs-guide.txt"},{"directories, separated by colons. Normally, the system stores the $PATH definition in": "abs-guide.txt"},{"/etc/profile and/or ~/.bashrc (see Appendix H).": "abs-guide.txt"},{"bash$ echo $PATH": "abs-guide.txt"},{"/bin:/usr/bin:/usr/local/bin:/usr/X11R6/bin:/sbin:/usr/sbin": "abs-guide.txt"},{"": "abs-guide.txt"},{"PATH=${PATH}:/opt/bin appends the /opt/bin directory to the current path. In a script, it": "abs-guide.txt"},{"may be expedient to temporarily add a directory to the path in this way. When the script exits, this": "abs-guide.txt"},{"restores the original $PATH (a child process, such as a script, may not change the environment of the": "abs-guide.txt"},{"parent process, the shell).": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 9. Another Look at Variables": "abs-guide.txt"},{"": "abs-guide.txt"},{"90": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"The current \"working directory\", ./, is usually omitted from the $PATH as a security": "abs-guide.txt"},{"measure.": "abs-guide.txt"},{"$PIPESTATUS": "abs-guide.txt"},{"Array variable holding exit status(es) of last executed foreground pipe.": "abs-guide.txt"},{"bash$ echo $PIPESTATUS": "abs-guide.txt"},{"0": "abs-guide.txt"},{"bash$ ls -al | bogus_command": "abs-guide.txt"},{"bash: bogus_command: command not found": "abs-guide.txt"},{"bash$ echo ${PIPESTATUS[1]}": "abs-guide.txt"},{"127": "abs-guide.txt"},{"bash$ ls -al | bogus_command": "abs-guide.txt"},{"bash: bogus_command: command not found": "abs-guide.txt"},{"bash$ echo $?": "abs-guide.txt"},{"127": "abs-guide.txt"},{"": "abs-guide.txt"},{"The members of the $PIPESTATUS array hold the exit status of each respective command executed": "abs-guide.txt"},{"in a pipe. $PIPESTATUS[0] holds the exit status of the first command in the pipe,": "abs-guide.txt"},{"$PIPESTATUS[1] the exit status of the second command, and so on.": "abs-guide.txt"},{"The $PIPESTATUS variable may contain an erroneous 0 value in a login shell (in": "abs-guide.txt"},{"releases prior to 3.0 of Bash).": "abs-guide.txt"},{"tcsh% bash": "abs-guide.txt"},{"bash$ who | grep nobody | sort": "abs-guide.txt"},{"bash$ echo ${PIPESTATUS[*]}": "abs-guide.txt"},{"0": "abs-guide.txt"},{"": "abs-guide.txt"},{"The above lines contained in a script would produce the expected 0 1 0 output.": "abs-guide.txt"},{"Thank you, Wayne Pollock for pointing this out and supplying the above example.": "abs-guide.txt"},{"The $PIPESTATUS variable gives unexpected results in some contexts.": "abs-guide.txt"},{"bash$ echo $BASH_VERSION": "abs-guide.txt"},{"3.00.14(1)-release": "abs-guide.txt"},{"bash$ $ ls | bogus_command | wc": "abs-guide.txt"},{"bash: bogus_command: command not found": "abs-guide.txt"},{"0": "abs-guide.txt"},{"0": "abs-guide.txt"},{"0": "abs-guide.txt"},{"bash$ echo ${PIPESTATUS[@]}": "abs-guide.txt"},{"141 127 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chet Ramey attributes the above output to the behavior of ls. If ls writes to a pipe": "abs-guide.txt"},{"whose output is not read, then SIGPIPE kills it, and its exit status is 141. Otherwise": "abs-guide.txt"},{"its exit status is 0, as expected. This likewise is the case for tr.": "abs-guide.txt"},{"$PIPESTATUS is a \"volatile\" variable. It needs to be captured immediately after the": "abs-guide.txt"},{"pipe in question, before any other command intervenes.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 9. Another Look at Variables": "abs-guide.txt"},{"": "abs-guide.txt"},{"91": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"bash$ $ ls | bogus_command | wc": "abs-guide.txt"},{"bash: bogus_command: command not found": "abs-guide.txt"},{"0": "abs-guide.txt"},{"0": "abs-guide.txt"},{"0": "abs-guide.txt"},{"bash$ echo ${PIPESTATUS[@]}": "abs-guide.txt"},{"0 127 0": "abs-guide.txt"},{"bash$ echo ${PIPESTATUS[@]}": "abs-guide.txt"},{"0": "abs-guide.txt"},{"": "abs-guide.txt"},{"The pipefail option may be useful in cases where $PIPESTATUS does not give the": "abs-guide.txt"},{"desired information.": "abs-guide.txt"},{"$PPID": "abs-guide.txt"},{"The $PPID of a process is the process ID (pid) of its parent process. [42]": "abs-guide.txt"},{"Compare this with the pidof command.": "abs-guide.txt"},{"$PROMPT_COMMAND": "abs-guide.txt"},{"A variable holding a command to be executed just before the primary prompt, $PS1 is to be": "abs-guide.txt"},{"displayed.": "abs-guide.txt"},{"$PS1": "abs-guide.txt"},{"This is the main prompt, seen at the command-line.": "abs-guide.txt"},{"$PS2": "abs-guide.txt"},{"The secondary prompt, seen when additional input is expected. It displays as \">\".": "abs-guide.txt"},{"$PS3": "abs-guide.txt"},{"The tertiary prompt, displayed in a select loop (see Example 11-30).": "abs-guide.txt"},{"$PS4": "abs-guide.txt"},{"The quartenary prompt, shown at the beginning of each line of output when invoking a script with the": "abs-guide.txt"},{"-x [verbose trace] option. It displays as \"+\".": "abs-guide.txt"},{"As a debugging aid, it may be useful to embed diagnostic information in $PS4.": "abs-guide.txt"},{"P4='$(read time junk < /proc/$$/schedstat; echo \"@@@ $time @@@ \" )'": "abs-guide.txt"},{"# Per suggestion by Erik Brandsberg.": "abs-guide.txt"},{"set -x": "abs-guide.txt"},{"# Various commands follow ...": "abs-guide.txt"},{"": "abs-guide.txt"},{"$PWD": "abs-guide.txt"},{"Working directory (directory you are in at the time)": "abs-guide.txt"},{"This is the analog to the pwd builtin command.": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"E_WRONG_DIRECTORY=85": "abs-guide.txt"},{"clear # Clear the screen.": "abs-guide.txt"},{"TargetDirectory=/home/bozo/projects/GreatAmericanNovel": "abs-guide.txt"},{"cd $TargetDirectory": "abs-guide.txt"},{"echo \"Deleting stale files in $TargetDirectory.\"": "abs-guide.txt"},{"if [ \"$PWD\" != \"$TargetDirectory\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"# Keep from wiping out wrong directory by accident.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 9. Another Look at Variables": "abs-guide.txt"},{"": "abs-guide.txt"},{"92": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"exit": "abs-guide.txt"},{"": "abs-guide.txt"},{"\"Wrong directory!\"": "abs-guide.txt"},{"\"In $PWD, rather than $TargetDirectory!\"": "abs-guide.txt"},{"\"Bailing out!\"": "abs-guide.txt"},{"$E_WRONG_DIRECTORY": "abs-guide.txt"},{"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"rm -rf *": "abs-guide.txt"},{"rm .[A-Za-z0-9]*": "abs-guide.txt"},{"# Delete dotfiles.": "abs-guide.txt"},{"# rm -f .[^.]* ..?*": "abs-guide.txt"},{"to remove filenames beginning with multiple dots.": "abs-guide.txt"},{"# (shopt -s dotglob; rm -f *)": "abs-guide.txt"},{"will also work.": "abs-guide.txt"},{"# Thanks, S.C. for pointing this out.": "abs-guide.txt"},{"# A filename (`basename`) may contain all characters in the 0 - 255 range,": "abs-guide.txt"},{"#+ except \"/\".": "abs-guide.txt"},{"# Deleting files beginning with weird characters, such as #+ is left as an exercise. (Hint: rm ./-weirdname or rm -- -weirdname)": "abs-guide.txt"},{"result=$?": "abs-guide.txt"},{"# Result of delete operations. If successful = 0.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"ls -al": "abs-guide.txt"},{"# Any files left?": "abs-guide.txt"},{"echo \"Done.\"": "abs-guide.txt"},{"echo \"Old files deleted in $TargetDirectory.\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"# Various other operations here, as necessary.": "abs-guide.txt"},{"exit $result": "abs-guide.txt"},{"": "abs-guide.txt"},{"$REPLY": "abs-guide.txt"},{"The default value when a variable is not supplied to read. Also applicable to select menus, but only": "abs-guide.txt"},{"supplies the item number of the variable chosen, not the value of the variable itself.": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# reply.sh": "abs-guide.txt"},{"# REPLY is the default value for a 'read' command.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo -n \"What is your favorite vegetable? \"": "abs-guide.txt"},{"read": "abs-guide.txt"},{"echo \"Your favorite vegetable is $REPLY.\"": "abs-guide.txt"},{"# REPLY holds the value of last \"read\" if and only if": "abs-guide.txt"},{"#+ no variable supplied.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo -n \"What is your favorite fruit? \"": "abs-guide.txt"},{"read fruit": "abs-guide.txt"},{"echo \"Your favorite fruit is $fruit.\"": "abs-guide.txt"},{"echo \"but...\"": "abs-guide.txt"},{"echo \"Value of \\$REPLY is still $REPLY.\"": "abs-guide.txt"},{"# $REPLY is still set to its previous value because": "abs-guide.txt"},{"#+ the variable $fruit absorbed the new \"read\" value.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"$SECONDS": "abs-guide.txt"},{"The number of seconds the script has been running.": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 9. Another Look at Variables": "abs-guide.txt"},{"": "abs-guide.txt"},{"93": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"TIME_LIMIT=10": "abs-guide.txt"},{"INTERVAL=1": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"Hit Control-C to exit before $TIME_LIMIT seconds.\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"while [ \"$SECONDS\" -le \"$TIME_LIMIT\" ]": "abs-guide.txt"},{"do": "abs-guide.txt"},{"#": "abs-guide.txt"},{"$SECONDS is an internal shell variable.": "abs-guide.txt"},{"if [ \"$SECONDS\" -eq 1 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"units=second": "abs-guide.txt"},{"else": "abs-guide.txt"},{"units=seconds": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"echo \"This script has been running $SECONDS $units.\"": "abs-guide.txt"},{"# On a slow or overburdened machine, the script may skip a count": "abs-guide.txt"},{"#+ every once in a while.": "abs-guide.txt"},{"sleep $INTERVAL": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo -e \"\\a\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Beep!": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"$SHELLOPTS": "abs-guide.txt"},{"The list of enabled shell options, a readonly variable.": "abs-guide.txt"},{"bash$ echo $SHELLOPTS": "abs-guide.txt"},{"braceexpand:hashall:histexpand:monitor:history:interactive-comments:emacs": "abs-guide.txt"},{"": "abs-guide.txt"},{"$SHLVL": "abs-guide.txt"},{"Shell level, how deeply Bash is nested. [43] If, at the command-line, $SHLVL is 1, then in a script it": "abs-guide.txt"},{"will increment to 2.": "abs-guide.txt"},{"This variable is not affected by subshells. Use $BASH_SUBSHELL when you need": "abs-guide.txt"},{"an indication of subshell nesting.": "abs-guide.txt"},{"$TMOUT": "abs-guide.txt"},{"If the $TMOUT environmental variable is set to a non-zero value time, then the shell prompt will": "abs-guide.txt"},{"time out after $time seconds. This will cause a logout.": "abs-guide.txt"},{"As of version 2.05b of Bash, it is now possible to use $TMOUT in a script in combination with read.": "abs-guide.txt"},{"# Works in scripts for Bash, versions 2.05b and later.": "abs-guide.txt"},{"TMOUT=3": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Prompt times out at three seconds.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo \"What is your favorite song?\"": "abs-guide.txt"},{"echo \"Quickly now, you only have $TMOUT seconds to answer!\"": "abs-guide.txt"},{"read song": "abs-guide.txt"},{"if [ -z \"$song\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"song=\"(no answer)\"": "abs-guide.txt"},{"# Default response.": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 9. Another Look at Variables": "abs-guide.txt"},{"": "abs-guide.txt"},{"94": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"echo \"Your favorite song is $song.\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"There are other, more complex, ways of implementing timed input in a script. One alternative is to set": "abs-guide.txt"},{"up a timing loop to signal the script when it times out. This also requires a signal handling routine to": "abs-guide.txt"},{"trap (see Example 32-5) the interrupt generated by the timing loop (whew!).": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 9-2. Timed Input": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# timed-input.sh": "abs-guide.txt"},{"# TMOUT=3": "abs-guide.txt"},{"": "abs-guide.txt"},{"Also works, as of newer versions of Bash.": "abs-guide.txt"},{"": "abs-guide.txt"},{"TIMER_INTERRUPT=14": "abs-guide.txt"},{"TIMELIMIT=3 # Three seconds in this instance.": "abs-guide.txt"},{"# May be set to different value.": "abs-guide.txt"},{"PrintAnswer()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"if [ \"$answer\" = TIMEOUT ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo $answer": "abs-guide.txt"},{"else": "abs-guide.txt"},{"# Don't want to mix up the two instances.": "abs-guide.txt"},{"echo \"Your favorite veggie is $answer\"": "abs-guide.txt"},{"kill $! # Kills no-longer-needed TimerOn function": "abs-guide.txt"},{"#+ running in background.": "abs-guide.txt"},{"# $! is PID of last job running in background.": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"TimerOn()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"sleep $TIMELIMIT && kill -s 14 $$ &": "abs-guide.txt"},{"# Waits 3 seconds, then sends sigalarm to script.": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"Int14Vector()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"answer=\"TIMEOUT\"": "abs-guide.txt"},{"PrintAnswer": "abs-guide.txt"},{"exit $TIMER_INTERRUPT": "abs-guide.txt"},{"}": "abs-guide.txt"},{"trap Int14Vector $TIMER_INTERRUPT": "abs-guide.txt"},{"# Timer interrupt (14) subverted for our purposes.": "abs-guide.txt"},{"echo \"What is your favorite vegetable \"": "abs-guide.txt"},{"TimerOn": "abs-guide.txt"},{"read answer": "abs-guide.txt"},{"PrintAnswer": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Admittedly, this is a kludgy implementation of timed input.": "abs-guide.txt"},{"However, the \"-t\" option to \"read\" simplifies this task.": "abs-guide.txt"},{"See the \"t-out.sh\" script.": "abs-guide.txt"},{"However, what about timing not just single user input,": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 9. Another Look at Variables": "abs-guide.txt"},{"": "abs-guide.txt"},{"95": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"#+ but an entire script?": "abs-guide.txt"},{"# If you need something really elegant ...": "abs-guide.txt"},{"#+ consider writing the application in C or C++,": "abs-guide.txt"},{"#+ using appropriate library functions, such as 'alarm' and 'setitimer.'": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"An alternative is using stty.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 9-3. Once more, timed input": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# timeout.sh": "abs-guide.txt"},{"# Written by Stephane Chazelas,": "abs-guide.txt"},{"#+ and modified by the document author.": "abs-guide.txt"},{"INTERVAL=5": "abs-guide.txt"},{"": "abs-guide.txt"},{"# timeout interval": "abs-guide.txt"},{"": "abs-guide.txt"},{"timedout_read() {": "abs-guide.txt"},{"timeout=$1": "abs-guide.txt"},{"varname=$2": "abs-guide.txt"},{"old_tty_settings=`stty -g`": "abs-guide.txt"},{"stty -icanon min 0 time ${timeout}0": "abs-guide.txt"},{"eval read $varname": "abs-guide.txt"},{"# or just read $varname": "abs-guide.txt"},{"stty \"$old_tty_settings\"": "abs-guide.txt"},{"# See man page for \"stty.\"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"echo; echo -n \"What's your name? Quick! \"": "abs-guide.txt"},{"timedout_read $INTERVAL your_name": "abs-guide.txt"},{"# This may not work on every terminal type.": "abs-guide.txt"},{"# The maximum timeout depends on the terminal.": "abs-guide.txt"},{"#+ (it is often 25.5 seconds).": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"if [ ! -z \"$your_name\" ] # If name input before timeout ...": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Your name is $your_name.\"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo \"Timed out.\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"# The behavior of this script differs somewhat from \"timed-input.sh.\"": "abs-guide.txt"},{"# At each keystroke, the counter resets.": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Perhaps the simplest method is using the -t option to read.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 9-4. Timed read": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 9. Another Look at Variables": "abs-guide.txt"},{"": "abs-guide.txt"},{"96": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# t-out.sh [time-out]": "abs-guide.txt"},{"# Inspired by a suggestion from \"syngin seven\" (thanks).": "abs-guide.txt"},{"": "abs-guide.txt"},{"TIMELIMIT=4": "abs-guide.txt"},{"": "abs-guide.txt"},{"# 4 seconds": "abs-guide.txt"},{"": "abs-guide.txt"},{"read -t $TIMELIMIT variable <&1": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^^^": "abs-guide.txt"},{"# In this instance, \"<&1\" is needed for Bash 1.x and 2.x,": "abs-guide.txt"},{"# but unnecessary for Bash 3+.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"if [ -z \"$variable\" ] # Is null?": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Timed out, variable still unset.\"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo \"variable = $variable\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"$UID": "abs-guide.txt"},{"User ID number": "abs-guide.txt"},{"Current user's user identification number, as recorded in /etc/passwd": "abs-guide.txt"},{"This is the current user's real id, even if she has temporarily assumed another identity through su.": "abs-guide.txt"},{"$UID is a readonly variable, not subject to change from the command line or within a script, and is": "abs-guide.txt"},{"the counterpart to the id builtin.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 9-5. Am I root?": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# am-i-root.sh:": "abs-guide.txt"},{"ROOT_UID=0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Am I root or not?": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Root has $UID 0.": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [ \"$UID\" -eq \"$ROOT_UID\" ] # Will the real \"root\" please stand up?": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"You are root.\"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo \"You are just an ordinary user (but mom loves you just the same).\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"# ============================================================= #": "abs-guide.txt"},{"# Code below will not execute, because the script already exited.": "abs-guide.txt"},{"# An alternate method of getting to the root of matters:": "abs-guide.txt"},{"ROOTUSER_NAME=root": "abs-guide.txt"},{"username=`id -nu`": "abs-guide.txt"},{"# Or...": "abs-guide.txt"},{"username=`whoami`": "abs-guide.txt"},{"if [ \"$username\" = \"$ROOTUSER_NAME\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Rooty, toot, toot. You are root.\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 9. Another Look at Variables": "abs-guide.txt"},{"": "abs-guide.txt"},{"97": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo \"You are just a regular fella.\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"See also Example 2-3.": "abs-guide.txt"},{"The variables $ENV, $LOGNAME, $MAIL, $TERM, $USER, and $USERNAME are not": "abs-guide.txt"},{"Bash builtins. These are, however, often set as environmental variables in one of the": "abs-guide.txt"},{"Bash or login startup files. $SHELL, the name of the user's login shell, may be set": "abs-guide.txt"},{"from /etc/passwd or in an \"init\" script, and it is likewise not a Bash builtin.": "abs-guide.txt"},{"tcsh% echo $LOGNAME": "abs-guide.txt"},{"bozo": "abs-guide.txt"},{"tcsh% echo $SHELL": "abs-guide.txt"},{"/bin/tcsh": "abs-guide.txt"},{"tcsh% echo $TERM": "abs-guide.txt"},{"rxvt": "abs-guide.txt"},{"bash$ echo $LOGNAME": "abs-guide.txt"},{"bozo": "abs-guide.txt"},{"bash$ echo $SHELL": "abs-guide.txt"},{"/bin/tcsh": "abs-guide.txt"},{"bash$ echo $TERM": "abs-guide.txt"},{"rxvt": "abs-guide.txt"},{"": "abs-guide.txt"},{"Positional Parameters": "abs-guide.txt"},{"$0, $1, $2, etc.": "abs-guide.txt"},{"Positional parameters, passed from command line to script, passed to a function, or set to a variable": "abs-guide.txt"},{"(see Example 4-5 and Example 15-16)": "abs-guide.txt"},{"$#": "abs-guide.txt"},{"Number of command-line arguments [44] or positional parameters (see Example 36-2)": "abs-guide.txt"},{"$*": "abs-guide.txt"},{"All of the positional parameters, seen as a single word": "abs-guide.txt"},{"\"$*\" must be quoted.": "abs-guide.txt"},{"$@": "abs-guide.txt"},{"Same as $*, but each parameter is a quoted string, that is, the parameters are passed on intact, without": "abs-guide.txt"},{"interpretation or expansion. This means, among other things, that each parameter in the argument list": "abs-guide.txt"},{"is seen as a separate word.": "abs-guide.txt"},{"Of course, \"$@\" should be quoted.": "abs-guide.txt"},{"Example 9-6. arglist: Listing arguments with $* and $@": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# arglist.sh": "abs-guide.txt"},{"# Invoke this script with several arguments, such as \"one two three\" ...": "abs-guide.txt"},{"E_BADARGS=85": "abs-guide.txt"},{"if [ ! -n \"$1\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Usage: `basename $0` argument1 argument2 etc.\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 9. Another Look at Variables": "abs-guide.txt"},{"": "abs-guide.txt"},{"98": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"exit $E_BADARGS": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"index=1": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Initialize count.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo \"Listing args with \\\"\\$*\\\":\"": "abs-guide.txt"},{"for arg in \"$*\" # Doesn't work properly if \"$*\" isn't quoted.": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo \"Arg #$index = $arg\"": "abs-guide.txt"},{"let \"index+=1\"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"# $* sees all arguments as single word.": "abs-guide.txt"},{"echo \"Entire arg list seen as single word.\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"index=1": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Reset count.": "abs-guide.txt"},{"# What happens if you forget to do this?": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo \"Listing args with \\\"\\$@\\\":\"": "abs-guide.txt"},{"for arg in \"$@\"": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo \"Arg #$index = $arg\"": "abs-guide.txt"},{"let \"index+=1\"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"# $@ sees arguments as separate words.": "abs-guide.txt"},{"echo \"Arg list seen as separate words.\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"index=1": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Reset count.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo \"Listing args with \\$* (unquoted):\"": "abs-guide.txt"},{"for arg in $*": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo \"Arg #$index = $arg\"": "abs-guide.txt"},{"let \"index+=1\"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"# Unquoted $* sees arguments as separate words.": "abs-guide.txt"},{"echo \"Arg list seen as separate words.\"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Following a shift, the $@ holds the remaining command-line parameters, lacking the previous $1,": "abs-guide.txt"},{"which was lost.": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# Invoke with ./scriptname 1 2 3 4 5": "abs-guide.txt"},{"echo \"$@\"": "abs-guide.txt"},{"shift": "abs-guide.txt"},{"echo \"$@\"": "abs-guide.txt"},{"shift": "abs-guide.txt"},{"echo \"$@\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# 1 2 3 4 5": "abs-guide.txt"},{"# 2 3 4 5": "abs-guide.txt"},{"# 3 4 5": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Each \"shift\" loses parameter $1.": "abs-guide.txt"},{"# \"$@\" then contains the remaining parameters.": "abs-guide.txt"},{"": "abs-guide.txt"},{"The $@ special parameter finds use as a tool for filtering input into shell scripts. The cat \"$@\"": "abs-guide.txt"},{"construction accepts input to a script either from stdin or from files given as parameters to the": "abs-guide.txt"},{"script. See Example 16-24 and Example 16-25.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 9. Another Look at Variables": "abs-guide.txt"},{"": "abs-guide.txt"},{"99": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"The $* and $@ parameters sometimes display inconsistent and puzzling behavior,": "abs-guide.txt"},{"depending on the setting of $IFS.": "abs-guide.txt"},{"Example 9-7. Inconsistent $* and $@ behavior": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# Erratic behavior of the \"$*\" and \"$@\" internal Bash variables,": "abs-guide.txt"},{"#+ depending on whether or not they are quoted.": "abs-guide.txt"},{"# Demonstrates inconsistent handling of word splitting and linefeeds.": "abs-guide.txt"},{"": "abs-guide.txt"},{"set -- \"First one\" \"second\" \"third:one\" \"\" \"Fifth: :one\"": "abs-guide.txt"},{"# Setting the script arguments, $1, $2, $3, etc.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo 'IFS unchanged, using \"$*\"'": "abs-guide.txt"},{"c=0": "abs-guide.txt"},{"for i in \"$*\"": "abs-guide.txt"},{"# quoted": "abs-guide.txt"},{"do echo \"$((c+=1)): [$i]\"": "abs-guide.txt"},{"# This line remains the same in every instance.": "abs-guide.txt"},{"# Echo args.": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo --echo 'IFS unchanged, using $*'": "abs-guide.txt"},{"c=0": "abs-guide.txt"},{"for i in $*": "abs-guide.txt"},{"# unquoted": "abs-guide.txt"},{"do echo \"$((c+=1)): [$i]\"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo --echo 'IFS unchanged, using \"$@\"'": "abs-guide.txt"},{"c=0": "abs-guide.txt"},{"for i in \"$@\"": "abs-guide.txt"},{"do echo \"$((c+=1)): [$i]\"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo --echo 'IFS unchanged, using $@'": "abs-guide.txt"},{"c=0": "abs-guide.txt"},{"for i in $@": "abs-guide.txt"},{"do echo \"$((c+=1)): [$i]\"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo --IFS=:": "abs-guide.txt"},{"echo 'IFS=\":\", using \"$*\"'": "abs-guide.txt"},{"c=0": "abs-guide.txt"},{"for i in \"$*\"": "abs-guide.txt"},{"do echo \"$((c+=1)): [$i]\"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo --echo 'IFS=\":\", using $*'": "abs-guide.txt"},{"c=0": "abs-guide.txt"},{"for i in $*": "abs-guide.txt"},{"do echo \"$((c+=1)): [$i]\"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo ---": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 9. Another Look at Variables": "abs-guide.txt"},{"": "abs-guide.txt"},{"100": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"var=$*": "abs-guide.txt"},{"echo 'IFS=\":\", using \"$var\" (var=$*)'": "abs-guide.txt"},{"c=0": "abs-guide.txt"},{"for i in \"$var\"": "abs-guide.txt"},{"do echo \"$((c+=1)): [$i]\"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo --echo 'IFS=\":\", using $var (var=$*)'": "abs-guide.txt"},{"c=0": "abs-guide.txt"},{"for i in $var": "abs-guide.txt"},{"do echo \"$((c+=1)): [$i]\"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo --var=\"$*\"": "abs-guide.txt"},{"echo 'IFS=\":\", using $var (var=\"$*\")'": "abs-guide.txt"},{"c=0": "abs-guide.txt"},{"for i in $var": "abs-guide.txt"},{"do echo \"$((c+=1)): [$i]\"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo --echo 'IFS=\":\", using \"$var\" (var=\"$*\")'": "abs-guide.txt"},{"c=0": "abs-guide.txt"},{"for i in \"$var\"": "abs-guide.txt"},{"do echo \"$((c+=1)): [$i]\"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo --echo 'IFS=\":\", using \"$@\"'": "abs-guide.txt"},{"c=0": "abs-guide.txt"},{"for i in \"$@\"": "abs-guide.txt"},{"do echo \"$((c+=1)): [$i]\"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo --echo 'IFS=\":\", using $@'": "abs-guide.txt"},{"c=0": "abs-guide.txt"},{"for i in $@": "abs-guide.txt"},{"do echo \"$((c+=1)): [$i]\"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo --var=$@": "abs-guide.txt"},{"echo 'IFS=\":\", using $var (var=$@)'": "abs-guide.txt"},{"c=0": "abs-guide.txt"},{"for i in $var": "abs-guide.txt"},{"do echo \"$((c+=1)): [$i]\"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo --echo 'IFS=\":\", using \"$var\" (var=$@)'": "abs-guide.txt"},{"c=0": "abs-guide.txt"},{"for i in \"$var\"": "abs-guide.txt"},{"do echo \"$((c+=1)): [$i]\"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo --var=\"$@\"": "abs-guide.txt"},{"echo 'IFS=\":\", using \"$var\" (var=\"$@\")'": "abs-guide.txt"},{"c=0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 9. Another Look at Variables": "abs-guide.txt"},{"": "abs-guide.txt"},{"101": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"for i in \"$var\"": "abs-guide.txt"},{"do echo \"$((c+=1)): [$i]\"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo --echo 'IFS=\":\", using $var (var=\"$@\")'": "abs-guide.txt"},{"c=0": "abs-guide.txt"},{"for i in $var": "abs-guide.txt"},{"do echo \"$((c+=1)): [$i]\"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"# Try this script with ksh or zsh -y.": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"# This example script written by Stephane Chazelas,": "abs-guide.txt"},{"#+ and slightly modified by the document author.": "abs-guide.txt"},{"": "abs-guide.txt"},{"The $@ and $* parameters differ only when between double quotes.": "abs-guide.txt"},{"Example 9-8. $* and $@ when $IFS is empty": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# If $IFS set, but empty,": "abs-guide.txt"},{"#+ then \"$*\" and \"$@\" do not echo positional params as expected.": "abs-guide.txt"},{"mecho ()": "abs-guide.txt"},{"# Echo positional parameters.": "abs-guide.txt"},{"{": "abs-guide.txt"},{"echo \"$1,$2,$3\";": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"IFS=\"\"": "abs-guide.txt"},{"set a b c": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Set, but empty.": "abs-guide.txt"},{"# Positional parameters.": "abs-guide.txt"},{"": "abs-guide.txt"},{"mecho \"$*\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"mecho $*": "abs-guide.txt"},{"": "abs-guide.txt"},{"# abc,,": "abs-guide.txt"},{"^^": "abs-guide.txt"},{"# a,b,c": "abs-guide.txt"},{"": "abs-guide.txt"},{"mecho $@": "abs-guide.txt"},{"mecho \"$@\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# a,b,c": "abs-guide.txt"},{"# a,b,c": "abs-guide.txt"},{"": "abs-guide.txt"},{"# The behavior of $* and $@ when $IFS is empty depends": "abs-guide.txt"},{"#+ on which Bash or sh version being run.": "abs-guide.txt"},{"# It is therefore inadvisable to depend on this \"feature\" in a script.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Thanks, Stephane Chazelas.": "abs-guide.txt"},{"exit": "abs-guide.txt"},{"": "abs-guide.txt"},{"Other Special Parameters": "abs-guide.txt"},{"$Flags passed to script (using set). See Example 15-16.": "abs-guide.txt"},{"Chapter 9. Another Look at Variables": "abs-guide.txt"},{"": "abs-guide.txt"},{"102": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"This was originally a ksh construct adopted into Bash, and unfortunately it does not": "abs-guide.txt"},{"seem to work reliably in Bash scripts. One possible use for it is to have a script": "abs-guide.txt"},{"self-test whether it is interactive.": "abs-guide.txt"},{"$!": "abs-guide.txt"},{"PID (process ID) of last job run in background": "abs-guide.txt"},{"LOG=$0.log": "abs-guide.txt"},{"COMMAND1=\"sleep 100\"": "abs-guide.txt"},{"echo \"Logging PIDs background commands for script: $0\" >> \"$LOG\"": "abs-guide.txt"},{"# So they can be monitored, and killed as necessary.": "abs-guide.txt"},{"echo >> \"$LOG\"": "abs-guide.txt"},{"# Logging commands.": "abs-guide.txt"},{"echo -n \"PID of \\\"$COMMAND1\\\":": "abs-guide.txt"},{"${COMMAND1} &": "abs-guide.txt"},{"echo $! >> \"$LOG\"": "abs-guide.txt"},{"# PID of \"sleep 100\": 1506": "abs-guide.txt"},{"": "abs-guide.txt"},{"\" >> \"$LOG\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Thank you, Jacques Lederer, for suggesting this.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Using $! for job control:": "abs-guide.txt"},{"possibly_hanging_job & { sleep ${TIMEOUT}; eval 'kill -9 $!' &> /dev/null; }": "abs-guide.txt"},{"# Forces completion of an ill-behaved program.": "abs-guide.txt"},{"# Useful, for example, in init scripts.": "abs-guide.txt"},{"# Thank you, Sylvain Fourmanoit, for this creative use of the \"!\" variable.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Or, alternately:": "abs-guide.txt"},{"# This example by Matthew Sage.": "abs-guide.txt"},{"# Used with permission.": "abs-guide.txt"},{"TIMEOUT=30": "abs-guide.txt"},{"count=0": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Timeout value in seconds": "abs-guide.txt"},{"": "abs-guide.txt"},{"possibly_hanging_job & {": "abs-guide.txt"},{"while ((count < TIMEOUT )); do": "abs-guide.txt"},{"eval '[ ! -d \"/proc/$!\" ] && ((count = TIMEOUT))'": "abs-guide.txt"},{"# /proc is where information about running processes is found.": "abs-guide.txt"},{"# \"-d\" tests whether it exists (whether directory exists).": "abs-guide.txt"},{"# So, we're waiting for the job in question to show up.": "abs-guide.txt"},{"((count++))": "abs-guide.txt"},{"sleep 1": "abs-guide.txt"},{"done": "abs-guide.txt"},{"eval '[ -d \"/proc/$!\" ] && kill -15 $!'": "abs-guide.txt"},{"# If the hanging job is running, kill it.": "abs-guide.txt"},{"}": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"-------------------------------------------------------------- #": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"However, this may not not work as specified if another process": "abs-guide.txt"},{"begins to run after the \"hanging_job\" . . .": "abs-guide.txt"},{"In such a case, the wrong job may be killed.": "abs-guide.txt"},{"Ariel Meragelman suggests the following fix.": "abs-guide.txt"},{"": "abs-guide.txt"},{"TIMEOUT=30": "abs-guide.txt"},{"count=0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 9. Another Look at Variables": "abs-guide.txt"},{"": "abs-guide.txt"},{"103": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# Timeout value in seconds": "abs-guide.txt"},{"possibly_hanging_job & {": "abs-guide.txt"},{"while ((count < TIMEOUT )); do": "abs-guide.txt"},{"eval '[ ! -d \"/proc/$lastjob\" ] && ((count = TIMEOUT))'": "abs-guide.txt"},{"lastjob=$!": "abs-guide.txt"},{"((count++))": "abs-guide.txt"},{"sleep 1": "abs-guide.txt"},{"done": "abs-guide.txt"},{"eval '[ -d \"/proc/$lastjob\" ] && kill -15 $lastjob'": "abs-guide.txt"},{"}": "abs-guide.txt"},{"exit": "abs-guide.txt"},{"": "abs-guide.txt"},{"$_": "abs-guide.txt"},{"Special variable set to final argument of previous command executed.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 9-9. Underscore variable": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"echo $_": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"/bin/bash": "abs-guide.txt"},{"Just called /bin/bash to run the script.": "abs-guide.txt"},{"Note that this will vary according to": "abs-guide.txt"},{"how the script is invoked.": "abs-guide.txt"},{"": "abs-guide.txt"},{"du >/dev/null": "abs-guide.txt"},{"echo $_": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"So no output from command.": "abs-guide.txt"},{"du": "abs-guide.txt"},{"": "abs-guide.txt"},{"ls -al >/dev/null": "abs-guide.txt"},{"echo $_": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"So no output from command.": "abs-guide.txt"},{"-al (last argument)": "abs-guide.txt"},{"": "abs-guide.txt"},{":": "abs-guide.txt"},{"echo $_": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{":": "abs-guide.txt"},{"": "abs-guide.txt"},{"$?": "abs-guide.txt"},{"Exit status of a command, function, or the script itself (see Example 24-7)": "abs-guide.txt"},{"$$": "abs-guide.txt"},{"Process ID (PID) of the script itself. [45] The $$ variable often finds use in scripts to construct": "abs-guide.txt"},{"\"unique\" temp file names (see Example 32-6, Example 16-31, and Example 15-27). This is usually": "abs-guide.txt"},{"simpler than invoking mktemp.": "abs-guide.txt"},{"": "abs-guide.txt"},{"9.2. Typing variables: declare or typeset": "abs-guide.txt"},{"The declare or typeset builtins, which are exact synonyms, permit modifying the properties of variables. This": "abs-guide.txt"},{"is a very weak form of the typing [46] available in certain programming languages. The declare command is": "abs-guide.txt"},{"specific to version 2 or later of Bash. The typeset command also works in ksh scripts.": "abs-guide.txt"},{"declare/typeset options": "abs-guide.txt"},{"-r readonly": "abs-guide.txt"},{"(declare -r var1 works the same as readonly var1)": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 9. Another Look at Variables": "abs-guide.txt"},{"": "abs-guide.txt"},{"104": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"This is the rough equivalent of the C const type qualifier. An attempt to change the value of a": "abs-guide.txt"},{"readonly variable fails with an error message.": "abs-guide.txt"},{"declare -r var1=1": "abs-guide.txt"},{"echo \"var1 = $var1\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# var1 = 1": "abs-guide.txt"},{"": "abs-guide.txt"},{"(( var1++ ))": "abs-guide.txt"},{"": "abs-guide.txt"},{"# x.sh: line 4: var1: readonly variable": "abs-guide.txt"},{"": "abs-guide.txt"},{"-i integer": "abs-guide.txt"},{"declare -i number": "abs-guide.txt"},{"# The script will treat subsequent occurrences of \"number\" as an integer.": "abs-guide.txt"},{"number=3": "abs-guide.txt"},{"echo \"Number = $number\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Number = 3": "abs-guide.txt"},{"": "abs-guide.txt"},{"number=three": "abs-guide.txt"},{"echo \"Number = $number\"": "abs-guide.txt"},{"# Number = 0": "abs-guide.txt"},{"# Tries to evaluate the string \"three\" as an integer.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Certain arithmetic operations are permitted for declared integer variables without the need for expr or": "abs-guide.txt"},{"let.": "abs-guide.txt"},{"n=6/3": "abs-guide.txt"},{"echo \"n = $n\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# n = 6/3": "abs-guide.txt"},{"": "abs-guide.txt"},{"declare -i n": "abs-guide.txt"},{"n=6/3": "abs-guide.txt"},{"echo \"n = $n\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# n = 2": "abs-guide.txt"},{"": "abs-guide.txt"},{"-a array": "abs-guide.txt"},{"declare -a indices": "abs-guide.txt"},{"": "abs-guide.txt"},{"The variable indices will be treated as an array.": "abs-guide.txt"},{"-f function(s)": "abs-guide.txt"},{"declare -f": "abs-guide.txt"},{"": "abs-guide.txt"},{"A declare -f line with no arguments in a script causes a listing of all the functions previously": "abs-guide.txt"},{"defined in that script.": "abs-guide.txt"},{"declare -f function_name": "abs-guide.txt"},{"": "abs-guide.txt"},{"A declare -f function_name in a script lists just the function named.": "abs-guide.txt"},{"-x export": "abs-guide.txt"},{"declare -x var3": "abs-guide.txt"},{"": "abs-guide.txt"},{"This declares a variable as available for exporting outside the environment of the script itself.": "abs-guide.txt"},{"-x var=$value": "abs-guide.txt"},{"declare -x var3=373": "abs-guide.txt"},{"": "abs-guide.txt"},{"The declare command permits assigning a value to a variable in the same statement as setting its": "abs-guide.txt"},{"properties.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 9-10. Using declare to type variables": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 9. Another Look at Variables": "abs-guide.txt"},{"": "abs-guide.txt"},{"105": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"func1 ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"echo This is a function.": "abs-guide.txt"},{"}": "abs-guide.txt"},{"declare -f": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Lists the function above.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"declare -i var1": "abs-guide.txt"},{"# var1 is an integer.": "abs-guide.txt"},{"var1=2367": "abs-guide.txt"},{"echo \"var1 declared as $var1\"": "abs-guide.txt"},{"var1=var1+1": "abs-guide.txt"},{"# Integer declaration eliminates the need for 'let'.": "abs-guide.txt"},{"echo \"var1 incremented by 1 is $var1.\"": "abs-guide.txt"},{"# Attempt to change variable declared as integer.": "abs-guide.txt"},{"echo \"Attempting to change var1 to floating point value, 2367.1.\"": "abs-guide.txt"},{"var1=2367.1": "abs-guide.txt"},{"# Results in error message, with no change to variable.": "abs-guide.txt"},{"echo \"var1 is still $var1\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"declare -r var2=13.36": "abs-guide.txt"},{"": "abs-guide.txt"},{"# 'declare' permits setting a variable property": "abs-guide.txt"},{"#+ and simultaneously assigning it a value.": "abs-guide.txt"},{"echo \"var2 declared as $var2\" # Attempt to change readonly variable.": "abs-guide.txt"},{"var2=13.37": "abs-guide.txt"},{"# Generates error message, and exit from script.": "abs-guide.txt"},{"echo \"var2 is still $var2\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# This line will not execute.": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Script will not exit here.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Using the declare builtin restricts the scope of a variable.": "abs-guide.txt"},{"foo ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"FOO=\"bar\"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"bar ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"foo": "abs-guide.txt"},{"echo $FOO": "abs-guide.txt"},{"}": "abs-guide.txt"},{"bar": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Prints bar.": "abs-guide.txt"},{"": "abs-guide.txt"},{"However . . .": "abs-guide.txt"},{"foo (){": "abs-guide.txt"},{"declare FOO=\"bar\"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"bar ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"foo": "abs-guide.txt"},{"echo $FOO": "abs-guide.txt"},{"}": "abs-guide.txt"},{"bar": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Prints nothing.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Thank you, Michael Iatrou, for pointing this out.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 9. Another Look at Variables": "abs-guide.txt"},{"": "abs-guide.txt"},{"106": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"": "abs-guide.txt"},{"9.2.1. Another use for declare": "abs-guide.txt"},{"The declare command can be helpful in identifying variables, environmental or otherwise. This can be": "abs-guide.txt"},{"especially useful with arrays.": "abs-guide.txt"},{"bash$ declare | grep HOME": "abs-guide.txt"},{"HOME=/home/bozo": "abs-guide.txt"},{"": "abs-guide.txt"},{"bash$ zzy=68": "abs-guide.txt"},{"bash$ declare | grep zzy": "abs-guide.txt"},{"zzy=68": "abs-guide.txt"},{"": "abs-guide.txt"},{"bash$ Colors=([0]=\"purple\" [1]=\"reddish-orange\" [2]=\"light green\")": "abs-guide.txt"},{"bash$ echo ${Colors[@]}": "abs-guide.txt"},{"purple reddish-orange light green": "abs-guide.txt"},{"bash$ declare | grep Colors": "abs-guide.txt"},{"Colors=([0]=\"purple\" [1]=\"reddish-orange\" [2]=\"light green\")": "abs-guide.txt"},{"": "abs-guide.txt"},{"9.3. $RANDOM: generate random integer": "abs-guide.txt"},{"Anyone who attempts to generate random": "abs-guide.txt"},{"numbers by deterministic means is, of course,": "abs-guide.txt"},{"living in a state of sin.": "abs-guide.txt"},{"--John von Neumann": "abs-guide.txt"},{"$RANDOM is an internal Bash function (not a constant) that returns a pseudorandom [47] integer in the range 0": "abs-guide.txt"},{"- 32767. It should not be used to generate an encryption key.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 9-11. Generating random numbers": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# $RANDOM returns a different random integer at each invocation.": "abs-guide.txt"},{"# Nominal range: 0 - 32767 (signed 16-bit integer).": "abs-guide.txt"},{"MAXCOUNT=10": "abs-guide.txt"},{"count=1": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"$MAXCOUNT random numbers:\"": "abs-guide.txt"},{"echo \"-----------------\"": "abs-guide.txt"},{"while [ \"$count\" -le $MAXCOUNT ]": "abs-guide.txt"},{"# Generate 10 ($MAXCOUNT) random integers.": "abs-guide.txt"},{"do": "abs-guide.txt"},{"number=$RANDOM": "abs-guide.txt"},{"echo $number": "abs-guide.txt"},{"let \"count += 1\" # Increment count.": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo \"-----------------\"": "abs-guide.txt"},{"# If you need a random int within a certain range, use the 'modulo' operator.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 9. Another Look at Variables": "abs-guide.txt"},{"": "abs-guide.txt"},{"107": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# This returns the remainder of a division operation.": "abs-guide.txt"},{"RANGE=500": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"number=$RANDOM": "abs-guide.txt"},{"let \"number %= $RANGE\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^^": "abs-guide.txt"},{"echo \"Random number less than $RANGE": "abs-guide.txt"},{"": "abs-guide.txt"},{"---": "abs-guide.txt"},{"": "abs-guide.txt"},{"$number\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"# If you need a random integer greater than a lower bound,": "abs-guide.txt"},{"#+ then set up a test to discard all numbers below that.": "abs-guide.txt"},{"FLOOR=200": "abs-guide.txt"},{"number=0": "abs-guide.txt"},{"#initialize": "abs-guide.txt"},{"while [ \"$number\" -le $FLOOR ]": "abs-guide.txt"},{"do": "abs-guide.txt"},{"number=$RANDOM": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo \"Random number greater than $FLOOR --echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"$number\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Let's examine a simple alternative to the above loop, namely": "abs-guide.txt"},{"#": "abs-guide.txt"},{"let \"number = $RANDOM + $FLOOR\"": "abs-guide.txt"},{"# That would eliminate the while-loop and run faster.": "abs-guide.txt"},{"# But, there might be a problem with that. What is it?": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Combine above two techniques to retrieve random number between two limits.": "abs-guide.txt"},{"number=0": "abs-guide.txt"},{"#initialize": "abs-guide.txt"},{"while [ \"$number\" -le $FLOOR ]": "abs-guide.txt"},{"do": "abs-guide.txt"},{"number=$RANDOM": "abs-guide.txt"},{"let \"number %= $RANGE\" # Scales $number down within $RANGE.": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo \"Random number between $FLOOR and $RANGE --- $number\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Generate binary choice, that is, \"true\" or \"false\" value.": "abs-guide.txt"},{"BINARY=2": "abs-guide.txt"},{"T=1": "abs-guide.txt"},{"number=$RANDOM": "abs-guide.txt"},{"let \"number %= $BINARY\"": "abs-guide.txt"},{"# Note that": "abs-guide.txt"},{"let \"number >>= 14\"": "abs-guide.txt"},{"gives a better random distribution": "abs-guide.txt"},{"#+ (right shifts out everything except last binary digit).": "abs-guide.txt"},{"if [ \"$number\" -eq $T ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"TRUE\"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo \"FALSE\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 9. Another Look at Variables": "abs-guide.txt"},{"": "abs-guide.txt"},{"108": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Generate a toss of the dice.": "abs-guide.txt"},{"SPOTS=6": "abs-guide.txt"},{"# Modulo 6 gives range 0 - 5.": "abs-guide.txt"},{"# Incrementing by 1 gives desired range of 1 - 6.": "abs-guide.txt"},{"# Thanks, Paulo Marcel Coelho Aragao, for the simplification.": "abs-guide.txt"},{"die1=0": "abs-guide.txt"},{"die2=0": "abs-guide.txt"},{"# Would it be better to just set SPOTS=7 and not add 1? Why or why not?": "abs-guide.txt"},{"# Tosses each die separately, and so gives correct odds.": "abs-guide.txt"},{"let \"die1 = $RANDOM % $SPOTS +1\" # Roll first one.": "abs-guide.txt"},{"let \"die2 = $RANDOM % $SPOTS +1\" # Roll second one.": "abs-guide.txt"},{"# Which arithmetic operation, above, has greater precedence -#+ modulo (%) or addition (+)?": "abs-guide.txt"},{"": "abs-guide.txt"},{"let \"throw = $die1 + $die2\"": "abs-guide.txt"},{"echo \"Throw of the dice = $throw\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 9-12. Picking a random card from a deck": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# pick-card.sh": "abs-guide.txt"},{"# This is an example of choosing random elements of an array.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Pick a card, any card.": "abs-guide.txt"},{"Suites=\"Clubs": "abs-guide.txt"},{"Diamonds": "abs-guide.txt"},{"Hearts": "abs-guide.txt"},{"Spades\"": "abs-guide.txt"},{"Denominations=\"2": "abs-guide.txt"},{"3": "abs-guide.txt"},{"4": "abs-guide.txt"},{"5": "abs-guide.txt"},{"6": "abs-guide.txt"},{"7": "abs-guide.txt"},{"8": "abs-guide.txt"},{"9": "abs-guide.txt"},{"10": "abs-guide.txt"},{"Jack": "abs-guide.txt"},{"Queen": "abs-guide.txt"},{"King": "abs-guide.txt"},{"Ace\"": "abs-guide.txt"},{"# Note variables spread over multiple lines.": "abs-guide.txt"},{"": "abs-guide.txt"},{"suite=($Suites)": "abs-guide.txt"},{"denomination=($Denominations)": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Read into array variable.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 9. Another Look at Variables": "abs-guide.txt"},{"": "abs-guide.txt"},{"109": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"num_suites=${#suite[*]}": "abs-guide.txt"},{"# Count how many elements.": "abs-guide.txt"},{"num_denominations=${#denomination[*]}": "abs-guide.txt"},{"echo -n \"${denomination[$((RANDOM%num_denominations))]} of \"": "abs-guide.txt"},{"echo ${suite[$((RANDOM%num_suites))]}": "abs-guide.txt"},{"": "abs-guide.txt"},{"# $bozo sh pick-cards.sh": "abs-guide.txt"},{"# Jack of Clubs": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Thank you, \"jipe,\" for pointing out this use of $RANDOM.": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 9-13. Brownian Motion Simulation": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# brownian.sh": "abs-guide.txt"},{"# Author: Mendel Cooper": "abs-guide.txt"},{"# Reldate: 10/26/07": "abs-guide.txt"},{"# License: GPL3": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"---------------------------------------------------------------This script models Brownian motion:": "abs-guide.txt"},{"the random wanderings of tiny particles in a fluid,": "abs-guide.txt"},{"as they are buffeted by random currents and collisions.": "abs-guide.txt"},{"This is colloquially known as the \"Drunkard's Walk.\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"It can also be considered as a stripped-down simulation of a": "abs-guide.txt"},{"Galton Board, a slanted board with a pattern of pegs,": "abs-guide.txt"},{"down which rolls a succession of marbles, one at a time.": "abs-guide.txt"},{"At the bottom is a row of slots or catch basins in which": "abs-guide.txt"},{"the marbles come to rest at the end of their journey.": "abs-guide.txt"},{"Think of it as a kind of bare-bones Pachinko game.": "abs-guide.txt"},{"As you see by running the script,": "abs-guide.txt"},{"most of the marbles cluster around the center slot.": "abs-guide.txt"},{"This is consistent with the expected binomial distribution.": "abs-guide.txt"},{"As a Galton Board simulation, the script": "abs-guide.txt"},{"disregards such parameters as": "abs-guide.txt"},{"board tilt-angle, rolling friction of the marbles,": "abs-guide.txt"},{"angles of impact, and elasticity of the pegs.": "abs-guide.txt"},{"To what extent does this affect the accuracy of the simulation?": "abs-guide.txt"},{"----------------------------------------------------------------": "abs-guide.txt"},{"": "abs-guide.txt"},{"PASSES=500": "abs-guide.txt"},{"ROWS=10": "abs-guide.txt"},{"RANGE=3": "abs-guide.txt"},{"POS=0": "abs-guide.txt"},{"RANDOM=$$": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"Number of particle interactions / marbles.": "abs-guide.txt"},{"Number of \"collisions\" (or horiz. peg rows).": "abs-guide.txt"},{"0 - 2 output range from $RANDOM.": "abs-guide.txt"},{"Left/right position.": "abs-guide.txt"},{"Seeds the random number generator from PID": "abs-guide.txt"},{"of script.": "abs-guide.txt"},{"": "abs-guide.txt"},{"declare -a Slots": "abs-guide.txt"},{"NUMSLOTS=21": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Array holding cumulative results of passes.": "abs-guide.txt"},{"# Number of slots at bottom of board.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Initialize_Slots () { # Zero out all elements of the array.": "abs-guide.txt"},{"for i in $( seq $NUMSLOTS )": "abs-guide.txt"},{"do": "abs-guide.txt"},{"Slots[$i]=0": "abs-guide.txt"},{"done": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 9. Another Look at Variables": "abs-guide.txt"},{"": "abs-guide.txt"},{"110": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Blank line at beginning of run.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Show_Slots () {": "abs-guide.txt"},{"echo; echo": "abs-guide.txt"},{"echo -n \" \"": "abs-guide.txt"},{"for i in $( seq $NUMSLOTS )": "abs-guide.txt"},{"do": "abs-guide.txt"},{"printf \"%3d\" ${Slots[$i]}": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Pretty-print array elements.": "abs-guide.txt"},{"# Allot three spaces per result.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Row of slots:": "abs-guide.txt"},{"\" |__|__|__|__|__|__|__|__|__|__|__|__|__|__|__|__|__|__|__|__|__|\"": "abs-guide.txt"},{"\"": "abs-guide.txt"},{"||\"": "abs-guide.txt"},{"# Note that if the count within any particular slot exceeds 99,": "abs-guide.txt"},{"#+ it messes up the display.": "abs-guide.txt"},{"# Running only(!) 500 passes usually avoids this.": "abs-guide.txt"},{"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"Move () {": "abs-guide.txt"},{"Move=$RANDOM": "abs-guide.txt"},{"let \"Move %= RANGE\"": "abs-guide.txt"},{"case \"$Move\" in": "abs-guide.txt"},{"0 ) ;;": "abs-guide.txt"},{"1 ) ((POS--));;": "abs-guide.txt"},{"2 ) ((POS++));;": "abs-guide.txt"},{"* ) echo -n \"Error": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Move one unit right / left, or stay put.": "abs-guide.txt"},{"# How random is $RANDOM? Well, let's see ...": "abs-guide.txt"},{"# Normalize into range of 0 - 2.": "abs-guide.txt"},{"": "abs-guide.txt"},{"\";;": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Do nothing, i.e., stay in place.": "abs-guide.txt"},{"Left.": "abs-guide.txt"},{"Right.": "abs-guide.txt"},{"Anomaly! (Should never occur.)": "abs-guide.txt"},{"": "abs-guide.txt"},{"Play () {": "abs-guide.txt"},{"i=0": "abs-guide.txt"},{"while [ \"$i\" -lt \"$ROWS\" ]": "abs-guide.txt"},{"do": "abs-guide.txt"},{"Move": "abs-guide.txt"},{"((i++));": "abs-guide.txt"},{"done": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Single pass (inner loop).": "abs-guide.txt"},{"": "abs-guide.txt"},{"SHIFT=11": "abs-guide.txt"},{"let \"POS += $SHIFT\"": "abs-guide.txt"},{"(( Slots[$POS]++ ))": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Why 11, and not 10?": "abs-guide.txt"},{"# Shift \"zero position\" to center.": "abs-guide.txt"},{"# DEBUG: echo $POS": "abs-guide.txt"},{"": "abs-guide.txt"},{"# One event per row.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# echo -n \"$POS \"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"Run () {": "abs-guide.txt"},{"# Outer loop.": "abs-guide.txt"},{"p=0": "abs-guide.txt"},{"while [ \"$p\" -lt \"$PASSES\" ]": "abs-guide.txt"},{"do": "abs-guide.txt"},{"Play": "abs-guide.txt"},{"(( p++ ))": "abs-guide.txt"},{"POS=0": "abs-guide.txt"},{"# Reset to zero. Why?": "abs-guide.txt"},{"done": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 9. Another Look at Variables": "abs-guide.txt"},{"": "abs-guide.txt"},{"111": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# -------------# main ()": "abs-guide.txt"},{"Initialize_Slots": "abs-guide.txt"},{"Run": "abs-guide.txt"},{"Show_Slots": "abs-guide.txt"},{"# -------------exit $?": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Exercises:": "abs-guide.txt"},{"--------1) Show the results in a vertical bar graph, or as an alternative,": "abs-guide.txt"},{"a scattergram.": "abs-guide.txt"},{"2) Alter the script to use /dev/urandom instead of $RANDOM.": "abs-guide.txt"},{"Will this make the results more random?": "abs-guide.txt"},{"3) Provide some sort of \"animation\" or graphic output": "abs-guide.txt"},{"for each marble played.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Jipe points out a set of techniques for generating random numbers within a range.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Generate random number between 6 and 30.": "abs-guide.txt"},{"rnumber=$((RANDOM%25+6))": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Generate random number in the same 6 - 30 range,": "abs-guide.txt"},{"#+ but the number must be evenly divisible by 3.": "abs-guide.txt"},{"rnumber=$(((RANDOM%30/3+1)*3))": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Note that this will not work all the time.": "abs-guide.txt"},{"It fails if $RANDOM%30 returns 0.": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Frank Wang suggests the following alternative:": "abs-guide.txt"},{"rnumber=$(( RANDOM%27/3*3+6 ))": "abs-guide.txt"},{"": "abs-guide.txt"},{"Bill Gradwohl came up with an improved formula that works for positive numbers.": "abs-guide.txt"},{"rnumber=$(((RANDOM%(max-min+divisibleBy))/divisibleBy*divisibleBy+min))": "abs-guide.txt"},{"": "abs-guide.txt"},{"Here Bill presents a versatile function that returns a random number between two specified values.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 9-14. Random between values": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# random-between.sh": "abs-guide.txt"},{"# Random number between two specified values.": "abs-guide.txt"},{"# Script by Bill Gradwohl, with minor modifications by the document author.": "abs-guide.txt"},{"# Corrections in lines 187 and 189 by Anthony Le Clezio.": "abs-guide.txt"},{"# Used with permission.": "abs-guide.txt"},{"": "abs-guide.txt"},{"randomBetween() {": "abs-guide.txt"},{"# Generates a positive or negative random number": "abs-guide.txt"},{"#+ between $min and $max": "abs-guide.txt"},{"#+ and divisible by $divisibleBy.": "abs-guide.txt"},{"# Gives a \"reasonably random\" distribution of return values.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Bill Gradwohl - Oct 1, 2003": "abs-guide.txt"},{"syntax() {": "abs-guide.txt"},{"# Function embedded within function.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"\"Syntax: randomBetween [min] [max] [multiple]\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 9. Another Look at Variables": "abs-guide.txt"},{"": "abs-guide.txt"},{"112": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"-n \"Expects up to 3 passed parameters, \"": "abs-guide.txt"},{"\"but all are completely optional.\"": "abs-guide.txt"},{"\"min is the minimum value\"": "abs-guide.txt"},{"\"max is the maximum value\"": "abs-guide.txt"},{"-n \"multiple specifies that the answer must be \"": "abs-guide.txt"},{"\"a multiple of this value.\"": "abs-guide.txt"},{"\"": "abs-guide.txt"},{"i.e. answer must be evenly divisible by this number.\"": "abs-guide.txt"},{"\"If any value is missing, defaults area supplied as: 0 32767 1\"": "abs-guide.txt"},{"-n \"Successful completion returns 0, \"": "abs-guide.txt"},{"\"unsuccessful completion returns\"": "abs-guide.txt"},{"\"function syntax and 1.\"": "abs-guide.txt"},{"-n \"The answer is returned in the global variable \"": "abs-guide.txt"},{"\"randomBetweenAnswer\"": "abs-guide.txt"},{"-n \"Negative values for any passed parameter are \"": "abs-guide.txt"},{"\"handled correctly.\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"local min=${1:-0}": "abs-guide.txt"},{"local max=${2:-32767}": "abs-guide.txt"},{"local divisibleBy=${3:-1}": "abs-guide.txt"},{"# Default values assigned, in case parameters not passed to function.": "abs-guide.txt"},{"local x": "abs-guide.txt"},{"local spread": "abs-guide.txt"},{"# Let's make sure the divisibleBy value is positive.": "abs-guide.txt"},{"[ ${divisibleBy} -lt 0 ] && divisibleBy=$((0-divisibleBy))": "abs-guide.txt"},{"# Sanity check.": "abs-guide.txt"},{"if [ $# -gt 3 -o ${divisibleBy} -eq 0 -o": "abs-guide.txt"},{"syntax": "abs-guide.txt"},{"return 1": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"${min} -eq ${max} ]; then": "abs-guide.txt"},{"": "abs-guide.txt"},{"# See if the min and max are reversed.": "abs-guide.txt"},{"if [ ${min} -gt ${max} ]; then": "abs-guide.txt"},{"# Swap them.": "abs-guide.txt"},{"x=${min}": "abs-guide.txt"},{"min=${max}": "abs-guide.txt"},{"max=${x}": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# If min is itself not evenly divisible by $divisibleBy,": "abs-guide.txt"},{"#+ then fix the min to be within range.": "abs-guide.txt"},{"if [ $((min/divisibleBy*divisibleBy)) -ne ${min} ]; then": "abs-guide.txt"},{"if [ ${min} -lt 0 ]; then": "abs-guide.txt"},{"min=$((min/divisibleBy*divisibleBy))": "abs-guide.txt"},{"else": "abs-guide.txt"},{"min=$((((min/divisibleBy)+1)*divisibleBy))": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# If max is itself not evenly divisible by $divisibleBy,": "abs-guide.txt"},{"#+ then fix the max to be within range.": "abs-guide.txt"},{"if [ $((max/divisibleBy*divisibleBy)) -ne ${max} ]; then": "abs-guide.txt"},{"if [ ${max} -lt 0 ]; then": "abs-guide.txt"},{"max=$((((max/divisibleBy)-1)*divisibleBy))": "abs-guide.txt"},{"else": "abs-guide.txt"},{"max=$((max/divisibleBy*divisibleBy))": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 9. Another Look at Variables": "abs-guide.txt"},{"": "abs-guide.txt"},{"113": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"--------------------------------------------------------------------Now, to do the real work.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Note that to get a proper distribution for the end points,": "abs-guide.txt"},{"#+ the range of random values has to be allowed to go between": "abs-guide.txt"},{"#+ 0 and abs(max-min)+divisibleBy, not just abs(max-min)+1.": "abs-guide.txt"},{"# The slight increase will produce the proper distribution for the": "abs-guide.txt"},{"#+ end points.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Changing the formula to use abs(max-min)+1 will still produce": "abs-guide.txt"},{"correct answers, but the randomness of those answers is faulty in": "abs-guide.txt"},{"that the number of times the end points ($min and $max) are returned": "abs-guide.txt"},{"is considerably lower than when the correct formula is used.": "abs-guide.txt"},{"---------------------------------------------------------------------": "abs-guide.txt"},{"": "abs-guide.txt"},{"spread=$((max-min))": "abs-guide.txt"},{"# Omair Eshkenazi points out that this test is unnecessary,": "abs-guide.txt"},{"#+ since max and min have already been switched around.": "abs-guide.txt"},{"[ ${spread} -lt 0 ] && spread=$((0-spread))": "abs-guide.txt"},{"let spread+=divisibleBy": "abs-guide.txt"},{"randomBetweenAnswer=$(((RANDOM%spread)/divisibleBy*divisibleBy+min))": "abs-guide.txt"},{"return 0": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"However, Paulo Marcel Coelho Aragao points out that": "abs-guide.txt"},{"when $max and $min are not divisible by $divisibleBy,": "abs-guide.txt"},{"the formula fails.": "abs-guide.txt"},{"He suggests instead the following formula:": "abs-guide.txt"},{"rnumber = $(((RANDOM%(max-min+1)+min)/divisibleBy*divisibleBy))": "abs-guide.txt"},{"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"# Let's test the function.": "abs-guide.txt"},{"min=-14": "abs-guide.txt"},{"max=20": "abs-guide.txt"},{"divisibleBy=3": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Generate an array of expected answers and check to make sure we get": "abs-guide.txt"},{"#+ at least one of each answer if we loop long enough.": "abs-guide.txt"},{"declare -a answer": "abs-guide.txt"},{"minimum=${min}": "abs-guide.txt"},{"maximum=${max}": "abs-guide.txt"},{"if [ $((minimum/divisibleBy*divisibleBy)) -ne ${minimum} ]; then": "abs-guide.txt"},{"if [ ${minimum} -lt 0 ]; then": "abs-guide.txt"},{"minimum=$((minimum/divisibleBy*divisibleBy))": "abs-guide.txt"},{"else": "abs-guide.txt"},{"minimum=$((((minimum/divisibleBy)+1)*divisibleBy))": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"# If max is itself not evenly divisible by $divisibleBy,": "abs-guide.txt"},{"#+ then fix the max to be within range.": "abs-guide.txt"},{"if [ $((maximum/divisibleBy*divisibleBy)) -ne ${maximum} ]; then": "abs-guide.txt"},{"if [ ${maximum} -lt 0 ]; then": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 9. Another Look at Variables": "abs-guide.txt"},{"": "abs-guide.txt"},{"114": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"maximum=$((((maximum/divisibleBy)-1)*divisibleBy))": "abs-guide.txt"},{"else": "abs-guide.txt"},{"maximum=$((maximum/divisibleBy*divisibleBy))": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"# We need to generate only positive array subscripts,": "abs-guide.txt"},{"#+ so we need a displacement that that will guarantee": "abs-guide.txt"},{"#+ positive results.": "abs-guide.txt"},{"disp=$((0-minimum))": "abs-guide.txt"},{"for ((i=${minimum}; i<=${maximum}; i+=divisibleBy)); do": "abs-guide.txt"},{"answer[i+disp]=0": "abs-guide.txt"},{"done": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Now loop a large number of times to see what we get.": "abs-guide.txt"},{"loopIt=1000": "abs-guide.txt"},{"# The script author suggests 100000,": "abs-guide.txt"},{"#+ but that takes a good long while.": "abs-guide.txt"},{"for ((i=0; i<${loopIt}; ++i)); do": "abs-guide.txt"},{"# Note that we are specifying min and max in reversed order here to": "abs-guide.txt"},{"#+ make the function correct for this case.": "abs-guide.txt"},{"randomBetween ${max} ${min} ${divisibleBy}": "abs-guide.txt"},{"# Report an error if an answer is unexpected.": "abs-guide.txt"},{"[ ${randomBetweenAnswer} -lt ${min} -o ${randomBetweenAnswer} -gt ${max} ] \\": "abs-guide.txt"},{"&& echo MIN or MAX error - ${randomBetweenAnswer}!": "abs-guide.txt"},{"[ $((randomBetweenAnswer%${divisibleBy})) -ne 0 ] \\": "abs-guide.txt"},{"&& echo DIVISIBLE BY error - ${randomBetweenAnswer}!": "abs-guide.txt"},{"# Store the answer away statistically.": "abs-guide.txt"},{"answer[randomBetweenAnswer+disp]=$((answer[randomBetweenAnswer+disp]+1))": "abs-guide.txt"},{"done": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Let's check the results": "abs-guide.txt"},{"for ((i=${minimum}; i<=${maximum}; i+=divisibleBy)); do": "abs-guide.txt"},{"[ ${answer[i+disp]} -eq 0 ] \\": "abs-guide.txt"},{"&& echo \"We never got an answer of $i.\" \\": "abs-guide.txt"},{"|| echo \"${i} occurred ${answer[i+disp]} times.\"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Just how random is $RANDOM? The best way to test this is to write a script that tracks the distribution of": "abs-guide.txt"},{"\"random\" numbers generated by $RANDOM. Let's roll a $RANDOM die a few times . . .": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 9-15. Rolling a single die with RANDOM": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# How random is RANDOM?": "abs-guide.txt"},{"RANDOM=$$": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Reseed the random number generator using script process ID.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 9. Another Look at Variables": "abs-guide.txt"},{"": "abs-guide.txt"},{"115": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"PIPS=6": "abs-guide.txt"},{"MAXTHROWS=600": "abs-guide.txt"},{"throw=0": "abs-guide.txt"},{"": "abs-guide.txt"},{"# A die has 6 pips.": "abs-guide.txt"},{"# Increase this if you have nothing better to do with your time.": "abs-guide.txt"},{"# Number of times the dice have been cast.": "abs-guide.txt"},{"": "abs-guide.txt"},{"ones=0": "abs-guide.txt"},{"twos=0": "abs-guide.txt"},{"threes=0": "abs-guide.txt"},{"fours=0": "abs-guide.txt"},{"fives=0": "abs-guide.txt"},{"sixes=0": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Must initialize counts to zero,": "abs-guide.txt"},{"#+ since an uninitialized variable is null, NOT zero.": "abs-guide.txt"},{"": "abs-guide.txt"},{"print_result ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"ones =": "abs-guide.txt"},{"$ones\"": "abs-guide.txt"},{"echo \"twos =": "abs-guide.txt"},{"$twos\"": "abs-guide.txt"},{"echo \"threes = $threes\"": "abs-guide.txt"},{"echo \"fours = $fours\"": "abs-guide.txt"},{"echo \"fives = $fives\"": "abs-guide.txt"},{"echo \"sixes = $sixes\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"}": "abs-guide.txt"},{"update_count()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"case \"$1\" in": "abs-guide.txt"},{"0) ((ones++));;": "abs-guide.txt"},{"# Since a die has no \"zero\", this corresponds to 1.": "abs-guide.txt"},{"1) ((twos++));;": "abs-guide.txt"},{"# And this to 2.": "abs-guide.txt"},{"2) ((threes++));; # And so forth.": "abs-guide.txt"},{"3) ((fours++));;": "abs-guide.txt"},{"4) ((fives++));;": "abs-guide.txt"},{"5) ((sixes++));;": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"}": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"while [ \"$throw\" -lt \"$MAXTHROWS\" ]": "abs-guide.txt"},{"do": "abs-guide.txt"},{"let \"die1 = RANDOM % $PIPS\"": "abs-guide.txt"},{"update_count $die1": "abs-guide.txt"},{"let \"throw += 1\"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"print_result": "abs-guide.txt"},{"exit $?": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"The scores should distribute evenly, assuming RANDOM is random.": "abs-guide.txt"},{"With $MAXTHROWS at 600, all should cluster around 100,": "abs-guide.txt"},{"plus-or-minus 20 or so.": "abs-guide.txt"},{"Keep in mind that RANDOM is a ***pseudorandom*** generator,": "abs-guide.txt"},{"and not a spectacularly good one at that.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Randomness is a deep and complex subject.": "abs-guide.txt"},{"# Sufficiently long \"random\" sequences may exhibit": "abs-guide.txt"},{"#+ chaotic and other \"non-random\" behavior.": "abs-guide.txt"},{"# Exercise (easy):": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 9. Another Look at Variables": "abs-guide.txt"},{"": "abs-guide.txt"},{"116": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# --------------# Rewrite this script to flip a coin 1000 times.": "abs-guide.txt"},{"# Choices are \"HEADS\" and \"TAILS.\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"As we have seen in the last example, it is best to reseed the RANDOM generator each time it is invoked. Using": "abs-guide.txt"},{"the same seed for RANDOM repeats the same series of numbers. [48] (This mirrors the behavior of the": "abs-guide.txt"},{"random() function in C.)": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 9-16. Reseeding RANDOM": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# seeding-random.sh: Seeding the RANDOM variable.": "abs-guide.txt"},{"# v 1.1, reldate 09 Feb 2013": "abs-guide.txt"},{"MAXCOUNT=25": "abs-guide.txt"},{"SEED=": "abs-guide.txt"},{"": "abs-guide.txt"},{"# How many numbers to generate.": "abs-guide.txt"},{"": "abs-guide.txt"},{"random_numbers ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"local count=0": "abs-guide.txt"},{"local number": "abs-guide.txt"},{"while [ \"$count\" -lt \"$MAXCOUNT\" ]": "abs-guide.txt"},{"do": "abs-guide.txt"},{"number=$RANDOM": "abs-guide.txt"},{"echo -n \"$number \"": "abs-guide.txt"},{"let \"count++\"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"}": "abs-guide.txt"},{"echo; echo": "abs-guide.txt"},{"SEED=1": "abs-guide.txt"},{"RANDOM=$SEED": "abs-guide.txt"},{"# Setting RANDOM seeds the random number generator.": "abs-guide.txt"},{"echo \"Random seed = $SEED\"": "abs-guide.txt"},{"random_numbers": "abs-guide.txt"},{"": "abs-guide.txt"},{"RANDOM=$SEED": "abs-guide.txt"},{"# Same seed for RANDOM": "abs-guide.txt"},{"echo; echo \"Again, with same random seed": "abs-guide.txt"},{"echo \"Random seed = $SEED\"": "abs-guide.txt"},{"random_numbers": "abs-guide.txt"},{"# . . . reproduces the": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# When is it useful to": "abs-guide.txt"},{"": "abs-guide.txt"},{". . .": "abs-guide.txt"},{"...\"": "abs-guide.txt"},{"exact same number series.": "abs-guide.txt"},{"duplicate a \"random\" series?": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo; echo": "abs-guide.txt"},{"SEED=2": "abs-guide.txt"},{"RANDOM=$SEED": "abs-guide.txt"},{"# Trying again, but with a different seed . . .": "abs-guide.txt"},{"echo \"Random seed = $SEED\"": "abs-guide.txt"},{"random_numbers": "abs-guide.txt"},{"# . . . gives a different number series.": "abs-guide.txt"},{"echo; echo": "abs-guide.txt"},{"# RANDOM=$$ seeds RANDOM from process id of script.": "abs-guide.txt"},{"# It is also possible to seed RANDOM from 'time' or 'date' commands.": "abs-guide.txt"},{"# Getting fancy...": "abs-guide.txt"},{"SEED=$(head -1 /dev/urandom | od -N 1 | awk '{ print $2 }'| sed s/^0*//)": "abs-guide.txt"},{"# Pseudo-random output fetched": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 9. Another Look at Variables": "abs-guide.txt"},{"": "abs-guide.txt"},{"117": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"#+ from /dev/urandom (system": "abs-guide.txt"},{"#+ then converted to line of": "abs-guide.txt"},{"#+ then \"awk\" retrieves just": "abs-guide.txt"},{"#+ finally \"sed\" removes any": "abs-guide.txt"},{"RANDOM=$SEED": "abs-guide.txt"},{"echo \"Random seed = $SEED\"": "abs-guide.txt"},{"random_numbers": "abs-guide.txt"},{"": "abs-guide.txt"},{"pseudo-random device-file),": "abs-guide.txt"},{"printable (octal) numbers by \"od\",": "abs-guide.txt"},{"one number for SEED,": "abs-guide.txt"},{"leading zeros.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo; echo": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"The /dev/urandom pseudo-device file provides a method of generating much more \"random\"": "abs-guide.txt"},{"pseudorandom numbers than the $RANDOM variable. dd if=/dev/urandom of=targetfile": "abs-guide.txt"},{"bs=1 count=XX creates a file of well-scattered pseudorandom numbers. However, assigning these": "abs-guide.txt"},{"numbers to a variable in a script requires a workaround, such as filtering through od (as in above": "abs-guide.txt"},{"example, Example 16-14, and Example A-36), or even piping to md5sum (see Example 36-16).": "abs-guide.txt"},{"": "abs-guide.txt"},{"There are also other ways to generate pseudorandom numbers in a script. Awk provides a convenient": "abs-guide.txt"},{"means of doing this.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 9-17. Pseudorandom numbers, using awk": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# random2.sh: Returns a pseudorandom number in the range 0 - 1,": "abs-guide.txt"},{"#+ to 6 decimal places. For example: 0.822725": "abs-guide.txt"},{"# Uses the awk rand() function.": "abs-guide.txt"},{"AWKSCRIPT=' { srand(); print rand() } '": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Command(s)/parameters passed to awk": "abs-guide.txt"},{"# Note that srand() reseeds awk's random number generator.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo -n \"Random number between 0 and 1 = \"": "abs-guide.txt"},{"echo | awk \"$AWKSCRIPT\"": "abs-guide.txt"},{"# What happens if you leave out the 'echo'?": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Exercises:": "abs-guide.txt"},{"# --------# 1) Using a loop construct, print out 10 different random numbers.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"(Hint: you must reseed the srand() function with a different seed": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"in each pass through the loop. What happens if you omit this?)": "abs-guide.txt"},{"# 2) Using an integer multiplier as a scaling factor, generate random numbers": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"in the range of 10 to 100.": "abs-guide.txt"},{"# 3) Same as exercise #2, above, but generate random integers this time.": "abs-guide.txt"},{"": "abs-guide.txt"},{"The date command also lends itself to generating pseudorandom integer sequences.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 9. Another Look at Variables": "abs-guide.txt"},{"": "abs-guide.txt"},{"118": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fChapter 10. Manipulating Variables": "abs-guide.txt"},{"10.1. Manipulating Strings": "abs-guide.txt"},{"Bash supports a surprising number of string manipulation operations. Unfortunately, these tools lack a unified": "abs-guide.txt"},{"focus. Some are a subset of parameter substitution, and others fall under the functionality of the UNIX expr": "abs-guide.txt"},{"command. This results in inconsistent command syntax and overlap of functionality, not to mention": "abs-guide.txt"},{"confusion.": "abs-guide.txt"},{"String Length": "abs-guide.txt"},{"${#string}": "abs-guide.txt"},{"expr length $string": "abs-guide.txt"},{"These are the equivalent of strlen() in C.": "abs-guide.txt"},{"expr \"$string\" : '.*'": "abs-guide.txt"},{"stringZ=abcABC123ABCabc": "abs-guide.txt"},{"echo ${#stringZ}": "abs-guide.txt"},{"echo `expr length $stringZ`": "abs-guide.txt"},{"echo `expr \"$stringZ\" : '.*'`": "abs-guide.txt"},{"": "abs-guide.txt"},{"# 15": "abs-guide.txt"},{"# 15": "abs-guide.txt"},{"# 15": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 10-1. Inserting a blank line between paragraphs in a text file": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# paragraph-space.sh": "abs-guide.txt"},{"# Ver. 2.1, Reldate 29Jul12 [fixup]": "abs-guide.txt"},{"# Inserts a blank line between paragraphs of a single-spaced text file.": "abs-guide.txt"},{"# Usage: $0 <FILENAME": "abs-guide.txt"},{"MINLEN=60": "abs-guide.txt"},{"# Change this value? It's a judgment call.": "abs-guide.txt"},{"# Assume lines shorter than $MINLEN characters ending in a period": "abs-guide.txt"},{"#+ terminate a paragraph. See exercises below.": "abs-guide.txt"},{"while read line": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo \"$line\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# For as many lines as the input file has ...": "abs-guide.txt"},{"# Output the line itself.": "abs-guide.txt"},{"": "abs-guide.txt"},{"len=${#line}": "abs-guide.txt"},{"if [[ \"$len\" -lt \"$MINLEN\" && \"$line\" =~ [*{\\.}]$ ]]": "abs-guide.txt"},{"# if [[ \"$len\" -lt \"$MINLEN\" && \"$line\" =~ \\[*\\.\\] ]]": "abs-guide.txt"},{"# An update to Bash broke the previous version of this script. Ouch!": "abs-guide.txt"},{"# Thank you, Halim Srama, for pointing this out and suggesting a fix.": "abs-guide.txt"},{"then echo": "abs-guide.txt"},{"# Add a blank line immediately": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"#+ after a short line terminated by a period.": "abs-guide.txt"},{"done": "abs-guide.txt"},{"exit": "abs-guide.txt"},{"# Exercises:": "abs-guide.txt"},{"# --------# 1) The script usually inserts a blank line at the end": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 10. Manipulating Variables": "abs-guide.txt"},{"": "abs-guide.txt"},{"119": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"of the target file. Fix this.": "abs-guide.txt"},{"# 2) Line 17 only considers periods as sentence terminators.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Modify this to include other common end-of-sentence characters,": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"such as ?, !, and \".": "abs-guide.txt"},{"": "abs-guide.txt"},{"Length of Matching Substring at Beginning of String": "abs-guide.txt"},{"expr match \"$string\" '$substring'": "abs-guide.txt"},{"$substring is a regular expression.": "abs-guide.txt"},{"expr \"$string\" : '$substring'": "abs-guide.txt"},{"$substring is a regular expression.": "abs-guide.txt"},{"stringZ=abcABC123ABCabc": "abs-guide.txt"},{"#": "abs-guide.txt"},{"|------|": "abs-guide.txt"},{"#": "abs-guide.txt"},{"12345678": "abs-guide.txt"},{"echo `expr match \"$stringZ\" 'abc[A-Z]*.2'`": "abs-guide.txt"},{"echo `expr \"$stringZ\" : 'abc[A-Z]*.2'`": "abs-guide.txt"},{"": "abs-guide.txt"},{"# 8": "abs-guide.txt"},{"# 8": "abs-guide.txt"},{"": "abs-guide.txt"},{"Index": "abs-guide.txt"},{"expr index $string $substring": "abs-guide.txt"},{"Numerical position in $string of first character in $substring that matches.": "abs-guide.txt"},{"stringZ=abcABC123ABCabc": "abs-guide.txt"},{"#": "abs-guide.txt"},{"123456 ...": "abs-guide.txt"},{"echo `expr index \"$stringZ\" C12`": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo `expr index \"$stringZ\" 1c`": "abs-guide.txt"},{"# 'c' (in #3 position) matches before '1'.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# 6": "abs-guide.txt"},{"# C position.": "abs-guide.txt"},{"# 3": "abs-guide.txt"},{"": "abs-guide.txt"},{"This is the near equivalent of strchr() in C.": "abs-guide.txt"},{"Substring Extraction": "abs-guide.txt"},{"${string:position}": "abs-guide.txt"},{"Extracts substring from $string at $position.": "abs-guide.txt"},{"If the $string parameter is \"*\" or \"@\", then this extracts the positional parameters, [49] starting at": "abs-guide.txt"},{"$position.": "abs-guide.txt"},{"${string:position:length}": "abs-guide.txt"},{"Extracts $length characters of substring from $string at $position.": "abs-guide.txt"},{"stringZ=abcABC123ABCabc": "abs-guide.txt"},{"#": "abs-guide.txt"},{"0123456789.....": "abs-guide.txt"},{"#": "abs-guide.txt"},{"0-based indexing.": "abs-guide.txt"},{"echo ${stringZ:0}": "abs-guide.txt"},{"echo ${stringZ:1}": "abs-guide.txt"},{"echo ${stringZ:7}": "abs-guide.txt"},{"": "abs-guide.txt"},{"# abcABC123ABCabc": "abs-guide.txt"},{"# bcABC123ABCabc": "abs-guide.txt"},{"# 23ABCabc": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo ${stringZ:7:3}": "abs-guide.txt"},{"": "abs-guide.txt"},{"# 23A": "abs-guide.txt"},{"# Three characters of substring.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 10. Manipulating Variables": "abs-guide.txt"},{"": "abs-guide.txt"},{"120": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# Is it possible to index from the right end of the string?": "abs-guide.txt"},{"echo ${stringZ:-4}": "abs-guide.txt"},{"# abcABC123ABCabc": "abs-guide.txt"},{"# Defaults to full string, as in ${parameter:-default}.": "abs-guide.txt"},{"# However . . .": "abs-guide.txt"},{"echo ${stringZ:(-4)}": "abs-guide.txt"},{"# Cabc": "abs-guide.txt"},{"echo ${stringZ: -4}": "abs-guide.txt"},{"# Cabc": "abs-guide.txt"},{"# Now, it works.": "abs-guide.txt"},{"# Parentheses or added space \"escape\" the position parameter.": "abs-guide.txt"},{"# Thank you, Dan Jacobson, for pointing this out.": "abs-guide.txt"},{"": "abs-guide.txt"},{"The position and length arguments can be \"parameterized,\" that is, represented as a variable, rather": "abs-guide.txt"},{"than as a numerical constant.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 10-2. Generating an 8-character \"random\" string": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# rand-string.sh": "abs-guide.txt"},{"# Generating an 8-character \"random\" string.": "abs-guide.txt"},{"if [ -n \"$1\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"str0=\"$1\"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"str0=\"$$\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"POS=2": "abs-guide.txt"},{"LEN=8": "abs-guide.txt"},{"": "abs-guide.txt"},{"# If command-line argument present,": "abs-guide.txt"},{"#+ then set start-string to it.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Else use PID of script as start-string.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Starting from position 2 in the string.": "abs-guide.txt"},{"# Extract eight characters.": "abs-guide.txt"},{"": "abs-guide.txt"},{"str1=$( echo \"$str0\" | md5sum | md5sum )": "abs-guide.txt"},{"# Doubly scramble": "abs-guide.txt"},{"^^^^^^": "abs-guide.txt"},{"^^^^^^": "abs-guide.txt"},{"#+ by piping and repiping to md5sum.": "abs-guide.txt"},{"randstring=\"${str1:$POS:$LEN}\"": "abs-guide.txt"},{"# Can parameterize ^^^^ ^^^^": "abs-guide.txt"},{"echo \"$randstring\"": "abs-guide.txt"},{"exit $?": "abs-guide.txt"},{"# bozo$ ./rand-string.sh my-password": "abs-guide.txt"},{"# 1bdd88c4": "abs-guide.txt"},{"# No, this is is not recommended": "abs-guide.txt"},{"#+ as a method of generating hack-proof passwords.": "abs-guide.txt"},{"": "abs-guide.txt"},{"If the $string parameter is \"*\" or \"@\", then this extracts a maximum of $length positional": "abs-guide.txt"},{"parameters, starting at $position.": "abs-guide.txt"},{"echo ${*:2}": "abs-guide.txt"},{"echo ${@:2}": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Echoes second and following positional parameters.": "abs-guide.txt"},{"# Same as above.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo ${*:2:3}": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Echoes three positional parameters, starting at second.": "abs-guide.txt"},{"": "abs-guide.txt"},{"expr substr $string $position $length": "abs-guide.txt"},{"Chapter 10. Manipulating Variables": "abs-guide.txt"},{"": "abs-guide.txt"},{"121": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"Extracts $length characters from $string starting at $position.": "abs-guide.txt"},{"stringZ=abcABC123ABCabc": "abs-guide.txt"},{"#": "abs-guide.txt"},{"123456789......": "abs-guide.txt"},{"#": "abs-guide.txt"},{"1-based indexing.": "abs-guide.txt"},{"echo `expr substr $stringZ 1 2`": "abs-guide.txt"},{"echo `expr substr $stringZ 4 3`": "abs-guide.txt"},{"": "abs-guide.txt"},{"# ab": "abs-guide.txt"},{"# ABC": "abs-guide.txt"},{"": "abs-guide.txt"},{"expr match \"$string\" '\\($substring\\)'": "abs-guide.txt"},{"Extracts $substring at beginning of $string, where $substring is a regular expression.": "abs-guide.txt"},{"expr \"$string\" : '\\($substring\\)'": "abs-guide.txt"},{"Extracts $substring at beginning of $string, where $substring is a regular expression.": "abs-guide.txt"},{"stringZ=abcABC123ABCabc": "abs-guide.txt"},{"#": "abs-guide.txt"},{"=======": "abs-guide.txt"},{"echo `expr match \"$stringZ\" '\\(.[b-c]*[A-Z]..[0-9]\\)'`": "abs-guide.txt"},{"echo `expr \"$stringZ\" : '\\(.[b-c]*[A-Z]..[0-9]\\)'`": "abs-guide.txt"},{"echo `expr \"$stringZ\" : '\\(.......\\)'`": "abs-guide.txt"},{"# All of the above forms give an identical result.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# abcABC1": "abs-guide.txt"},{"# abcABC1": "abs-guide.txt"},{"# abcABC1": "abs-guide.txt"},{"": "abs-guide.txt"},{"expr match \"$string\" '.*\\($substring\\)'": "abs-guide.txt"},{"Extracts $substring at end of $string, where $substring is a regular expression.": "abs-guide.txt"},{"expr \"$string\" : '.*\\($substring\\)'": "abs-guide.txt"},{"Extracts $substring at end of $string, where $substring is a regular expression.": "abs-guide.txt"},{"stringZ=abcABC123ABCabc": "abs-guide.txt"},{"#": "abs-guide.txt"},{"======": "abs-guide.txt"},{"echo `expr match \"$stringZ\" '.*\\([A-C][A-C][A-C][a-c]*\\)'`": "abs-guide.txt"},{"echo `expr \"$stringZ\" : '.*\\(......\\)'`": "abs-guide.txt"},{"": "abs-guide.txt"},{"# ABCabc": "abs-guide.txt"},{"# ABCabc": "abs-guide.txt"},{"": "abs-guide.txt"},{"Substring Removal": "abs-guide.txt"},{"${string#substring}": "abs-guide.txt"},{"Deletes shortest match of $substring from front of $string.": "abs-guide.txt"},{"${string##substring}": "abs-guide.txt"},{"Deletes longest match of $substring from front of $string.": "abs-guide.txt"},{"stringZ=abcABC123ABCabc": "abs-guide.txt"},{"#": "abs-guide.txt"},{"|----|": "abs-guide.txt"},{"shortest": "abs-guide.txt"},{"#": "abs-guide.txt"},{"|----------|": "abs-guide.txt"},{"longest": "abs-guide.txt"},{"echo ${stringZ#a*C}": "abs-guide.txt"},{"# 123ABCabc": "abs-guide.txt"},{"# Strip out shortest match between 'a' and 'C'.": "abs-guide.txt"},{"echo ${stringZ##a*C}": "abs-guide.txt"},{"# abc": "abs-guide.txt"},{"# Strip out longest match between 'a' and 'C'.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# You can parameterize the substrings.": "abs-guide.txt"},{"X='a*C'": "abs-guide.txt"},{"echo ${stringZ#$X}": "abs-guide.txt"},{"echo ${stringZ##$X}": "abs-guide.txt"},{"": "abs-guide.txt"},{"# 123ABCabc": "abs-guide.txt"},{"# abc": "abs-guide.txt"},{"# As above.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 10. Manipulating Variables": "abs-guide.txt"},{"": "abs-guide.txt"},{"122": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"${string%substring}": "abs-guide.txt"},{"Deletes shortest match of $substring from back of $string.": "abs-guide.txt"},{"For example:": "abs-guide.txt"},{"# Rename all filenames in $PWD with \"TXT\" suffix to a \"txt\" suffix.": "abs-guide.txt"},{"# For example, \"file1.TXT\" becomes \"file1.txt\" . . .": "abs-guide.txt"},{"SUFF=TXT": "abs-guide.txt"},{"suff=txt": "abs-guide.txt"},{"for i in $(ls *.$SUFF)": "abs-guide.txt"},{"do": "abs-guide.txt"},{"mv -f $i ${i%.$SUFF}.$suff": "abs-guide.txt"},{"# Leave unchanged everything *except* the shortest pattern match": "abs-guide.txt"},{"#+ starting from the right-hand-side of the variable $i . . .": "abs-guide.txt"},{"done ### This could be condensed into a \"one-liner\" if desired.": "abs-guide.txt"},{"# Thank you, Rory Winston.": "abs-guide.txt"},{"": "abs-guide.txt"},{"${string%%substring}": "abs-guide.txt"},{"Deletes longest match of $substring from back of $string.": "abs-guide.txt"},{"stringZ=abcABC123ABCabc": "abs-guide.txt"},{"#": "abs-guide.txt"},{"||": "abs-guide.txt"},{"#": "abs-guide.txt"},{"|------------|": "abs-guide.txt"},{"": "abs-guide.txt"},{"shortest": "abs-guide.txt"},{"longest": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo ${stringZ%b*c}": "abs-guide.txt"},{"# abcABC123ABCa": "abs-guide.txt"},{"# Strip out shortest match between 'b' and 'c', from back of $stringZ.": "abs-guide.txt"},{"echo ${stringZ%%b*c}": "abs-guide.txt"},{"# a": "abs-guide.txt"},{"# Strip out longest match between 'b' and 'c', from back of $stringZ.": "abs-guide.txt"},{"": "abs-guide.txt"},{"This operator is useful for generating filenames.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 10-3. Converting graphic file formats, with filename change": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# cvt.sh:": "abs-guide.txt"},{"# Converts all the MacPaint image files in a directory to \"pbm\" format.": "abs-guide.txt"},{"# Uses the \"macptopbm\" binary from the \"netpbm\" package,": "abs-guide.txt"},{"#+ which is maintained by Brian Henderson (bryanh@giraffe-data.com).": "abs-guide.txt"},{"# Netpbm is a standard part of most Linux distros.": "abs-guide.txt"},{"OPERATION=macptopbm": "abs-guide.txt"},{"SUFFIX=pbm": "abs-guide.txt"},{"# New filename suffix.": "abs-guide.txt"},{"if [ -n \"$1\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"directory=$1": "abs-guide.txt"},{"else": "abs-guide.txt"},{"directory=$PWD": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"# If directory name given as a script argument...": "abs-guide.txt"},{"# Otherwise use current working directory.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Assumes all files in the target directory are MacPaint image files,": "abs-guide.txt"},{"#+ with a \".mac\" filename suffix.": "abs-guide.txt"},{"for file in $directory/*": "abs-guide.txt"},{"do": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 10. Manipulating Variables": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Filename globbing.": "abs-guide.txt"},{"": "abs-guide.txt"},{"123": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"filename=${file%.*c}": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Strip \".mac\" suffix off filename": "abs-guide.txt"},{"#+ ('.*c' matches everything": "abs-guide.txt"},{"#+ between '.' and 'c', inclusive).": "abs-guide.txt"},{"$OPERATION $file > \"$filename.$SUFFIX\"": "abs-guide.txt"},{"# Redirect conversion to new filename.": "abs-guide.txt"},{"rm -f $file": "abs-guide.txt"},{"# Delete original files after converting.": "abs-guide.txt"},{"echo \"$filename.$SUFFIX\" # Log what is happening to stdout.": "abs-guide.txt"},{"done": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"# Exercise:": "abs-guide.txt"},{"# -------# As it stands, this script converts *all* the files in the current": "abs-guide.txt"},{"#+ working directory.": "abs-guide.txt"},{"# Modify it to work *only* on files with a \".mac\" suffix.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# *** And here's another way to do it. *** #": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# Batch convert into different graphic formats.": "abs-guide.txt"},{"# Assumes imagemagick installed (standard in most Linux distros).": "abs-guide.txt"},{"INFMT=png": "abs-guide.txt"},{"OUTFMT=pdf": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Can be tif, jpg, gif, etc.": "abs-guide.txt"},{"# Can be tif, jpg, gif, pdf, etc.": "abs-guide.txt"},{"": "abs-guide.txt"},{"for pic in *\"$INFMT\"": "abs-guide.txt"},{"do": "abs-guide.txt"},{"p2=$(ls \"$pic\" | sed -e s/\\.$INFMT//)": "abs-guide.txt"},{"# echo $p2": "abs-guide.txt"},{"convert \"$pic\" $p2.$OUTFMT": "abs-guide.txt"},{"done": "abs-guide.txt"},{"exit $?": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 10-4. Converting streaming audio files to ogg": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# ra2ogg.sh: Convert streaming audio files (*.ra) to ogg.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Uses the \"mplayer\" media player program:": "abs-guide.txt"},{"http://www.mplayerhq.hu/homepage": "abs-guide.txt"},{"Uses the \"ogg\" library and \"oggenc\":": "abs-guide.txt"},{"http://www.xiph.org/": "abs-guide.txt"},{"This script may need appropriate codecs installed, such as sipr.so ...": "abs-guide.txt"},{"Possibly also the compat-libstdc++ package.": "abs-guide.txt"},{"": "abs-guide.txt"},{"OFILEPREF=${1%%ra}": "abs-guide.txt"},{"# Strip off the \"ra\" suffix.": "abs-guide.txt"},{"OFILESUFF=wav": "abs-guide.txt"},{"# Suffix for wav file.": "abs-guide.txt"},{"OUTFILE=\"$OFILEPREF\"\"$OFILESUFF\"": "abs-guide.txt"},{"E_NOARGS=85": "abs-guide.txt"},{"if [ -z \"$1\" ]": "abs-guide.txt"},{"# Must specify a filename to convert.": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Usage: `basename $0` [filename]\"": "abs-guide.txt"},{"exit $E_NOARGS": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 10. Manipulating Variables": "abs-guide.txt"},{"": "abs-guide.txt"},{"124": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"": "abs-guide.txt"},{"##########################################################################": "abs-guide.txt"},{"mplayer \"$1\" -ao pcm:file=$OUTFILE": "abs-guide.txt"},{"oggenc \"$OUTFILE\" # Correct file extension automatically added by oggenc.": "abs-guide.txt"},{"##########################################################################": "abs-guide.txt"},{"rm \"$OUTFILE\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Delete intermediate *.wav file.": "abs-guide.txt"},{"# If you want to keep it, comment out above line.": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit $?": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"Note:": "abs-guide.txt"},{"---On a Website, simply clicking on a *.ram streaming audio file": "abs-guide.txt"},{"usually only downloads the URL of the actual *.ra audio file.": "abs-guide.txt"},{"You can then use \"wget\" or something similar": "abs-guide.txt"},{"to download the *.ra file itself.": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"Exercises:": "abs-guide.txt"},{"--------As is, this script converts only *.ra filenames.": "abs-guide.txt"},{"Add flexibility by permitting use of *.ram and other filenames.": "abs-guide.txt"},{"If you're really ambitious, expand the script": "abs-guide.txt"},{"to do automatic downloads and conversions of streaming audio files.": "abs-guide.txt"},{"Given a URL, batch download streaming audio files (using \"wget\")": "abs-guide.txt"},{"and convert them on the fly.": "abs-guide.txt"},{"": "abs-guide.txt"},{"A simple emulation of getopt using substring-extraction constructs.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 10-5. Emulating getopt": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# getopt-simple.sh": "abs-guide.txt"},{"# Author: Chris Morgan": "abs-guide.txt"},{"# Used in the ABS Guide with permission.": "abs-guide.txt"},{"": "abs-guide.txt"},{"getopt_simple()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"echo \"getopt_simple()\"": "abs-guide.txt"},{"echo \"Parameters are '$*'\"": "abs-guide.txt"},{"until [ -z \"$1\" ]": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo \"Processing parameter of: '$1'\"": "abs-guide.txt"},{"if [ ${1:0:1} = '/' ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"tmp=${1:1}": "abs-guide.txt"},{"# Strip off leading '/' . . .": "abs-guide.txt"},{"parameter=${tmp%%=*}": "abs-guide.txt"},{"# Extract name.": "abs-guide.txt"},{"value=${tmp##*=}": "abs-guide.txt"},{"# Extract value.": "abs-guide.txt"},{"echo \"Parameter: '$parameter', value: '$value'\"": "abs-guide.txt"},{"eval $parameter=$value": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"shift": "abs-guide.txt"},{"done": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 10. Manipulating Variables": "abs-guide.txt"},{"": "abs-guide.txt"},{"125": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# Pass all options to getopt_simple().": "abs-guide.txt"},{"getopt_simple $*": "abs-guide.txt"},{"echo \"test is '$test'\"": "abs-guide.txt"},{"echo \"test2 is '$test2'\"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"# See also, UseGetOpt.sh, a modified version of this script.": "abs-guide.txt"},{"": "abs-guide.txt"},{"--sh getopt_example.sh /test=value1 /test2=value2": "abs-guide.txt"},{"Parameters are '/test=value1 /test2=value2'": "abs-guide.txt"},{"Processing parameter of: '/test=value1'": "abs-guide.txt"},{"Parameter: 'test', value: 'value1'": "abs-guide.txt"},{"Processing parameter of: '/test2=value2'": "abs-guide.txt"},{"Parameter: 'test2', value: 'value2'": "abs-guide.txt"},{"test is 'value1'": "abs-guide.txt"},{"test2 is 'value2'": "abs-guide.txt"},{"": "abs-guide.txt"},{"Substring Replacement": "abs-guide.txt"},{"${string/substring/replacement}": "abs-guide.txt"},{"Replace first match of $substring with $replacement. [50]": "abs-guide.txt"},{"${string//substring/replacement}": "abs-guide.txt"},{"Replace all matches of $substring with $replacement.": "abs-guide.txt"},{"stringZ=abcABC123ABCabc": "abs-guide.txt"},{"echo ${stringZ/abc/xyz}": "abs-guide.txt"},{"": "abs-guide.txt"},{"# xyzABC123ABCabc": "abs-guide.txt"},{"# Replaces first match of 'abc' with 'xyz'.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo ${stringZ//abc/xyz}": "abs-guide.txt"},{"": "abs-guide.txt"},{"# xyzABC123ABCxyz": "abs-guide.txt"},{"# Replaces all matches of 'abc' with # 'xyz'.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo --------------echo \"$stringZ\"": "abs-guide.txt"},{"echo ---------------": "abs-guide.txt"},{"": "abs-guide.txt"},{"# abcABC123ABCabc": "abs-guide.txt"},{"# The string itself is not altered!": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Can the match and replacement": "abs-guide.txt"},{"match=abc": "abs-guide.txt"},{"repl=000": "abs-guide.txt"},{"echo ${stringZ/$match/$repl} #": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^": "abs-guide.txt"},{"^": "abs-guide.txt"},{"echo ${stringZ//$match/$repl} #": "abs-guide.txt"},{"# Yes!": "abs-guide.txt"},{"^": "abs-guide.txt"},{"^": "abs-guide.txt"},{"": "abs-guide.txt"},{"strings be parameterized?": "abs-guide.txt"},{"": "abs-guide.txt"},{"000ABC123ABCabc": "abs-guide.txt"},{"^^^": "abs-guide.txt"},{"000ABC123ABC000": "abs-guide.txt"},{"^^^": "abs-guide.txt"},{"^^^": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"# What happens if no $replacement string is supplied?": "abs-guide.txt"},{"echo ${stringZ/abc}": "abs-guide.txt"},{"# ABC123ABCabc": "abs-guide.txt"},{"echo ${stringZ//abc}": "abs-guide.txt"},{"# ABC123ABC": "abs-guide.txt"},{"# A simple deletion takes place.": "abs-guide.txt"},{"": "abs-guide.txt"},{"${string/#substring/replacement}": "abs-guide.txt"},{"If $substring matches front end of $string, substitute $replacement for $substring.": "abs-guide.txt"},{"${string/%substring/replacement}": "abs-guide.txt"},{"If $substring matches back end of $string, substitute $replacement for $substring.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 10. Manipulating Variables": "abs-guide.txt"},{"": "abs-guide.txt"},{"126": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"stringZ=abcABC123ABCabc": "abs-guide.txt"},{"echo ${stringZ/#abc/XYZ}": "abs-guide.txt"},{"": "abs-guide.txt"},{"# XYZABC123ABCabc": "abs-guide.txt"},{"# Replaces front-end match of 'abc' with 'XYZ'.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo ${stringZ/%abc/XYZ}": "abs-guide.txt"},{"": "abs-guide.txt"},{"# abcABC123ABCXYZ": "abs-guide.txt"},{"# Replaces back-end match of 'abc' with 'XYZ'.": "abs-guide.txt"},{"": "abs-guide.txt"},{"10.1.1. Manipulating strings using awk": "abs-guide.txt"},{"A Bash script may invoke the string manipulation facilities of awk as an alternative to using its built-in": "abs-guide.txt"},{"operations.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 10-6. Alternate ways of extracting and locating substrings": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# substring-extraction.sh": "abs-guide.txt"},{"String=23skidoo1": "abs-guide.txt"},{"#": "abs-guide.txt"},{"012345678": "abs-guide.txt"},{"Bash": "abs-guide.txt"},{"#": "abs-guide.txt"},{"123456789": "abs-guide.txt"},{"awk": "abs-guide.txt"},{"# Note different string indexing system:": "abs-guide.txt"},{"# Bash numbers first character of string as 0.": "abs-guide.txt"},{"# Awk numbers first character of string as 1.": "abs-guide.txt"},{"echo ${String:2:4} # position 3 (0-1-2), 4 characters long": "abs-guide.txt"},{"# skid": "abs-guide.txt"},{"# The awk equivalent of ${string:pos:length} is substr(string,pos,length).": "abs-guide.txt"},{"echo | awk '": "abs-guide.txt"},{"{ print substr(\"'\"${String}\"'\",3,4)": "abs-guide.txt"},{"# skid": "abs-guide.txt"},{"}": "abs-guide.txt"},{"'": "abs-guide.txt"},{"# Piping an empty \"echo\" to awk gives it dummy input,": "abs-guide.txt"},{"#+ and thus makes it unnecessary to supply a filename.": "abs-guide.txt"},{"echo \"----\"": "abs-guide.txt"},{"# And likewise:": "abs-guide.txt"},{"echo | awk '": "abs-guide.txt"},{"{ print index(\"'\"${String}\"'\", \"skid\")": "abs-guide.txt"},{"# 3": "abs-guide.txt"},{"}": "abs-guide.txt"},{"# (skid starts at position 3)": "abs-guide.txt"},{"'": "abs-guide.txt"},{"# The awk equivalent of \"expr index\" ...": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"10.1.2. Further Reference": "abs-guide.txt"},{"For more on string manipulation in scripts, refer to Section 10.2 and the relevant section of the expr command": "abs-guide.txt"},{"listing.": "abs-guide.txt"},{"Script examples:": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 10. Manipulating Variables": "abs-guide.txt"},{"": "abs-guide.txt"},{"127": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"1. Example 16-9": "abs-guide.txt"},{"2. Example 10-9": "abs-guide.txt"},{"3. Example 10-10": "abs-guide.txt"},{"4. Example 10-11": "abs-guide.txt"},{"5. Example 10-13": "abs-guide.txt"},{"6. Example A-36": "abs-guide.txt"},{"7. Example A-41": "abs-guide.txt"},{"": "abs-guide.txt"},{"10.2. Parameter Substitution": "abs-guide.txt"},{"Manipulating and/or expanding variables": "abs-guide.txt"},{"${parameter}": "abs-guide.txt"},{"Same as $parameter, i.e., value of the variable parameter. In certain contexts, only the less": "abs-guide.txt"},{"ambiguous ${parameter} form works.": "abs-guide.txt"},{"May be used for concatenating variables with strings.": "abs-guide.txt"},{"your_id=${USER}-on-${HOSTNAME}": "abs-guide.txt"},{"echo \"$your_id\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"echo \"Old \\$PATH = $PATH\"": "abs-guide.txt"},{"PATH=${PATH}:/opt/bin # Add /opt/bin to $PATH for duration of script.": "abs-guide.txt"},{"echo \"New \\$PATH = $PATH\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"${parameter-default}, ${parameter:-default}": "abs-guide.txt"},{"If parameter not set, use default.": "abs-guide.txt"},{"var1=1": "abs-guide.txt"},{"var2=2": "abs-guide.txt"},{"# var3 is unset.": "abs-guide.txt"},{"echo ${var1-$var2}": "abs-guide.txt"},{"echo ${var3-$var2}": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^": "abs-guide.txt"},{"": "abs-guide.txt"},{"# 1": "abs-guide.txt"},{"# 2": "abs-guide.txt"},{"Note the $ prefix.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo ${username-`whoami`}": "abs-guide.txt"},{"# Echoes the result of `whoami`, if variable $username is still unset.": "abs-guide.txt"},{"": "abs-guide.txt"},{"${parameter-default} and ${parameter:-default} are almost": "abs-guide.txt"},{"equivalent. The extra : makes a difference only when parameter has been declared,": "abs-guide.txt"},{"but is null.": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# param-sub.sh": "abs-guide.txt"},{"# Whether a variable has been declared": "abs-guide.txt"},{"#+ affects triggering of the default option": "abs-guide.txt"},{"#+ even if the variable is null.": "abs-guide.txt"},{"username0=": "abs-guide.txt"},{"echo \"username0 has been declared, but is set to null.\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 10. Manipulating Variables": "abs-guide.txt"},{"": "abs-guide.txt"},{"128": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"echo \"username0 = ${username0-`whoami`}\"": "abs-guide.txt"},{"# Will not echo.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo username1 has not been declared.": "abs-guide.txt"},{"echo \"username1 = ${username1-`whoami`}\"": "abs-guide.txt"},{"# Will echo.": "abs-guide.txt"},{"username2=": "abs-guide.txt"},{"echo \"username2 has been declared, but is set to null.\"": "abs-guide.txt"},{"echo \"username2 = ${username2:-`whoami`}\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^": "abs-guide.txt"},{"# Will echo because of :- rather than just - in condition test.": "abs-guide.txt"},{"# Compare to first instance, above.": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Once again:": "abs-guide.txt"},{"variable=": "abs-guide.txt"},{"# variable has been declared, but is set to null.": "abs-guide.txt"},{"echo \"${variable-0}\"": "abs-guide.txt"},{"echo \"${variable:-1}\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^": "abs-guide.txt"},{"": "abs-guide.txt"},{"# (no output)": "abs-guide.txt"},{"# 1": "abs-guide.txt"},{"": "abs-guide.txt"},{"unset variable": "abs-guide.txt"},{"echo \"${variable-2}\"": "abs-guide.txt"},{"echo \"${variable:-3}\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# 2": "abs-guide.txt"},{"# 3": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"The default parameter construct finds use in providing \"missing\" command-line arguments in scripts.": "abs-guide.txt"},{"DEFAULT_FILENAME=generic.data": "abs-guide.txt"},{"filename=${1:-$DEFAULT_FILENAME}": "abs-guide.txt"},{"# If not otherwise specified, the following command block operates": "abs-guide.txt"},{"#+ on the file \"generic.data\".": "abs-guide.txt"},{"# Begin-Command-Block": "abs-guide.txt"},{"# ...": "abs-guide.txt"},{"# ...": "abs-guide.txt"},{"# ...": "abs-guide.txt"},{"# End-Command-Block": "abs-guide.txt"},{"": "abs-guide.txt"},{"# From \"hanoi2.bash\" example:": "abs-guide.txt"},{"DISKS=${1:-E_NOPARAM}": "abs-guide.txt"},{"# Must specify how many disks.": "abs-guide.txt"},{"# Set $DISKS to $1 command-line-parameter,": "abs-guide.txt"},{"#+ or to $E_NOPARAM if that is unset.": "abs-guide.txt"},{"": "abs-guide.txt"},{"See also Example 3-4, Example 31-2, and Example A-6.": "abs-guide.txt"},{"Compare this method with using an and list to supply a default command-line argument.": "abs-guide.txt"},{"${parameter=default}, ${parameter:=default}": "abs-guide.txt"},{"If parameter not set, set it to default.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 10. Manipulating Variables": "abs-guide.txt"},{"": "abs-guide.txt"},{"129": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"Both forms nearly equivalent. The : makes a difference only when $parameter has been declared": "abs-guide.txt"},{"and is null, [51] as above.": "abs-guide.txt"},{"echo ${var=abc}": "abs-guide.txt"},{"# abc": "abs-guide.txt"},{"echo ${var=xyz}": "abs-guide.txt"},{"# abc": "abs-guide.txt"},{"# $var had already been set to abc, so it did not change.": "abs-guide.txt"},{"": "abs-guide.txt"},{"${parameter+alt_value}, ${parameter:+alt_value}": "abs-guide.txt"},{"If parameter set, use alt_value, else use null string.": "abs-guide.txt"},{"Both forms nearly equivalent. The : makes a difference only when parameter has been declared": "abs-guide.txt"},{"and is null, see below.": "abs-guide.txt"},{"echo \"###### \\${parameter+alt_value} ########\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"a=${param1+xyz}": "abs-guide.txt"},{"echo \"a = $a\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# a =": "abs-guide.txt"},{"": "abs-guide.txt"},{"param2=": "abs-guide.txt"},{"a=${param2+xyz}": "abs-guide.txt"},{"echo \"a = $a\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# a = xyz": "abs-guide.txt"},{"": "abs-guide.txt"},{"param3=123": "abs-guide.txt"},{"a=${param3+xyz}": "abs-guide.txt"},{"echo \"a = $a\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# a = xyz": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"###### \\${parameter:+alt_value} ########\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"a=${param4:+xyz}": "abs-guide.txt"},{"echo \"a = $a\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# a =": "abs-guide.txt"},{"": "abs-guide.txt"},{"param5=": "abs-guide.txt"},{"a=${param5:+xyz}": "abs-guide.txt"},{"echo \"a = $a\"": "abs-guide.txt"},{"# a =": "abs-guide.txt"},{"# Different result from": "abs-guide.txt"},{"param6=123": "abs-guide.txt"},{"a=${param6:+xyz}": "abs-guide.txt"},{"echo \"a = $a\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"a=${param5+xyz}": "abs-guide.txt"},{"": "abs-guide.txt"},{"# a = xyz": "abs-guide.txt"},{"": "abs-guide.txt"},{"${parameter?err_msg}, ${parameter:?err_msg}": "abs-guide.txt"},{"If parameter set, use it, else print err_msg and abort the script with an exit status of 1.": "abs-guide.txt"},{"Both forms nearly equivalent. The : makes a difference only when parameter has been declared": "abs-guide.txt"},{"and is null, as above.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 10-7. Using parameter substitution and error messages": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"Check some of the system's environmental variables.": "abs-guide.txt"},{"This is good preventative maintenance.": "abs-guide.txt"},{"If, for example, $USER, the name of the person at the console, is not set,": "abs-guide.txt"},{"the machine will not recognize you.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 10. Manipulating Variables": "abs-guide.txt"},{"": "abs-guide.txt"},{"130": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{": ${HOSTNAME?} ${USER?} ${HOME?} ${MAIL?}": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"Name of the machine is $HOSTNAME.\"": "abs-guide.txt"},{"echo \"You are $USER.\"": "abs-guide.txt"},{"echo \"Your home directory is $HOME.\"": "abs-guide.txt"},{"echo \"Your mail INBOX is located in $MAIL.\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"If you are reading this message,\"": "abs-guide.txt"},{"echo \"critical environmental variables have been set.\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"# -----------------------------------------------------# The ${variablename?} construction can also check": "abs-guide.txt"},{"#+ for variables set within the script.": "abs-guide.txt"},{"ThisVariable=Value-of-ThisVariable": "abs-guide.txt"},{"# Note, by the way, that string variables may be set": "abs-guide.txt"},{"#+ to characters disallowed in their names.": "abs-guide.txt"},{": ${ThisVariable?}": "abs-guide.txt"},{"echo \"Value of ThisVariable is $ThisVariable\".": "abs-guide.txt"},{"echo; echo": "abs-guide.txt"},{"": "abs-guide.txt"},{": ${ZZXy23AB?\"ZZXy23AB has not been set.\"}": "abs-guide.txt"},{"# Since ZZXy23AB has not been set,": "abs-guide.txt"},{"#+ then the script terminates with an error message.": "abs-guide.txt"},{"# You can specify the error message.": "abs-guide.txt"},{"# : ${variablename?\"ERROR MESSAGE\"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Same result with:": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"dummy_variable=${ZZXy23AB?}": "abs-guide.txt"},{"dummy_variable=${ZZXy23AB?\"ZXy23AB has not been set.\"}": "abs-guide.txt"},{"echo ${ZZXy23AB?} >/dev/null": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Compare these methods of checking whether a variable has been set": "abs-guide.txt"},{"#+ with \"set -u\" . . .": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo \"You will not see this message, because script already terminated.\"": "abs-guide.txt"},{"HERE=0": "abs-guide.txt"},{"exit $HERE": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Will NOT exit here.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# In fact, this script will return an exit status (echo $?) of 1.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 10-8. Parameter substitution and \"usage\" messages": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# usage-message.sh": "abs-guide.txt"},{": ${1?\"Usage: $0 ARGUMENT\"}": "abs-guide.txt"},{"# Script exits here if command-line parameter absent,": "abs-guide.txt"},{"#+ with following error message.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"usage-message.sh: 1: Usage: usage-message.sh ARGUMENT": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 10. Manipulating Variables": "abs-guide.txt"},{"": "abs-guide.txt"},{"131": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"echo \"These two lines echo only if command-line parameter given.\"": "abs-guide.txt"},{"echo \"command-line parameter = \\\"$1\\\"\"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Will exit here only if command-line parameter present.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Check the exit status, both with and without command-line parameter.": "abs-guide.txt"},{"# If command-line parameter present, then \"$?\" is 0.": "abs-guide.txt"},{"# If not, then \"$?\" is 1.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Parameter substitution and/or expansion. The following expressions are the complement to the match in": "abs-guide.txt"},{"expr string operations (see Example 16-9). These particular ones are used mostly in parsing file path names.": "abs-guide.txt"},{"Variable length / Substring removal": "abs-guide.txt"},{"${#var}": "abs-guide.txt"},{"String length (number of characters in $var). For an array, ${#array} is the length of the first": "abs-guide.txt"},{"element in the array.": "abs-guide.txt"},{"Exceptions:": "abs-guide.txt"},{"\u25ca": "abs-guide.txt"},{"${#*} and ${#@} give the number of positional parameters.": "abs-guide.txt"},{"\u25ca For an array, ${#array[*]} and ${#array[@]} give the number of elements in": "abs-guide.txt"},{"the array.": "abs-guide.txt"},{"Example 10-9. Length of a variable": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# length.sh": "abs-guide.txt"},{"E_NO_ARGS=65": "abs-guide.txt"},{"if [ $# -eq 0 ] # Must have command-line args to demo script.": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Please invoke this script with one or more command-line arguments.\"": "abs-guide.txt"},{"exit $E_NO_ARGS": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"var01=abcdEFGH28ij": "abs-guide.txt"},{"echo \"var01 = ${var01}\"": "abs-guide.txt"},{"echo \"Length of var01 = ${#var01}\"": "abs-guide.txt"},{"# Now, let's try embedding a space.": "abs-guide.txt"},{"var02=\"abcd EFGH28ij\"": "abs-guide.txt"},{"echo \"var02 = ${var02}\"": "abs-guide.txt"},{"echo \"Length of var02 = ${#var02}\"": "abs-guide.txt"},{"echo \"Number of command-line arguments passed to script = ${#@}\"": "abs-guide.txt"},{"echo \"Number of command-line arguments passed to script = ${#*}\"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"${var#Pattern}, ${var##Pattern}": "abs-guide.txt"},{"${var#Pattern} Remove from $var the shortest part of $Pattern that matches the front end": "abs-guide.txt"},{"of $var.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 10. Manipulating Variables": "abs-guide.txt"},{"": "abs-guide.txt"},{"132": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"${var##Pattern} Remove from $var the longest part of $Pattern that matches the front end": "abs-guide.txt"},{"of $var.": "abs-guide.txt"},{"A usage illustration from Example A-7:": "abs-guide.txt"},{"# Function from \"days-between.sh\" example.": "abs-guide.txt"},{"# Strips leading zero(s) from argument passed.": "abs-guide.txt"},{"strip_leading_zero () # Strip possible leading zero(s)": "abs-guide.txt"},{"{": "abs-guide.txt"},{"#+ from argument passed.": "abs-guide.txt"},{"return=${1#0}": "abs-guide.txt"},{"# The \"1\" refers to \"$1\" -- passed arg.": "abs-guide.txt"},{"}": "abs-guide.txt"},{"# The \"0\" is what to remove from \"$1\" -- strips zeros.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Manfred Schwarb's more elaborate variation of the above:": "abs-guide.txt"},{"strip_leading_zero2 () # Strip possible leading zero(s), since otherwise": "abs-guide.txt"},{"{": "abs-guide.txt"},{"# Bash will interpret such numbers as octal values.": "abs-guide.txt"},{"shopt -s extglob": "abs-guide.txt"},{"# Turn on extended globbing.": "abs-guide.txt"},{"local val=${1##+(0)} # Use local variable, longest matching series of 0's.": "abs-guide.txt"},{"shopt -u extglob": "abs-guide.txt"},{"# Turn off extended globbing.": "abs-guide.txt"},{"_strip_leading_zero2=${val:-0}": "abs-guide.txt"},{"# If input was 0, return 0 instead of \"\".": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"Another usage illustration:": "abs-guide.txt"},{"echo `basename $PWD`": "abs-guide.txt"},{"echo \"${PWD##*/}\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo `basename $0`": "abs-guide.txt"},{"echo $0": "abs-guide.txt"},{"echo \"${0##*/}\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"filename=test.data": "abs-guide.txt"},{"echo \"${filename##*.}\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Basename of current working directory.": "abs-guide.txt"},{"# Basename of current working directory.": "abs-guide.txt"},{"# Name of script.": "abs-guide.txt"},{"# Name of script.": "abs-guide.txt"},{"# Name of script.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# data": "abs-guide.txt"},{"# Extension of filename.": "abs-guide.txt"},{"": "abs-guide.txt"},{"${var%Pattern}, ${var%%Pattern}": "abs-guide.txt"},{"${var%Pattern} Remove from $var the shortest part of $Pattern that matches the back end": "abs-guide.txt"},{"of $var.": "abs-guide.txt"},{"": "abs-guide.txt"},{"${var%%Pattern} Remove from $var the longest part of $Pattern that matches the back end": "abs-guide.txt"},{"of $var.": "abs-guide.txt"},{"Version 2 of Bash added additional options.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 10-10. Pattern matching in parameter substitution": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# patt-matching.sh": "abs-guide.txt"},{"# Pattern matching": "abs-guide.txt"},{"": "abs-guide.txt"},{"using the # ## % %% parameter substitution operators.": "abs-guide.txt"},{"": "abs-guide.txt"},{"var1=abcd12345abc6789": "abs-guide.txt"},{"pattern1=a*c # * (wild card) matches everything between a - c.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 10. Manipulating Variables": "abs-guide.txt"},{"": "abs-guide.txt"},{"133": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"var1 = $var1\"": "abs-guide.txt"},{"echo \"var1 = ${var1}\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# abcd12345abc6789": "abs-guide.txt"},{"# abcd12345abc6789": "abs-guide.txt"},{"# (alternate form)": "abs-guide.txt"},{"echo \"Number of characters in ${var1} = ${#var1}\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"pattern1 = $pattern1\"": "abs-guide.txt"},{"# a*c (everything between 'a' and 'c')": "abs-guide.txt"},{"echo \"--------------\"": "abs-guide.txt"},{"echo '${var1#$pattern1} =' \"${var1#$pattern1}\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"d12345abc6789": "abs-guide.txt"},{"# Shortest possible match, strips out first 3 characters abcd12345abc6789": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^^^^^": "abs-guide.txt"},{"|-|": "abs-guide.txt"},{"echo '${var1##$pattern1} =' \"${var1##$pattern1}\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"6789": "abs-guide.txt"},{"# Longest possible match, strips out first 12 characters abcd12345abc6789": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^^^^^": "abs-guide.txt"},{"|----------|": "abs-guide.txt"},{"echo; echo; echo": "abs-guide.txt"},{"pattern2=b*9": "abs-guide.txt"},{"# everything between 'b' and '9'": "abs-guide.txt"},{"echo \"var1 = $var1\"": "abs-guide.txt"},{"# Still abcd12345abc6789": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"pattern2 = $pattern2\"": "abs-guide.txt"},{"echo \"--------------\"": "abs-guide.txt"},{"echo '${var1%pattern2} =' \"${var1%$pattern2}\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Shortest possible match, strips out last 6 characters": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^^^^": "abs-guide.txt"},{"echo '${var1%%pattern2} =' \"${var1%%$pattern2}\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Longest possible match, strips out last 12 characters": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^^^^": "abs-guide.txt"},{"": "abs-guide.txt"},{"abcd12345a": "abs-guide.txt"},{"abcd12345abc6789": "abs-guide.txt"},{"|----|": "abs-guide.txt"},{"a": "abs-guide.txt"},{"abcd12345abc6789": "abs-guide.txt"},{"|-------------|": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Remember, # and ## work from the left end (beginning) of string,": "abs-guide.txt"},{"#": "abs-guide.txt"},{"% and %% work from the right end.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 10-11. Renaming file extensions:": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# rfe.sh: Renaming file extensions.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"rfe old_extension new_extension": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Example:": "abs-guide.txt"},{"# To rename all *.gif files in working directory to *.jpg,": "abs-guide.txt"},{"#": "abs-guide.txt"},{"rfe gif jpg": "abs-guide.txt"},{"": "abs-guide.txt"},{"E_BADARGS=65": "abs-guide.txt"},{"case $# in": "abs-guide.txt"},{"0|1)": "abs-guide.txt"},{"# The vertical bar means \"or\" in this context.": "abs-guide.txt"},{"echo \"Usage: `basename $0` old_file_suffix new_file_suffix\"": "abs-guide.txt"},{"exit $E_BADARGS # If 0 or 1 arg, then bail out.": "abs-guide.txt"},{";;": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"": "abs-guide.txt"},{"for filename in *.$1": "abs-guide.txt"},{"# Traverse list of files ending with 1st argument.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 10. Manipulating Variables": "abs-guide.txt"},{"": "abs-guide.txt"},{"134": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"do": "abs-guide.txt"},{"mv $filename ${filename%$1}$2": "abs-guide.txt"},{"# Strip off part of filename matching 1st argument,": "abs-guide.txt"},{"#+ then append 2nd argument.": "abs-guide.txt"},{"done": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Variable expansion / Substring replacement": "abs-guide.txt"},{"These constructs have been adopted from ksh.": "abs-guide.txt"},{"${var:pos}": "abs-guide.txt"},{"Variable var expanded, starting from offset pos.": "abs-guide.txt"},{"${var:pos:len}": "abs-guide.txt"},{"Expansion to a max of len characters of variable var, from offset pos. See Example A-13 for an": "abs-guide.txt"},{"example of the creative use of this operator.": "abs-guide.txt"},{"${var/Pattern/Replacement}": "abs-guide.txt"},{"First match of Pattern, within var replaced with Replacement.": "abs-guide.txt"},{"If Replacement is omitted, then the first match of Pattern is replaced by nothing, that is,": "abs-guide.txt"},{"deleted.": "abs-guide.txt"},{"${var//Pattern/Replacement}": "abs-guide.txt"},{"Global replacement. All matches of Pattern, within var replaced with Replacement.": "abs-guide.txt"},{"As above, if Replacement is omitted, then all occurrences of Pattern are replaced by nothing,": "abs-guide.txt"},{"that is, deleted.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 10-12. Using pattern matching to parse arbitrary strings": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"var1=abcd-1234-defg": "abs-guide.txt"},{"echo \"var1 = $var1\"": "abs-guide.txt"},{"t=${var1#*-*}": "abs-guide.txt"},{"echo \"var1 (with everything, up to and including first - stripped out) = $t\"": "abs-guide.txt"},{"# t=${var1#*-} works just the same,": "abs-guide.txt"},{"#+ since # matches the shortest string,": "abs-guide.txt"},{"#+ and * matches everything preceding, including an empty string.": "abs-guide.txt"},{"# (Thanks, Stephane Chazelas, for pointing this out.)": "abs-guide.txt"},{"t=${var1##*-*}": "abs-guide.txt"},{"echo \"If var1 contains a \\\"-\\\", returns empty string...": "abs-guide.txt"},{"": "abs-guide.txt"},{"var1 = $t\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"t=${var1%*-*}": "abs-guide.txt"},{"echo \"var1 (with everything from the last - on stripped out) = $t\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"# ------------------------------------------path_name=/home/bozo/ideas/thoughts.for.today": "abs-guide.txt"},{"# ------------------------------------------echo \"path_name = $path_name\"": "abs-guide.txt"},{"t=${path_name##/*/}": "abs-guide.txt"},{"echo \"path_name, stripped of prefixes = $t\"": "abs-guide.txt"},{"# Same effect as": "abs-guide.txt"},{"t=`basename $path_name` in this particular case.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 10. Manipulating Variables": "abs-guide.txt"},{"": "abs-guide.txt"},{"135": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# t=${path_name%/}; t=${t##*/}": "abs-guide.txt"},{"is a more general solution,": "abs-guide.txt"},{"#+ but still fails sometimes.": "abs-guide.txt"},{"# If $path_name ends with a newline, then `basename $path_name` will not work,": "abs-guide.txt"},{"#+ but the above expression will.": "abs-guide.txt"},{"# (Thanks, S.C.)": "abs-guide.txt"},{"t=${path_name%/*.*}": "abs-guide.txt"},{"# Same effect as": "abs-guide.txt"},{"t=`dirname $path_name`": "abs-guide.txt"},{"echo \"path_name, stripped of suffixes = $t\"": "abs-guide.txt"},{"# These will fail in some cases, such as \"../\", \"/foo////\", # \"foo/\", \"/\".": "abs-guide.txt"},{"# Removing suffixes, especially when the basename has no suffix,": "abs-guide.txt"},{"#+ but the dirname does, also complicates matters.": "abs-guide.txt"},{"# (Thanks, S.C.)": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"t=${path_name:11}": "abs-guide.txt"},{"echo \"$path_name, with first 11 chars stripped off = $t\"": "abs-guide.txt"},{"t=${path_name:11:5}": "abs-guide.txt"},{"echo \"$path_name, with first 11 chars stripped off, length 5 = $t\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"t=${path_name/bozo/clown}": "abs-guide.txt"},{"echo \"$path_name with \\\"bozo\\\" replaced by \\\"clown\\\" = $t\"": "abs-guide.txt"},{"t=${path_name/today/}": "abs-guide.txt"},{"echo \"$path_name with \\\"today\\\" deleted = $t\"": "abs-guide.txt"},{"t=${path_name//o/O}": "abs-guide.txt"},{"echo \"$path_name with all o's capitalized = $t\"": "abs-guide.txt"},{"t=${path_name//o/}": "abs-guide.txt"},{"echo \"$path_name with all o's deleted = $t\"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"${var/#Pattern/Replacement}": "abs-guide.txt"},{"If prefix of var matches Pattern, then substitute Replacement for Pattern.": "abs-guide.txt"},{"${var/%Pattern/Replacement}": "abs-guide.txt"},{"If suffix of var matches Pattern, then substitute Replacement for Pattern.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 10-13. Matching patterns at prefix or suffix of string": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# var-match.sh:": "abs-guide.txt"},{"# Demo of pattern replacement at prefix / suffix of string.": "abs-guide.txt"},{"v0=abc1234zip1234abc": "abs-guide.txt"},{"echo \"v0 = $v0\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Original variable.": "abs-guide.txt"},{"# abc1234zip1234abc": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Match at prefix (beginning) of string.": "abs-guide.txt"},{"v1=${v0/#abc/ABCDEF}": "abs-guide.txt"},{"# abc1234zip1234abc": "abs-guide.txt"},{"# |-|": "abs-guide.txt"},{"echo \"v1 = $v1\"": "abs-guide.txt"},{"# ABCDEF1234zip1234abc": "abs-guide.txt"},{"# |----|": "abs-guide.txt"},{"# Match at suffix (end) of string.": "abs-guide.txt"},{"v2=${v0/%abc/ABCDEF}": "abs-guide.txt"},{"# abc1234zip123abc": "abs-guide.txt"},{"#": "abs-guide.txt"},{"|-|": "abs-guide.txt"},{"echo \"v2 = $v2\"": "abs-guide.txt"},{"# abc1234zip1234ABCDEF": "abs-guide.txt"},{"#": "abs-guide.txt"},{"|----|": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 10. Manipulating Variables": "abs-guide.txt"},{"": "abs-guide.txt"},{"136": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"# ---------------------------------------------------# Must match at beginning / end of string,": "abs-guide.txt"},{"#+ otherwise no replacement results.": "abs-guide.txt"},{"# ---------------------------------------------------v3=${v0/#123/000}": "abs-guide.txt"},{"# Matches, but not at beginning.": "abs-guide.txt"},{"echo \"v3 = $v3\"": "abs-guide.txt"},{"# abc1234zip1234abc": "abs-guide.txt"},{"# NO REPLACEMENT.": "abs-guide.txt"},{"v4=${v0/%123/000}": "abs-guide.txt"},{"# Matches, but not at end.": "abs-guide.txt"},{"echo \"v4 = $v4\"": "abs-guide.txt"},{"# abc1234zip1234abc": "abs-guide.txt"},{"# NO REPLACEMENT.": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"${!varprefix*}, ${!varprefix@}": "abs-guide.txt"},{"Matches names of all previously declared variables beginning with varprefix.": "abs-guide.txt"},{"# This is a variation on indirect reference, but with a * or @.": "abs-guide.txt"},{"# Bash, version 2.04, adds this feature.": "abs-guide.txt"},{"xyz23=whatever": "abs-guide.txt"},{"xyz24=": "abs-guide.txt"},{"a=${!xyz*}": "abs-guide.txt"},{"# ^ ^": "abs-guide.txt"},{"^": "abs-guide.txt"},{"echo \"a = $a\"": "abs-guide.txt"},{"a=${!xyz@}": "abs-guide.txt"},{"echo \"a = $a\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Expands to *names* of declared variables": "abs-guide.txt"},{"+ beginning with \"xyz\".": "abs-guide.txt"},{"# a = xyz23 xyz24": "abs-guide.txt"},{"# Same as above.": "abs-guide.txt"},{"# a = xyz23 xyz24": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo \"---\"": "abs-guide.txt"},{"abc23=something_else": "abs-guide.txt"},{"b=${!abc*}": "abs-guide.txt"},{"echo \"b = $b\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"c=${!b}": "abs-guide.txt"},{"#": "abs-guide.txt"},{"echo $c": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"b = abc23": "abs-guide.txt"},{"Now, the more familiar type of indirect reference.": "abs-guide.txt"},{"something_else": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 10. Manipulating Variables": "abs-guide.txt"},{"": "abs-guide.txt"},{"137": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fChapter 11. Loops and Branches": "abs-guide.txt"},{"What needs this iteration, woman?": "abs-guide.txt"},{"--Shakespeare, Othello": "abs-guide.txt"},{"Operations on code blocks are the key to structured and organized shell scripts. Looping and branching": "abs-guide.txt"},{"constructs provide the tools for accomplishing this.": "abs-guide.txt"},{"": "abs-guide.txt"},{"11.1. Loops": "abs-guide.txt"},{"A loop is a block of code that iterates [52] a list of commands as long as the loop control condition is true.": "abs-guide.txt"},{"for loops": "abs-guide.txt"},{"for arg in [list]": "abs-guide.txt"},{"This is the basic looping construct. It differs significantly from its C counterpart.": "abs-guide.txt"},{"": "abs-guide.txt"},{"for arg in [list]": "abs-guide.txt"},{"do": "abs-guide.txt"},{"command(s)...": "abs-guide.txt"},{"done": "abs-guide.txt"},{"During each pass through the loop, arg takes on the value of each successive variable": "abs-guide.txt"},{"in the list.": "abs-guide.txt"},{"for arg in \"$var1\"": "abs-guide.txt"},{"# In pass 1 of the": "abs-guide.txt"},{"# In pass 2 of the": "abs-guide.txt"},{"# In pass 3 of the": "abs-guide.txt"},{"# ...": "abs-guide.txt"},{"# In pass N of the": "abs-guide.txt"},{"": "abs-guide.txt"},{"\"$var2\" \"$var3\" ... \"$varN\"": "abs-guide.txt"},{"loop, arg = $var1": "abs-guide.txt"},{"loop, arg = $var2": "abs-guide.txt"},{"loop, arg = $var3": "abs-guide.txt"},{"loop, arg = $varN": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Arguments in [list] quoted to prevent possible word splitting.": "abs-guide.txt"},{"": "abs-guide.txt"},{"The argument list may contain wild cards.": "abs-guide.txt"},{"": "abs-guide.txt"},{"If do is on same line as for, there needs to be a semicolon after list.": "abs-guide.txt"},{"for arg in [list] ; do": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 11-1. Simple for loops": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# Listing the planets.": "abs-guide.txt"},{"for planet in Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune Pluto": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo $planet # Each planet on a separate line.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 11. Loops and Branches": "abs-guide.txt"},{"": "abs-guide.txt"},{"138": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo; echo": "abs-guide.txt"},{"for planet in \"Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune Pluto\"": "abs-guide.txt"},{"# All planets on same line.": "abs-guide.txt"},{"# Entire 'list' enclosed in quotes creates a single variable.": "abs-guide.txt"},{"# Why? Whitespace incorporated into the variable.": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo $planet": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo; echo \"Whoops! Pluto is no longer a planet!\"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Each [list] element may contain multiple parameters. This is useful when processing parameters": "abs-guide.txt"},{"in groups. In such cases, use the set command (see Example 15-16) to force parsing of each [list]": "abs-guide.txt"},{"element and assignment of each component to the positional parameters.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 11-2. for loop with two parameters in each [list] element": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# Planets revisited.": "abs-guide.txt"},{"# Associate the name of each planet with its distance from the sun.": "abs-guide.txt"},{"for planet in \"Mercury 36\" \"Venus 67\" \"Earth 93\" \"Mars 142\" \"Jupiter 483\"": "abs-guide.txt"},{"do": "abs-guide.txt"},{"set -- $planet # Parses variable \"planet\"": "abs-guide.txt"},{"#+ and sets positional parameters.": "abs-guide.txt"},{"# The \"--\" prevents nasty surprises if $planet is null or": "abs-guide.txt"},{"#+ begins with a dash.": "abs-guide.txt"},{"# May need to save original positional parameters,": "abs-guide.txt"},{"#+ since they get overwritten.": "abs-guide.txt"},{"# One way of doing this is to use an array,": "abs-guide.txt"},{"#": "abs-guide.txt"},{"original_params=(\"$@\")": "abs-guide.txt"},{"echo \"$1": "abs-guide.txt"},{"#-------two": "abs-guide.txt"},{"done": "abs-guide.txt"},{"": "abs-guide.txt"},{"$2,000,000 miles from the sun\"": "abs-guide.txt"},{"tabs---concatenate zeroes onto parameter $2": "abs-guide.txt"},{"": "abs-guide.txt"},{"# (Thanks, S.C., for additional clarification.)": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"A variable may supply the [list] in a for loop.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 11-3. Fileinfo: operating on a file list contained in a variable": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# fileinfo.sh": "abs-guide.txt"},{"FILES=\"/usr/sbin/accept": "abs-guide.txt"},{"/usr/sbin/pwck": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 11. Loops and Branches": "abs-guide.txt"},{"": "abs-guide.txt"},{"139": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"/usr/sbin/chroot": "abs-guide.txt"},{"/usr/bin/fakefile": "abs-guide.txt"},{"/sbin/badblocks": "abs-guide.txt"},{"/sbin/ypbind\"": "abs-guide.txt"},{"# List of files you are curious about.": "abs-guide.txt"},{"# Threw in a dummy file, /usr/bin/fakefile.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"for file in $FILES": "abs-guide.txt"},{"do": "abs-guide.txt"},{"if [ ! -e \"$file\" ]": "abs-guide.txt"},{"# Check if file exists.": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"$file does not exist.\"; echo": "abs-guide.txt"},{"continue": "abs-guide.txt"},{"# On to next.": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"ls -l $file | awk '{ print $8 \"": "abs-guide.txt"},{"file size: \" $5 }' # Print 2 fields.": "abs-guide.txt"},{"whatis `basename $file`": "abs-guide.txt"},{"# File info.": "abs-guide.txt"},{"# Note that the whatis database needs to have been set up for this to work.": "abs-guide.txt"},{"# To do this, as root run /usr/bin/makewhatis.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"done": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"The [list] in a for loop may be parameterized.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 11-4. Operating on a parameterized file list": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"filename=\"*txt\"": "abs-guide.txt"},{"for file in $filename": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo \"Contents of $file\"": "abs-guide.txt"},{"echo \"---\"": "abs-guide.txt"},{"cat \"$file\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"done": "abs-guide.txt"},{"": "abs-guide.txt"},{"If the [list] in a for loop contains wild cards (* and ?) used in filename expansion, then globbing": "abs-guide.txt"},{"takes place.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 11-5. Operating on files with a for loop": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# list-glob.sh: Generating [list] in a for-loop, using \"globbing\" ...": "abs-guide.txt"},{"# Globbing = filename expansion.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"for file in *": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"do": "abs-guide.txt"},{"": "abs-guide.txt"},{"Bash performs filename expansion": "abs-guide.txt"},{"on expressions that globbing recognizes.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 11. Loops and Branches": "abs-guide.txt"},{"": "abs-guide.txt"},{"140": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"ls -l \"$file\" # Lists all files in $PWD (current directory).": "abs-guide.txt"},{"# Recall that the wild card character \"*\" matches every filename,": "abs-guide.txt"},{"#+ however, in \"globbing,\" it doesn't match dot-files.": "abs-guide.txt"},{"# If the pattern matches no file, it is expanded to itself.": "abs-guide.txt"},{"# To prevent this, set the nullglob option": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"(shopt -s nullglob).": "abs-guide.txt"},{"# Thanks, S.C.": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo; echo": "abs-guide.txt"},{"for file in [jx]*": "abs-guide.txt"},{"do": "abs-guide.txt"},{"rm -f $file": "abs-guide.txt"},{"# Removes only files beginning with \"j\" or \"x\" in $PWD.": "abs-guide.txt"},{"echo \"Removed file \\\"$file\\\"\".": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Omitting the in [list] part of a for loop causes the loop to operate on $@ -- the positional": "abs-guide.txt"},{"parameters. A particularly clever illustration of this is Example A-15. See also Example 15-17.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 11-6. Missing in [list] in a for loop": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# Invoke this script both with and without arguments,": "abs-guide.txt"},{"#+ and see what happens.": "abs-guide.txt"},{"for a": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo -n \"$a \"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"# The 'in list' missing, therefore the loop operates on '$@'": "abs-guide.txt"},{"#+ (command-line argument list, including whitespace).": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"It is possible to use command substitution to generate the [list] in a for loop. See also Example": "abs-guide.txt"},{"16-54, Example 11-11 and Example 16-48.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 11-7. Generating the [list] in a for loop with command substitution": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# for-loopcmd.sh: for-loop with [list]": "abs-guide.txt"},{"#+ generated by command substitution.": "abs-guide.txt"},{"NUMBERS=\"9 7 3 8 37.53\"": "abs-guide.txt"},{"for number in `echo $NUMBERS`": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 11. Loops and Branches": "abs-guide.txt"},{"": "abs-guide.txt"},{"# for number in 9 7 3 8 37.53": "abs-guide.txt"},{"": "abs-guide.txt"},{"141": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo -n \"$number \"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Here is a somewhat more complex example of using command substitution to create the [list].": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 11-8. A grep replacement for binary files": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# bin-grep.sh: Locates matching strings in a binary file.": "abs-guide.txt"},{"# A \"grep\" replacement for binary files.": "abs-guide.txt"},{"# Similar effect to \"grep -a\"": "abs-guide.txt"},{"E_BADARGS=65": "abs-guide.txt"},{"E_NOFILE=66": "abs-guide.txt"},{"if [ $# -ne 2 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Usage: `basename $0` search_string filename\"": "abs-guide.txt"},{"exit $E_BADARGS": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"if [ ! -f \"$2\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"File \\\"$2\\\" does not exist.\"": "abs-guide.txt"},{"exit $E_NOFILE": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"IFS=$'\\012'": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Per suggestion of Anton Filippov.": "abs-guide.txt"},{"# was: IFS=\"\\n\"": "abs-guide.txt"},{"for word in $( strings \"$2\" | grep \"$1\" )": "abs-guide.txt"},{"# The \"strings\" command lists strings in binary files.": "abs-guide.txt"},{"# Output then piped to \"grep\", which tests for desired string.": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo $word": "abs-guide.txt"},{"done": "abs-guide.txt"},{"# As S.C. points out, lines 23 - 30 could be replaced with the simpler": "abs-guide.txt"},{"#": "abs-guide.txt"},{"strings \"$2\" | grep \"$1\" | tr -s \"$IFS\" '[\\n*]'": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Try something like \"./bin-grep.sh mem /bin/ls\"": "abs-guide.txt"},{"#+ to exercise this script.": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"More of the same.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 11-9. Listing all users on the system": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# userlist.sh": "abs-guide.txt"},{"PASSWORD_FILE=/etc/passwd": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 11. Loops and Branches": "abs-guide.txt"},{"": "abs-guide.txt"},{"142": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"n=1": "abs-guide.txt"},{"": "abs-guide.txt"},{"# User number": "abs-guide.txt"},{"": "abs-guide.txt"},{"for name in $(awk 'BEGIN{FS=\":\"}{print $1}' < \"$PASSWORD_FILE\" )": "abs-guide.txt"},{"# Field separator = :": "abs-guide.txt"},{"^^^^^^": "abs-guide.txt"},{"# Print first field": "abs-guide.txt"},{"^^^^^^^^": "abs-guide.txt"},{"# Get input from password file /etc/passwd ^^^^^^^^^^^^^^^^^": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo \"USER #$n = $name\"": "abs-guide.txt"},{"let \"n += 1\"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"USER": "abs-guide.txt"},{"USER": "abs-guide.txt"},{"USER": "abs-guide.txt"},{"...": "abs-guide.txt"},{"USER": "abs-guide.txt"},{"": "abs-guide.txt"},{"#1 = root": "abs-guide.txt"},{"#2 = bin": "abs-guide.txt"},{"#3 = daemon": "abs-guide.txt"},{"#33 = bozo": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit $?": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Discussion:": "abs-guide.txt"},{"---------How is it that an ordinary user, or a script run by same,": "abs-guide.txt"},{"can read /etc/passwd? (Hint: Check the /etc/passwd file permissions.)": "abs-guide.txt"},{"Is this a security hole? Why or why not?": "abs-guide.txt"},{"": "abs-guide.txt"},{"Yet another example of the [list] resulting from command substitution.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 11-10. Checking all the binaries in a directory for authorship": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# findstring.sh:": "abs-guide.txt"},{"# Find a particular string in the binaries in a specified directory.": "abs-guide.txt"},{"directory=/usr/bin/": "abs-guide.txt"},{"fstring=\"Free Software Foundation\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# See which files come from the FSF.": "abs-guide.txt"},{"": "abs-guide.txt"},{"for file in $( find $directory -type f -name '*' | sort )": "abs-guide.txt"},{"do": "abs-guide.txt"},{"strings -f $file | grep \"$fstring\" | sed -e \"s%$directory%%\"": "abs-guide.txt"},{"# In the \"sed\" expression,": "abs-guide.txt"},{"#+ it is necessary to substitute for the normal \"/\" delimiter": "abs-guide.txt"},{"#+ because \"/\" happens to be one of the characters filtered out.": "abs-guide.txt"},{"# Failure to do so gives an error message. (Try it.)": "abs-guide.txt"},{"done": "abs-guide.txt"},{"exit $?": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"Exercise (easy):": "abs-guide.txt"},{"--------------Convert this script to take command-line parameters": "abs-guide.txt"},{"for $directory and $fstring.": "abs-guide.txt"},{"": "abs-guide.txt"},{"A final example of [list] / command substitution, but this time the \"command\" is a function.": "abs-guide.txt"},{"generate_list ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"echo \"one two three\"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"for word in $(generate_list)": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 11. Loops and Branches": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Let \"word\" grab output of function.": "abs-guide.txt"},{"": "abs-guide.txt"},{"143": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo \"$word\"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"# one": "abs-guide.txt"},{"# two": "abs-guide.txt"},{"# three": "abs-guide.txt"},{"": "abs-guide.txt"},{"The output of a for loop may be piped to a command or commands.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 11-11. Listing the symbolic links in a directory": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# symlinks.sh: Lists symbolic links in a directory.": "abs-guide.txt"},{"": "abs-guide.txt"},{"directory=${1-`pwd`}": "abs-guide.txt"},{"# Defaults to current working directory,": "abs-guide.txt"},{"#+ if not otherwise specified.": "abs-guide.txt"},{"# Equivalent to code block below.": "abs-guide.txt"},{"# ---------------------------------------------------------# ARGS=1": "abs-guide.txt"},{"# Expect one command-line argument.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# if [ $# -ne \"$ARGS\" ] # If not 1 arg...": "abs-guide.txt"},{"# then": "abs-guide.txt"},{"#": "abs-guide.txt"},{"directory=`pwd`": "abs-guide.txt"},{"# current working directory": "abs-guide.txt"},{"# else": "abs-guide.txt"},{"#": "abs-guide.txt"},{"directory=$1": "abs-guide.txt"},{"# fi": "abs-guide.txt"},{"# ---------------------------------------------------------echo \"symbolic links in directory \\\"$directory\\\"\"": "abs-guide.txt"},{"for file in \"$( find $directory -type l )\"": "abs-guide.txt"},{"# -type l = symbolic links": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo \"$file\"": "abs-guide.txt"},{"done | sort": "abs-guide.txt"},{"# Otherwise file list is unsorted.": "abs-guide.txt"},{"# Strictly speaking, a loop isn't really necessary here,": "abs-guide.txt"},{"#+ since the output of the \"find\" command is expanded into a single word.": "abs-guide.txt"},{"# However, it's easy to understand and illustrative this way.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"As Dominik": "abs-guide.txt"},{"failing to": "abs-guide.txt"},{"will choke": "abs-guide.txt"},{"containing": "abs-guide.txt"},{"": "abs-guide.txt"},{"'Aeneas' Schnitzer points out,": "abs-guide.txt"},{"quote $( find $directory -type l )": "abs-guide.txt"},{"on filenames with embedded whitespace.": "abs-guide.txt"},{"whitespace.": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"# -------------------------------------------------------# Jean Helou proposes the following alternative:": "abs-guide.txt"},{"echo \"symbolic links in directory \\\"$directory\\\"\"": "abs-guide.txt"},{"# Backup of the current IFS. One can never be too cautious.": "abs-guide.txt"},{"OLDIFS=$IFS": "abs-guide.txt"},{"IFS=:": "abs-guide.txt"},{"for file in $(find $directory -type l -printf \"%p$IFS\")": "abs-guide.txt"},{"do": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^^^^^^^^^^^^^^^^": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 11. Loops and Branches": "abs-guide.txt"},{"": "abs-guide.txt"},{"144": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"echo \"$file\"": "abs-guide.txt"},{"done|sort": "abs-guide.txt"},{"# And, James \"Mike\" Conley suggests modifying Helou's code thusly:": "abs-guide.txt"},{"OLDIFS=$IFS": "abs-guide.txt"},{"IFS='' # Null IFS means no word breaks": "abs-guide.txt"},{"for file in $( find $directory -type l )": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo $file": "abs-guide.txt"},{"done | sort": "abs-guide.txt"},{"# This works in the \"pathological\" case of a directory name having": "abs-guide.txt"},{"#+ an embedded colon.": "abs-guide.txt"},{"# \"This also fixes the pathological case of the directory name having": "abs-guide.txt"},{"#+ a colon (or space in earlier example) as well.\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"The stdout of a loop may be redirected to a file, as this slight modification to the previous example": "abs-guide.txt"},{"shows.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 11-12. Symbolic links in a directory, saved to a file": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# symlinks.sh: Lists symbolic links in a directory.": "abs-guide.txt"},{"OUTFILE=symlinks.list": "abs-guide.txt"},{"": "abs-guide.txt"},{"# save-file": "abs-guide.txt"},{"": "abs-guide.txt"},{"directory=${1-`pwd`}": "abs-guide.txt"},{"# Defaults to current working directory,": "abs-guide.txt"},{"#+ if not otherwise specified.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo \"symbolic links in directory \\\"$directory\\\"\" > \"$OUTFILE\"": "abs-guide.txt"},{"echo \"---------------------------\" >> \"$OUTFILE\"": "abs-guide.txt"},{"for file in \"$( find $directory -type l )\"": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo \"$file\"": "abs-guide.txt"},{"done | sort >> \"$OUTFILE\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^^^^^^^^^^^^^": "abs-guide.txt"},{"": "abs-guide.txt"},{"# -type l = symbolic links": "abs-guide.txt"},{"": "abs-guide.txt"},{"# stdout of loop": "abs-guide.txt"},{"redirected to save file.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# echo \"Output file = $OUTFILE\"": "abs-guide.txt"},{"exit $?": "abs-guide.txt"},{"": "abs-guide.txt"},{"There is an alternative syntax to a for loop that will look very familiar to C programmers. This": "abs-guide.txt"},{"requires double parentheses.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 11-13. A C-style for loop": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# Multiple ways to count up to 10.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"# Standard syntax.": "abs-guide.txt"},{"for a in 1 2 3 4 5 6 7 8 9 10": "abs-guide.txt"},{"do": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 11. Loops and Branches": "abs-guide.txt"},{"": "abs-guide.txt"},{"145": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"echo -n \"$a \"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo; echo": "abs-guide.txt"},{"# +==========================================+": "abs-guide.txt"},{"# Using \"seq\" ...": "abs-guide.txt"},{"for a in `seq 10`": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo -n \"$a \"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo; echo": "abs-guide.txt"},{"# +==========================================+": "abs-guide.txt"},{"# Using brace expansion ...": "abs-guide.txt"},{"# Bash, version 3+.": "abs-guide.txt"},{"for a in {1..10}": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo -n \"$a \"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo; echo": "abs-guide.txt"},{"# +==========================================+": "abs-guide.txt"},{"# Now, let's do the same, using C-like syntax.": "abs-guide.txt"},{"LIMIT=10": "abs-guide.txt"},{"for ((a=1; a <= LIMIT ; a++))": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo -n \"$a \"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Double parentheses, and naked \"LIMIT\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# A construct borrowed from ksh93.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo; echo": "abs-guide.txt"},{"# +=========================================================================+": "abs-guide.txt"},{"# Let's use the C \"comma operator\" to increment two variables simultaneously.": "abs-guide.txt"},{"for ((a=1, b=1; a <= LIMIT ; a++, b++))": "abs-guide.txt"},{"do # The comma concatenates operations.": "abs-guide.txt"},{"echo -n \"$a-$b \"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo; echo": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"See also Example 27-16, Example 27-17, and Example A-6.": "abs-guide.txt"},{"--Now, a for loop used in a \"real-life\" context.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 11-14. Using efax in batch mode": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 11. Loops and Branches": "abs-guide.txt"},{"": "abs-guide.txt"},{"146": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# Faxing (must have 'efax' package installed).": "abs-guide.txt"},{"EXPECTED_ARGS=2": "abs-guide.txt"},{"E_BADARGS=85": "abs-guide.txt"},{"MODEM_PORT=\"/dev/ttyS2\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^^^^^": "abs-guide.txt"},{"if [ $#": "abs-guide.txt"},{"# Check": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"exit": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"# May be different on your machine.": "abs-guide.txt"},{"PCMCIA modem card default port.": "abs-guide.txt"},{"": "abs-guide.txt"},{"-ne $EXPECTED_ARGS ]": "abs-guide.txt"},{"for proper number of command-line args.": "abs-guide.txt"},{"\"Usage: `basename $0` phone# text-file\"": "abs-guide.txt"},{"$E_BADARGS": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [ ! -f \"$2\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"File $2 is not a text file.\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"File is not a regular file, or does not exist.": "abs-guide.txt"},{"exit $E_BADARGS": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"fax make $2": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Create fax-formatted files from text files.": "abs-guide.txt"},{"": "abs-guide.txt"},{"for file in $(ls $2.0*)": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Concatenate the converted files.": "abs-guide.txt"},{"# Uses wild card (filename \"globbing\")": "abs-guide.txt"},{"#+ in variable list.": "abs-guide.txt"},{"": "abs-guide.txt"},{"do": "abs-guide.txt"},{"fil=\"$fil $file\"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"efax -d \"$MODEM_PORT\" -t \"T$1\" $fil": "abs-guide.txt"},{"# Finally, do the work.": "abs-guide.txt"},{"# Trying adding -o1 if above line fails.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# As S.C. points out, the for-loop can be eliminated with": "abs-guide.txt"},{"#": "abs-guide.txt"},{"efax -d /dev/ttyS2 -o1 -t \"T$1\" $2.0*": "abs-guide.txt"},{"#+ but it's not quite as instructive [grin].": "abs-guide.txt"},{"exit $?": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Also, efax sends diagnostic messages to stdout.": "abs-guide.txt"},{"": "abs-guide.txt"},{"The keywords do and done delineate the for-loop command block. However, these": "abs-guide.txt"},{"may, in certain contexts, be omitted by framing the command block within curly": "abs-guide.txt"},{"brackets": "abs-guide.txt"},{"for((n=1; n<=10; n++))": "abs-guide.txt"},{"# No do!": "abs-guide.txt"},{"{": "abs-guide.txt"},{"echo -n \"* $n *\"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"# No done!": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Outputs:": "abs-guide.txt"},{"# * 1 ** 2 ** 3 ** 4 ** 5 ** 6 ** 7 ** 8 ** 9 ** 10 *": "abs-guide.txt"},{"# And, echo $? returns 0, so Bash does not register an error.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 11. Loops and Branches": "abs-guide.txt"},{"": "abs-guide.txt"},{"147": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"# But, note that in a classic for-loop:": "abs-guide.txt"},{"#+ a terminal semicolon is required.": "abs-guide.txt"},{"": "abs-guide.txt"},{"for n in [list] ...": "abs-guide.txt"},{"": "abs-guide.txt"},{"for n in 1 2 3": "abs-guide.txt"},{"{ echo -n \"$n \"; }": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Thank you, YongYe, for pointing this out.": "abs-guide.txt"},{"": "abs-guide.txt"},{"while": "abs-guide.txt"},{"This construct tests for a condition at the top of a loop, and keeps looping as long as that condition is": "abs-guide.txt"},{"true (returns a 0 exit status). In contrast to a for loop, a while loop finds use in situations where the": "abs-guide.txt"},{"number of loop repetitions is not known beforehand.": "abs-guide.txt"},{"while [ condition ]": "abs-guide.txt"},{"do": "abs-guide.txt"},{"command(s)...": "abs-guide.txt"},{"done": "abs-guide.txt"},{"The bracket construct in a while loop is nothing more than our old friend, the test brackets used in an": "abs-guide.txt"},{"if/then test. In fact, a while loop can legally use the more versatile double-brackets construct (while [[": "abs-guide.txt"},{"condition ]]).": "abs-guide.txt"},{"": "abs-guide.txt"},{"As is the case with for loops, placing the do on the same line as the condition test requires a": "abs-guide.txt"},{"semicolon.": "abs-guide.txt"},{"while [ condition ] ; do": "abs-guide.txt"},{"Note that the test brackets are not mandatory in a while loop. See, for example, the getopts construct.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 11-15. Simple while loop": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"var0=0": "abs-guide.txt"},{"LIMIT=10": "abs-guide.txt"},{"while [ \"$var0\" -lt \"$LIMIT\" ]": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^": "abs-guide.txt"},{"^": "abs-guide.txt"},{"# Spaces, because these are \"test-brackets\" . . .": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo -n \"$var0 \"": "abs-guide.txt"},{"# -n suppresses newline.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^": "abs-guide.txt"},{"Space, to separate printed out numbers.": "abs-guide.txt"},{"var0=`expr $var0 + 1`": "abs-guide.txt"},{"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"var0=$(($var0+1)) also works.": "abs-guide.txt"},{"var0=$((var0 + 1)) also works.": "abs-guide.txt"},{"let \"var0 += 1\"": "abs-guide.txt"},{"also works.": "abs-guide.txt"},{"Various other methods also work.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 11. Loops and Branches": "abs-guide.txt"},{"": "abs-guide.txt"},{"148": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 11-16. Another while loop": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"# Equivalent to:": "abs-guide.txt"},{"while [ \"$var1\" != \"end\" ]": "abs-guide.txt"},{"# while test \"$var1\" != \"end\"": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo \"Input variable #1 (end to exit) \"": "abs-guide.txt"},{"read var1": "abs-guide.txt"},{"# Not 'read $var1' (why?).": "abs-guide.txt"},{"echo \"variable #1 = $var1\"": "abs-guide.txt"},{"# Need quotes because of \"#\" . . .": "abs-guide.txt"},{"# If input is 'end', echoes it here.": "abs-guide.txt"},{"# Does not test for termination condition until top of loop.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"done": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"A while loop may have multiple conditions. Only the final condition determines when the loop": "abs-guide.txt"},{"terminates. This necessitates a slightly different loop syntax, however.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 11-17. while loop with multiple conditions": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"var1=unset": "abs-guide.txt"},{"previous=$var1": "abs-guide.txt"},{"while echo \"previous-variable = $previous\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"previous=$var1": "abs-guide.txt"},{"[ \"$var1\" != end ] # Keeps track of what $var1 was previously.": "abs-guide.txt"},{"# Four conditions on *while*, but only the final one controls loop.": "abs-guide.txt"},{"# The *last* exit status is the one that counts.": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo \"Input variable #1 (end to exit) \"": "abs-guide.txt"},{"read var1": "abs-guide.txt"},{"echo \"variable #1 = $var1\"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"# Try to figure out how this all works.": "abs-guide.txt"},{"# It's a wee bit tricky.": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"As with a for loop, a while loop may employ C-style syntax by using the double-parentheses construct": "abs-guide.txt"},{"(see also Example 8-5).": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 11-18. C-style syntax in a while loop": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# wh-loopc.sh: Count to 10 in a \"while\" loop.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 11. Loops and Branches": "abs-guide.txt"},{"": "abs-guide.txt"},{"149": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"LIMIT=10": "abs-guide.txt"},{"a=1": "abs-guide.txt"},{"": "abs-guide.txt"},{"# 10 iterations.": "abs-guide.txt"},{"": "abs-guide.txt"},{"while [ \"$a\" -le $LIMIT ]": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo -n \"$a \"": "abs-guide.txt"},{"let \"a+=1\"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"# No surprises, so far.": "abs-guide.txt"},{"echo; echo": "abs-guide.txt"},{"# +=================================================================+": "abs-guide.txt"},{"# Now, we'll repeat with C-like syntax.": "abs-guide.txt"},{"((a = 1))": "abs-guide.txt"},{"# a=1": "abs-guide.txt"},{"# Double parentheses permit space when setting a variable, as in C.": "abs-guide.txt"},{"while (( a <= LIMIT ))": "abs-guide.txt"},{"# Double parentheses,": "abs-guide.txt"},{"do": "abs-guide.txt"},{"#+ and no \"$\" preceding variables.": "abs-guide.txt"},{"echo -n \"$a \"": "abs-guide.txt"},{"((a += 1))": "abs-guide.txt"},{"# let \"a+=1\"": "abs-guide.txt"},{"# Yes, indeed.": "abs-guide.txt"},{"# Double parentheses permit incrementing a variable with C-like syntax.": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"# C and Java programmers can feel right at home in Bash.": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Inside its test brackets, a while loop can call a function.": "abs-guide.txt"},{"t=0": "abs-guide.txt"},{"condition ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"((t++))": "abs-guide.txt"},{"if [ $t -lt 5 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"return 0 # true": "abs-guide.txt"},{"else": "abs-guide.txt"},{"return 1 # false": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"}": "abs-guide.txt"},{"while condition": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^^^^^^^^^": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Function call -- four loop iterations.": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo \"Still going: t = $t\"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Still": "abs-guide.txt"},{"Still": "abs-guide.txt"},{"Still": "abs-guide.txt"},{"Still": "abs-guide.txt"},{"": "abs-guide.txt"},{"going:": "abs-guide.txt"},{"going:": "abs-guide.txt"},{"going:": "abs-guide.txt"},{"going:": "abs-guide.txt"},{"": "abs-guide.txt"},{"t": "abs-guide.txt"},{"t": "abs-guide.txt"},{"t": "abs-guide.txt"},{"t": "abs-guide.txt"},{"": "abs-guide.txt"},{"=": "abs-guide.txt"},{"=": "abs-guide.txt"},{"=": "abs-guide.txt"},{"=": "abs-guide.txt"},{"": "abs-guide.txt"},{"1": "abs-guide.txt"},{"2": "abs-guide.txt"},{"3": "abs-guide.txt"},{"4": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 11. Loops and Branches": "abs-guide.txt"},{"": "abs-guide.txt"},{"150": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"Similar to the if-test construct, a while loop can omit the test brackets.": "abs-guide.txt"},{"while condition": "abs-guide.txt"},{"do": "abs-guide.txt"},{"command(s) ...": "abs-guide.txt"},{"done": "abs-guide.txt"},{"": "abs-guide.txt"},{"By coupling the power of the read command with a while loop, we get the handy while read construct,": "abs-guide.txt"},{"useful for reading and parsing files.": "abs-guide.txt"},{"cat $filename |": "abs-guide.txt"},{"while read line": "abs-guide.txt"},{"do": "abs-guide.txt"},{"...": "abs-guide.txt"},{"done": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Supply input from a file.": "abs-guide.txt"},{"# As long as there is another line to read ...": "abs-guide.txt"},{"": "abs-guide.txt"},{"# =========== Snippet from \"sd.sh\" example script ========== #": "abs-guide.txt"},{"while read value": "abs-guide.txt"},{"# Read one data point at a time.": "abs-guide.txt"},{"do": "abs-guide.txt"},{"rt=$(echo \"scale=$SC; $rt + $value\" | bc)": "abs-guide.txt"},{"(( ct++ ))": "abs-guide.txt"},{"done": "abs-guide.txt"},{"am=$(echo \"scale=$SC; $rt / $ct\" | bc)": "abs-guide.txt"},{"echo $am; return $ct": "abs-guide.txt"},{"# This function \"returns\" TWO values!": "abs-guide.txt"},{"# Caution: This little trick will not work if $ct > 255!": "abs-guide.txt"},{"# To handle a larger number of data points,": "abs-guide.txt"},{"#+ simply comment out the \"return $ct\" above.": "abs-guide.txt"},{"} <\"$datafile\"": "abs-guide.txt"},{"# Feed in data file.": "abs-guide.txt"},{"": "abs-guide.txt"},{"A while loop may have its stdin redirected to a file by a < at its end.": "abs-guide.txt"},{"A while loop may have its stdin supplied by a pipe.": "abs-guide.txt"},{"until": "abs-guide.txt"},{"This construct tests for a condition at the top of a loop, and keeps looping as long as that condition is": "abs-guide.txt"},{"false (opposite of while loop).": "abs-guide.txt"},{"until [ condition-is-true ]": "abs-guide.txt"},{"do": "abs-guide.txt"},{"command(s)...": "abs-guide.txt"},{"done": "abs-guide.txt"},{"Note that an until loop tests for the terminating condition at the top of the loop, differing from a": "abs-guide.txt"},{"similar construct in some programming languages.": "abs-guide.txt"},{"As is the case with for loops, placing the do on the same line as the condition test requires a": "abs-guide.txt"},{"semicolon.": "abs-guide.txt"},{"until [ condition-is-true ] ; do": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 11-19. until loop": "abs-guide.txt"},{"Chapter 11. Loops and Branches": "abs-guide.txt"},{"": "abs-guide.txt"},{"151": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"END_CONDITION=end": "abs-guide.txt"},{"until [ \"$var1\" = \"$END_CONDITION\" ]": "abs-guide.txt"},{"# Tests condition here, at top of loop.": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo \"Input variable #1 \"": "abs-guide.txt"},{"echo \"($END_CONDITION to exit)\"": "abs-guide.txt"},{"read var1": "abs-guide.txt"},{"echo \"variable #1 = $var1\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"done": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"---": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"# As with \"for\" and \"while\" loops,": "abs-guide.txt"},{"#+ an \"until\" loop permits C-like test constructs.": "abs-guide.txt"},{"LIMIT=10": "abs-guide.txt"},{"var=0": "abs-guide.txt"},{"until (( var > LIMIT ))": "abs-guide.txt"},{"do # ^^ ^": "abs-guide.txt"},{"^": "abs-guide.txt"},{"^^": "abs-guide.txt"},{"No brackets, no $ prefixing variables.": "abs-guide.txt"},{"echo -n \"$var \"": "abs-guide.txt"},{"(( var++ ))": "abs-guide.txt"},{"done": "abs-guide.txt"},{"# 0 1 2 3 4 5 6 7 8 9 10": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"How to choose between a for loop or a while loop or until loop? In C, you would typically use a for loop": "abs-guide.txt"},{"when the number of loop iterations is known beforehand. With Bash, however, the situation is fuzzier. The": "abs-guide.txt"},{"Bash for loop is more loosely structured and more flexible than its equivalent in other languages. Therefore,": "abs-guide.txt"},{"feel free to use whatever type of loop gets the job done in the simplest way.": "abs-guide.txt"},{"": "abs-guide.txt"},{"11.2. Nested Loops": "abs-guide.txt"},{"A nested loop is a loop within a loop, an inner loop within the body of an outer one. How this works is that": "abs-guide.txt"},{"the first pass of the outer loop triggers the inner loop, which executes to completion. Then the second pass of": "abs-guide.txt"},{"the outer loop triggers the inner loop again. This repeats until the outer loop finishes. Of course, a break": "abs-guide.txt"},{"within either the inner or outer loop would interrupt this process.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 11-20. Nested Loop": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# nested-loop.sh: Nested \"for\" loops.": "abs-guide.txt"},{"outer=1": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Set outer loop counter.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Beginning of outer loop.": "abs-guide.txt"},{"for a in 1 2 3 4 5": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo \"Pass $outer in outer loop.\"": "abs-guide.txt"},{"echo \"---------------------\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 11. Loops and Branches": "abs-guide.txt"},{"": "abs-guide.txt"},{"152": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"inner=1": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Reset inner loop counter.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# ===============================================": "abs-guide.txt"},{"# Beginning of inner loop.": "abs-guide.txt"},{"for b in 1 2 3 4 5": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo \"Pass $inner in inner loop.\"": "abs-guide.txt"},{"let \"inner+=1\" # Increment inner loop counter.": "abs-guide.txt"},{"done": "abs-guide.txt"},{"# End of inner loop.": "abs-guide.txt"},{"# ===============================================": "abs-guide.txt"},{"let \"outer+=1\"": "abs-guide.txt"},{"# Increment outer loop counter.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"# Space between output blocks in pass of outer loop.": "abs-guide.txt"},{"done": "abs-guide.txt"},{"# End of outer loop.": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"See Example 27-11 for an illustration of nested while loops, and Example 27-13 to see a while loop nested": "abs-guide.txt"},{"inside an until loop.": "abs-guide.txt"},{"": "abs-guide.txt"},{"11.3. Loop Control": "abs-guide.txt"},{"Tournez cent tours, tournez mille tours,": "abs-guide.txt"},{"Tournez souvent et tournez toujours . . .": "abs-guide.txt"},{"--Verlaine, \"Chevaux de bois\"": "abs-guide.txt"},{"Commands affecting loop behavior": "abs-guide.txt"},{"break, continue": "abs-guide.txt"},{"The break and continue loop control commands [53] correspond exactly to their counterparts in other": "abs-guide.txt"},{"programming languages. The break command terminates the loop (breaks out of it), while continue": "abs-guide.txt"},{"causes a jump to the next iteration of the loop, skipping all the remaining commands in that particular": "abs-guide.txt"},{"loop cycle.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 11-21. Effects of break and continue in a loop": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"LIMIT=19": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Upper limit": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"Printing Numbers 1 through 20 (but not 3 and 11).\"": "abs-guide.txt"},{"a=0": "abs-guide.txt"},{"while [ $a -le \"$LIMIT\" ]": "abs-guide.txt"},{"do": "abs-guide.txt"},{"a=$(($a+1))": "abs-guide.txt"},{"if [ \"$a\" -eq 3 ] || [ \"$a\" -eq 11 ] # Excludes 3 and 11.": "abs-guide.txt"},{"then": "abs-guide.txt"},{"continue": "abs-guide.txt"},{"# Skip rest of this particular loop iteration.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 11. Loops and Branches": "abs-guide.txt"},{"": "abs-guide.txt"},{"153": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"echo -n \"$a \"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"": "abs-guide.txt"},{"# This will not execute for 3 and 11.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Exercise:": "abs-guide.txt"},{"# Why does the loop print up to 20?": "abs-guide.txt"},{"echo; echo": "abs-guide.txt"},{"echo Printing Numbers 1 through 20, but something happens after 2.": "abs-guide.txt"},{"##################################################################": "abs-guide.txt"},{"# Same loop, but substituting 'break' for 'continue'.": "abs-guide.txt"},{"a=0": "abs-guide.txt"},{"while [ \"$a\" -le \"$LIMIT\" ]": "abs-guide.txt"},{"do": "abs-guide.txt"},{"a=$(($a+1))": "abs-guide.txt"},{"if [ \"$a\" -gt 2 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"break # Skip entire rest of loop.": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"echo -n \"$a \"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo; echo; echo": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"The break command may optionally take a parameter. A plain break terminates only the innermost": "abs-guide.txt"},{"loop in which it is embedded, but a break N breaks out of N levels of loop.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 11-22. Breaking out of multiple loop levels": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# break-levels.sh: Breaking out of loops.": "abs-guide.txt"},{"# \"break N\" breaks out of N level loops.": "abs-guide.txt"},{"for outerloop in 1 2 3 4 5": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo -n \"Group $outerloop:": "abs-guide.txt"},{"": "abs-guide.txt"},{"\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# -------------------------------------------------------for innerloop in 1 2 3 4 5": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo -n \"$innerloop \"": "abs-guide.txt"},{"if [ \"$innerloop\" -eq 3 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"break # Try": "abs-guide.txt"},{"break 2": "abs-guide.txt"},{"to see what happens.": "abs-guide.txt"},{"# (\"Breaks\" out of both inner and outer loops.)": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"done": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 11. Loops and Branches": "abs-guide.txt"},{"": "abs-guide.txt"},{"154": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# -------------------------------------------------------echo": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"The continue command, similar to break, optionally takes a parameter. A plain continue cuts short": "abs-guide.txt"},{"the current iteration within its loop and begins the next. A continue N terminates all remaining": "abs-guide.txt"},{"iterations at its loop level and continues with the next iteration at the loop, N levels above.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 11-23. Continuing at a higher loop level": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# The \"continue N\" command, continuing at the Nth level loop.": "abs-guide.txt"},{"for outer in I II III IV V": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo; echo -n \"Group $outer: \"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# outer loop": "abs-guide.txt"},{"": "abs-guide.txt"},{"# -------------------------------------------------------------------for inner in 1 2 3 4 5 6 7 8 9 10 # inner loop": "abs-guide.txt"},{"do": "abs-guide.txt"},{"if [[ \"$inner\" -eq 7 && \"$outer\" = \"III\" ]]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"continue 2 # Continue at loop on 2nd level, that is \"outer loop\".": "abs-guide.txt"},{"# Replace above line with a simple \"continue\"": "abs-guide.txt"},{"# to see normal loop behavior.": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"echo -n \"$inner \" # 7 8 9 10 will not echo on \"Group III.\"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"# -------------------------------------------------------------------done": "abs-guide.txt"},{"echo; echo": "abs-guide.txt"},{"# Exercise:": "abs-guide.txt"},{"# Come up with a meaningful use for \"continue N\" in a script.": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 11-24. Using continue N in an actual task": "abs-guide.txt"},{"# Albert Reiner gives an example of how to use \"continue N\":": "abs-guide.txt"},{"# --------------------------------------------------------#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Suppose I have a large number of jobs that need to be run, with": "abs-guide.txt"},{"any data that is to be treated in files of a given name pattern": "abs-guide.txt"},{"in a directory. There are several machines that access": "abs-guide.txt"},{"this directory, and I want to distribute the work over these": "abs-guide.txt"},{"different boxen.": "abs-guide.txt"},{"Then I usually nohup something like the following on every box:": "abs-guide.txt"},{"": "abs-guide.txt"},{"while true": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 11. Loops and Branches": "abs-guide.txt"},{"": "abs-guide.txt"},{"155": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"do": "abs-guide.txt"},{"for n in .iso.*": "abs-guide.txt"},{"do": "abs-guide.txt"},{"[ \"$n\" = \".iso.opts\" ] && continue": "abs-guide.txt"},{"beta=${n#.iso.}": "abs-guide.txt"},{"[ -r .Iso.$beta ] && continue": "abs-guide.txt"},{"[ -r .lock.$beta ] && sleep 10 && continue": "abs-guide.txt"},{"lockfile -r0 .lock.$beta || continue": "abs-guide.txt"},{"echo -n \"$beta: \" `date`": "abs-guide.txt"},{"run-isotherm $beta": "abs-guide.txt"},{"date": "abs-guide.txt"},{"ls -alF .Iso.$beta": "abs-guide.txt"},{"[ -r .Iso.$beta ] && rm -f .lock.$beta": "abs-guide.txt"},{"continue 2": "abs-guide.txt"},{"done": "abs-guide.txt"},{"break": "abs-guide.txt"},{"done": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"# The details, in particular the sleep N, are particular to my": "abs-guide.txt"},{"#+ application, but the general pattern is:": "abs-guide.txt"},{"while true": "abs-guide.txt"},{"do": "abs-guide.txt"},{"for job in {pattern}": "abs-guide.txt"},{"do": "abs-guide.txt"},{"{job already done or running} && continue": "abs-guide.txt"},{"{mark job as running, do job, mark job as done}": "abs-guide.txt"},{"continue 2": "abs-guide.txt"},{"done": "abs-guide.txt"},{"break": "abs-guide.txt"},{"# Or something like `sleep 600' to avoid termination.": "abs-guide.txt"},{"done": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"This way the script will stop only when there are no more jobs to do": "abs-guide.txt"},{"(including jobs that were added during runtime). Through the use": "abs-guide.txt"},{"of appropriate lockfiles it can be run on several machines": "abs-guide.txt"},{"concurrently without duplication of calculations [which run a couple": "abs-guide.txt"},{"of hours in my case, so I really want to avoid this]. Also, as search": "abs-guide.txt"},{"always starts again from the beginning, one can encode priorities in": "abs-guide.txt"},{"the file names. Of course, one could also do this without `continue 2',": "abs-guide.txt"},{"but then one would have to actually check whether or not some job": "abs-guide.txt"},{"was done (so that we should immediately look for the next job) or not": "abs-guide.txt"},{"(in which case we terminate or sleep for a long time before checking": "abs-guide.txt"},{"for a new job).": "abs-guide.txt"},{"": "abs-guide.txt"},{"The continue N construct is difficult to understand and tricky to use in any": "abs-guide.txt"},{"meaningful context. It is probably best avoided.": "abs-guide.txt"},{"": "abs-guide.txt"},{"11.4. Testing and Branching": "abs-guide.txt"},{"The case and select constructs are technically not loops, since they do not iterate the execution of a code": "abs-guide.txt"},{"block. Like loops, however, they direct program flow according to conditions at the top or bottom of the": "abs-guide.txt"},{"block.": "abs-guide.txt"},{"Controlling program flow in a code block": "abs-guide.txt"},{"case (in) / esac": "abs-guide.txt"},{"Chapter 11. Loops and Branches": "abs-guide.txt"},{"": "abs-guide.txt"},{"156": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"The case construct is the shell scripting analog to switch in C/C++. It permits branching to one of a": "abs-guide.txt"},{"number of code blocks, depending on condition tests. It serves as a kind of shorthand for multiple": "abs-guide.txt"},{"if/then/else statements and is an appropriate tool for creating menus.": "abs-guide.txt"},{"case \"$variable\" in": "abs-guide.txt"},{"\"$condition1\" )": "abs-guide.txt"},{"command...": "abs-guide.txt"},{";;": "abs-guide.txt"},{"\"$condition2\" )": "abs-guide.txt"},{"command...": "abs-guide.txt"},{";;": "abs-guide.txt"},{"": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"": "abs-guide.txt"},{"\u25ca Quoting the variables is not mandatory, since word splitting does not take": "abs-guide.txt"},{"place.": "abs-guide.txt"},{"\u25ca Each test line ends with a right paren ). [54]": "abs-guide.txt"},{"\u25ca Each condition block ends with a double semicolon ;;.": "abs-guide.txt"},{"\u25ca If a condition tests true, then the associated commands execute and the case": "abs-guide.txt"},{"block terminates.": "abs-guide.txt"},{"\u25ca The entire case block ends with an esac (case spelled backwards).": "abs-guide.txt"},{"Example 11-25. Using case": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# Testing ranges of characters.": "abs-guide.txt"},{"echo; echo \"Hit a key, then hit return.\"": "abs-guide.txt"},{"read Keypress": "abs-guide.txt"},{"case \"$Keypress\" in": "abs-guide.txt"},{"[[:lower:]]": "abs-guide.txt"},{") echo \"Lowercase letter\";;": "abs-guide.txt"},{"[[:upper:]]": "abs-guide.txt"},{") echo \"Uppercase letter\";;": "abs-guide.txt"},{"[0-9]": "abs-guide.txt"},{") echo \"Digit\";;": "abs-guide.txt"},{"*": "abs-guide.txt"},{") echo \"Punctuation, whitespace, or other\";;": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"# Allows ranges of characters in [square brackets],": "abs-guide.txt"},{"#+ or POSIX ranges in [[double square brackets.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"In the first version of this example,": "abs-guide.txt"},{"the tests for lowercase and uppercase characters were": "abs-guide.txt"},{"[a-z] and [A-Z].": "abs-guide.txt"},{"This no longer works in certain locales and/or Linux distros.": "abs-guide.txt"},{"POSIX is more portable.": "abs-guide.txt"},{"Thanks to Frank Wang for pointing this out.": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Exercise:": "abs-guide.txt"},{"-------As the script stands, it accepts a single keystroke, then terminates.": "abs-guide.txt"},{"Change the script so it accepts repeated input,": "abs-guide.txt"},{"reports on each keystroke, and terminates only when \"X\" is hit.": "abs-guide.txt"},{"Hint: enclose everything in a \"while\" loop.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 11. Loops and Branches": "abs-guide.txt"},{"": "abs-guide.txt"},{"157": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 11-26. Creating menus using case": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# Crude address database": "abs-guide.txt"},{"clear # Clear the screen.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"\"": "abs-guide.txt"},{"Contact List\"": "abs-guide.txt"},{"\"": "abs-guide.txt"},{"------- ----\"": "abs-guide.txt"},{"\"Choose one of the following persons:\"": "abs-guide.txt"},{"\"[E]vans, Roland\"": "abs-guide.txt"},{"\"[J]ones, Mildred\"": "abs-guide.txt"},{"\"[S]mith, Julie\"": "abs-guide.txt"},{"\"[Z]ane, Morris\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"read person": "abs-guide.txt"},{"case \"$person\" in": "abs-guide.txt"},{"# Note variable is quoted.": "abs-guide.txt"},{"\"E\" | \"e\" )": "abs-guide.txt"},{"# Accept upper or lowercase input.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"Roland Evans\"": "abs-guide.txt"},{"echo \"4321 Flash Dr.\"": "abs-guide.txt"},{"echo \"Hardscrabble, CO 80753\"": "abs-guide.txt"},{"echo \"(303) 734-9874\"": "abs-guide.txt"},{"echo \"(303) 734-9892 fax\"": "abs-guide.txt"},{"echo \"revans@zzy.net\"": "abs-guide.txt"},{"echo \"Business partner & old friend\"": "abs-guide.txt"},{";;": "abs-guide.txt"},{"# Note double semicolon to terminate each option.": "abs-guide.txt"},{"\"J\" | \"j\" )": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"Mildred Jones\"": "abs-guide.txt"},{"echo \"249 E. 7th St., Apt. 19\"": "abs-guide.txt"},{"echo \"New York, NY 10009\"": "abs-guide.txt"},{"echo \"(212) 533-2814\"": "abs-guide.txt"},{"echo \"(212) 533-9972 fax\"": "abs-guide.txt"},{"echo \"milliej@loisaida.com\"": "abs-guide.txt"},{"echo \"Ex-girlfriend\"": "abs-guide.txt"},{"echo \"Birthday: Feb. 11\"": "abs-guide.txt"},{";;": "abs-guide.txt"},{"# Add info for Smith & Zane later.": "abs-guide.txt"},{"* )": "abs-guide.txt"},{"# Default option.": "abs-guide.txt"},{"# Empty input (hitting RETURN) fits here, too.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"Not yet in database.\"": "abs-guide.txt"},{";;": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 11. Loops and Branches": "abs-guide.txt"},{"": "abs-guide.txt"},{"158": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"Exercise:": "abs-guide.txt"},{"-------Change the script so it accepts multiple inputs,": "abs-guide.txt"},{"instead of terminating after displaying just one address.": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"An exceptionally clever use of case involves testing for command-line parameters.": "abs-guide.txt"},{"#! /bin/bash": "abs-guide.txt"},{"case \"$1\" in": "abs-guide.txt"},{"\"\") echo \"Usage: ${0##*/} <filename>\"; exit $E_PARAM;;": "abs-guide.txt"},{"# No command-line parameters,": "abs-guide.txt"},{"# or first parameter empty.": "abs-guide.txt"},{"# Note that ${0##*/} is ${var##pattern} param substitution.": "abs-guide.txt"},{"# Net result is $0.": "abs-guide.txt"},{"-*) FILENAME=./$1;;": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"If filename passed as argument ($1)": "abs-guide.txt"},{"starts with a dash,": "abs-guide.txt"},{"replace it with ./$1": "abs-guide.txt"},{"so further commands don't interpret it": "abs-guide.txt"},{"as an option.": "abs-guide.txt"},{"": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"* ) FILENAME=$1;;": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Otherwise, $1.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Here is a more straightforward example of command-line parameter handling:": "abs-guide.txt"},{"#! /bin/bash": "abs-guide.txt"},{"": "abs-guide.txt"},{"while [ $# -gt 0 ]; do": "abs-guide.txt"},{"# Until you run out of parameters . . .": "abs-guide.txt"},{"case \"$1\" in": "abs-guide.txt"},{"-d|--debug)": "abs-guide.txt"},{"# \"-d\" or \"--debug\" parameter?": "abs-guide.txt"},{"DEBUG=1": "abs-guide.txt"},{";;": "abs-guide.txt"},{"-c|--conf)": "abs-guide.txt"},{"CONFFILE=\"$2\"": "abs-guide.txt"},{"shift": "abs-guide.txt"},{"if [ ! -f $CONFFILE ]; then": "abs-guide.txt"},{"echo \"Error: Supplied file doesn't exist!\"": "abs-guide.txt"},{"exit $E_CONFFILE": "abs-guide.txt"},{"# File not found error.": "abs-guide.txt"},{"fi": "abs-guide.txt"},{";;": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"shift": "abs-guide.txt"},{"# Check next set of parameters.": "abs-guide.txt"},{"done": "abs-guide.txt"},{"# From Stefano Falsetto's \"Log2Rot\" script,": "abs-guide.txt"},{"#+ part of his \"rottlog\" package.": "abs-guide.txt"},{"# Used with permission.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 11-27. Using command substitution to generate the case variable": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# case-cmd.sh: Using command substitution to generate a \"case\" variable.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 11. Loops and Branches": "abs-guide.txt"},{"": "abs-guide.txt"},{"159": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"case $( arch ) in": "abs-guide.txt"},{"i386": "abs-guide.txt"},{"i486": "abs-guide.txt"},{"i586": "abs-guide.txt"},{"i686": "abs-guide.txt"},{"*": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"": "abs-guide.txt"},{")": "abs-guide.txt"},{")": "abs-guide.txt"},{")": "abs-guide.txt"},{")": "abs-guide.txt"},{")": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"# $( arch ) returns machine architecture.": "abs-guide.txt"},{"# Equivalent to 'uname -m' ...": "abs-guide.txt"},{"\"80386-based machine\";;": "abs-guide.txt"},{"\"80486-based machine\";;": "abs-guide.txt"},{"\"Pentium-based machine\";;": "abs-guide.txt"},{"\"Pentium2+-based machine\";;": "abs-guide.txt"},{"\"Other type of machine\";;": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"A case construct can filter strings for globbing patterns.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 11-28. Simple string matching": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# match-string.sh: Simple string matching": "abs-guide.txt"},{"#": "abs-guide.txt"},{"using a 'case' construct.": "abs-guide.txt"},{"match_string ()": "abs-guide.txt"},{"{ # Exact string match.": "abs-guide.txt"},{"MATCH=0": "abs-guide.txt"},{"E_NOMATCH=90": "abs-guide.txt"},{"PARAMS=2": "abs-guide.txt"},{"# Function requires 2 arguments.": "abs-guide.txt"},{"E_BAD_PARAMS=91": "abs-guide.txt"},{"[ $# -eq $PARAMS ] || return $E_BAD_PARAMS": "abs-guide.txt"},{"case \"$1\" in": "abs-guide.txt"},{"\"$2\") return $MATCH;;": "abs-guide.txt"},{"*": "abs-guide.txt"},{") return $E_NOMATCH;;": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"a=one": "abs-guide.txt"},{"b=two": "abs-guide.txt"},{"c=three": "abs-guide.txt"},{"d=two": "abs-guide.txt"},{"": "abs-guide.txt"},{"match_string $a": "abs-guide.txt"},{"echo $?": "abs-guide.txt"},{"": "abs-guide.txt"},{"# wrong number of parameters": "abs-guide.txt"},{"# 91": "abs-guide.txt"},{"": "abs-guide.txt"},{"match_string $a $b": "abs-guide.txt"},{"echo $?": "abs-guide.txt"},{"": "abs-guide.txt"},{"# no match": "abs-guide.txt"},{"# 90": "abs-guide.txt"},{"": "abs-guide.txt"},{"match_string $b $d": "abs-guide.txt"},{"echo $?": "abs-guide.txt"},{"": "abs-guide.txt"},{"# match": "abs-guide.txt"},{"# 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 11-29. Checking for alphabetic input": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 11. Loops and Branches": "abs-guide.txt"},{"": "abs-guide.txt"},{"160": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# isalpha.sh: Using a \"case\" structure to filter a string.": "abs-guide.txt"},{"SUCCESS=0": "abs-guide.txt"},{"FAILURE=1": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Was FAILURE=-1,": "abs-guide.txt"},{"#+ but Bash no longer allows negative return value.": "abs-guide.txt"},{"": "abs-guide.txt"},{"isalpha () # Tests whether *first character* of input string is alphabetic.": "abs-guide.txt"},{"{": "abs-guide.txt"},{"if [ -z \"$1\" ]": "abs-guide.txt"},{"# No argument passed?": "abs-guide.txt"},{"then": "abs-guide.txt"},{"return $FAILURE": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"case \"$1\" in": "abs-guide.txt"},{"[a-zA-Z]*) return $SUCCESS;; # Begins with a letter?": "abs-guide.txt"},{"*": "abs-guide.txt"},{") return $FAILURE;;": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"}": "abs-guide.txt"},{"# Compare this with \"isalpha ()\" function in C.": "abs-guide.txt"},{"": "abs-guide.txt"},{"isalpha2 ()": "abs-guide.txt"},{"# Tests whether *entire string* is alphabetic.": "abs-guide.txt"},{"{": "abs-guide.txt"},{"[ $# -eq 1 ] || return $FAILURE": "abs-guide.txt"},{"case $1 in": "abs-guide.txt"},{"*[!a-zA-Z]*|\"\") return $FAILURE;;": "abs-guide.txt"},{"*) return $SUCCESS;;": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"}": "abs-guide.txt"},{"isdigit ()": "abs-guide.txt"},{"# Tests whether *entire string* is numerical.": "abs-guide.txt"},{"{": "abs-guide.txt"},{"# In other words, tests for integer variable.": "abs-guide.txt"},{"[ $# -eq 1 ] || return $FAILURE": "abs-guide.txt"},{"case $1 in": "abs-guide.txt"},{"*[!0-9]*|\"\") return $FAILURE;;": "abs-guide.txt"},{"*) return $SUCCESS;;": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"check_var () # Front-end to isalpha ().": "abs-guide.txt"},{"{": "abs-guide.txt"},{"if isalpha \"$@\"": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"\\\"$*\\\" begins with an alpha character.\"": "abs-guide.txt"},{"if isalpha2 \"$@\"": "abs-guide.txt"},{"then": "abs-guide.txt"},{"# No point in testing if first char is non-alpha.": "abs-guide.txt"},{"echo \"\\\"$*\\\" contains only alpha characters.\"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo \"\\\"$*\\\" contains at least one non-alpha character.\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo \"\\\"$*\\\" begins with a non-alpha character.\"": "abs-guide.txt"},{"# Also \"non-alpha\" if no argument passed.": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 11. Loops and Branches": "abs-guide.txt"},{"": "abs-guide.txt"},{"161": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"digit_check () # Front-end to isdigit ().": "abs-guide.txt"},{"{": "abs-guide.txt"},{"if isdigit \"$@\"": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"\\\"$*\\\" contains only digits [0 - 9].\"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo \"\\\"$*\\\" has at least one non-digit character.\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"}": "abs-guide.txt"},{"a=23skidoo": "abs-guide.txt"},{"b=H3llo": "abs-guide.txt"},{"c=-What?": "abs-guide.txt"},{"d=What?": "abs-guide.txt"},{"e=$(echo $b)": "abs-guide.txt"},{"f=AbcDef": "abs-guide.txt"},{"g=27234": "abs-guide.txt"},{"h=27a34": "abs-guide.txt"},{"i=27.34": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Command substitution.": "abs-guide.txt"},{"": "abs-guide.txt"},{"check_var $a": "abs-guide.txt"},{"check_var $b": "abs-guide.txt"},{"check_var $c": "abs-guide.txt"},{"check_var $d": "abs-guide.txt"},{"check_var $e": "abs-guide.txt"},{"check_var $f": "abs-guide.txt"},{"check_var": "abs-guide.txt"},{"# No argument passed, so what happens?": "abs-guide.txt"},{"#": "abs-guide.txt"},{"digit_check $g": "abs-guide.txt"},{"digit_check $h": "abs-guide.txt"},{"digit_check $i": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Script improved by S.C.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Exercise:": "abs-guide.txt"},{"# -------# Write an 'isfloat ()' function that tests for floating point numbers.": "abs-guide.txt"},{"# Hint: The function duplicates 'isdigit ()',": "abs-guide.txt"},{"#+ but adds a test for a mandatory decimal point.": "abs-guide.txt"},{"": "abs-guide.txt"},{"select": "abs-guide.txt"},{"The select construct, adopted from the Korn Shell, is yet another tool for building menus.": "abs-guide.txt"},{"select variable [in list]": "abs-guide.txt"},{"do": "abs-guide.txt"},{"command...": "abs-guide.txt"},{"break": "abs-guide.txt"},{"done": "abs-guide.txt"},{"This prompts the user to enter one of the choices presented in the variable list. Note that select uses": "abs-guide.txt"},{"the $PS3 prompt (#? ) by default, but this may be changed.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 11-30. Creating menus using select": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 11. Loops and Branches": "abs-guide.txt"},{"": "abs-guide.txt"},{"162": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"PS3='Choose your favorite vegetable: ' # Sets the prompt string.": "abs-guide.txt"},{"# Otherwise it defaults to #? .": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"select vegetable in \"beans\" \"carrots\" \"potatoes\" \"onions\" \"rutabagas\"": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"Your favorite veggie is $vegetable.\"": "abs-guide.txt"},{"echo \"Yuck!\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"break # What happens if there is no 'break' here?": "abs-guide.txt"},{"done": "abs-guide.txt"},{"exit": "abs-guide.txt"},{"# Exercise:": "abs-guide.txt"},{"# -------# Fix this script to accept user input not specified in": "abs-guide.txt"},{"#+ the \"select\" statement.": "abs-guide.txt"},{"# For example, if the user inputs \"peas,\"": "abs-guide.txt"},{"#+ the script would respond \"Sorry. That is not on the menu.\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"If in list is omitted, then select uses the list of command line arguments ($@) passed to the script": "abs-guide.txt"},{"or the function containing the select construct.": "abs-guide.txt"},{"Compare this to the behavior of a": "abs-guide.txt"},{"for variable [in list]": "abs-guide.txt"},{"construct with the in list omitted.": "abs-guide.txt"},{"Example 11-31. Creating menus using select in a function": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"PS3='Choose your favorite vegetable: '": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"choice_of()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"select vegetable": "abs-guide.txt"},{"# [in list] omitted, so 'select' uses arguments passed to function.": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"Your favorite veggie is $vegetable.\"": "abs-guide.txt"},{"echo \"Yuck!\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"break": "abs-guide.txt"},{"done": "abs-guide.txt"},{"}": "abs-guide.txt"},{"choice_of beans rice carrots radishes rutabaga spinach": "abs-guide.txt"},{"#": "abs-guide.txt"},{"$1": "abs-guide.txt"},{"$2": "abs-guide.txt"},{"$3": "abs-guide.txt"},{"$4": "abs-guide.txt"},{"$5": "abs-guide.txt"},{"$6": "abs-guide.txt"},{"#": "abs-guide.txt"},{"passed to choice_of() function": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 11. Loops and Branches": "abs-guide.txt"},{"": "abs-guide.txt"},{"163": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"See also Example 37-3.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 11. Loops and Branches": "abs-guide.txt"},{"": "abs-guide.txt"},{"164": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fChapter 12. Command Substitution": "abs-guide.txt"},{"Command substitution reassigns the output of a command [55] or even multiple commands; it literally plugs": "abs-guide.txt"},{"the command output into another context. [56]": "abs-guide.txt"},{"The classic form of command substitution uses backquotes (`...`). Commands within backquotes (backticks)": "abs-guide.txt"},{"generate command-line text.": "abs-guide.txt"},{"script_name=`basename $0`": "abs-guide.txt"},{"echo \"The name of this script is $script_name.\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"The output of commands can be used as arguments to another command, to set a variable, and even for": "abs-guide.txt"},{"generating the argument list in a for loop.": "abs-guide.txt"},{"rm `cat filename`": "abs-guide.txt"},{"# \"filename\" contains a list of files to delete.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# S. C. points out that \"arg list too long\" error might result.": "abs-guide.txt"},{"# Better is": "abs-guide.txt"},{"xargs rm -- < filename": "abs-guide.txt"},{"# ( -- covers those cases where \"filename\" begins with a \"-\" )": "abs-guide.txt"},{"textfile_listing=`ls *.txt`": "abs-guide.txt"},{"# Variable contains names of all *.txt files in current working directory.": "abs-guide.txt"},{"echo $textfile_listing": "abs-guide.txt"},{"textfile_listing2=$(ls *.txt)": "abs-guide.txt"},{"echo $textfile_listing2": "abs-guide.txt"},{"# Same result.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"# The alternative form of command substitution.": "abs-guide.txt"},{"": "abs-guide.txt"},{"A possible problem with putting a list of files into a single string": "abs-guide.txt"},{"is that a newline may creep in.": "abs-guide.txt"},{"A safer way to assign a list of files to a parameter is with an array.": "abs-guide.txt"},{"shopt -s nullglob": "abs-guide.txt"},{"# If no match, filename expands to nothing.": "abs-guide.txt"},{"textfile_listing=( *.txt )": "abs-guide.txt"},{"Thanks, S.C.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Command substitution invokes a subshell.": "abs-guide.txt"},{"Command substitution may result in word splitting.": "abs-guide.txt"},{"COMMAND `echo a b`": "abs-guide.txt"},{"": "abs-guide.txt"},{"# 2 args: a and b": "abs-guide.txt"},{"": "abs-guide.txt"},{"COMMAND \"`echo a b`\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# 1 arg: \"a b\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"COMMAND `echo`": "abs-guide.txt"},{"": "abs-guide.txt"},{"# no arg": "abs-guide.txt"},{"": "abs-guide.txt"},{"COMMAND \"`echo`\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# one empty arg": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Thanks, S.C.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Even when there is no word splitting, command substitution can remove trailing newlines.": "abs-guide.txt"},{"# cd \"`pwd`\"": "abs-guide.txt"},{"# However...": "abs-guide.txt"},{"": "abs-guide.txt"},{"# This should always work.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 12. Command Substitution": "abs-guide.txt"},{"": "abs-guide.txt"},{"165": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"mkdir 'dir with trailing newline": "abs-guide.txt"},{"'": "abs-guide.txt"},{"cd 'dir with trailing newline": "abs-guide.txt"},{"'": "abs-guide.txt"},{"cd \"`pwd`\" # Error message:": "abs-guide.txt"},{"# bash: cd: /tmp/file with trailing newline: No such file or directory": "abs-guide.txt"},{"cd \"$PWD\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Works fine.": "abs-guide.txt"},{"": "abs-guide.txt"},{"old_tty_setting=$(stty -g)": "abs-guide.txt"},{"echo \"Hit a key \"": "abs-guide.txt"},{"stty -icanon -echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Save old terminal setting.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Disable \"canonical\" mode for terminal.": "abs-guide.txt"},{"# Also, disable *local* echo.": "abs-guide.txt"},{"key=$(dd bs=1 count=1 2> /dev/null)": "abs-guide.txt"},{"# Using 'dd' to get a keypress.": "abs-guide.txt"},{"stty \"$old_tty_setting\"": "abs-guide.txt"},{"# Restore old setting.": "abs-guide.txt"},{"echo \"You hit ${#key} key.\" # ${#variable} = number of characters in $variable": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Hit any key except RETURN, and the output is \"You hit 1 key.\"": "abs-guide.txt"},{"# Hit RETURN, and it's \"You hit 0 key.\"": "abs-guide.txt"},{"# The newline gets eaten in the command substitution.": "abs-guide.txt"},{"#Code snippet by St\u00e9phane Chazelas.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Using echo to output an unquoted variable set with command substitution removes trailing newlines": "abs-guide.txt"},{"characters from the output of the reassigned command(s). This can cause unpleasant surprises.": "abs-guide.txt"},{"dir_listing=`ls -l`": "abs-guide.txt"},{"echo $dir_listing": "abs-guide.txt"},{"": "abs-guide.txt"},{"# unquoted": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Expecting a nicely ordered directory listing.": "abs-guide.txt"},{"# However, what you get is:": "abs-guide.txt"},{"# total 3 -rw-rw-r-- 1 bozo bozo 30 May 13 17:15 1.txt -rw-rw-r-- 1 bozo": "abs-guide.txt"},{"# bozo 51 May 15 20:57 t2.sh -rwxr-xr-x 1 bozo bozo 217 Mar 5 21:13 wi.sh": "abs-guide.txt"},{"# The newlines disappeared.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo \"$dir_listing\"": "abs-guide.txt"},{"# quoted": "abs-guide.txt"},{"# -rw-rw-r-1 bozo": "abs-guide.txt"},{"30 May 13 17:15 1.txt": "abs-guide.txt"},{"# -rw-rw-r-1 bozo": "abs-guide.txt"},{"51 May 15 20:57 t2.sh": "abs-guide.txt"},{"# -rwxr-xr-x": "abs-guide.txt"},{"1 bozo": "abs-guide.txt"},{"217 Mar 5 21:13 wi.sh": "abs-guide.txt"},{"": "abs-guide.txt"},{"Command substitution even permits setting a variable to the contents of a file, using either redirection or the": "abs-guide.txt"},{"cat command.": "abs-guide.txt"},{"variable1=`<file1`": "abs-guide.txt"},{"variable2=`cat file2`": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"Set \"variable1\" to contents of \"file1\".": "abs-guide.txt"},{"Set \"variable2\" to contents of \"file2\".": "abs-guide.txt"},{"This, however, forks a new process,": "abs-guide.txt"},{"so the line of code executes slower than the above version.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Note that the variables may contain embedded whitespace,": "abs-guide.txt"},{"#+ or even (horrors), control characters.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 12. Command Substitution": "abs-guide.txt"},{"": "abs-guide.txt"},{"166": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# It is not necessary to explicitly assign a variable.": "abs-guide.txt"},{"echo \"` <$0`\"": "abs-guide.txt"},{"# Echoes the script itself to stdout.": "abs-guide.txt"},{"# Excerpts from system file, /etc/rc.d/rc.sysinit": "abs-guide.txt"},{"#+ (on a Red Hat Linux installation)": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [ -f /fsckoptions ]; then": "abs-guide.txt"},{"fsckoptions=`cat /fsckoptions`": "abs-guide.txt"},{"...": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"if [ -e \"/proc/ide/${disk[$device]}/media\" ] ; then": "abs-guide.txt"},{"hdmedia=`cat /proc/ide/${disk[$device]}/media`": "abs-guide.txt"},{"...": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"if [ ! -n \"`uname -r | grep -- \"-\"`\" ]; then": "abs-guide.txt"},{"ktag=\"`cat /proc/version`\"": "abs-guide.txt"},{"...": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"if [ $usb = \"1\" ]; then": "abs-guide.txt"},{"sleep 5": "abs-guide.txt"},{"mouseoutput=`cat /proc/bus/usb/devices 2>/dev/null|grep -E \"^I.*Cls=03.*Prot=02\"`": "abs-guide.txt"},{"kbdoutput=`cat /proc/bus/usb/devices 2>/dev/null|grep -E \"^I.*Cls=03.*Prot=01\"`": "abs-guide.txt"},{"...": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"Do not set a variable to the contents of a long text file unless you have a very good reason for doing so.": "abs-guide.txt"},{"Do not set a variable to the contents of a binary file, even as a joke.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 12-1. Stupid script tricks": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# stupid-script-tricks.sh: Don't try this at home, folks.": "abs-guide.txt"},{"# From \"Stupid Script Tricks,\" Volume I.": "abs-guide.txt"},{"exit 99": "abs-guide.txt"},{"": "abs-guide.txt"},{"### Comment out this line if you dare.": "abs-guide.txt"},{"": "abs-guide.txt"},{"dangerous_variable=`cat /boot/vmlinuz`": "abs-guide.txt"},{"": "abs-guide.txt"},{"# The compressed Linux kernel itself.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo \"string-length of \\$dangerous_variable = ${#dangerous_variable}\"": "abs-guide.txt"},{"# string-length of $dangerous_variable = 794151": "abs-guide.txt"},{"# (Newer kernels are bigger.)": "abs-guide.txt"},{"# Does not give same count as 'wc -c /boot/vmlinuz'.": "abs-guide.txt"},{"# echo \"$dangerous_variable\"": "abs-guide.txt"},{"# Don't try this! It would hang the script.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# The document author is aware of no useful applications for": "abs-guide.txt"},{"#+ setting a variable to the contents of a binary file.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 12. Command Substitution": "abs-guide.txt"},{"": "abs-guide.txt"},{"167": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Notice that a buffer overrun does not occur. This is one instance where an interpreted language, such as": "abs-guide.txt"},{"Bash, provides more protection from programmer mistakes than a compiled language.": "abs-guide.txt"},{"Command substitution permits setting a variable to the output of a loop. The key to this is grabbing the output": "abs-guide.txt"},{"of an echo command within the loop.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 12-2. Generating a variable from a loop": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# csubloop.sh: Setting a variable to the output of a loop.": "abs-guide.txt"},{"variable1=`for i in 1 2 3 4 5": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo -n \"$i\"": "abs-guide.txt"},{"done`": "abs-guide.txt"},{"": "abs-guide.txt"},{"# The 'echo' command is critical": "abs-guide.txt"},{"#+ to command substitution here.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo \"variable1 = $variable1\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# variable1 = 12345": "abs-guide.txt"},{"": "abs-guide.txt"},{"i=0": "abs-guide.txt"},{"variable2=`while [ \"$i\" -lt 10 ]": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo -n \"$i\"": "abs-guide.txt"},{"# Again, the necessary 'echo'.": "abs-guide.txt"},{"let \"i += 1\"": "abs-guide.txt"},{"# Increment.": "abs-guide.txt"},{"done`": "abs-guide.txt"},{"echo \"variable2 = $variable2\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# variable2 = 0123456789": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Demonstrates that it's possible to embed a loop": "abs-guide.txt"},{"#+ inside a variable declaration.": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Command substitution makes it possible to extend the toolset available to Bash. It is simply a matter of": "abs-guide.txt"},{"writing a program or script that outputs to stdout (like a well-behaved UNIX tool should) and assigning": "abs-guide.txt"},{"that output to a variable.": "abs-guide.txt"},{"#include <stdio.h>": "abs-guide.txt"},{"/*": "abs-guide.txt"},{"": "abs-guide.txt"},{"\"Hello, world.\" C program": "abs-guide.txt"},{"": "abs-guide.txt"},{"*/": "abs-guide.txt"},{"": "abs-guide.txt"},{"int main()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"printf( \"Hello, world.\\n\" );": "abs-guide.txt"},{"return (0);": "abs-guide.txt"},{"}": "abs-guide.txt"},{"bash$ gcc -o hello hello.c": "abs-guide.txt"},{"": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# hello.sh": "abs-guide.txt"},{"greeting=`./hello`": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 12. Command Substitution": "abs-guide.txt"},{"": "abs-guide.txt"},{"168": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"echo $greeting": "abs-guide.txt"},{"bash$ sh hello.sh": "abs-guide.txt"},{"Hello, world.": "abs-guide.txt"},{"": "abs-guide.txt"},{"The $(...) form has superseded backticks for command substitution.": "abs-guide.txt"},{"output=$(sed -n /\"$1\"/p $file)": "abs-guide.txt"},{"": "abs-guide.txt"},{"# From \"grp.sh\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"example.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Setting a variable to the contents of a text file.": "abs-guide.txt"},{"File_contents1=$(cat $file1)": "abs-guide.txt"},{"File_contents2=$(<$file2)": "abs-guide.txt"},{"# Bash permits this also.": "abs-guide.txt"},{"": "abs-guide.txt"},{"The $(...) form of command substitution treats a double backslash in a different way than `...`.": "abs-guide.txt"},{"bash$ echo `echo \\\\`": "abs-guide.txt"},{"": "abs-guide.txt"},{"bash$ echo $(echo \\\\)": "abs-guide.txt"},{"\\": "abs-guide.txt"},{"": "abs-guide.txt"},{"The $(...) form of command substitution permits nesting. [57]": "abs-guide.txt"},{"word_count=$( wc -w $(echo * | awk '{print $8}') )": "abs-guide.txt"},{"": "abs-guide.txt"},{"Or, for something a bit more elaborate . . .": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 12-3. Finding anagrams": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# agram2.sh": "abs-guide.txt"},{"# Example of nested command substitution.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Uses \"anagram\" utility": "abs-guide.txt"},{"that is part of the author's \"yawl\" word list package.": "abs-guide.txt"},{"http://ibiblio.org/pub/Linux/libs/yawl-0.3.2.tar.gz": "abs-guide.txt"},{"http://bash.deta.in/yawl-0.3.2.tar.gz": "abs-guide.txt"},{"": "abs-guide.txt"},{"E_NOARGS=86": "abs-guide.txt"},{"E_BADARG=87": "abs-guide.txt"},{"MINLEN=7": "abs-guide.txt"},{"if [ -z \"$1\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Usage $0 LETTERSET\"": "abs-guide.txt"},{"exit $E_NOARGS": "abs-guide.txt"},{"# Script needs a command-line argument.": "abs-guide.txt"},{"elif [ ${#1} -lt $MINLEN ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Argument must have at least $MINLEN letters.\"": "abs-guide.txt"},{"exit $E_BADARG": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"FILTER='.......'": "abs-guide.txt"},{"# Must have at least 7 letters.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"1234567": "abs-guide.txt"},{"Anagrams=( $(echo $(anagram $1 | grep $FILTER) ) )": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 12. Command Substitution": "abs-guide.txt"},{"": "abs-guide.txt"},{"169": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"$(": "abs-guide.txt"},{"": "abs-guide.txt"},{"$(": "abs-guide.txt"},{"": "abs-guide.txt"},{"(": "abs-guide.txt"},{"": "abs-guide.txt"},{"nested command sub.": "abs-guide.txt"},{"array assignment": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"${#Anagrams[*]}": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo ${Anagrams[0]}": "abs-guide.txt"},{"echo ${Anagrams[1]}": "abs-guide.txt"},{"": "abs-guide.txt"},{") )": "abs-guide.txt"},{")": "abs-guide.txt"},{"": "abs-guide.txt"},{"# echo \"${Anagrams[*]}\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"7+ letter anagrams found\"": "abs-guide.txt"},{"# First anagram.": "abs-guide.txt"},{"# Second anagram.": "abs-guide.txt"},{"# Etc.": "abs-guide.txt"},{"# To list all the anagrams in a single line . . .": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Look ahead to the Arrays chapter for enlightenment on": "abs-guide.txt"},{"#+ what's going on here.": "abs-guide.txt"},{"# See also the agram.sh script for an exercise in anagram finding.": "abs-guide.txt"},{"exit $?": "abs-guide.txt"},{"": "abs-guide.txt"},{"Examples of command substitution in shell scripts:": "abs-guide.txt"},{"1. Example 11-8": "abs-guide.txt"},{"2. Example 11-27": "abs-guide.txt"},{"3. Example 9-16": "abs-guide.txt"},{"4. Example 16-3": "abs-guide.txt"},{"5. Example 16-22": "abs-guide.txt"},{"6. Example 16-17": "abs-guide.txt"},{"7. Example 16-54": "abs-guide.txt"},{"8. Example 11-14": "abs-guide.txt"},{"9. Example 11-11": "abs-guide.txt"},{"10. Example 16-32": "abs-guide.txt"},{"11. Example 20-8": "abs-guide.txt"},{"12. Example A-16": "abs-guide.txt"},{"13. Example 29-3": "abs-guide.txt"},{"14. Example 16-47": "abs-guide.txt"},{"15. Example 16-48": "abs-guide.txt"},{"16. Example 16-49": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 12. Command Substitution": "abs-guide.txt"},{"": "abs-guide.txt"},{"170": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fChapter 13. Arithmetic Expansion": "abs-guide.txt"},{"Arithmetic expansion provides a powerful tool for performing (integer) arithmetic operations in scripts.": "abs-guide.txt"},{"Translating a string into a numerical expression is relatively straightforward using backticks, double": "abs-guide.txt"},{"parentheses, or let.": "abs-guide.txt"},{"Variations": "abs-guide.txt"},{"Arithmetic expansion with backticks (often used in conjunction with expr)": "abs-guide.txt"},{"z=`expr $z + 3`": "abs-guide.txt"},{"": "abs-guide.txt"},{"# The 'expr' command performs the expansion.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Arithmetic expansion with double parentheses, and using let": "abs-guide.txt"},{"The use of backticks (backquotes) in arithmetic expansion has been superseded by double parentheses": "abs-guide.txt"},{"-- ((...)) and $((...)) -- and also by the very convenient let construction.": "abs-guide.txt"},{"z=$(($z+3))": "abs-guide.txt"},{"z=$((z+3))": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"# $((EXPRESSION)) is arithmetic expansion.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Also correct.": "abs-guide.txt"},{"Within double parentheses,": "abs-guide.txt"},{"parameter dereferencing": "abs-guide.txt"},{"is optional.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Not to be confused with": "abs-guide.txt"},{"#+ command substitution.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# You may also use operations within double parentheses without assignment.": "abs-guide.txt"},{"n=0": "abs-guide.txt"},{"echo \"n = $n\"": "abs-guide.txt"},{"(( n += 1 ))": "abs-guide.txt"},{"# (( $n += 1 )) is incorrect!": "abs-guide.txt"},{"echo \"n = $n\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"let z=z+3": "abs-guide.txt"},{"let \"z += 3\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# n = 0": "abs-guide.txt"},{"# Increment.": "abs-guide.txt"},{"# n = 1": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Quotes permit the use of spaces in variable assignment.": "abs-guide.txt"},{"# The 'let' operator actually performs arithmetic evaluation,": "abs-guide.txt"},{"#+ rather than expansion.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Examples of arithmetic expansion in scripts:": "abs-guide.txt"},{"1. Example 16-9": "abs-guide.txt"},{"2. Example 11-15": "abs-guide.txt"},{"3. Example 27-1": "abs-guide.txt"},{"4. Example 27-11": "abs-guide.txt"},{"5. Example A-16": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 13. Arithmetic Expansion": "abs-guide.txt"},{"": "abs-guide.txt"},{"171": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fChapter 14. Recess Time": "abs-guide.txt"},{"This bizarre little intermission gives the reader a chance to relax and maybe laugh a bit.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Fellow Linux user, greetings! You are reading something which": "abs-guide.txt"},{"will bring you luck and good fortune. Just e-mail a copy of": "abs-guide.txt"},{"this document to 10 of your friends. Before making the copies,": "abs-guide.txt"},{"send a 100-line Bash script to the first person on the list": "abs-guide.txt"},{"at the bottom of this letter. Then delete their name and add": "abs-guide.txt"},{"yours to the bottom of the list.": "abs-guide.txt"},{"Don't break the chain! Make the copies within 48 hours.": "abs-guide.txt"},{"Wilfred P. of Brooklyn failed to send out his ten copies and": "abs-guide.txt"},{"woke the next morning to find his job description changed": "abs-guide.txt"},{"to \"COBOL programmer.\" Howard L. of Newport News sent": "abs-guide.txt"},{"out his ten copies and within a month had enough hardware": "abs-guide.txt"},{"to build a 100-node Beowulf cluster dedicated to playing": "abs-guide.txt"},{"Tuxracer. Amelia V. of Chicago laughed at this letter": "abs-guide.txt"},{"and broke the chain. Shortly thereafter, a fire broke out": "abs-guide.txt"},{"in her terminal and she now spends her days writing": "abs-guide.txt"},{"documentation for MS Windows.": "abs-guide.txt"},{"Don't break the chain!": "abs-guide.txt"},{"": "abs-guide.txt"},{"Send out your ten copies today!": "abs-guide.txt"},{"": "abs-guide.txt"},{"Courtesy 'NIX \"fortune cookies\", with some alterations and many apologies": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 14. Recess Time": "abs-guide.txt"},{"": "abs-guide.txt"},{"172": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fPart 4. Commands": "abs-guide.txt"},{"Mastering the commands on your Linux machine is an indispensable prelude to writing effective shell scripts.": "abs-guide.txt"},{"This section covers the following commands:": "abs-guide.txt"},{"\u2022 . (See also source)": "abs-guide.txt"},{"\u2022 ac": "abs-guide.txt"},{"\u2022 adduser": "abs-guide.txt"},{"\u2022 agetty": "abs-guide.txt"},{"\u2022 agrep": "abs-guide.txt"},{"\u2022 ar": "abs-guide.txt"},{"\u2022 arch": "abs-guide.txt"},{"\u2022 at": "abs-guide.txt"},{"\u2022 autoload": "abs-guide.txt"},{"\u2022 awk (See also Using awk for math operations)": "abs-guide.txt"},{"\u2022 badblocks": "abs-guide.txt"},{"\u2022 banner": "abs-guide.txt"},{"\u2022 basename": "abs-guide.txt"},{"\u2022 batch": "abs-guide.txt"},{"\u2022 bc": "abs-guide.txt"},{"\u2022 bg": "abs-guide.txt"},{"\u2022 bind": "abs-guide.txt"},{"\u2022 bison": "abs-guide.txt"},{"\u2022 builtin": "abs-guide.txt"},{"\u2022 bzgrep": "abs-guide.txt"},{"\u2022 bzip2": "abs-guide.txt"},{"\u2022 cal": "abs-guide.txt"},{"\u2022 caller": "abs-guide.txt"},{"\u2022 cat": "abs-guide.txt"},{"\u2022 cd": "abs-guide.txt"},{"\u2022 chattr": "abs-guide.txt"},{"\u2022 chfn": "abs-guide.txt"},{"\u2022 chgrp": "abs-guide.txt"},{"\u2022 chkconfig": "abs-guide.txt"},{"\u2022 chmod": "abs-guide.txt"},{"\u2022 chown": "abs-guide.txt"},{"\u2022 chroot": "abs-guide.txt"},{"\u2022 cksum": "abs-guide.txt"},{"\u2022 clear": "abs-guide.txt"},{"\u2022 clock": "abs-guide.txt"},{"\u2022 cmp": "abs-guide.txt"},{"\u2022 col": "abs-guide.txt"},{"\u2022 colrm": "abs-guide.txt"},{"\u2022 column": "abs-guide.txt"},{"\u2022 comm": "abs-guide.txt"},{"\u2022 command": "abs-guide.txt"},{"\u2022 compgen": "abs-guide.txt"},{"Part 4. Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"173": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"\u2022 complete": "abs-guide.txt"},{"\u2022 compress": "abs-guide.txt"},{"\u2022 coproc": "abs-guide.txt"},{"\u2022 cp": "abs-guide.txt"},{"\u2022 cpio": "abs-guide.txt"},{"\u2022 cron": "abs-guide.txt"},{"\u2022 crypt": "abs-guide.txt"},{"\u2022 csplit": "abs-guide.txt"},{"\u2022 cu": "abs-guide.txt"},{"\u2022 cut": "abs-guide.txt"},{"\u2022 date": "abs-guide.txt"},{"\u2022 dc": "abs-guide.txt"},{"\u2022 dd": "abs-guide.txt"},{"\u2022 debugfs": "abs-guide.txt"},{"\u2022 declare": "abs-guide.txt"},{"\u2022 depmod": "abs-guide.txt"},{"\u2022 df": "abs-guide.txt"},{"\u2022 dialog": "abs-guide.txt"},{"\u2022 diff": "abs-guide.txt"},{"\u2022 diff3": "abs-guide.txt"},{"\u2022 diffstat": "abs-guide.txt"},{"\u2022 dig": "abs-guide.txt"},{"\u2022 dirname": "abs-guide.txt"},{"\u2022 dirs": "abs-guide.txt"},{"\u2022 disown": "abs-guide.txt"},{"\u2022 dmesg": "abs-guide.txt"},{"\u2022 doexec": "abs-guide.txt"},{"\u2022 dos2unix": "abs-guide.txt"},{"\u2022 du": "abs-guide.txt"},{"\u2022 dump": "abs-guide.txt"},{"\u2022 dumpe2fs": "abs-guide.txt"},{"\u2022 e2fsck": "abs-guide.txt"},{"\u2022 echo": "abs-guide.txt"},{"\u2022 egrep": "abs-guide.txt"},{"\u2022 enable": "abs-guide.txt"},{"\u2022 enscript": "abs-guide.txt"},{"\u2022 env": "abs-guide.txt"},{"\u2022 eqn": "abs-guide.txt"},{"\u2022 eval": "abs-guide.txt"},{"\u2022 exec": "abs-guide.txt"},{"\u2022 exit (Related topic: exit status)": "abs-guide.txt"},{"\u2022 expand": "abs-guide.txt"},{"\u2022 export": "abs-guide.txt"},{"\u2022 expr": "abs-guide.txt"},{"\u2022 factor": "abs-guide.txt"},{"\u2022 false": "abs-guide.txt"},{"\u2022 fdformat": "abs-guide.txt"},{"\u2022 fdisk": "abs-guide.txt"},{"\u2022 fg": "abs-guide.txt"},{"\u2022 fgrep": "abs-guide.txt"},{"\u2022 file": "abs-guide.txt"},{"Part 4. Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"174": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"\u2022 find": "abs-guide.txt"},{"\u2022 finger": "abs-guide.txt"},{"\u2022 flex": "abs-guide.txt"},{"\u2022 flock": "abs-guide.txt"},{"\u2022 fmt": "abs-guide.txt"},{"\u2022 fold": "abs-guide.txt"},{"\u2022 free": "abs-guide.txt"},{"\u2022 fsck": "abs-guide.txt"},{"\u2022 ftp": "abs-guide.txt"},{"\u2022 fuser": "abs-guide.txt"},{"\u2022 getfacl": "abs-guide.txt"},{"\u2022 getopt": "abs-guide.txt"},{"\u2022 getopts": "abs-guide.txt"},{"\u2022 gettext": "abs-guide.txt"},{"\u2022 getty": "abs-guide.txt"},{"\u2022 gnome-mount": "abs-guide.txt"},{"\u2022 grep": "abs-guide.txt"},{"\u2022 groff": "abs-guide.txt"},{"\u2022 groupmod": "abs-guide.txt"},{"\u2022 groups (Related topic: the $GROUPS variable)": "abs-guide.txt"},{"\u2022 gs": "abs-guide.txt"},{"\u2022 gzip": "abs-guide.txt"},{"\u2022 halt": "abs-guide.txt"},{"\u2022 hash": "abs-guide.txt"},{"\u2022 hdparm": "abs-guide.txt"},{"\u2022 head": "abs-guide.txt"},{"\u2022 help": "abs-guide.txt"},{"\u2022 hexdump": "abs-guide.txt"},{"\u2022 host": "abs-guide.txt"},{"\u2022 hostid": "abs-guide.txt"},{"\u2022 hostname (Related topic: the $HOSTNAME variable)": "abs-guide.txt"},{"\u2022 hwclock": "abs-guide.txt"},{"\u2022 iconv": "abs-guide.txt"},{"\u2022 id (Related topic: the $UID variable)": "abs-guide.txt"},{"\u2022 ifconfig": "abs-guide.txt"},{"\u2022 info": "abs-guide.txt"},{"\u2022 infocmp": "abs-guide.txt"},{"\u2022 init": "abs-guide.txt"},{"\u2022 insmod": "abs-guide.txt"},{"\u2022 install": "abs-guide.txt"},{"\u2022 ip": "abs-guide.txt"},{"\u2022 ipcalc": "abs-guide.txt"},{"\u2022 iptables": "abs-guide.txt"},{"\u2022 iwconfig": "abs-guide.txt"},{"\u2022 jobs": "abs-guide.txt"},{"\u2022 join": "abs-guide.txt"},{"\u2022 jot": "abs-guide.txt"},{"\u2022 kill": "abs-guide.txt"},{"\u2022 killall": "abs-guide.txt"},{"\u2022 last": "abs-guide.txt"},{"\u2022 lastcomm": "abs-guide.txt"},{"Part 4. Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"175": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"\u2022 lastlog": "abs-guide.txt"},{"\u2022 ldd": "abs-guide.txt"},{"\u2022 less": "abs-guide.txt"},{"\u2022 let": "abs-guide.txt"},{"\u2022 lex": "abs-guide.txt"},{"\u2022 lid": "abs-guide.txt"},{"\u2022 ln": "abs-guide.txt"},{"\u2022 locate": "abs-guide.txt"},{"\u2022 lockfile": "abs-guide.txt"},{"\u2022 logger": "abs-guide.txt"},{"\u2022 logname": "abs-guide.txt"},{"\u2022 logout": "abs-guide.txt"},{"\u2022 logrotate": "abs-guide.txt"},{"\u2022 look": "abs-guide.txt"},{"\u2022 losetup": "abs-guide.txt"},{"\u2022 lp": "abs-guide.txt"},{"\u2022 ls": "abs-guide.txt"},{"\u2022 lsdev": "abs-guide.txt"},{"\u2022 lsmod": "abs-guide.txt"},{"\u2022 lsof": "abs-guide.txt"},{"\u2022 lspci": "abs-guide.txt"},{"\u2022 lsusb": "abs-guide.txt"},{"\u2022 ltrace": "abs-guide.txt"},{"\u2022 lynx": "abs-guide.txt"},{"\u2022 lzcat": "abs-guide.txt"},{"\u2022 lzma": "abs-guide.txt"},{"\u2022 m4": "abs-guide.txt"},{"\u2022 mail": "abs-guide.txt"},{"\u2022 mailstats": "abs-guide.txt"},{"\u2022 mailto": "abs-guide.txt"},{"\u2022 make": "abs-guide.txt"},{"\u2022 MAKEDEV": "abs-guide.txt"},{"\u2022 man": "abs-guide.txt"},{"\u2022 mapfile": "abs-guide.txt"},{"\u2022 mcookie": "abs-guide.txt"},{"\u2022 md5sum": "abs-guide.txt"},{"\u2022 merge": "abs-guide.txt"},{"\u2022 mesg": "abs-guide.txt"},{"\u2022 mimencode": "abs-guide.txt"},{"\u2022 mkbootdisk": "abs-guide.txt"},{"\u2022 mkdir": "abs-guide.txt"},{"\u2022 mkdosfs": "abs-guide.txt"},{"\u2022 mke2fs": "abs-guide.txt"},{"\u2022 mkfifo": "abs-guide.txt"},{"\u2022 mkisofs": "abs-guide.txt"},{"\u2022 mknod": "abs-guide.txt"},{"\u2022 mkswap": "abs-guide.txt"},{"\u2022 mktemp": "abs-guide.txt"},{"\u2022 mmencode": "abs-guide.txt"},{"\u2022 modinfo": "abs-guide.txt"},{"\u2022 modprobe": "abs-guide.txt"},{"Part 4. Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"176": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"\u2022 more": "abs-guide.txt"},{"\u2022 mount": "abs-guide.txt"},{"\u2022 msgfmt": "abs-guide.txt"},{"\u2022 mv": "abs-guide.txt"},{"\u2022 nc": "abs-guide.txt"},{"\u2022 netconfig": "abs-guide.txt"},{"\u2022 netstat": "abs-guide.txt"},{"\u2022 newgrp": "abs-guide.txt"},{"\u2022 nice": "abs-guide.txt"},{"\u2022 nl": "abs-guide.txt"},{"\u2022 nm": "abs-guide.txt"},{"\u2022 nmap": "abs-guide.txt"},{"\u2022 nohup": "abs-guide.txt"},{"\u2022 nslookup": "abs-guide.txt"},{"\u2022 objdump": "abs-guide.txt"},{"\u2022 od": "abs-guide.txt"},{"\u2022 openssl": "abs-guide.txt"},{"\u2022 passwd": "abs-guide.txt"},{"\u2022 paste": "abs-guide.txt"},{"\u2022 patch (Related topic: diff)": "abs-guide.txt"},{"\u2022 pathchk": "abs-guide.txt"},{"\u2022 pax": "abs-guide.txt"},{"\u2022 pgrep": "abs-guide.txt"},{"\u2022 pidof": "abs-guide.txt"},{"\u2022 ping": "abs-guide.txt"},{"\u2022 pkill": "abs-guide.txt"},{"\u2022 popd": "abs-guide.txt"},{"\u2022 pr": "abs-guide.txt"},{"\u2022 printenv": "abs-guide.txt"},{"\u2022 printf": "abs-guide.txt"},{"\u2022 procinfo": "abs-guide.txt"},{"\u2022 ps": "abs-guide.txt"},{"\u2022 pstree": "abs-guide.txt"},{"\u2022 ptx": "abs-guide.txt"},{"\u2022 pushd": "abs-guide.txt"},{"\u2022 pwd (Related topic: the $PWD variable)": "abs-guide.txt"},{"\u2022 quota": "abs-guide.txt"},{"\u2022 rcp": "abs-guide.txt"},{"\u2022 rdev": "abs-guide.txt"},{"\u2022 rdist": "abs-guide.txt"},{"\u2022 read": "abs-guide.txt"},{"\u2022 readelf": "abs-guide.txt"},{"\u2022 readlink": "abs-guide.txt"},{"\u2022 readonly": "abs-guide.txt"},{"\u2022 reboot": "abs-guide.txt"},{"\u2022 recode": "abs-guide.txt"},{"\u2022 renice": "abs-guide.txt"},{"\u2022 reset": "abs-guide.txt"},{"\u2022 resize": "abs-guide.txt"},{"\u2022 restore": "abs-guide.txt"},{"\u2022 rev": "abs-guide.txt"},{"Part 4. Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"177": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"\u2022 rlogin": "abs-guide.txt"},{"\u2022 rm": "abs-guide.txt"},{"\u2022 rmdir": "abs-guide.txt"},{"\u2022 rmmod": "abs-guide.txt"},{"\u2022 route": "abs-guide.txt"},{"\u2022 rpm": "abs-guide.txt"},{"\u2022 rpm2cpio": "abs-guide.txt"},{"\u2022 rsh": "abs-guide.txt"},{"\u2022 rsync": "abs-guide.txt"},{"\u2022 runlevel": "abs-guide.txt"},{"\u2022 run-parts": "abs-guide.txt"},{"\u2022 rx": "abs-guide.txt"},{"\u2022 rz": "abs-guide.txt"},{"\u2022 sar": "abs-guide.txt"},{"\u2022 scp": "abs-guide.txt"},{"\u2022 script": "abs-guide.txt"},{"\u2022 sdiff": "abs-guide.txt"},{"\u2022 sed": "abs-guide.txt"},{"\u2022 seq": "abs-guide.txt"},{"\u2022 service": "abs-guide.txt"},{"\u2022 set": "abs-guide.txt"},{"\u2022 setfacl": "abs-guide.txt"},{"\u2022 setquota": "abs-guide.txt"},{"\u2022 setserial": "abs-guide.txt"},{"\u2022 setterm": "abs-guide.txt"},{"\u2022 sha1sum": "abs-guide.txt"},{"\u2022 shar": "abs-guide.txt"},{"\u2022 shopt": "abs-guide.txt"},{"\u2022 shred": "abs-guide.txt"},{"\u2022 shutdown": "abs-guide.txt"},{"\u2022 size": "abs-guide.txt"},{"\u2022 skill": "abs-guide.txt"},{"\u2022 sleep": "abs-guide.txt"},{"\u2022 slocate": "abs-guide.txt"},{"\u2022 snice": "abs-guide.txt"},{"\u2022 sort": "abs-guide.txt"},{"\u2022 source": "abs-guide.txt"},{"\u2022 sox": "abs-guide.txt"},{"\u2022 split": "abs-guide.txt"},{"\u2022 sq": "abs-guide.txt"},{"\u2022 ssh": "abs-guide.txt"},{"\u2022 stat": "abs-guide.txt"},{"\u2022 strace": "abs-guide.txt"},{"\u2022 strings": "abs-guide.txt"},{"\u2022 strip": "abs-guide.txt"},{"\u2022 stty": "abs-guide.txt"},{"\u2022 su": "abs-guide.txt"},{"\u2022 sudo": "abs-guide.txt"},{"\u2022 sum": "abs-guide.txt"},{"\u2022 suspend": "abs-guide.txt"},{"\u2022 swapoff": "abs-guide.txt"},{"Part 4. Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"178": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"\u2022 swapon": "abs-guide.txt"},{"\u2022 sx": "abs-guide.txt"},{"\u2022 sync": "abs-guide.txt"},{"\u2022 sz": "abs-guide.txt"},{"\u2022 tac": "abs-guide.txt"},{"\u2022 tail": "abs-guide.txt"},{"\u2022 tar": "abs-guide.txt"},{"\u2022 tbl": "abs-guide.txt"},{"\u2022 tcpdump": "abs-guide.txt"},{"\u2022 tee": "abs-guide.txt"},{"\u2022 telinit": "abs-guide.txt"},{"\u2022 telnet": "abs-guide.txt"},{"\u2022 Tex": "abs-guide.txt"},{"\u2022 texexec": "abs-guide.txt"},{"\u2022 time": "abs-guide.txt"},{"\u2022 times": "abs-guide.txt"},{"\u2022 tmpwatch": "abs-guide.txt"},{"\u2022 top": "abs-guide.txt"},{"\u2022 touch": "abs-guide.txt"},{"\u2022 tput": "abs-guide.txt"},{"\u2022 tr": "abs-guide.txt"},{"\u2022 traceroute": "abs-guide.txt"},{"\u2022 true": "abs-guide.txt"},{"\u2022 tset": "abs-guide.txt"},{"\u2022 tsort": "abs-guide.txt"},{"\u2022 tty": "abs-guide.txt"},{"\u2022 tune2fs": "abs-guide.txt"},{"\u2022 type": "abs-guide.txt"},{"\u2022 typeset": "abs-guide.txt"},{"\u2022 ulimit": "abs-guide.txt"},{"\u2022 umask": "abs-guide.txt"},{"\u2022 umount": "abs-guide.txt"},{"\u2022 uname": "abs-guide.txt"},{"\u2022 unarc": "abs-guide.txt"},{"\u2022 unarj": "abs-guide.txt"},{"\u2022 uncompress": "abs-guide.txt"},{"\u2022 unexpand": "abs-guide.txt"},{"\u2022 uniq": "abs-guide.txt"},{"\u2022 units": "abs-guide.txt"},{"\u2022 unlzma": "abs-guide.txt"},{"\u2022 unrar": "abs-guide.txt"},{"\u2022 unset": "abs-guide.txt"},{"\u2022 unsq": "abs-guide.txt"},{"\u2022 unzip": "abs-guide.txt"},{"\u2022 uptime": "abs-guide.txt"},{"\u2022 usbmodules": "abs-guide.txt"},{"\u2022 useradd": "abs-guide.txt"},{"\u2022 userdel": "abs-guide.txt"},{"\u2022 usermod": "abs-guide.txt"},{"\u2022 users": "abs-guide.txt"},{"\u2022 usleep": "abs-guide.txt"},{"Part 4. Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"179": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"\u2022 uucp": "abs-guide.txt"},{"\u2022 uudecode": "abs-guide.txt"},{"\u2022 uuencode": "abs-guide.txt"},{"\u2022 uux": "abs-guide.txt"},{"\u2022 vacation": "abs-guide.txt"},{"\u2022 vdir": "abs-guide.txt"},{"\u2022 vmstat": "abs-guide.txt"},{"\u2022 vrfy": "abs-guide.txt"},{"\u2022w": "abs-guide.txt"},{"\u2022 wait": "abs-guide.txt"},{"\u2022 wall": "abs-guide.txt"},{"\u2022 watch": "abs-guide.txt"},{"\u2022 wc": "abs-guide.txt"},{"\u2022 wget": "abs-guide.txt"},{"\u2022 whatis": "abs-guide.txt"},{"\u2022 whereis": "abs-guide.txt"},{"\u2022 which": "abs-guide.txt"},{"\u2022 who": "abs-guide.txt"},{"\u2022 whoami": "abs-guide.txt"},{"\u2022 whois": "abs-guide.txt"},{"\u2022 write": "abs-guide.txt"},{"\u2022 xargs": "abs-guide.txt"},{"\u2022 xrandr": "abs-guide.txt"},{"\u2022 xz": "abs-guide.txt"},{"\u2022 yacc": "abs-guide.txt"},{"\u2022 yes": "abs-guide.txt"},{"\u2022 zcat": "abs-guide.txt"},{"\u2022 zdiff": "abs-guide.txt"},{"\u2022 zdump": "abs-guide.txt"},{"\u2022 zegrep": "abs-guide.txt"},{"\u2022 zfgrep": "abs-guide.txt"},{"\u2022 zgrep": "abs-guide.txt"},{"\u2022 zip": "abs-guide.txt"},{"Table of Contents": "abs-guide.txt"},{"15. Internal Commands and Builtins": "abs-guide.txt"},{"15.1. Job Control Commands": "abs-guide.txt"},{"16. External Filters, Programs and Commands": "abs-guide.txt"},{"16.1. Basic Commands": "abs-guide.txt"},{"16.2. Complex Commands": "abs-guide.txt"},{"16.3. Time / Date Commands": "abs-guide.txt"},{"16.4. Text Processing Commands": "abs-guide.txt"},{"16.5. File and Archiving Commands": "abs-guide.txt"},{"16.6. Communications Commands": "abs-guide.txt"},{"16.7. Terminal Control Commands": "abs-guide.txt"},{"16.8. Math Commands": "abs-guide.txt"},{"16.9. Miscellaneous Commands": "abs-guide.txt"},{"17. System and Administrative Commands": "abs-guide.txt"},{"17.1. Analyzing a System Script": "abs-guide.txt"},{"": "abs-guide.txt"},{"Part 4. Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"180": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fChapter 15. Internal Commands and Builtins": "abs-guide.txt"},{"A builtin is a command contained within the Bash tool set, literally built in. This is either for performance": "abs-guide.txt"},{"reasons -- builtins execute faster than external commands, which usually require forking off [58] a separate": "abs-guide.txt"},{"process -- or because a particular builtin needs direct access to the shell internals.": "abs-guide.txt"},{"": "abs-guide.txt"},{"When a command or the shell itself initiates (or spawns) a new subprocess to carry out a task, this is called": "abs-guide.txt"},{"forking. This new process is the child, and the process that forked it off is the parent. While the child": "abs-guide.txt"},{"process is doing its work, the parent process is still executing.": "abs-guide.txt"},{"Note that while a parent process gets the process ID of the child process, and can thus pass arguments to it,": "abs-guide.txt"},{"the reverse is not true. This can create problems that are subtle and hard to track down.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 15-1. A script that spawns multiple instances of itself": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# spawn.sh": "abs-guide.txt"},{"": "abs-guide.txt"},{"PIDS=$(pidof sh $0) # Process IDs of the various instances of this script.": "abs-guide.txt"},{"P_array=( $PIDS )": "abs-guide.txt"},{"# Put them in an array (why?).": "abs-guide.txt"},{"echo $PIDS": "abs-guide.txt"},{"# Show process IDs of parent and child processes.": "abs-guide.txt"},{"let \"instances = ${#P_array[*]} - 1\" # Count elements, less 1.": "abs-guide.txt"},{"# Why subtract 1?": "abs-guide.txt"},{"echo \"$instances instance(s) of this script running.\"": "abs-guide.txt"},{"echo \"[Hit Ctl-C to exit.]\"; echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"sleep 1": "abs-guide.txt"},{"sh $0": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Wait.": "abs-guide.txt"},{"# Play it again, Sam.": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Not necessary; script will never get to here.": "abs-guide.txt"},{"# Why not?": "abs-guide.txt"},{"": "abs-guide.txt"},{"# After exiting with a Ctl-C,": "abs-guide.txt"},{"#+ do all the spawned instances of the script die?": "abs-guide.txt"},{"# If so, why?": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Note:": "abs-guide.txt"},{"---Be careful not to run this script too long.": "abs-guide.txt"},{"It will eventually eat up too many system resources.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Is having a script spawn multiple instances of itself": "abs-guide.txt"},{"#+ an advisable scripting technique.": "abs-guide.txt"},{"# Why or why not?": "abs-guide.txt"},{"": "abs-guide.txt"},{"Generally, a Bash builtin does not fork a subprocess when it executes within a script. An external system": "abs-guide.txt"},{"command or filter in a script usually will fork a subprocess.": "abs-guide.txt"},{"A builtin may be a synonym to a system command of the same name, but Bash reimplements it internally. For": "abs-guide.txt"},{"example, the Bash echo command is not the same as /bin/echo, although their behavior is almost": "abs-guide.txt"},{"identical.": "abs-guide.txt"},{"Chapter 15. Internal Commands and Builtins": "abs-guide.txt"},{"": "abs-guide.txt"},{"181": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"echo \"This line uses the \\\"echo\\\" builtin.\"": "abs-guide.txt"},{"/bin/echo \"This line uses the /bin/echo system command.\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"A keyword is a reserved word, token or operator. Keywords have a special meaning to the shell, and indeed": "abs-guide.txt"},{"are the building blocks of the shell's syntax. As examples, for, while, do, and ! are keywords. Similar to a": "abs-guide.txt"},{"builtin, a keyword is hard-coded into Bash, but unlike a builtin, a keyword is not in itself a command, but a": "abs-guide.txt"},{"subunit of a command construct. [59]": "abs-guide.txt"},{"I/O": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"prints (to stdout) an expression or variable (see Example 4-1).": "abs-guide.txt"},{"echo Hello": "abs-guide.txt"},{"echo $a": "abs-guide.txt"},{"": "abs-guide.txt"},{"An echo requires the -e option to print escaped characters. See Example 5-2.": "abs-guide.txt"},{"Normally, each echo command prints a terminal newline, but the -n option suppresses this.": "abs-guide.txt"},{"": "abs-guide.txt"},{"An echo can be used to feed a sequence of commands down a pipe.": "abs-guide.txt"},{"if echo \"$VAR\" | grep -q txt": "abs-guide.txt"},{"# if [[ $VAR = *txt* ]]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"$VAR contains the substring sequence \\\"txt\\\"\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"An echo, in combination with command substitution can set a variable.": "abs-guide.txt"},{"a=`echo \"HELLO\" | tr A-Z a-z`": "abs-guide.txt"},{"See also Example 16-22, Example 16-3, Example 16-47, and Example 16-48.": "abs-guide.txt"},{"Be aware that echo `command` deletes any linefeeds that the output of command generates.": "abs-guide.txt"},{"The $IFS (internal field separator) variable normally contains \\n (linefeed) as one of its set of": "abs-guide.txt"},{"whitespace characters. Bash therefore splits the output of command at linefeeds into arguments to": "abs-guide.txt"},{"echo. Then echo outputs these arguments, separated by spaces.": "abs-guide.txt"},{"bash$ ls -l /usr/share/apps/kjezz/sounds": "abs-guide.txt"},{"-rw-r--r-1 root": "abs-guide.txt"},{"root": "abs-guide.txt"},{"1407 Nov 7 2000 reflect.au": "abs-guide.txt"},{"-rw-r--r-1 root": "abs-guide.txt"},{"root": "abs-guide.txt"},{"362 Nov 7 2000 seconds.au": "abs-guide.txt"},{"": "abs-guide.txt"},{"bash$ echo `ls -l /usr/share/apps/kjezz/sounds`": "abs-guide.txt"},{"total 40 -rw-r--r-- 1 root root 716 Nov 7 2000 reflect.au -rw-r--r-- 1 root root ...": "abs-guide.txt"},{"": "abs-guide.txt"},{"So, how can we embed a linefeed within an echoed character string?": "abs-guide.txt"},{"# Embedding a linefeed?": "abs-guide.txt"},{"echo \"Why doesn't this string \\n split on two lines?\"": "abs-guide.txt"},{"# Doesn't split.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 15. Internal Commands and Builtins": "abs-guide.txt"},{"": "abs-guide.txt"},{"182": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# Let's try something else.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo $\"A line of text containing": "abs-guide.txt"},{"a linefeed.\"": "abs-guide.txt"},{"# Prints as two distinct lines (embedded linefeed).": "abs-guide.txt"},{"# But, is the \"$\" variable prefix really necessary?": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"This string splits": "abs-guide.txt"},{"on two lines.\"": "abs-guide.txt"},{"# No, the \"$\" is not needed.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"---------------\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo -n $\"Another line of text containing": "abs-guide.txt"},{"a linefeed.\"": "abs-guide.txt"},{"# Prints as two distinct lines (embedded linefeed).": "abs-guide.txt"},{"# Even the -n option fails to suppress the linefeed here.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"---------------\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"# However, the following doesn't work as expected.": "abs-guide.txt"},{"# Why not? Hint: Assignment to a variable.": "abs-guide.txt"},{"string1=$\"Yet another line of text containing": "abs-guide.txt"},{"a linefeed (maybe).\"": "abs-guide.txt"},{"echo $string1": "abs-guide.txt"},{"# Yet another line of text containing a linefeed (maybe).": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^": "abs-guide.txt"},{"# Linefeed becomes a space.": "abs-guide.txt"},{"# Thanks, Steve Parker, for pointing this out.": "abs-guide.txt"},{"": "abs-guide.txt"},{"This command is a shell builtin, and not the same as /bin/echo, although its": "abs-guide.txt"},{"behavior is similar.": "abs-guide.txt"},{"bash$ type -a echo": "abs-guide.txt"},{"echo is a shell builtin": "abs-guide.txt"},{"echo is /bin/echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"printf": "abs-guide.txt"},{"The printf, formatted print, command is an enhanced echo. It is a limited variant of the C language": "abs-guide.txt"},{"printf() library function, and its syntax is somewhat different.": "abs-guide.txt"},{"printf format-string... parameter...": "abs-guide.txt"},{"This is the Bash builtin version of the /bin/printf or /usr/bin/printf command. See the": "abs-guide.txt"},{"printf manpage (of the system command) for in-depth coverage.": "abs-guide.txt"},{"Chapter 15. Internal Commands and Builtins": "abs-guide.txt"},{"": "abs-guide.txt"},{"183": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"Older versions of Bash may not support printf.": "abs-guide.txt"},{"Example 15-2. printf in action": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# printf demo": "abs-guide.txt"},{"declare -r PI=3.14159265358979": "abs-guide.txt"},{"declare -r DecimalConstant=31373": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Read-only variable, i.e., a constant.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Message1=\"Greetings,\"": "abs-guide.txt"},{"Message2=\"Earthling.\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"printf \"Pi to 2 decimal places = %1.2f\" $PI": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"printf \"Pi to 9 decimal places = %1.9f\" $PI": "abs-guide.txt"},{"": "abs-guide.txt"},{"# It even rounds off correctly.": "abs-guide.txt"},{"": "abs-guide.txt"},{"printf \"\\n\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Prints a line feed,": "abs-guide.txt"},{"# Equivalent to 'echo' . . .": "abs-guide.txt"},{"": "abs-guide.txt"},{"printf \"Constant = \\t%d\\n\" $DecimalConstant": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Inserts tab (\\t).": "abs-guide.txt"},{"": "abs-guide.txt"},{"printf \"%s %s \\n\" $Message1 $Message2": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"# ==========================================#": "abs-guide.txt"},{"# Simulation of C function, sprintf().": "abs-guide.txt"},{"# Loading a variable with a formatted string.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"Pi12=$(printf \"%1.12f\" $PI)": "abs-guide.txt"},{"echo \"Pi to 12 decimal places = $Pi12\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Roundoff error!": "abs-guide.txt"},{"": "abs-guide.txt"},{"Msg=`printf \"%s %s \\n\" $Message1 $Message2`": "abs-guide.txt"},{"echo $Msg; echo $Msg": "abs-guide.txt"},{"# As it happens, the 'sprintf' function can now be accessed": "abs-guide.txt"},{"#+ as a loadable module to Bash,": "abs-guide.txt"},{"#+ but this is not portable.": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Formatting error messages is a useful application of printf": "abs-guide.txt"},{"E_BADDIR=85": "abs-guide.txt"},{"var=nonexistent_directory": "abs-guide.txt"},{"error()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"printf \"$@\" >&2": "abs-guide.txt"},{"# Formats positional params passed, and sends them to stderr.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"exit $E_BADDIR": "abs-guide.txt"},{"}": "abs-guide.txt"},{"cd $var || error $\"Can't cd to %s.\" \"$var\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 15. Internal Commands and Builtins": "abs-guide.txt"},{"": "abs-guide.txt"},{"184": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# Thanks, S.C.": "abs-guide.txt"},{"": "abs-guide.txt"},{"See also Example 36-17.": "abs-guide.txt"},{"read": "abs-guide.txt"},{"\"Reads\" the value of a variable from stdin, that is, interactively fetches input from the keyboard.": "abs-guide.txt"},{"The -a option lets read get array variables (see Example 27-6).": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 15-3. Variable assignment, using read": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# \"Reading\" variables.": "abs-guide.txt"},{"echo -n \"Enter the value of variable 'var1': \"": "abs-guide.txt"},{"# The -n option to echo suppresses newline.": "abs-guide.txt"},{"read var1": "abs-guide.txt"},{"# Note no '$' in front of var1, since it is being set.": "abs-guide.txt"},{"echo \"var1 = $var1\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"# A single 'read' statement can set multiple variables.": "abs-guide.txt"},{"echo -n \"Enter the values of variables 'var2' and 'var3' \"": "abs-guide.txt"},{"echo =n \"(separated by a space or tab): \"": "abs-guide.txt"},{"read var2 var3": "abs-guide.txt"},{"echo \"var2 = $var2": "abs-guide.txt"},{"var3 = $var3\"": "abs-guide.txt"},{"# If you input only one value,": "abs-guide.txt"},{"#+ the other variable(s) will remain unset (null).": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"A read without an associated variable assigns its input to the dedicated variable $REPLY.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 15-4. What happens when read has no variable": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# read-novar.sh": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"# -------------------------- #": "abs-guide.txt"},{"echo -n \"Enter a value: \"": "abs-guide.txt"},{"read var": "abs-guide.txt"},{"echo \"\\\"var\\\" = \"$var\"\"": "abs-guide.txt"},{"# Everything as expected here.": "abs-guide.txt"},{"# -------------------------- #": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"# ------------------------------------------------------------------- #": "abs-guide.txt"},{"echo -n \"Enter another value: \"": "abs-guide.txt"},{"read": "abs-guide.txt"},{"# No variable supplied for 'read', therefore...": "abs-guide.txt"},{"#+ Input to 'read' assigned to default variable, $REPLY.": "abs-guide.txt"},{"var=\"$REPLY\"": "abs-guide.txt"},{"echo \"\\\"var\\\" = \"$var\"\"": "abs-guide.txt"},{"# This is equivalent to the first code block.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 15. Internal Commands and Builtins": "abs-guide.txt"},{"": "abs-guide.txt"},{"185": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# ------------------------------------------------------------------- #": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"=========================\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"# This example is similar to the \"reply.sh\" script.": "abs-guide.txt"},{"# However, this one shows that $REPLY is available": "abs-guide.txt"},{"#+ even after a 'read' to a variable in the conventional way.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# ================================================================= #": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"In some instances, you might wish to discard the first value read.": "abs-guide.txt"},{"In such cases, simply ignore the $REPLY variable.": "abs-guide.txt"},{"": "abs-guide.txt"},{"{ # Code block.": "abs-guide.txt"},{"read": "abs-guide.txt"},{"read line2": "abs-guide.txt"},{"} <$0": "abs-guide.txt"},{"echo \"Line 2 of": "abs-guide.txt"},{"echo \"$line2\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Line 1, to be discarded.": "abs-guide.txt"},{"# Line 2, saved in variable.": "abs-guide.txt"},{"this script is:\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# read-novar.sh": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#!/bin/bash line discarded.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# See also the soundcard-on.sh script.": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Normally, inputting a \\ suppresses a newline during input to a read. The -r option causes an": "abs-guide.txt"},{"inputted \\ to be interpreted literally.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 15-5. Multi-line input to read": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"Enter a string terminated by a \\\\, then press <ENTER>.\"": "abs-guide.txt"},{"echo \"Then, enter a second string (no \\\\ this time), and again press <ENTER>.\"": "abs-guide.txt"},{"read var1": "abs-guide.txt"},{"": "abs-guide.txt"},{"# The \"\\\" suppresses the newline, when reading $var1.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"first line \\": "abs-guide.txt"},{"#": "abs-guide.txt"},{"second line": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo \"var1 = $var1\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"var1 = first line second line": "abs-guide.txt"},{"# For each line terminated by a \"\\\"": "abs-guide.txt"},{"#+ you get a prompt on the next line to continue feeding characters into var1.": "abs-guide.txt"},{"echo; echo": "abs-guide.txt"},{"echo \"Enter another string terminated by a \\\\ , then press <ENTER>.\"": "abs-guide.txt"},{"read -r var2 # The -r option causes the \"\\\" to be read literally.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"first line \\": "abs-guide.txt"},{"echo \"var2 = $var2\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"var2 = first line \\": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 15. Internal Commands and Builtins": "abs-guide.txt"},{"": "abs-guide.txt"},{"186": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# Data entry terminates with the first <ENTER>.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"The read command has some interesting options that permit echoing a prompt and even reading": "abs-guide.txt"},{"keystrokes without hitting ENTER.": "abs-guide.txt"},{"# Read a keypress without hitting ENTER.": "abs-guide.txt"},{"read -s -n1 -p \"Hit a key \" keypress": "abs-guide.txt"},{"echo; echo \"Keypress was \"\\\"$keypress\\\"\".\"": "abs-guide.txt"},{"# -s option means do not echo input.": "abs-guide.txt"},{"# -n N option means accept only N characters of input.": "abs-guide.txt"},{"# -p option means echo the following prompt before reading input.": "abs-guide.txt"},{"# Using these options is tricky, since they need to be in the correct order.": "abs-guide.txt"},{"": "abs-guide.txt"},{"The -n option to read also allows detection of the arrow keys and certain of the other unusual keys.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 15-6. Detecting the arrow keys": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# arrow-detect.sh: Detects the arrow keys, and a few more.": "abs-guide.txt"},{"# Thank you, Sandro Magi, for showing me how.": "abs-guide.txt"},{"# -------------------------------------------# Character codes generated by the keypresses.": "abs-guide.txt"},{"arrowup='\\[A'": "abs-guide.txt"},{"arrowdown='\\[B'": "abs-guide.txt"},{"arrowrt='\\[C'": "abs-guide.txt"},{"arrowleft='\\[D'": "abs-guide.txt"},{"insert='\\[2'": "abs-guide.txt"},{"delete='\\[3'": "abs-guide.txt"},{"# -------------------------------------------SUCCESS=0": "abs-guide.txt"},{"OTHER=65": "abs-guide.txt"},{"echo -n \"Press a key... \"": "abs-guide.txt"},{"# May need to also press ENTER if a key not listed above pressed.": "abs-guide.txt"},{"read -n3 key": "abs-guide.txt"},{"# Read 3 characters.": "abs-guide.txt"},{"echo -n \"$key\" | grep \"$arrowup\"": "abs-guide.txt"},{"if [ \"$?\" -eq $SUCCESS ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Up-arrow key pressed.\"": "abs-guide.txt"},{"exit $SUCCESS": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"#Check if character code detected.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo -n \"$key\" | grep \"$arrowdown\"": "abs-guide.txt"},{"if [ \"$?\" -eq $SUCCESS ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Down-arrow key pressed.\"": "abs-guide.txt"},{"exit $SUCCESS": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 15. Internal Commands and Builtins": "abs-guide.txt"},{"": "abs-guide.txt"},{"187": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"echo -n \"$key\" | grep \"$arrowrt\"": "abs-guide.txt"},{"if [ \"$?\" -eq $SUCCESS ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Right-arrow key pressed.\"": "abs-guide.txt"},{"exit $SUCCESS": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"echo -n \"$key\" | grep \"$arrowleft\"": "abs-guide.txt"},{"if [ \"$?\" -eq $SUCCESS ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Left-arrow key pressed.\"": "abs-guide.txt"},{"exit $SUCCESS": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"echo -n \"$key\" | grep \"$insert\"": "abs-guide.txt"},{"if [ \"$?\" -eq $SUCCESS ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"\\\"Insert\\\" key pressed.\"": "abs-guide.txt"},{"exit $SUCCESS": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"echo -n \"$key\" | grep \"$delete\"": "abs-guide.txt"},{"if [ \"$?\" -eq $SUCCESS ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"\\\"Delete\\\" key pressed.\"": "abs-guide.txt"},{"exit $SUCCESS": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo \" Some other key pressed.\"": "abs-guide.txt"},{"exit $OTHER": "abs-guide.txt"},{"# ========================================= #": "abs-guide.txt"},{"# Mark Alexander came up with a simplified": "abs-guide.txt"},{"#+ version of the above script (Thank you!).": "abs-guide.txt"},{"# It eliminates the need for grep.": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"uparrow=$'\\x1b[A'": "abs-guide.txt"},{"downarrow=$'\\x1b[B'": "abs-guide.txt"},{"leftarrow=$'\\x1b[D'": "abs-guide.txt"},{"rightarrow=$'\\x1b[C'": "abs-guide.txt"},{"read -s -n3 -p \"Hit an arrow key: \" x": "abs-guide.txt"},{"case \"$x\" in": "abs-guide.txt"},{"$uparrow)": "abs-guide.txt"},{"echo \"You": "abs-guide.txt"},{";;": "abs-guide.txt"},{"$downarrow)": "abs-guide.txt"},{"echo \"You": "abs-guide.txt"},{";;": "abs-guide.txt"},{"$leftarrow)": "abs-guide.txt"},{"echo \"You": "abs-guide.txt"},{";;": "abs-guide.txt"},{"$rightarrow)": "abs-guide.txt"},{"echo \"You": "abs-guide.txt"},{";;": "abs-guide.txt"},{"": "abs-guide.txt"},{"pressed up-arrow\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"pressed down-arrow\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"pressed left-arrow\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"pressed right-arrow\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 15. Internal Commands and Builtins": "abs-guide.txt"},{"": "abs-guide.txt"},{"188": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"exit $?": "abs-guide.txt"},{"# ========================================= #": "abs-guide.txt"},{"# Antonio Macchi has a simpler alternative.": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"while true": "abs-guide.txt"},{"do": "abs-guide.txt"},{"read -sn1 a": "abs-guide.txt"},{"test \"$a\" == `echo -en \"\\e\"` || continue": "abs-guide.txt"},{"read -sn1 a": "abs-guide.txt"},{"test \"$a\" == \"[\" || continue": "abs-guide.txt"},{"read -sn1 a": "abs-guide.txt"},{"case \"$a\" in": "abs-guide.txt"},{"A) echo \"up\";;": "abs-guide.txt"},{"B) echo \"down\";;": "abs-guide.txt"},{"C) echo \"right\";;": "abs-guide.txt"},{"D) echo \"left\";;": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"done": "abs-guide.txt"},{"# ========================================= #": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Exercise:": "abs-guide.txt"},{"-------1) Add detection of the \"Home,\" \"End,\" \"PgUp,\" and \"PgDn\" keys.": "abs-guide.txt"},{"": "abs-guide.txt"},{"The -n option to read will not detect the ENTER (newline) key.": "abs-guide.txt"},{"The -t option to read permits timed input (see Example 9-4 and Example A-41).": "abs-guide.txt"},{"The -u option takes the file descriptor of the target file.": "abs-guide.txt"},{"": "abs-guide.txt"},{"The read command may also \"read\" its variable value from a file redirected to stdin. If the file": "abs-guide.txt"},{"contains more than one line, only the first line is assigned to the variable. If read has more than one": "abs-guide.txt"},{"parameter, then each of these variables gets assigned a successive whitespace-delineated string.": "abs-guide.txt"},{"Caution!": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 15-7. Using read with file redirection": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"read var1 <data-file": "abs-guide.txt"},{"echo \"var1 = $var1\"": "abs-guide.txt"},{"# var1 set to the entire first line of the input file \"data-file\"": "abs-guide.txt"},{"read var2 var3 <data-file": "abs-guide.txt"},{"echo \"var2 = $var2": "abs-guide.txt"},{"var3 = $var3\"": "abs-guide.txt"},{"# Note non-intuitive behavior of \"read\" here.": "abs-guide.txt"},{"# 1) Rewinds back to the beginning of input file.": "abs-guide.txt"},{"# 2) Each variable is now set to a corresponding string,": "abs-guide.txt"},{"#": "abs-guide.txt"},{"separated by whitespace, rather than to an entire line of text.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 15. Internal Commands and Builtins": "abs-guide.txt"},{"": "abs-guide.txt"},{"189": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# 3) The final variable gets the remainder of the line.": "abs-guide.txt"},{"# 4) If there are more variables to be set than whitespace-terminated strings": "abs-guide.txt"},{"#": "abs-guide.txt"},{"on the first line of the file, then the excess variables remain empty.": "abs-guide.txt"},{"echo \"------------------------------------------------\"": "abs-guide.txt"},{"# How to resolve the above problem with a loop:": "abs-guide.txt"},{"while read line": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo \"$line\"": "abs-guide.txt"},{"done <data-file": "abs-guide.txt"},{"# Thanks, Heiner Steven for pointing this out.": "abs-guide.txt"},{"echo \"------------------------------------------------\"": "abs-guide.txt"},{"# Use $IFS (Internal Field Separator variable) to split a line of input to": "abs-guide.txt"},{"# \"read\", if you do not want the default to be whitespace.": "abs-guide.txt"},{"echo \"List of all users:\"": "abs-guide.txt"},{"OIFS=$IFS; IFS=:": "abs-guide.txt"},{"# /etc/passwd uses \":\" for field separator.": "abs-guide.txt"},{"while read name passwd uid gid fullname ignore": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo \"$name ($fullname)\"": "abs-guide.txt"},{"done </etc/passwd": "abs-guide.txt"},{"# I/O redirection.": "abs-guide.txt"},{"IFS=$OIFS": "abs-guide.txt"},{"# Restore original $IFS.": "abs-guide.txt"},{"# This code snippet also by Heiner Steven.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Setting the $IFS variable within the loop itself": "abs-guide.txt"},{"#+ eliminates the need for storing the original $IFS": "abs-guide.txt"},{"#+ in a temporary variable.": "abs-guide.txt"},{"# Thanks, Dim Segebart, for pointing this out.": "abs-guide.txt"},{"echo \"------------------------------------------------\"": "abs-guide.txt"},{"echo \"List of all users:\"": "abs-guide.txt"},{"while IFS=: read name passwd uid gid fullname ignore": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo \"$name ($fullname)\"": "abs-guide.txt"},{"done </etc/passwd": "abs-guide.txt"},{"# I/O redirection.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"\\$IFS still $IFS\"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Piping output to a read, using echo to set variables will fail.": "abs-guide.txt"},{"Yet, piping the output of cat seems to work.": "abs-guide.txt"},{"": "abs-guide.txt"},{"cat file1 file2 |": "abs-guide.txt"},{"while read line": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo $line": "abs-guide.txt"},{"done": "abs-guide.txt"},{"": "abs-guide.txt"},{"However, as Bj\u00f6n Eriksson shows:": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 15. Internal Commands and Builtins": "abs-guide.txt"},{"": "abs-guide.txt"},{"190": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"Example 15-8. Problems reading from a pipe": "abs-guide.txt"},{"#!/bin/sh": "abs-guide.txt"},{"# readpipe.sh": "abs-guide.txt"},{"# This example contributed by Bjon Eriksson.": "abs-guide.txt"},{"### shopt -s lastpipe": "abs-guide.txt"},{"last=\"(null)\"": "abs-guide.txt"},{"cat $0 |": "abs-guide.txt"},{"while read line": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo \"{$line}\"": "abs-guide.txt"},{"last=$line": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"++++++++++++++++++++++\"": "abs-guide.txt"},{"printf \"\\nAll done, last: $last\\n\" # The output of this line": "abs-guide.txt"},{"#+ changes if you uncomment line 5.": "abs-guide.txt"},{"# (Bash, version -ge 4.2 required.)": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"# End of code.": "abs-guide.txt"},{"# (Partial) output of script follows.": "abs-guide.txt"},{"# The 'echo' supplies extra brackets.": "abs-guide.txt"},{"": "abs-guide.txt"},{"#############################################": "abs-guide.txt"},{"./readpipe.sh": "abs-guide.txt"},{"{#!/bin/sh}": "abs-guide.txt"},{"{last=\"(null)\"}": "abs-guide.txt"},{"{cat $0 |}": "abs-guide.txt"},{"{while read line}": "abs-guide.txt"},{"{do}": "abs-guide.txt"},{"{echo \"{$line}\"}": "abs-guide.txt"},{"{last=$line}": "abs-guide.txt"},{"{done}": "abs-guide.txt"},{"{printf \"nAll done, last: $lastn\"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"All done, last: (null)": "abs-guide.txt"},{"The variable (last) is set within the loop/subshell": "abs-guide.txt"},{"but its value does not persist outside the loop.": "abs-guide.txt"},{"": "abs-guide.txt"},{"The gendiff script, usually found in /usr/bin on many Linux distros, pipes the": "abs-guide.txt"},{"output of find to a while read construct.": "abs-guide.txt"},{"find $1 \\( -name \"*$2\" -o -name \".*$2\" \\) -print |": "abs-guide.txt"},{"while read f; do": "abs-guide.txt"},{". . .": "abs-guide.txt"},{"": "abs-guide.txt"},{"It is possible to paste text into the input field of a read (but not multiple lines!). See": "abs-guide.txt"},{"Example A-38.": "abs-guide.txt"},{"Filesystem": "abs-guide.txt"},{"cd": "abs-guide.txt"},{"Chapter 15. Internal Commands and Builtins": "abs-guide.txt"},{"": "abs-guide.txt"},{"191": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"The familiar cd change directory command finds use in scripts where execution of a command": "abs-guide.txt"},{"requires being in a specified directory.": "abs-guide.txt"},{"(cd /source/directory && tar cf - . ) | (cd /dest/directory && tar xpvf -)": "abs-guide.txt"},{"": "abs-guide.txt"},{"[from the previously cited example by Alan Cox]": "abs-guide.txt"},{"The -P (physical) option to cd causes it to ignore symbolic links.": "abs-guide.txt"},{"cd - changes to $OLDPWD, the previous working directory.": "abs-guide.txt"},{"": "abs-guide.txt"},{"The cd command does not function as expected when presented with two forward": "abs-guide.txt"},{"slashes.": "abs-guide.txt"},{"bash$ cd //": "abs-guide.txt"},{"bash$ pwd": "abs-guide.txt"},{"//": "abs-guide.txt"},{"": "abs-guide.txt"},{"The output should, of course, be /. This is a problem both from the command-line and": "abs-guide.txt"},{"in a script.": "abs-guide.txt"},{"pwd": "abs-guide.txt"},{"Print Working Directory. This gives the user's (or script's) current directory (see Example 15-9). The": "abs-guide.txt"},{"effect is identical to reading the value of the builtin variable $PWD.": "abs-guide.txt"},{"pushd, popd, dirs": "abs-guide.txt"},{"This command set is a mechanism for bookmarking working directories, a means of moving back and": "abs-guide.txt"},{"forth through directories in an orderly manner. A pushdown stack is used to keep track of directory": "abs-guide.txt"},{"names. Options allow various manipulations of the directory stack.": "abs-guide.txt"},{"pushd dir-name pushes the path dir-name onto the directory stack (to the top of the stack) and": "abs-guide.txt"},{"simultaneously changes the current working directory to dir-name": "abs-guide.txt"},{"popd removes (pops) the top directory path name off the directory stack and simultaneously changes": "abs-guide.txt"},{"the current working directory to the directory now at the top of the stack.": "abs-guide.txt"},{"dirs lists the contents of the directory stack (compare this with the $DIRSTACK variable). A": "abs-guide.txt"},{"successful pushd or popd will automatically invoke dirs.": "abs-guide.txt"},{"Scripts that require various changes to the current working directory without hard-coding the": "abs-guide.txt"},{"directory name changes can make good use of these commands. Note that the implicit $DIRSTACK": "abs-guide.txt"},{"array variable, accessible from within a script, holds the contents of the directory stack.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 15-9. Changing the current working directory": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"dir1=/usr/local": "abs-guide.txt"},{"dir2=/var/spool": "abs-guide.txt"},{"pushd $dir1": "abs-guide.txt"},{"# Will do an automatic 'dirs' (list directory stack to stdout).": "abs-guide.txt"},{"echo \"Now in directory `pwd`.\" # Uses back-quoted 'pwd'.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 15. Internal Commands and Builtins": "abs-guide.txt"},{"": "abs-guide.txt"},{"192": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# Now, do some stuff in directory 'dir1'.": "abs-guide.txt"},{"pushd $dir2": "abs-guide.txt"},{"echo \"Now in directory `pwd`.\"": "abs-guide.txt"},{"# Now, do some stuff in directory 'dir2'.": "abs-guide.txt"},{"echo \"The top entry in the DIRSTACK array is $DIRSTACK.\"": "abs-guide.txt"},{"popd": "abs-guide.txt"},{"echo \"Now back in directory `pwd`.\"": "abs-guide.txt"},{"# Now, do some more stuff in directory 'dir1'.": "abs-guide.txt"},{"popd": "abs-guide.txt"},{"echo \"Now back in original working directory `pwd`.\"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"# What happens if you don't 'popd' -- then exit the script?": "abs-guide.txt"},{"# Which directory do you end up in? Why?": "abs-guide.txt"},{"": "abs-guide.txt"},{"Variables": "abs-guide.txt"},{"let": "abs-guide.txt"},{"The let command carries out arithmetic operations on variables. [60] In many cases, it functions as a": "abs-guide.txt"},{"less complex version of expr.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 15-10. Letting let do arithmetic.": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"let a=11": "abs-guide.txt"},{"let a=a+5": "abs-guide.txt"},{"echo \"11 + 5 = $a\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Same as 'a=11'": "abs-guide.txt"},{"Equivalent to let \"a = a + 5\"": "abs-guide.txt"},{"(Double quotes and spaces make it more readable.)": "abs-guide.txt"},{"16": "abs-guide.txt"},{"": "abs-guide.txt"},{"let \"a <<= 3\"": "abs-guide.txt"},{"# Equivalent to let \"a = a << 3\"": "abs-guide.txt"},{"echo \"\\\"\\$a\\\" (=16) left-shifted 3 places = $a\"": "abs-guide.txt"},{"# 128": "abs-guide.txt"},{"let \"a /= 4\"": "abs-guide.txt"},{"# Equivalent to": "abs-guide.txt"},{"echo \"128 / 4 = $a\" # 32": "abs-guide.txt"},{"": "abs-guide.txt"},{"let \"a = a / 4\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"let \"a -= 5\"": "abs-guide.txt"},{"echo \"32 - 5 = $a\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"let \"a = a - 5\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Equivalent to": "abs-guide.txt"},{"# 27": "abs-guide.txt"},{"": "abs-guide.txt"},{"let \"a *= 10\"": "abs-guide.txt"},{"# Equivalent to": "abs-guide.txt"},{"echo \"27 * 10 = $a\" # 270": "abs-guide.txt"},{"": "abs-guide.txt"},{"let \"a = a * 10\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"let \"a %= 8\"": "abs-guide.txt"},{"# Equivalent to let \"a = a % 8\"": "abs-guide.txt"},{"echo \"270 modulo 8 = $a (270 / 8 = 33, remainder $a)\"": "abs-guide.txt"},{"# 6": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Does \"let\" permit C-style operators?": "abs-guide.txt"},{"# Yes, just as the (( ... )) double-parentheses construct does.": "abs-guide.txt"},{"let a++": "abs-guide.txt"},{"echo \"6++ = $a\"": "abs-guide.txt"},{"let a--": "abs-guide.txt"},{"": "abs-guide.txt"},{"# C-style (post) increment.": "abs-guide.txt"},{"# 6++ = 7": "abs-guide.txt"},{"# C-style decrement.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 15. Internal Commands and Builtins": "abs-guide.txt"},{"": "abs-guide.txt"},{"193": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"echo \"7-- = $a\"": "abs-guide.txt"},{"# 7-- = 6": "abs-guide.txt"},{"# Of course, ++a, etc., also allowed . . .": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Trinary operator.": "abs-guide.txt"},{"# Note that $a is 6, see above.": "abs-guide.txt"},{"let \"t = a<7?7:11\"": "abs-guide.txt"},{"# True": "abs-guide.txt"},{"echo $t # 7": "abs-guide.txt"},{"let a++": "abs-guide.txt"},{"let \"t = a<7?7:11\"": "abs-guide.txt"},{"echo $t #": "abs-guide.txt"},{"11": "abs-guide.txt"},{"": "abs-guide.txt"},{"# False": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit": "abs-guide.txt"},{"": "abs-guide.txt"},{"The let command can, in certain contexts, return a surprising exit status.": "abs-guide.txt"},{"# Evgeniy Ivanov points out:": "abs-guide.txt"},{"var=0": "abs-guide.txt"},{"echo $?": "abs-guide.txt"},{"": "abs-guide.txt"},{"let var++": "abs-guide.txt"},{"echo $?": "abs-guide.txt"},{"": "abs-guide.txt"},{"let var++": "abs-guide.txt"},{"echo $?": "abs-guide.txt"},{"": "abs-guide.txt"},{"# 0": "abs-guide.txt"},{"# As expected.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# 1": "abs-guide.txt"},{"# The command was successful, so why isn't $?=0 ???": "abs-guide.txt"},{"# Anomaly!": "abs-guide.txt"},{"": "abs-guide.txt"},{"# 0": "abs-guide.txt"},{"# As expected.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Likewise . . .": "abs-guide.txt"},{"let var=0": "abs-guide.txt"},{"echo $?": "abs-guide.txt"},{"": "abs-guide.txt"},{"# 1": "abs-guide.txt"},{"# The command was successful, so why isn't $?=0 ???": "abs-guide.txt"},{"": "abs-guide.txt"},{"# However, as Jeff Gorak points out,": "abs-guide.txt"},{"#+ this is part of the design spec for 'let' . . .": "abs-guide.txt"},{"# \"If the last ARG evaluates to 0, let returns 1;": "abs-guide.txt"},{"# let returns 0 otherwise.\" ['help let']": "abs-guide.txt"},{"": "abs-guide.txt"},{"eval": "abs-guide.txt"},{"eval arg1 [arg2] ... [argN]": "abs-guide.txt"},{"Combines the arguments in an expression or list of expressions and evaluates them. Any variables": "abs-guide.txt"},{"within the expression are expanded. The net result is to convert a string into a command.": "abs-guide.txt"},{"The eval command can be used for code generation from the command-line or within": "abs-guide.txt"},{"a script.": "abs-guide.txt"},{"bash$": "abs-guide.txt"},{"bash$": "abs-guide.txt"},{"bash$": "abs-guide.txt"},{"26973": "abs-guide.txt"},{"": "abs-guide.txt"},{"command_string=\"ps ax\"": "abs-guide.txt"},{"process=\"ps ax\"": "abs-guide.txt"},{"eval \"$command_string\" | grep \"$process\"": "abs-guide.txt"},{"pts/3": "abs-guide.txt"},{"R+": "abs-guide.txt"},{"0:00 grep --color ps ax": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 15. Internal Commands and Builtins": "abs-guide.txt"},{"": "abs-guide.txt"},{"194": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"26974 pts/3": "abs-guide.txt"},{"": "abs-guide.txt"},{"R+": "abs-guide.txt"},{"": "abs-guide.txt"},{"0:00 ps ax": "abs-guide.txt"},{"": "abs-guide.txt"},{"Each invocation of eval forces a re-evaluation of its arguments.": "abs-guide.txt"},{"a='$b'": "abs-guide.txt"},{"b='$c'": "abs-guide.txt"},{"c=d": "abs-guide.txt"},{"echo $a": "abs-guide.txt"},{"eval echo $a": "abs-guide.txt"},{"eval eval echo $a": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"$b": "abs-guide.txt"},{"First level.": "abs-guide.txt"},{"$c": "abs-guide.txt"},{"Second level.": "abs-guide.txt"},{"d": "abs-guide.txt"},{"Third level.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Thank you, E. Choroba.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 15-11. Showing the effect of eval": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# Exercising \"eval\" ...": "abs-guide.txt"},{"y=`eval ls -l`": "abs-guide.txt"},{"echo $y": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"$y\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Similar to y=`ls -l`": "abs-guide.txt"},{"#+ but linefeeds removed because \"echoed\" variable is unquoted.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Linefeeds preserved when variable is quoted.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo; echo": "abs-guide.txt"},{"y=`eval df`": "abs-guide.txt"},{"echo $y": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Similar to y=`df`": "abs-guide.txt"},{"#+ but linefeeds removed.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# When LF's not preserved, it may make it easier to parse output,": "abs-guide.txt"},{"#+ using utilities such as \"awk\".": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"===========================================================\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"eval \"`seq 3 | sed -e 's/.*/echo var&=ABCDEFGHIJ/'`\"": "abs-guide.txt"},{"# var1=ABCDEFGHIJ": "abs-guide.txt"},{"# var2=ABCDEFGHIJ": "abs-guide.txt"},{"# var3=ABCDEFGHIJ": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"===========================================================\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Now, showing how to do something useful with \"eval\" . . .": "abs-guide.txt"},{"# (Thank you, E. Choroba!)": "abs-guide.txt"},{"version=3.4": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Can we split the version into major and minor": "abs-guide.txt"},{"#+ part in one command?": "abs-guide.txt"},{"echo \"version = $version\"": "abs-guide.txt"},{"eval major=${version/./;minor=}": "abs-guide.txt"},{"# Replaces '.' in version by ';minor='": "abs-guide.txt"},{"# The substitution yields '3; minor=4'": "abs-guide.txt"},{"#+ so eval does minor=4, major=3": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 15. Internal Commands and Builtins": "abs-guide.txt"},{"": "abs-guide.txt"},{"195": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"echo Major: $major, minor: $minor": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Major: 3, minor: 4": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 15-12. Using eval to select among variables": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# arr-choice.sh": "abs-guide.txt"},{"# Passing arguments to a function to select": "abs-guide.txt"},{"#+ one particular variable out of a group.": "abs-guide.txt"},{"arr0=( 10 11 12 13 14 15 )": "abs-guide.txt"},{"arr1=( 20 21 22 23 24 25 )": "abs-guide.txt"},{"arr2=( 30 31 32 33 34 35 )": "abs-guide.txt"},{"#": "abs-guide.txt"},{"0 1 2 3 4 5": "abs-guide.txt"},{"": "abs-guide.txt"},{"Element number (zero-indexed)": "abs-guide.txt"},{"": "abs-guide.txt"},{"choose_array ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"eval array_member=\\${arr${array_number}[element_number]}": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^": "abs-guide.txt"},{"^^^^^^^^^^^^": "abs-guide.txt"},{"# Using eval to construct the name of a variable,": "abs-guide.txt"},{"#+ in this particular case, an array name.": "abs-guide.txt"},{"echo \"Element $element_number of array $array_number is $array_member\"": "abs-guide.txt"},{"} # Function can be rewritten to take parameters.": "abs-guide.txt"},{"array_number=0": "abs-guide.txt"},{"element_number=3": "abs-guide.txt"},{"choose_array": "abs-guide.txt"},{"": "abs-guide.txt"},{"# First array.": "abs-guide.txt"},{"": "abs-guide.txt"},{"array_number=2": "abs-guide.txt"},{"element_number=4": "abs-guide.txt"},{"choose_array": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Third array.": "abs-guide.txt"},{"": "abs-guide.txt"},{"array_number=3": "abs-guide.txt"},{"element_number=4": "abs-guide.txt"},{"choose_array": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Null array (arr3 not allocated).": "abs-guide.txt"},{"": "abs-guide.txt"},{"# 13": "abs-guide.txt"},{"": "abs-guide.txt"},{"# 34": "abs-guide.txt"},{"": "abs-guide.txt"},{"# (null)": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Thank you, Antonio Macchi, for pointing this out.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 15-13. Echoing the command-line parameters": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# echo-params.sh": "abs-guide.txt"},{"# Call this script with a few command-line parameters.": "abs-guide.txt"},{"# For example:": "abs-guide.txt"},{"#": "abs-guide.txt"},{"sh echo-params.sh first second third fourth fifth": "abs-guide.txt"},{"params=$#": "abs-guide.txt"},{"param=1": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Number of command-line parameters.": "abs-guide.txt"},{"# Start at first command-line param.": "abs-guide.txt"},{"": "abs-guide.txt"},{"while [ \"$param\" -le \"$params\" ]": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo -n \"Command-line parameter \"": "abs-guide.txt"},{"echo -n \\$$param": "abs-guide.txt"},{"# Gives only the *name* of variable.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^^^": "abs-guide.txt"},{"# $1, $2, $3, etc.": "abs-guide.txt"},{"# Why?": "abs-guide.txt"},{"# \\$ escapes the first \"$\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 15. Internal Commands and Builtins": "abs-guide.txt"},{"": "abs-guide.txt"},{"196": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"#+ so it echoes literally,": "abs-guide.txt"},{"#+ and $param dereferences \"$param\" . . .": "abs-guide.txt"},{"#+ . . . as expected.": "abs-guide.txt"},{"echo -n \" = \"": "abs-guide.txt"},{"eval echo \\$$param": "abs-guide.txt"},{"# ^^^^": "abs-guide.txt"},{"^^^": "abs-guide.txt"},{"": "abs-guide.txt"},{"(( param ++ ))": "abs-guide.txt"},{"done": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"Gives the *value* of variable.": "abs-guide.txt"},{"The \"eval\" forces the *evaluation*": "abs-guide.txt"},{"of \\$$": "abs-guide.txt"},{"as an indirect variable reference.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# On to the next.": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit $?": "abs-guide.txt"},{"# =================================================": "abs-guide.txt"},{"$ sh echo-params.sh first": "abs-guide.txt"},{"Command-line parameter $1": "abs-guide.txt"},{"Command-line parameter $2": "abs-guide.txt"},{"Command-line parameter $3": "abs-guide.txt"},{"Command-line parameter $4": "abs-guide.txt"},{"Command-line parameter $5": "abs-guide.txt"},{"": "abs-guide.txt"},{"second third fourth fifth": "abs-guide.txt"},{"= first": "abs-guide.txt"},{"= second": "abs-guide.txt"},{"= third": "abs-guide.txt"},{"= fourth": "abs-guide.txt"},{"= fifth": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 15-14. Forcing a log-off": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# Killing ppp to force a log-off.": "abs-guide.txt"},{"# For dialup connection, of course.": "abs-guide.txt"},{"# Script should be run as root user.": "abs-guide.txt"},{"SERPORT=ttyS3": "abs-guide.txt"},{"# Depending on the hardware and even the kernel version,": "abs-guide.txt"},{"#+ the modem port on your machine may be different -#+ /dev/ttyS1 or /dev/ttyS2.": "abs-guide.txt"},{"": "abs-guide.txt"},{"killppp=\"eval kill -9 `ps ax | awk '/ppp/ { print $1 }'`\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"-------- process ID of ppp ------$killppp": "abs-guide.txt"},{"": "abs-guide.txt"},{"# This variable is now a command.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# The following operations must be done as root user.": "abs-guide.txt"},{"chmod 666 /dev/$SERPORT": "abs-guide.txt"},{"# Restore r+w permissions, or else what?": "abs-guide.txt"},{"# Since doing a SIGKILL on ppp changed the permissions on the serial port,": "abs-guide.txt"},{"#+ we restore permissions to previous state.": "abs-guide.txt"},{"rm /var/lock/LCK..$SERPORT": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Remove the serial port lock file. Why?": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit $?": "abs-guide.txt"},{"# Exercises:": "abs-guide.txt"},{"# --------# 1) Have script check whether root user is invoking it.": "abs-guide.txt"},{"# 2) Do a check on whether the process to be killed": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"is actually running before attempting to kill it.": "abs-guide.txt"},{"# 3) Write an alternate version of this script based on 'fuser':": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"if [ fuser -s /dev/modem ]; then . . .": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 15. Internal Commands and Builtins": "abs-guide.txt"},{"": "abs-guide.txt"},{"197": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"Example 15-15. A version of rot13": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# A version of \"rot13\" using 'eval'.": "abs-guide.txt"},{"# Compare to \"rot13.sh\" example.": "abs-guide.txt"},{"setvar_rot_13()": "abs-guide.txt"},{"# \"rot13\" scrambling": "abs-guide.txt"},{"{": "abs-guide.txt"},{"local varname=$1 varvalue=$2": "abs-guide.txt"},{"eval $varname='$(echo \"$varvalue\" | tr a-z n-za-m)'": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"setvar_rot_13 var \"foobar\"": "abs-guide.txt"},{"echo $var": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Run \"foobar\" through rot13.": "abs-guide.txt"},{"# sbbone": "abs-guide.txt"},{"": "abs-guide.txt"},{"setvar_rot_13 var \"$var\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Run \"sbbone\" through rot13.": "abs-guide.txt"},{"# Back to original variable.": "abs-guide.txt"},{"# foobar": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo $var": "abs-guide.txt"},{"": "abs-guide.txt"},{"# This example by Stephane Chazelas.": "abs-guide.txt"},{"# Modified by document author.": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Here is another example of using eval to evaluate a complex expression, this one from an earlier": "abs-guide.txt"},{"version of YongYe's Tetris game script.": "abs-guide.txt"},{"eval ${1}+=\\\"${x} ${y} \\\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example A-53 uses eval to convert array elements into a command list.": "abs-guide.txt"},{"The eval command occurs in the older version of indirect referencing.": "abs-guide.txt"},{"eval var=\\$$var": "abs-guide.txt"},{"": "abs-guide.txt"},{"The eval command can be used to parameterize brace expansion.": "abs-guide.txt"},{"The eval command can be risky, and normally should be avoided when there exists a": "abs-guide.txt"},{"reasonable alternative. An eval $COMMANDS executes the contents of COMMANDS,": "abs-guide.txt"},{"which may contain such unpleasant surprises as rm -rf *. Running an eval on": "abs-guide.txt"},{"unfamiliar code written by persons unknown is living dangerously.": "abs-guide.txt"},{"set": "abs-guide.txt"},{"The set command changes the value of internal script variables/options. One use for this is to toggle": "abs-guide.txt"},{"option flags which help determine the behavior of the script. Another application for it is to reset the": "abs-guide.txt"},{"positional parameters that a script sees as the result of a command (set `command`). The script": "abs-guide.txt"},{"can then parse the fields of the command output.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 15-16. Using set with positional parameters": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# ex34.sh": "abs-guide.txt"},{"# Script \"set-test\"": "abs-guide.txt"},{"# Invoke this script with three command-line parameters,": "abs-guide.txt"},{"# for example, \"sh ex34.sh one two three\".": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 15. Internal Commands and Builtins": "abs-guide.txt"},{"": "abs-guide.txt"},{"198": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"\"Positional parameters": "abs-guide.txt"},{"\"Command-line argument": "abs-guide.txt"},{"\"Command-line argument": "abs-guide.txt"},{"\"Command-line argument": "abs-guide.txt"},{"": "abs-guide.txt"},{"before set \\`uname -a\\` :\"": "abs-guide.txt"},{"#1 = $1\"": "abs-guide.txt"},{"#2 = $2\"": "abs-guide.txt"},{"#3 = $3\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"set `uname -a` # Sets the positional parameters to the output": "abs-guide.txt"},{"# of the command `uname -a`": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo +++++": "abs-guide.txt"},{"echo $_": "abs-guide.txt"},{"# +++++": "abs-guide.txt"},{"# Flags set in script.": "abs-guide.txt"},{"echo $# hB": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Anomalous behavior?": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"Positional parameters after set \\`uname -a\\` :\"": "abs-guide.txt"},{"# $1, $2, $3, etc. reinitialized to result of `uname -a`": "abs-guide.txt"},{"echo \"Field #1 of 'uname -a' = $1\"": "abs-guide.txt"},{"echo \"Field #2 of 'uname -a' = $2\"": "abs-guide.txt"},{"echo \"Field #3 of 'uname -a' = $3\"": "abs-guide.txt"},{"echo \\#\\#\\#": "abs-guide.txt"},{"echo $_": "abs-guide.txt"},{"# ###": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"More fun with positional parameters.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 15-17. Reversing the positional parameters": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# revposparams.sh: Reverse positional parameters.": "abs-guide.txt"},{"# Script by Dan Jacobson, with stylistic revisions by document author.": "abs-guide.txt"},{"": "abs-guide.txt"},{"set a\\ b c d\\ e;": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^": "abs-guide.txt"},{"^": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^ ^": "abs-guide.txt"},{"OIFS=$IFS; IFS=:;": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^": "abs-guide.txt"},{"": "abs-guide.txt"},{"Spaces escaped": "abs-guide.txt"},{"Spaces not escaped": "abs-guide.txt"},{"Saving old IFS and setting new one.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"until [ $# -eq 0 ]": "abs-guide.txt"},{"do": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Step through positional parameters.": "abs-guide.txt"},{"echo \"### k0 = \"$k\"\"": "abs-guide.txt"},{"# Before": "abs-guide.txt"},{"k=$1:$k; #": "abs-guide.txt"},{"Append each pos param to loop variable.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^": "abs-guide.txt"},{"echo \"### k = \"$k\"\"": "abs-guide.txt"},{"# After": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"shift;": "abs-guide.txt"},{"done": "abs-guide.txt"},{"set $k #": "abs-guide.txt"},{"echo echo $# #": "abs-guide.txt"},{"echo -": "abs-guide.txt"},{"": "abs-guide.txt"},{"Set new positional parameters.": "abs-guide.txt"},{"Count of positional parameters.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 15. Internal Commands and Builtins": "abs-guide.txt"},{"": "abs-guide.txt"},{"199": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"for i": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Omitting the \"in list\" sets the variable -- i -#+ to the positional parameters.": "abs-guide.txt"},{"": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo $i": "abs-guide.txt"},{"done": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Display new positional parameters.": "abs-guide.txt"},{"": "abs-guide.txt"},{"IFS=$OIFS": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Restore IFS.": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Question:": "abs-guide.txt"},{"Is it necessary to set an new IFS, internal field separator,": "abs-guide.txt"},{"in order for this script to work properly?": "abs-guide.txt"},{"What happens if you don't? Try it.": "abs-guide.txt"},{"And, why use the new IFS -- a colon -- in line 17,": "abs-guide.txt"},{"to append to the loop variable?": "abs-guide.txt"},{"What is the purpose of this?": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"$ ./revposparams.sh": "abs-guide.txt"},{"### k0 =": "abs-guide.txt"},{"### k = a b": "abs-guide.txt"},{"### k0 = a b": "abs-guide.txt"},{"### k = c a b": "abs-guide.txt"},{"### k0 = c a b": "abs-guide.txt"},{"### k = d e c a b": "abs-guide.txt"},{"3": "abs-guide.txt"},{"d e": "abs-guide.txt"},{"c": "abs-guide.txt"},{"a b": "abs-guide.txt"},{"": "abs-guide.txt"},{"Invoking set without any options or arguments simply lists all the environmental and other variables": "abs-guide.txt"},{"that have been initialized.": "abs-guide.txt"},{"bash$ set": "abs-guide.txt"},{"AUTHORCOPY=/home/bozo/posts": "abs-guide.txt"},{"BASH=/bin/bash": "abs-guide.txt"},{"BASH_VERSION=$'2.05.8(1)-release'": "abs-guide.txt"},{"...": "abs-guide.txt"},{"XAUTHORITY=/home/bozo/.Xauthority": "abs-guide.txt"},{"_=/etc/bashrc": "abs-guide.txt"},{"variable22=abc": "abs-guide.txt"},{"variable23=xzy": "abs-guide.txt"},{"": "abs-guide.txt"},{"Using set with the -- option explicitly assigns the contents of a variable to the positional parameters.": "abs-guide.txt"},{"If no variable follows the -- it unsets the positional parameters.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 15-18. Reassigning the positional parameters": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 15. Internal Commands and Builtins": "abs-guide.txt"},{"": "abs-guide.txt"},{"200": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"variable=\"one two three four five\"": "abs-guide.txt"},{"set -- $variable": "abs-guide.txt"},{"# Sets positional parameters to the contents of \"$variable\".": "abs-guide.txt"},{"first_param=$1": "abs-guide.txt"},{"second_param=$2": "abs-guide.txt"},{"shift; shift": "abs-guide.txt"},{"# Shift past first two positional params.": "abs-guide.txt"},{"# shift 2": "abs-guide.txt"},{"also works.": "abs-guide.txt"},{"remaining_params=\"$*\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"first parameter = $first_param\"": "abs-guide.txt"},{"echo \"second parameter = $second_param\"": "abs-guide.txt"},{"echo \"remaining parameters = $remaining_params\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# one": "abs-guide.txt"},{"# two": "abs-guide.txt"},{"# three four five": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo; echo": "abs-guide.txt"},{"# Again.": "abs-guide.txt"},{"set -- $variable": "abs-guide.txt"},{"first_param=$1": "abs-guide.txt"},{"second_param=$2": "abs-guide.txt"},{"echo \"first parameter = $first_param\"": "abs-guide.txt"},{"echo \"second parameter = $second_param\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# one": "abs-guide.txt"},{"# two": "abs-guide.txt"},{"": "abs-guide.txt"},{"# ======================================================": "abs-guide.txt"},{"set -# Unsets positional parameters if no variable specified.": "abs-guide.txt"},{"first_param=$1": "abs-guide.txt"},{"second_param=$2": "abs-guide.txt"},{"echo \"first parameter = $first_param\"": "abs-guide.txt"},{"echo \"second parameter = $second_param\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# (null value)": "abs-guide.txt"},{"# (null value)": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"See also Example 11-2 and Example 16-56.": "abs-guide.txt"},{"unset": "abs-guide.txt"},{"The unset command deletes a shell variable, effectively setting it to null. Note that this command": "abs-guide.txt"},{"does not affect positional parameters.": "abs-guide.txt"},{"bash$ unset PATH": "abs-guide.txt"},{"bash$ echo $PATH": "abs-guide.txt"},{"bash$": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 15-19. \"Unsetting\" a variable": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# unset.sh: Unsetting a variable.": "abs-guide.txt"},{"variable=hello": "abs-guide.txt"},{"echo \"variable = $variable\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Initialized.": "abs-guide.txt"},{"": "abs-guide.txt"},{"unset variable": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Unset.": "abs-guide.txt"},{"In this particular context,": "abs-guide.txt"},{"same effect as:": "abs-guide.txt"},{"variable=": "abs-guide.txt"},{"$variable is null.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo \"(unset) variable = $variable\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 15. Internal Commands and Builtins": "abs-guide.txt"},{"": "abs-guide.txt"},{"201": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"if [ -z \"$variable\" ]": "abs-guide.txt"},{"#": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"\\$variable has zero length.\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"Try a string-length test.": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"In most contexts, an undeclared variable and one that has been unset are equivalent.": "abs-guide.txt"},{"However, the ${parameter:-default} parameter substitution construct can distinguish": "abs-guide.txt"},{"between the two.": "abs-guide.txt"},{"export": "abs-guide.txt"},{"The export [61] command makes available variables to all child processes of the running script or": "abs-guide.txt"},{"shell. One important use of the export command is in startup files, to initialize and make accessible": "abs-guide.txt"},{"environmental variables to subsequent user processes.": "abs-guide.txt"},{"Unfortunately, there is no way to export variables back to the parent process, to the": "abs-guide.txt"},{"process that called or invoked the script or shell.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 15-20. Using export to pass a variable to an embedded awk script": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"Yet another version of the \"column totaler\" script (col-totaler.sh)": "abs-guide.txt"},{"that adds up a specified column (of numbers) in the target file.": "abs-guide.txt"},{"This uses the environment to pass a script variable to 'awk' . . .": "abs-guide.txt"},{"and places the awk script in a variable.": "abs-guide.txt"},{"": "abs-guide.txt"},{"ARGS=2": "abs-guide.txt"},{"E_WRONGARGS=85": "abs-guide.txt"},{"if [ $# -ne \"$ARGS\" ] # Check for proper number of command-line args.": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Usage: `basename $0` filename column-number\"": "abs-guide.txt"},{"exit $E_WRONGARGS": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"filename=$1": "abs-guide.txt"},{"column_number=$2": "abs-guide.txt"},{"#===== Same as original script, up to this point =====#": "abs-guide.txt"},{"export column_number": "abs-guide.txt"},{"# Export column number to environment, so it's available for retrieval.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# ----------------------------------------------awkscript='{ total += $ENVIRON[\"column_number\"] }": "abs-guide.txt"},{"END { print total }'": "abs-guide.txt"},{"# Yes, a variable can hold an awk script.": "abs-guide.txt"},{"# ----------------------------------------------# Now, run the awk script.": "abs-guide.txt"},{"awk \"$awkscript\" \"$filename\"": "abs-guide.txt"},{"# Thanks, Stephane Chazelas.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 15. Internal Commands and Builtins": "abs-guide.txt"},{"": "abs-guide.txt"},{"202": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"It is possible to initialize and export variables in the same operation, as in export": "abs-guide.txt"},{"var1=xxx.": "abs-guide.txt"},{"However, as Greg Keraunen points out, in certain situations this may have a different": "abs-guide.txt"},{"effect than setting a variable, then exporting it.": "abs-guide.txt"},{"bash$ export var=(a b); echo ${var[0]}": "abs-guide.txt"},{"(a b)": "abs-guide.txt"},{"": "abs-guide.txt"},{"bash$ var=(a b); export var; echo ${var[0]}": "abs-guide.txt"},{"a": "abs-guide.txt"},{"": "abs-guide.txt"},{"A variable to be exported may require special treatment. See Example M-2.": "abs-guide.txt"},{"declare, typeset": "abs-guide.txt"},{"The declare and typeset commands specify and/or restrict properties of variables.": "abs-guide.txt"},{"readonly": "abs-guide.txt"},{"Same as declare -r, sets a variable as read-only, or, in effect, as a constant. Attempts to change the": "abs-guide.txt"},{"variable fail with an error message. This is the shell analog of the C language const type qualifier.": "abs-guide.txt"},{"getopts": "abs-guide.txt"},{"This powerful tool parses command-line arguments passed to the script. This is the Bash analog of the": "abs-guide.txt"},{"getopt external command and the getopt library function familiar to C programmers. It permits": "abs-guide.txt"},{"passing and concatenating multiple options [62] and associated arguments to a script (for example": "abs-guide.txt"},{"scriptname -abc -e /usr/local).": "abs-guide.txt"},{"": "abs-guide.txt"},{"The getopts construct uses two implicit variables. $OPTIND is the argument pointer (OPTion INDex)": "abs-guide.txt"},{"and $OPTARG (OPTion ARGument) the (optional) argument attached to an option. A colon following": "abs-guide.txt"},{"the option name in the declaration tags that option as having an associated argument.": "abs-guide.txt"},{"A getopts construct usually comes packaged in a while loop, which processes the options and": "abs-guide.txt"},{"arguments one at a time, then increments the implicit $OPTIND variable to point to the next.": "abs-guide.txt"},{"": "abs-guide.txt"},{"1. The arguments passed from the command-line to the script must be preceded": "abs-guide.txt"},{"by a dash (-). It is the prefixed - that lets getopts recognize command-line": "abs-guide.txt"},{"arguments as options. In fact, getopts will not process arguments without the": "abs-guide.txt"},{"prefixed -, and will terminate option processing at the first argument": "abs-guide.txt"},{"encountered lacking them.": "abs-guide.txt"},{"2. The getopts template differs slightly from the standard while loop, in that it": "abs-guide.txt"},{"lacks condition brackets.": "abs-guide.txt"},{"3. The getopts construct is a highly functional replacement for the traditional": "abs-guide.txt"},{"getopt external command.": "abs-guide.txt"},{"while getopts \":abcde:fg\" Option": "abs-guide.txt"},{"# Initial declaration.": "abs-guide.txt"},{"# a, b, c, d, e, f, and g are the options (flags) expected.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 15. Internal Commands and Builtins": "abs-guide.txt"},{"": "abs-guide.txt"},{"203": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# The : after option 'e' shows it will have an argument passed with it.": "abs-guide.txt"},{"do": "abs-guide.txt"},{"case $Option in": "abs-guide.txt"},{"a ) # Do something with variable 'a'.": "abs-guide.txt"},{"b ) # Do something with variable 'b'.": "abs-guide.txt"},{"...": "abs-guide.txt"},{"e) # Do something with 'e', and also with $OPTARG,": "abs-guide.txt"},{"# which is the associated argument passed with option 'e'.": "abs-guide.txt"},{"...": "abs-guide.txt"},{"g ) # Do something with variable 'g'.": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"done": "abs-guide.txt"},{"shift $(($OPTIND - 1))": "abs-guide.txt"},{"# Move argument pointer to next.": "abs-guide.txt"},{"# All this is not nearly as complicated as it looks <grin>.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 15-21. Using getopts to read the options/arguments passed to a script": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# ex33.sh: Exercising getopts and OPTIND": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Script modified 10/09/03 at the suggestion of Bill Gradwohl.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Here we observe how 'getopts' processes command-line arguments to script.": "abs-guide.txt"},{"# The arguments are parsed as \"options\" (flags) and associated arguments.": "abs-guide.txt"},{"# Try invoking this script with:": "abs-guide.txt"},{"#": "abs-guide.txt"},{"'scriptname -mn'": "abs-guide.txt"},{"#": "abs-guide.txt"},{"'scriptname -oq qOption' (qOption can be some arbitrary string.)": "abs-guide.txt"},{"#": "abs-guide.txt"},{"'scriptname -qXXX -r'": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"'scriptname -qr'": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"- Unexpected result, takes \"r\" as the argument to option \"q\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"'scriptname -q -r'": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"- Unexpected result, same as above": "abs-guide.txt"},{"#": "abs-guide.txt"},{"'scriptname -mnop -mnop' - Unexpected result": "abs-guide.txt"},{"#": "abs-guide.txt"},{"(OPTIND is unreliable at stating where an option came from.)": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# If an option expects an argument (\"flag:\"), then it will grab": "abs-guide.txt"},{"#+ whatever is next on the command-line.": "abs-guide.txt"},{"NO_ARGS=0": "abs-guide.txt"},{"E_OPTERROR=85": "abs-guide.txt"},{"if [ $# -eq \"$NO_ARGS\" ]": "abs-guide.txt"},{"# Script invoked with no command-line args?": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Usage: `basename $0` options (-mnopqrs)\"": "abs-guide.txt"},{"exit $E_OPTERROR": "abs-guide.txt"},{"# Exit and explain usage.": "abs-guide.txt"},{"# Usage: scriptname -options": "abs-guide.txt"},{"# Note: dash (-) necessary": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"while getopts \":mnopq:rs\" Option": "abs-guide.txt"},{"do": "abs-guide.txt"},{"case $Option in": "abs-guide.txt"},{"m": "abs-guide.txt"},{") echo \"Scenario #1: option": "abs-guide.txt"},{"n | o ) echo \"Scenario #2: option": "abs-guide.txt"},{"p": "abs-guide.txt"},{") echo \"Scenario #3: option": "abs-guide.txt"},{"q": "abs-guide.txt"},{") echo \"Scenario #4: option": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 15. Internal Commands and Builtins": "abs-guide.txt"},{"": "abs-guide.txt"},{"-m[OPTIND=${OPTIND}]\";;": "abs-guide.txt"},{"-$Option[OPTIND=${OPTIND}]\";;": "abs-guide.txt"},{"-p[OPTIND=${OPTIND}]\";;": "abs-guide.txt"},{"-q-\\": "abs-guide.txt"},{"": "abs-guide.txt"},{"204": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# Note that": "abs-guide.txt"},{"#+ otherwise": "abs-guide.txt"},{"r | s ) echo": "abs-guide.txt"},{"*": "abs-guide.txt"},{") echo": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"done": "abs-guide.txt"},{"": "abs-guide.txt"},{"with argument \\\"$OPTARG\\\"": "abs-guide.txt"},{"[OPTIND=${OPTIND}]\";;": "abs-guide.txt"},{"option 'q' must have an associated argument,": "abs-guide.txt"},{"it falls through to the default.": "abs-guide.txt"},{"\"Scenario #5: option -$Option-\";;": "abs-guide.txt"},{"\"Unimplemented option chosen.\";;": "abs-guide.txt"},{"# Default.": "abs-guide.txt"},{"": "abs-guide.txt"},{"shift $(($OPTIND - 1))": "abs-guide.txt"},{"# Decrements the argument pointer so it points to next argument.": "abs-guide.txt"},{"# $1 now references the first non-option item supplied on the command-line": "abs-guide.txt"},{"#+ if one exists.": "abs-guide.txt"},{"exit $?": "abs-guide.txt"},{"#": "abs-guide.txt"},{"As Bill Gradwohl states,": "abs-guide.txt"},{"# \"The getopts mechanism allows one to specify: scriptname -mnop -mnop": "abs-guide.txt"},{"#+ but there is no reliable way to differentiate what came": "abs-guide.txt"},{"#+ from where by using OPTIND.\"": "abs-guide.txt"},{"# There are, however, workarounds.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Script Behavior": "abs-guide.txt"},{"source, . (dot command)": "abs-guide.txt"},{"This command, when invoked from the command-line, executes a script. Within a script, a source": "abs-guide.txt"},{"file-name loads the file file-name. Sourcing a file (dot-command) imports code into the script,": "abs-guide.txt"},{"appending to the script (same effect as the #include directive in a C program). The net result is the": "abs-guide.txt"},{"same as if the \"sourced\" lines of code were physically present in the body of the script. This is useful": "abs-guide.txt"},{"in situations when multiple scripts use a common data file or function library.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 15-22. \"Including\" a data file": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# Note that this example must be invoked with bash, i.e., bash ex38.sh": "abs-guide.txt"},{"#+ not sh ex38.sh !": "abs-guide.txt"},{". data-file": "abs-guide.txt"},{"# Load a data file.": "abs-guide.txt"},{"# Same effect as \"source data-file\", but more portable.": "abs-guide.txt"},{"# The file \"data-file\" must be present in current working directory,": "abs-guide.txt"},{"#+ since it is referred to by its basename.": "abs-guide.txt"},{"# Now, let's reference some data from that file.": "abs-guide.txt"},{"echo \"variable1 (from data-file) = $variable1\"": "abs-guide.txt"},{"echo \"variable3 (from data-file) = $variable3\"": "abs-guide.txt"},{"let \"sum = $variable2 + $variable4\"": "abs-guide.txt"},{"echo \"Sum of variable2 + variable4 (from data-file) = $sum\"": "abs-guide.txt"},{"echo \"message1 (from data-file) is \\\"$message1\\\"\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Escaped quotes": "abs-guide.txt"},{"echo \"message2 (from data-file) is \\\"$message2\\\"\"": "abs-guide.txt"},{"print_message This is the message-print function in the data-file.": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit $?": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 15. Internal Commands and Builtins": "abs-guide.txt"},{"": "abs-guide.txt"},{"205": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"File data-file for Example 15-22, above. Must be present in same directory.": "abs-guide.txt"},{"# This is a data file loaded by a script.": "abs-guide.txt"},{"# Files of this type may contain variables, functions, etc.": "abs-guide.txt"},{"# It loads with a 'source' or '.' command from a shell script.": "abs-guide.txt"},{"# Let's initialize some variables.": "abs-guide.txt"},{"variable1=23": "abs-guide.txt"},{"variable2=474": "abs-guide.txt"},{"variable3=5": "abs-guide.txt"},{"variable4=97": "abs-guide.txt"},{"message1=\"Greetings from *** line $LINENO *** of the data file!\"": "abs-guide.txt"},{"message2=\"Enough for now. Goodbye.\"": "abs-guide.txt"},{"print_message ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"# Echoes any message passed to it.": "abs-guide.txt"},{"if [ -z \"$1\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"return 1 # Error, if argument missing.": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"until [ -z \"$1\" ]": "abs-guide.txt"},{"do": "abs-guide.txt"},{"# Step through arguments passed to function.": "abs-guide.txt"},{"echo -n \"$1\" # Echo args one at a time, suppressing line feeds.": "abs-guide.txt"},{"echo -n \" \" # Insert spaces between words.": "abs-guide.txt"},{"shift": "abs-guide.txt"},{"# Next one.": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"return 0": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"If the sourced file is itself an executable script, then it will run, then return control to the script that": "abs-guide.txt"},{"called it. A sourced executable script may use a return for this purpose.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Arguments may be (optionally) passed to the sourced file as positional parameters.": "abs-guide.txt"},{"source $filename $arg1 arg2": "abs-guide.txt"},{"": "abs-guide.txt"},{"It is even possible for a script to source itself, though this does not seem to have any practical": "abs-guide.txt"},{"applications.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 15-23. A (useless) script that sources itself": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# self-source.sh: a script sourcing itself \"recursively.\"": "abs-guide.txt"},{"# From \"Stupid Script Tricks,\" Volume II.": "abs-guide.txt"},{"MAXPASSCNT=100": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Maximum number of execution passes.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo -n \"$pass_count \"": "abs-guide.txt"},{"# At first execution pass, this just echoes two blank spaces,": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 15. Internal Commands and Builtins": "abs-guide.txt"},{"": "abs-guide.txt"},{"206": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"#+ since $pass_count still uninitialized.": "abs-guide.txt"},{"let \"pass_count += 1\"": "abs-guide.txt"},{"# Assumes the uninitialized variable $pass_count": "abs-guide.txt"},{"#+ can be incremented the first time around.": "abs-guide.txt"},{"# This works with Bash and pdksh, but": "abs-guide.txt"},{"#+ it relies on non-portable (and possibly dangerous) behavior.": "abs-guide.txt"},{"# Better would be to initialize $pass_count to 0 before incrementing.": "abs-guide.txt"},{"while [ \"$pass_count\" -le $MAXPASSCNT ]": "abs-guide.txt"},{"do": "abs-guide.txt"},{". $0": "abs-guide.txt"},{"# Script \"sources\" itself, rather than calling itself.": "abs-guide.txt"},{"# ./$0 (which would be true recursion) doesn't work here. Why?": "abs-guide.txt"},{"done": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"What occurs here is not actually recursion,": "abs-guide.txt"},{"since the script effectively \"expands\" itself, i.e.,": "abs-guide.txt"},{"generates a new section of code": "abs-guide.txt"},{"with each pass through the 'while' loop',": "abs-guide.txt"},{"with each 'source' in line 20.": "abs-guide.txt"},{"Of course, the script interprets each newly 'sourced' \"#!\" line": "abs-guide.txt"},{"as a comment, and not as the start of a new script.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"# The net effect is counting from 1 to 100.": "abs-guide.txt"},{"# Very impressive.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Exercise:": "abs-guide.txt"},{"# -------# Write a script that uses this trick to actually do something useful.": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit": "abs-guide.txt"},{"Unconditionally terminates a script. [63] The exit command may optionally take an integer argument,": "abs-guide.txt"},{"which is returned to the shell as the exit status of the script. It is good practice to end all but the": "abs-guide.txt"},{"simplest scripts with an exit 0, indicating a successful run.": "abs-guide.txt"},{"If a script terminates with an exit lacking an argument, the exit status of the script is": "abs-guide.txt"},{"the exit status of the last command executed in the script, not counting the exit. This is": "abs-guide.txt"},{"equivalent to an exit $?.": "abs-guide.txt"},{"An exit command may also be used to terminate a subshell.": "abs-guide.txt"},{"exec": "abs-guide.txt"},{"This shell builtin replaces the current process with a specified command. Normally, when the shell": "abs-guide.txt"},{"encounters a command, it forks off a child process to actually execute the command. Using the exec": "abs-guide.txt"},{"builtin, the shell does not fork, and the command exec'ed replaces the shell. When used in a script,": "abs-guide.txt"},{"therefore, it forces an exit from the script when the exec'ed command terminates. [64]": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 15-24. Effects of exec": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"exec echo \"Exiting \\\"$0\\\" at line $LINENO.\"": "abs-guide.txt"},{"# Exit from script here.": "abs-guide.txt"},{"# $LINENO is an internal Bash variable set to the line number it's on.": "abs-guide.txt"},{"# ----------------------------------": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 15. Internal Commands and Builtins": "abs-guide.txt"},{"": "abs-guide.txt"},{"207": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# The following lines never execute.": "abs-guide.txt"},{"echo \"This echo fails to echo.\"": "abs-guide.txt"},{"exit 99": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"This script will not exit here.": "abs-guide.txt"},{"Check exit value after script terminates": "abs-guide.txt"},{"with an 'echo $?'.": "abs-guide.txt"},{"It will *not* be 99.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 15-25. A script that exec's itself": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# self-exec.sh": "abs-guide.txt"},{"# Note: Set permissions on this script to 555 or 755,": "abs-guide.txt"},{"#": "abs-guide.txt"},{"then call it with ./self-exec.sh or sh ./self-exec.sh.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"This line appears ONCE in the script, yet it keeps echoing.\"": "abs-guide.txt"},{"echo \"The PID of this instance of the script is still $$.\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Demonstrates that a subshell is not forked off.": "abs-guide.txt"},{"echo \"==================== Hit Ctl-C to exit ====================\"": "abs-guide.txt"},{"sleep 1": "abs-guide.txt"},{"exec $0": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Spawns another instance of this same script": "abs-guide.txt"},{"#+ that replaces the previous one.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo \"This line will never echo!\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Why not?": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit 99": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Will not exit here!": "abs-guide.txt"},{"# Exit code will not be 99!": "abs-guide.txt"},{"": "abs-guide.txt"},{"An exec also serves to reassign file descriptors. For example, exec <zzz-file replaces stdin": "abs-guide.txt"},{"with the file zzz-file.": "abs-guide.txt"},{"The -exec option to find is not the same as the exec shell builtin.": "abs-guide.txt"},{"shopt": "abs-guide.txt"},{"This command permits changing shell options on the fly (see Example 25-1 and Example 25-2). It": "abs-guide.txt"},{"often appears in the Bash startup files, but also has its uses in scripts. Needs version 2 or later of Bash.": "abs-guide.txt"},{"shopt -s cdspell": "abs-guide.txt"},{"# Allows minor misspelling of directory names with 'cd'": "abs-guide.txt"},{"# Option -s sets, -u unsets.": "abs-guide.txt"},{"cd /hpme": "abs-guide.txt"},{"pwd": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Oops! Mistyped '/home'.": "abs-guide.txt"},{"# /home": "abs-guide.txt"},{"# The shell corrected the misspelling.": "abs-guide.txt"},{"": "abs-guide.txt"},{"caller": "abs-guide.txt"},{"Putting a caller command inside a function echoes to stdout information about the caller of that": "abs-guide.txt"},{"function.": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"function1 ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 15. Internal Commands and Builtins": "abs-guide.txt"},{"": "abs-guide.txt"},{"208": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# Inside function1 ().": "abs-guide.txt"},{"caller 0": "abs-guide.txt"},{"# Tell me about it.": "abs-guide.txt"},{"}": "abs-guide.txt"},{"function1": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Line 9 of script.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# 9 main test.sh": "abs-guide.txt"},{"# ^": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^^^^": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^^^^^^^": "abs-guide.txt"},{"caller 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Line number that the function was called from.": "abs-guide.txt"},{"Invoked from \"main\" part of script.": "abs-guide.txt"},{"Name of calling script.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Has no effect because it's not inside a function.": "abs-guide.txt"},{"": "abs-guide.txt"},{"A caller command can also return caller information from a script sourced within another script.": "abs-guide.txt"},{"Analogous to a function, this is a \"subroutine call.\"": "abs-guide.txt"},{"You may find this command useful in debugging.": "abs-guide.txt"},{"Commands": "abs-guide.txt"},{"true": "abs-guide.txt"},{"A command that returns a successful (zero) exit status, but does nothing else.": "abs-guide.txt"},{"bash$ true": "abs-guide.txt"},{"bash$ echo $?": "abs-guide.txt"},{"0": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Endless loop": "abs-guide.txt"},{"while true": "abs-guide.txt"},{"# alias for \":\"": "abs-guide.txt"},{"do": "abs-guide.txt"},{"operation-1": "abs-guide.txt"},{"operation-2": "abs-guide.txt"},{"...": "abs-guide.txt"},{"operation-n": "abs-guide.txt"},{"# Need a way to break out of loop or script will hang.": "abs-guide.txt"},{"done": "abs-guide.txt"},{"": "abs-guide.txt"},{"false": "abs-guide.txt"},{"A command that returns an unsuccessful exit status, but does nothing else.": "abs-guide.txt"},{"bash$ false": "abs-guide.txt"},{"bash$ echo $?": "abs-guide.txt"},{"1": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Testing \"false\"": "abs-guide.txt"},{"if false": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"false evaluates \\\"true\\\"\"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo \"false evaluates \\\"false\\\"\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# false evaluates \"false\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Looping while \"false\" (null loop)": "abs-guide.txt"},{"while false": "abs-guide.txt"},{"do": "abs-guide.txt"},{"# The following code will not execute.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 15. Internal Commands and Builtins": "abs-guide.txt"},{"": "abs-guide.txt"},{"209": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"operation-1": "abs-guide.txt"},{"operation-2": "abs-guide.txt"},{"...": "abs-guide.txt"},{"operation-n": "abs-guide.txt"},{"# Nothing happens!": "abs-guide.txt"},{"done": "abs-guide.txt"},{"": "abs-guide.txt"},{"type [cmd]": "abs-guide.txt"},{"Similar to the which external command, type cmd identifies \"cmd.\" Unlike which, type is a Bash": "abs-guide.txt"},{"builtin. The useful -a option to type identifies keywords and builtins, and also locates system": "abs-guide.txt"},{"commands with identical names.": "abs-guide.txt"},{"bash$ type '['": "abs-guide.txt"},{"[ is a shell builtin": "abs-guide.txt"},{"bash$ type -a '['": "abs-guide.txt"},{"[ is a shell builtin": "abs-guide.txt"},{"[ is /usr/bin/[": "abs-guide.txt"},{"": "abs-guide.txt"},{"bash$ type type": "abs-guide.txt"},{"type is a shell builtin": "abs-guide.txt"},{"": "abs-guide.txt"},{"The type command can be useful for testing whether a certain command exists.": "abs-guide.txt"},{"hash [cmds]": "abs-guide.txt"},{"Records the path name of specified commands -- in the shell hash table [65] -- so the shell or script": "abs-guide.txt"},{"will not need to search the $PATH on subsequent calls to those commands. When hash is called with": "abs-guide.txt"},{"no arguments, it simply lists the commands that have been hashed. The -r option resets the hash": "abs-guide.txt"},{"table.": "abs-guide.txt"},{"bind": "abs-guide.txt"},{"The bind builtin displays or modifies readline [66] key bindings.": "abs-guide.txt"},{"help": "abs-guide.txt"},{"Gets a short usage summary of a shell builtin. This is the counterpart to whatis, but for builtins. The": "abs-guide.txt"},{"display of help information got a much-needed update in the version 4 release of Bash.": "abs-guide.txt"},{"bash$ help exit": "abs-guide.txt"},{"exit: exit [n]": "abs-guide.txt"},{"Exit the shell with a status of N. If N is omitted, the exit status": "abs-guide.txt"},{"is that of the last command executed.": "abs-guide.txt"},{"": "abs-guide.txt"},{"15.1. Job Control Commands": "abs-guide.txt"},{"Certain of the following job control commands take a job identifier as an argument. See the table at end of the": "abs-guide.txt"},{"chapter.": "abs-guide.txt"},{"jobs": "abs-guide.txt"},{"Lists the jobs running in the background, giving the job number. Not as useful as ps.": "abs-guide.txt"},{"It is all too easy to confuse jobs and processes. Certain builtins, such as kill, disown,": "abs-guide.txt"},{"and wait accept either a job number or a process number as an argument. The fg, bg": "abs-guide.txt"},{"and jobs commands accept only a job number.": "abs-guide.txt"},{"bash$ sleep 100 &": "abs-guide.txt"},{"[1] 1384": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 15. Internal Commands and Builtins": "abs-guide.txt"},{"": "abs-guide.txt"},{"210": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"bash $ jobs": "abs-guide.txt"},{"[1]+ Running": "abs-guide.txt"},{"": "abs-guide.txt"},{"sleep 100 &": "abs-guide.txt"},{"": "abs-guide.txt"},{"\"1\" is the job number (jobs are maintained by the current shell). \"1384\" is the PID or": "abs-guide.txt"},{"process ID number (processes are maintained by the system). To kill this job/process,": "abs-guide.txt"},{"either a kill %1 or a kill 1384 works.": "abs-guide.txt"},{"Thanks, S.C.": "abs-guide.txt"},{"disown": "abs-guide.txt"},{"Remove job(s) from the shell's table of active jobs.": "abs-guide.txt"},{"fg, bg": "abs-guide.txt"},{"The fg command switches a job running in the background into the foreground. The bg command": "abs-guide.txt"},{"restarts a suspended job, and runs it in the background. If no job number is specified, then the fg or bg": "abs-guide.txt"},{"command acts upon the currently running job.": "abs-guide.txt"},{"wait": "abs-guide.txt"},{"Suspend script execution until all jobs running in background have terminated, or until the job number": "abs-guide.txt"},{"or process ID specified as an option terminates. Returns the exit status of waited-for command.": "abs-guide.txt"},{"You may use the wait command to prevent a script from exiting before a background job finishes": "abs-guide.txt"},{"executing (this would create a dreaded orphan process).": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 15-26. Waiting for a process to finish before proceeding": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"ROOT_UID=0": "abs-guide.txt"},{"# Only users with $UID 0 have root privileges.": "abs-guide.txt"},{"E_NOTROOT=65": "abs-guide.txt"},{"E_NOPARAMS=66": "abs-guide.txt"},{"if [ \"$UID\" -ne \"$ROOT_UID\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Must be root to run this script.\"": "abs-guide.txt"},{"# \"Run along kid, it's past your bedtime.\"": "abs-guide.txt"},{"exit $E_NOTROOT": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"if [ -z \"$1\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Usage: `basename $0` find-string\"": "abs-guide.txt"},{"exit $E_NOPARAMS": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo \"Updating 'locate' database...\"": "abs-guide.txt"},{"echo \"This may take a while.\"": "abs-guide.txt"},{"updatedb /usr &": "abs-guide.txt"},{"# Must be run as root.": "abs-guide.txt"},{"wait": "abs-guide.txt"},{"# Don't run the rest of the script until 'updatedb' finished.": "abs-guide.txt"},{"# You want the the database updated before looking up the file name.": "abs-guide.txt"},{"locate $1": "abs-guide.txt"},{"# Without the 'wait' command, in the worse case scenario,": "abs-guide.txt"},{"#+ the script would exit while 'updatedb' was still running,": "abs-guide.txt"},{"#+ leaving it as an orphan process.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 15. Internal Commands and Builtins": "abs-guide.txt"},{"": "abs-guide.txt"},{"211": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Optionally, wait can take a job identifier as an argument, for example, wait%1 or wait $PPID.": "abs-guide.txt"},{"[67] See the job id table.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Within a script, running a command in the background with an ampersand (&) may cause the script to han": "abs-guide.txt"},{"ENTER is hit. This seems to occur with commands that write to stdout. It can be a major annoyance.": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# test.sh": "abs-guide.txt"},{"ls -l &": "abs-guide.txt"},{"echo \"Done.\"": "abs-guide.txt"},{"bash$ ./test.sh": "abs-guide.txt"},{"Done.": "abs-guide.txt"},{"[bozo@localhost test-scripts]$ total 1": "abs-guide.txt"},{"-rwxr-xr-x": "abs-guide.txt"},{"1 bozo": "abs-guide.txt"},{"bozo": "abs-guide.txt"},{"_": "abs-guide.txt"},{"": "abs-guide.txt"},{"34 Oct 11 15:09 test.sh": "abs-guide.txt"},{"": "abs-guide.txt"},{"As Walter Brameld IV explains it:": "abs-guide.txt"},{"": "abs-guide.txt"},{"As far as I can tell, such scripts don't actually hang. It ju": "abs-guide.txt"},{"seems that they do because the background command writes text": "abs-guide.txt"},{"the console after the prompt. The user gets the impression th": "abs-guide.txt"},{"the prompt was never displayed. Here's the sequence of events": "abs-guide.txt"},{"1.": "abs-guide.txt"},{"2.": "abs-guide.txt"},{"3.": "abs-guide.txt"},{"4.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Script launches background command.": "abs-guide.txt"},{"Script exits.": "abs-guide.txt"},{"Shell displays the prompt.": "abs-guide.txt"},{"Background command continues running and writing text to t": "abs-guide.txt"},{"console.": "abs-guide.txt"},{"5. Background command finishes.": "abs-guide.txt"},{"6. User doesn't see a prompt at the bottom of the output, thi": "abs-guide.txt"},{"is hanging.": "abs-guide.txt"},{"Placing a wait after the background command seems to remedy this.": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# test.sh": "abs-guide.txt"},{"ls -l &": "abs-guide.txt"},{"echo \"Done.\"": "abs-guide.txt"},{"wait": "abs-guide.txt"},{"bash$ ./test.sh": "abs-guide.txt"},{"Done.": "abs-guide.txt"},{"[bozo@localhost test-scripts]$ total 1": "abs-guide.txt"},{"-rwxr-xr-x": "abs-guide.txt"},{"1 bozo": "abs-guide.txt"},{"bozo": "abs-guide.txt"},{"": "abs-guide.txt"},{"34 Oct 11 15:09 test.sh": "abs-guide.txt"},{"": "abs-guide.txt"},{"Redirecting the output of the command to a file or even to /dev/null also takes care of this problem.": "abs-guide.txt"},{"suspend": "abs-guide.txt"},{"This has a similar effect to Control-Z, but it suspends the shell (the shell's parent process should": "abs-guide.txt"},{"resume it at an appropriate time).": "abs-guide.txt"},{"Chapter 15. Internal Commands and Builtins": "abs-guide.txt"},{"": "abs-guide.txt"},{"212": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"logout": "abs-guide.txt"},{"Exit a login shell, optionally specifying an exit status.": "abs-guide.txt"},{"times": "abs-guide.txt"},{"Gives statistics on the system time elapsed when executing commands, in the following form:": "abs-guide.txt"},{"0m0.020s 0m0.020s": "abs-guide.txt"},{"": "abs-guide.txt"},{"This capability is of relatively limited value, since it is not common to profile and benchmark shell": "abs-guide.txt"},{"scripts.": "abs-guide.txt"},{"kill": "abs-guide.txt"},{"Forcibly terminate a process by sending it an appropriate terminate signal (see Example 17-6).": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 15-27. A script that kills itself": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# self-destruct.sh": "abs-guide.txt"},{"kill $$": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Script kills its own process here.": "abs-guide.txt"},{"# Recall that \"$$\" is the script's PID.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo \"This line will not echo.\"": "abs-guide.txt"},{"# Instead, the shell sends a \"Terminated\" message to stdout.": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Normal exit? No!": "abs-guide.txt"},{"": "abs-guide.txt"},{"# After this script terminates prematurely,": "abs-guide.txt"},{"#+ what exit status does it return?": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# sh self-destruct.sh": "abs-guide.txt"},{"# echo $?": "abs-guide.txt"},{"# 143": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# 143 = 128 + 15": "abs-guide.txt"},{"#": "abs-guide.txt"},{"TERM signal": "abs-guide.txt"},{"": "abs-guide.txt"},{"kill -l lists all the signals (as does the file /usr/include/asm/signal.h).": "abs-guide.txt"},{"A kill -9 is a sure kill, which will usually terminate a process that stubbornly": "abs-guide.txt"},{"refuses to die with a plain kill. Sometimes, a kill -15 works. A zombie process,": "abs-guide.txt"},{"that is, a child process that has terminated, but that the parent process has not (yet)": "abs-guide.txt"},{"killed, cannot be killed by a logged-on user -- you can't kill something that is already": "abs-guide.txt"},{"dead -- but init will generally clean it up sooner or later.": "abs-guide.txt"},{"killall": "abs-guide.txt"},{"The killall command kills a running process by name, rather than by process ID. If there are multiple": "abs-guide.txt"},{"instances of a particular command running, then doing a killall on that command will terminate them": "abs-guide.txt"},{"all.": "abs-guide.txt"},{"This refers to the killall command in /usr/bin, not the killall script in": "abs-guide.txt"},{"/etc/rc.d/init.d.": "abs-guide.txt"},{"command": "abs-guide.txt"},{"The command directive disables aliases and functions for the command immediately following it.": "abs-guide.txt"},{"bash$ command ls": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 15. Internal Commands and Builtins": "abs-guide.txt"},{"": "abs-guide.txt"},{"213": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"This is one of three shell directives that effect script command processing. The others": "abs-guide.txt"},{"are builtin and enable.": "abs-guide.txt"},{"builtin": "abs-guide.txt"},{"Invoking builtin BUILTIN_COMMAND runs the command BUILTIN_COMMAND as a shell": "abs-guide.txt"},{"builtin, temporarily disabling both functions and external system commands with the same name.": "abs-guide.txt"},{"enable": "abs-guide.txt"},{"This either enables or disables a shell builtin command. As an example, enable -n kill disables": "abs-guide.txt"},{"the shell builtin kill, so that when Bash subsequently encounters kill, it invokes the external command": "abs-guide.txt"},{"/bin/kill.": "abs-guide.txt"},{"The -a option to enable lists all the shell builtins, indicating whether or not they are enabled. The -f": "abs-guide.txt"},{"filename option lets enable load a builtin as a shared library (DLL) module from a properly": "abs-guide.txt"},{"compiled object file. [68].": "abs-guide.txt"},{"autoload": "abs-guide.txt"},{"This is a port to Bash of the ksh autoloader. With autoload in place, a function with an autoload": "abs-guide.txt"},{"declaration will load from an external file at its first invocation. [69] This saves system resources.": "abs-guide.txt"},{"Note that autoload is not a part of the core Bash installation. It needs to be loaded in with enable": "abs-guide.txt"},{"-f (see above).": "abs-guide.txt"},{"": "abs-guide.txt"},{"Table 15-1. Job identifiers": "abs-guide.txt"},{"Notation": "abs-guide.txt"},{"%N": "abs-guide.txt"},{"%S": "abs-guide.txt"},{"%?S": "abs-guide.txt"},{"%%": "abs-guide.txt"},{"%+": "abs-guide.txt"},{"%$!": "abs-guide.txt"},{"": "abs-guide.txt"},{"Meaning": "abs-guide.txt"},{"Job number [N]": "abs-guide.txt"},{"Invocation (command-line) of job begins with string S": "abs-guide.txt"},{"Invocation (command-line) of job contains within it string S": "abs-guide.txt"},{"\"current\" job (last job stopped in foreground or started in background)": "abs-guide.txt"},{"\"current\" job (last job stopped in foreground or started in background)": "abs-guide.txt"},{"Last job": "abs-guide.txt"},{"Last background process": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 15. Internal Commands and Builtins": "abs-guide.txt"},{"": "abs-guide.txt"},{"214": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fChapter 16. External Filters, Programs and": "abs-guide.txt"},{"Commands": "abs-guide.txt"},{"Standard UNIX commands make shell scripts more versatile. The power of scripts comes from coupling": "abs-guide.txt"},{"system commands and shell directives with simple programming constructs.": "abs-guide.txt"},{"": "abs-guide.txt"},{"16.1. Basic Commands": "abs-guide.txt"},{"The first commands a novice learns": "abs-guide.txt"},{"ls": "abs-guide.txt"},{"The basic file \"list\" command. It is all too easy to underestimate the power of this humble command.": "abs-guide.txt"},{"For example, using the -R, recursive option, ls provides a tree-like listing of a directory structure.": "abs-guide.txt"},{"Other useful options are -S, sort listing by file size, -t, sort by file modification time, -v, sort by": "abs-guide.txt"},{"(numerical) version numbers embedded in the filenames, [70] -b, show escape characters, and -i,": "abs-guide.txt"},{"show file inodes (see Example 16-4).": "abs-guide.txt"},{"bash$ ls -l": "abs-guide.txt"},{"-rw-rw-r-- 1 bozo bozo 0 Sep 14 18:44 chapter10.txt": "abs-guide.txt"},{"-rw-rw-r-- 1 bozo bozo 0 Sep 14 18:44 chapter11.txt": "abs-guide.txt"},{"-rw-rw-r-- 1 bozo bozo 0 Sep 14 18:44 chapter12.txt": "abs-guide.txt"},{"-rw-rw-r-- 1 bozo bozo 0 Sep 14 18:44 chapter1.txt": "abs-guide.txt"},{"-rw-rw-r-- 1 bozo bozo 0 Sep 14 18:44 chapter2.txt": "abs-guide.txt"},{"-rw-rw-r-- 1 bozo bozo 0 Sep 14 18:44 chapter3.txt": "abs-guide.txt"},{"-rw-rw-r-- 1 bozo bozo 0 Sep 14 18:49 Chapter_headings.txt": "abs-guide.txt"},{"-rw-rw-r-- 1 bozo bozo 0 Sep 14 18:49 Preface.txt": "abs-guide.txt"},{"": "abs-guide.txt"},{"bash$ ls -lv": "abs-guide.txt"},{"total 0": "abs-guide.txt"},{"-rw-rw-r-- 1": "abs-guide.txt"},{"-rw-rw-r-- 1": "abs-guide.txt"},{"-rw-rw-r-- 1": "abs-guide.txt"},{"-rw-rw-r-- 1": "abs-guide.txt"},{"-rw-rw-r-- 1": "abs-guide.txt"},{"-rw-rw-r-- 1": "abs-guide.txt"},{"-rw-rw-r-- 1": "abs-guide.txt"},{"-rw-rw-r-- 1": "abs-guide.txt"},{"": "abs-guide.txt"},{"bozo": "abs-guide.txt"},{"bozo": "abs-guide.txt"},{"bozo": "abs-guide.txt"},{"bozo": "abs-guide.txt"},{"bozo": "abs-guide.txt"},{"bozo": "abs-guide.txt"},{"bozo": "abs-guide.txt"},{"bozo": "abs-guide.txt"},{"": "abs-guide.txt"},{"bozo": "abs-guide.txt"},{"bozo": "abs-guide.txt"},{"bozo": "abs-guide.txt"},{"bozo": "abs-guide.txt"},{"bozo": "abs-guide.txt"},{"bozo": "abs-guide.txt"},{"bozo": "abs-guide.txt"},{"bozo": "abs-guide.txt"},{"": "abs-guide.txt"},{"0": "abs-guide.txt"},{"0": "abs-guide.txt"},{"0": "abs-guide.txt"},{"0": "abs-guide.txt"},{"0": "abs-guide.txt"},{"0": "abs-guide.txt"},{"0": "abs-guide.txt"},{"0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Sep": "abs-guide.txt"},{"Sep": "abs-guide.txt"},{"Sep": "abs-guide.txt"},{"Sep": "abs-guide.txt"},{"Sep": "abs-guide.txt"},{"Sep": "abs-guide.txt"},{"Sep": "abs-guide.txt"},{"Sep": "abs-guide.txt"},{"": "abs-guide.txt"},{"14": "abs-guide.txt"},{"14": "abs-guide.txt"},{"14": "abs-guide.txt"},{"14": "abs-guide.txt"},{"14": "abs-guide.txt"},{"14": "abs-guide.txt"},{"14": "abs-guide.txt"},{"14": "abs-guide.txt"},{"": "abs-guide.txt"},{"18:49": "abs-guide.txt"},{"18:49": "abs-guide.txt"},{"18:44": "abs-guide.txt"},{"18:44": "abs-guide.txt"},{"18:44": "abs-guide.txt"},{"18:44": "abs-guide.txt"},{"18:44": "abs-guide.txt"},{"18:44": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter_headings.txt": "abs-guide.txt"},{"Preface.txt": "abs-guide.txt"},{"chapter1.txt": "abs-guide.txt"},{"chapter2.txt": "abs-guide.txt"},{"chapter3.txt": "abs-guide.txt"},{"chapter10.txt": "abs-guide.txt"},{"chapter11.txt": "abs-guide.txt"},{"chapter12.txt": "abs-guide.txt"},{"": "abs-guide.txt"},{"The ls command returns a non-zero exit status when attempting to list a non-existent": "abs-guide.txt"},{"file.": "abs-guide.txt"},{"bash$ ls abc": "abs-guide.txt"},{"ls: abc: No such file or directory": "abs-guide.txt"},{"": "abs-guide.txt"},{"bash$ echo $?": "abs-guide.txt"},{"2": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 16-1. Using ls to create a table of contents for burning a CDR disk": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"215": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# ex40.sh (burn-cd.sh)": "abs-guide.txt"},{"# Script to automate burning a CDR.": "abs-guide.txt"},{"": "abs-guide.txt"},{"SPEED=10": "abs-guide.txt"},{"# May use higher speed if your hardware supports it.": "abs-guide.txt"},{"IMAGEFILE=cdimage.iso": "abs-guide.txt"},{"CONTENTSFILE=contents": "abs-guide.txt"},{"# DEVICE=/dev/cdrom": "abs-guide.txt"},{"For older versions of cdrecord": "abs-guide.txt"},{"DEVICE=\"1,0,0\"": "abs-guide.txt"},{"DEFAULTDIR=/opt # This is the directory containing the data to be burned.": "abs-guide.txt"},{"# Make sure it exists.": "abs-guide.txt"},{"# Exercise: Add a test for this.": "abs-guide.txt"},{"# Uses Joerg Schilling's \"cdrecord\" package:": "abs-guide.txt"},{"# http://www.fokus.fhg.de/usr/schilling/cdrecord.html": "abs-guide.txt"},{"# If this script invoked as an ordinary user, may need to suid cdrecord": "abs-guide.txt"},{"#+ chmod u+s /usr/bin/cdrecord, as root.": "abs-guide.txt"},{"# Of course, this creates a security hole, though a relatively minor one.": "abs-guide.txt"},{"if [ -z \"$1\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"IMAGE_DIRECTORY=$DEFAULTDIR": "abs-guide.txt"},{"# Default directory, if not specified on command-line.": "abs-guide.txt"},{"else": "abs-guide.txt"},{"IMAGE_DIRECTORY=$1": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# Create a \"table of contents\" file.": "abs-guide.txt"},{"ls -lRF $IMAGE_DIRECTORY > $IMAGE_DIRECTORY/$CONTENTSFILE": "abs-guide.txt"},{"# The \"l\" option gives a \"long\" file listing.": "abs-guide.txt"},{"# The \"R\" option makes the listing recursive.": "abs-guide.txt"},{"# The \"F\" option marks the file types (directories get a trailing /).": "abs-guide.txt"},{"echo \"Creating table of contents.\"": "abs-guide.txt"},{"# Create an image file preparatory to burning it onto the CDR.": "abs-guide.txt"},{"mkisofs -r -o $IMAGEFILE $IMAGE_DIRECTORY": "abs-guide.txt"},{"echo \"Creating ISO9660 file system image ($IMAGEFILE).\"": "abs-guide.txt"},{"# Burn the CDR.": "abs-guide.txt"},{"echo \"Burning the disk.\"": "abs-guide.txt"},{"echo \"Please be patient, this will take a while.\"": "abs-guide.txt"},{"wodim -v -isosize dev=$DEVICE $IMAGEFILE": "abs-guide.txt"},{"# In newer Linux distros, the \"wodim\" utility assumes the": "abs-guide.txt"},{"#+ functionality of \"cdrecord.\"": "abs-guide.txt"},{"exitcode=$?": "abs-guide.txt"},{"echo \"Exit code = $exitcode\"": "abs-guide.txt"},{"exit $exitcode": "abs-guide.txt"},{"": "abs-guide.txt"},{"cat, tac": "abs-guide.txt"},{"cat, an acronym for concatenate, lists a file to stdout. When combined with redirection (> or >>), it": "abs-guide.txt"},{"is commonly used to concatenate files.": "abs-guide.txt"},{"# Uses of 'cat'": "abs-guide.txt"},{"cat filename": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Lists the file.": "abs-guide.txt"},{"": "abs-guide.txt"},{"cat file.1 file.2 file.3 > file.123": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Combines three files into one.": "abs-guide.txt"},{"": "abs-guide.txt"},{"The -n option to cat inserts consecutive numbers before all lines of the target file(s). The -b option": "abs-guide.txt"},{"numbers only the non-blank lines. The -v option echoes nonprintable characters, using ^ notation.": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"216": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"The -s option squeezes multiple consecutive blank lines into a single blank line.": "abs-guide.txt"},{"See also Example 16-28 and Example 16-24.": "abs-guide.txt"},{"In a pipe, it may be more efficient to redirect the stdin to a file, rather than to cat": "abs-guide.txt"},{"the file.": "abs-guide.txt"},{"cat filename | tr a-z A-Z": "abs-guide.txt"},{"tr a-z A-Z < filename": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Same effect, but starts one less process,": "abs-guide.txt"},{"#+ and also dispenses with the pipe.": "abs-guide.txt"},{"": "abs-guide.txt"},{"tac, is the inverse of cat, listing a file backwards from its end.": "abs-guide.txt"},{"rev": "abs-guide.txt"},{"reverses each line of a file, and outputs to stdout. This does not have the same effect as tac, as it": "abs-guide.txt"},{"preserves the order of the lines, but flips each one around (mirror image).": "abs-guide.txt"},{"bash$ cat file1.txt": "abs-guide.txt"},{"This is line 1.": "abs-guide.txt"},{"This is line 2.": "abs-guide.txt"},{"": "abs-guide.txt"},{"bash$ tac file1.txt": "abs-guide.txt"},{"This is line 2.": "abs-guide.txt"},{"This is line 1.": "abs-guide.txt"},{"": "abs-guide.txt"},{"bash$ rev file1.txt": "abs-guide.txt"},{".1 enil si sihT": "abs-guide.txt"},{".2 enil si sihT": "abs-guide.txt"},{"": "abs-guide.txt"},{"cp": "abs-guide.txt"},{"This is the file copy command. cp file1 file2 copies file1 to file2, overwriting file2 if": "abs-guide.txt"},{"it already exists (see Example 16-6).": "abs-guide.txt"},{"Particularly useful are the -a archive flag (for copying an entire directory tree), the": "abs-guide.txt"},{"-u update flag (which prevents overwriting identically-named newer files), and the": "abs-guide.txt"},{"-r and -R recursive flags.": "abs-guide.txt"},{"cp -u source_dir/* dest_dir": "abs-guide.txt"},{"# \"Synchronize\" dest_dir to source_dir": "abs-guide.txt"},{"#+ by copying over all newer and not previously existing files.": "abs-guide.txt"},{"": "abs-guide.txt"},{"mv": "abs-guide.txt"},{"This is the file move command. It is equivalent to a combination of cp and rm. It may be used to": "abs-guide.txt"},{"move multiple files to a directory, or even to rename a directory. For some examples of using mv in a": "abs-guide.txt"},{"script, see Example 10-11 and Example A-2.": "abs-guide.txt"},{"When used in a non-interactive script, mv takes the -f (force) option to bypass user": "abs-guide.txt"},{"input.": "abs-guide.txt"},{"When a directory is moved to a preexisting directory, it becomes a subdirectory of the": "abs-guide.txt"},{"destination directory.": "abs-guide.txt"},{"bash$ mv source_directory target_directory": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"217": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"bash$ ls -lF target_directory": "abs-guide.txt"},{"total 1": "abs-guide.txt"},{"drwxrwxr-x": "abs-guide.txt"},{"2 bozo bozo": "abs-guide.txt"},{"": "abs-guide.txt"},{"1024 May 28 19:20 source_directory/": "abs-guide.txt"},{"": "abs-guide.txt"},{"rm": "abs-guide.txt"},{"Delete (remove) a file or files. The -f option forces removal of even readonly files, and is useful for": "abs-guide.txt"},{"bypassing user input in a script.": "abs-guide.txt"},{"": "abs-guide.txt"},{"The rm command will, by itself, fail to remove filenames beginning with a dash.": "abs-guide.txt"},{"Why? Because rm sees a dash-prefixed filename as an option.": "abs-guide.txt"},{"bash$ rm -badname": "abs-guide.txt"},{"rm: invalid option -- b": "abs-guide.txt"},{"Try `rm --help' for more information.": "abs-guide.txt"},{"": "abs-guide.txt"},{"One clever workaround is to precede the filename with a \" -- \" (the end-of-options": "abs-guide.txt"},{"flag).": "abs-guide.txt"},{"bash$ rm -- -badname": "abs-guide.txt"},{"": "abs-guide.txt"},{"Another method to is to preface the filename to be removed with a dot-slash .": "abs-guide.txt"},{"bash$ rm ./-badname": "abs-guide.txt"},{"": "abs-guide.txt"},{"When used with the recursive flag -r, this command removes files all the way down": "abs-guide.txt"},{"the directory tree from the current directory. A careless rm -rf * can wipe out a big": "abs-guide.txt"},{"chunk of a directory structure.": "abs-guide.txt"},{"rmdir": "abs-guide.txt"},{"Remove directory. The directory must be empty of all files -- including \"invisible\" dotfiles [71] -- for": "abs-guide.txt"},{"this command to succeed.": "abs-guide.txt"},{"mkdir": "abs-guide.txt"},{"Make directory, creates a new directory. For example, mkdir -p": "abs-guide.txt"},{"project/programs/December creates the named directory. The -p option automatically": "abs-guide.txt"},{"creates any necessary parent directories.": "abs-guide.txt"},{"chmod": "abs-guide.txt"},{"Changes the attributes of an existing file or directory (see Example 15-14).": "abs-guide.txt"},{"chmod +x filename": "abs-guide.txt"},{"# Makes \"filename\" executable for all users.": "abs-guide.txt"},{"chmod u+s filename": "abs-guide.txt"},{"# Sets \"suid\" bit on \"filename\" permissions.": "abs-guide.txt"},{"# An ordinary user may execute \"filename\" with same privileges as the file's owner.": "abs-guide.txt"},{"# (This does not apply to shell scripts.)": "abs-guide.txt"},{"chmod 644 filename": "abs-guide.txt"},{"# Makes \"filename\" readable/writable to owner, readable to others": "abs-guide.txt"},{"#+ (octal mode).": "abs-guide.txt"},{"chmod 444 filename": "abs-guide.txt"},{"# Makes \"filename\" read-only for all.": "abs-guide.txt"},{"# Modifying the file (for example, with a text editor)": "abs-guide.txt"},{"#+ not allowed for a user who does not own the file (except for root),": "abs-guide.txt"},{"#+ and even the file owner must force a file-save": "abs-guide.txt"},{"#+ if she modifies the file.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"218": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Same restrictions apply for deleting the file.": "abs-guide.txt"},{"": "abs-guide.txt"},{"chmod 1777 directory-name": "abs-guide.txt"},{"# Gives everyone read, write, and execute permission in directory,": "abs-guide.txt"},{"#+ however also sets the \"sticky bit\".": "abs-guide.txt"},{"# This means that only the owner of the directory,": "abs-guide.txt"},{"#+ owner of the file, and, of course, root": "abs-guide.txt"},{"#+ can delete any particular file in that directory.": "abs-guide.txt"},{"chmod 111 directory-name": "abs-guide.txt"},{"# Gives everyone execute-only permission in a directory.": "abs-guide.txt"},{"# This means that you can execute and READ the files in that directory": "abs-guide.txt"},{"#+ (execute permission necessarily includes read permission": "abs-guide.txt"},{"#+ because you can't execute a file without being able to read it).": "abs-guide.txt"},{"# But you can't list the files or search for them with the \"find\" command.": "abs-guide.txt"},{"# These restrictions do not apply to root.": "abs-guide.txt"},{"chmod 000 directory-name": "abs-guide.txt"},{"# No permissions at all for that directory.": "abs-guide.txt"},{"# Can't read, write, or execute files in it.": "abs-guide.txt"},{"# Can't even list files in it or \"cd\" to it.": "abs-guide.txt"},{"# But, you can rename (mv) the directory": "abs-guide.txt"},{"#+ or delete it (rmdir) if it is empty.": "abs-guide.txt"},{"# You can even symlink to files in the directory,": "abs-guide.txt"},{"#+ but you can't read, write, or execute the symlinks.": "abs-guide.txt"},{"# These restrictions do not apply to root.": "abs-guide.txt"},{"": "abs-guide.txt"},{"chattr": "abs-guide.txt"},{"Change file attributes. This is analogous to chmod above, but with different options and a different": "abs-guide.txt"},{"invocation syntax, and it works only on ext2/ext3 filesystems.": "abs-guide.txt"},{"One particularly interesting chattr option is i. A chattr +i filename marks the file as immutable.": "abs-guide.txt"},{"The file cannot be modified, linked to, or deleted, not even by root. This file attribute can be set or": "abs-guide.txt"},{"removed only by root. In a similar fashion, the a option marks the file as append only.": "abs-guide.txt"},{"root# chattr +i file1.txt": "abs-guide.txt"},{"": "abs-guide.txt"},{"root# rm file1.txt": "abs-guide.txt"},{"rm: remove write-protected regular file `file1.txt'? y": "abs-guide.txt"},{"rm: cannot remove `file1.txt': Operation not permitted": "abs-guide.txt"},{"": "abs-guide.txt"},{"If a file has the s (secure) attribute set, then when it is deleted its block is overwritten with binary": "abs-guide.txt"},{"zeroes. [72]": "abs-guide.txt"},{"If a file has the u (undelete) attribute set, then when it is deleted, its contents can still be retrieved": "abs-guide.txt"},{"(undeleted).": "abs-guide.txt"},{"If a file has the c (compress) attribute set, then it will automatically be compressed on writes to disk,": "abs-guide.txt"},{"and uncompressed on reads.": "abs-guide.txt"},{"The file attributes set with chattr do not show in a file listing (ls -l).": "abs-guide.txt"},{"ln": "abs-guide.txt"},{"Creates links to pre-existings files. A \"link\" is a reference to a file, an alternate name for it. The ln": "abs-guide.txt"},{"command permits referencing the linked file by more than one name and is a superior alternative to": "abs-guide.txt"},{"aliasing (see Example 4-6).": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"219": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"The ln creates only a reference, a pointer to the file only a few bytes in size.": "abs-guide.txt"},{"": "abs-guide.txt"},{"The ln command is most often used with the -s, symbolic or \"soft\" link flag. Advantages of using the": "abs-guide.txt"},{"-s flag are that it permits linking across file systems or to directories.": "abs-guide.txt"},{"The syntax of the command is a bit tricky. For example: ln -s oldfile newfile links the": "abs-guide.txt"},{"previously existing oldfile to the newly created link, newfile.": "abs-guide.txt"},{"If a file named newfile has previously existed, an error message will result.": "abs-guide.txt"},{"Which type of link to use?": "abs-guide.txt"},{"As John Macdonald explains it:": "abs-guide.txt"},{"Both of these [types of links] provide a certain measure of dual reference -- if you edit the contents": "abs-guide.txt"},{"of the file using any name, your changes will affect both the original name and either a hard or soft": "abs-guide.txt"},{"new name. The differences between them occurs when you work at a higher level. The advantage of": "abs-guide.txt"},{"a hard link is that the new name is totally independent of the old name -- if you remove or rename": "abs-guide.txt"},{"the old name, that does not affect the hard link, which continues to point to the data while it would": "abs-guide.txt"},{"leave a soft link hanging pointing to the old name which is no longer there. The advantage of a soft": "abs-guide.txt"},{"link is that it can refer to a different file system (since it is just a reference to a file name, not to": "abs-guide.txt"},{"actual data). And, unlike a hard link, a symbolic link can refer to a directory.": "abs-guide.txt"},{"Links give the ability to invoke a script (or any other type of executable) with multiple names, and": "abs-guide.txt"},{"having that script behave according to how it was invoked.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 16-2. Hello or Good-bye": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# hello.sh: Saying \"hello\" or \"goodbye\"": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"depending on how script is invoked.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Make a link in current working directory ($PWD) to this script:": "abs-guide.txt"},{"ln -s hello.sh goodbye": "abs-guide.txt"},{"Now, try invoking this script both ways:": "abs-guide.txt"},{"./hello.sh": "abs-guide.txt"},{"./goodbye": "abs-guide.txt"},{"": "abs-guide.txt"},{"HELLO_CALL=65": "abs-guide.txt"},{"GOODBYE_CALL=66": "abs-guide.txt"},{"if [ $0 = \"./goodbye\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Good-bye!\"": "abs-guide.txt"},{"# Some other goodbye-type commands, as appropriate.": "abs-guide.txt"},{"exit $GOODBYE_CALL": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"echo \"Hello!\"": "abs-guide.txt"},{"# Some other hello-type commands, as appropriate.": "abs-guide.txt"},{"exit $HELLO_CALL": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"220": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"man, info": "abs-guide.txt"},{"These commands access the manual and information pages on system commands and installed": "abs-guide.txt"},{"utilities. When available, the info pages usually contain more detailed descriptions than do the man": "abs-guide.txt"},{"pages.": "abs-guide.txt"},{"There have been various attempts at \"automating\" the writing of man pages. For a script that makes a": "abs-guide.txt"},{"tentative first step in that direction, see Example A-39.": "abs-guide.txt"},{"": "abs-guide.txt"},{"16.2. Complex Commands": "abs-guide.txt"},{"Commands for more advanced users": "abs-guide.txt"},{"find": "abs-guide.txt"},{"-exec COMMAND \\;": "abs-guide.txt"},{"Carries out COMMAND on each file that find matches. The command sequence terminates with ; (the": "abs-guide.txt"},{"\";\" is escaped to make certain the shell passes it to find literally, without interpreting it as a special": "abs-guide.txt"},{"character).": "abs-guide.txt"},{"bash$ find ~/ -name '*.txt'": "abs-guide.txt"},{"/home/bozo/.kde/share/apps/karm/karmdata.txt": "abs-guide.txt"},{"/home/bozo/misc/irmeyc.txt": "abs-guide.txt"},{"/home/bozo/test-scripts/1.txt": "abs-guide.txt"},{"": "abs-guide.txt"},{"If COMMAND contains {}, then find substitutes the full path name of the selected file for \"{}\".": "abs-guide.txt"},{"find ~/ -name 'core*' -exec rm {} \\;": "abs-guide.txt"},{"# Removes all core dump files from user's home directory.": "abs-guide.txt"},{"find /home/bozo/projects -mtime -1": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^": "abs-guide.txt"},{"Note minus sign!": "abs-guide.txt"},{"# Lists all files in /home/bozo/projects directory tree": "abs-guide.txt"},{"#+ that were modified within the last day (current_day - 1).": "abs-guide.txt"},{"#": "abs-guide.txt"},{"find /home/bozo/projects -mtime 1": "abs-guide.txt"},{"# Same as above, but modified *exactly* one day ago.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# mtime = last modification time of the target file": "abs-guide.txt"},{"# ctime = last status change time (via 'chmod' or otherwise)": "abs-guide.txt"},{"# atime = last access time": "abs-guide.txt"},{"DIR=/home/bozo/junk_files": "abs-guide.txt"},{"find \"$DIR\" -type f -atime +5 -exec rm {} \\;": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^": "abs-guide.txt"},{"^^": "abs-guide.txt"},{"# Curly brackets are placeholder for the path name output by \"find.\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Deletes all files in \"/home/bozo/junk_files\"": "abs-guide.txt"},{"#+ that have not been accessed in *at least* 5 days (plus sign ... +5).": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# \"-type filetype\", where": "abs-guide.txt"},{"# f = regular file": "abs-guide.txt"},{"# d = directory": "abs-guide.txt"},{"# l = symbolic link, etc.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"221": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"(The 'find' manpage and info page have complete option listings.)": "abs-guide.txt"},{"": "abs-guide.txt"},{"find /etc -exec grep '[0-9][0-9]*[.][0-9][0-9]*[.][0-9][0-9]*[.][0-9][0-9]*' {} \\;": "abs-guide.txt"},{"# Finds all IP addresses (xxx.xxx.xxx.xxx) in /etc directory files.": "abs-guide.txt"},{"# There a few extraneous hits. Can they be filtered out?": "abs-guide.txt"},{"# Possibly by:": "abs-guide.txt"},{"find /etc -type f -exec cat '{}' \\; | tr -c '.[:digit:]' '\\n' \\": "abs-guide.txt"},{"| grep '^[^.][^.]*\\.[^.][^.]*\\.[^.][^.]*\\.[^.][^.]*$'": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# [:digit:] is one of the character classes": "abs-guide.txt"},{"#+ introduced with the POSIX 1003.2 standard.": "abs-guide.txt"},{"# Thanks, St\u00e9phane Chazelas.": "abs-guide.txt"},{"": "abs-guide.txt"},{"The -exec option to find should not be confused with the exec shell builtin.": "abs-guide.txt"},{"Example 16-3. Badname, eliminate file names in current directory containing bad characters": "abs-guide.txt"},{"and whitespace.": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# badname.sh": "abs-guide.txt"},{"# Delete filenames in current directory containing bad characters.": "abs-guide.txt"},{"for filename in *": "abs-guide.txt"},{"do": "abs-guide.txt"},{"badname=`echo \"$filename\" | sed -n /[\\+\\{\\;\\\"\\\\\\=\\?~\\(\\)\\<\\>\\&\\*\\|\\$]/p`": "abs-guide.txt"},{"# badname=`echo \"$filename\" | sed -n '/[+{;\"\\=?~()<>&*|$]/p'` also works.": "abs-guide.txt"},{"# Deletes files containing these nasties:": "abs-guide.txt"},{"+ { ; \" \\ = ? ~ ( ) < > & * | $": "abs-guide.txt"},{"#": "abs-guide.txt"},{"rm $badname 2>/dev/null": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^^^^^^^^^^^ Error messages deep-sixed.": "abs-guide.txt"},{"done": "abs-guide.txt"},{"# Now, take care of files containing all manner of whitespace.": "abs-guide.txt"},{"find . -name \"* *\" -exec rm -f {} \\;": "abs-guide.txt"},{"# The path name of the file that _find_ finds replaces the \"{}\".": "abs-guide.txt"},{"# The '\\' ensures that the ';' is interpreted literally, as end of command.": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"#--------------------------------------------------------------------# Commands below this line will not execute because of _exit_ command.": "abs-guide.txt"},{"# An alternative to the above script:": "abs-guide.txt"},{"find . -name '*[+{;\"\\\\=?~()<>&*|$ ]*' -maxdepth 0 \\": "abs-guide.txt"},{"-exec rm -f '{}' \\;": "abs-guide.txt"},{"# The \"-maxdepth 0\" option ensures that _find_ will not search": "abs-guide.txt"},{"#+ subdirectories below $PWD.": "abs-guide.txt"},{"# (Thanks, S.C.)": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 16-4. Deleting a file by its inode number": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"222": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# idelete.sh: Deleting a file by its inode number.": "abs-guide.txt"},{"# This is useful when a filename starts with an illegal character,": "abs-guide.txt"},{"#+ such as ? or -.": "abs-guide.txt"},{"ARGCOUNT=1": "abs-guide.txt"},{"E_WRONGARGS=70": "abs-guide.txt"},{"E_FILE_NOT_EXIST=71": "abs-guide.txt"},{"E_CHANGED_MIND=72": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Filename arg must be passed to script.": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [ $# -ne \"$ARGCOUNT\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Usage: `basename $0` filename\"": "abs-guide.txt"},{"exit $E_WRONGARGS": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"if [ ! -e \"$1\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"File \\\"\"$1\"\\\" does not exist.\"": "abs-guide.txt"},{"exit $E_FILE_NOT_EXIST": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"inum=`ls -i | grep \"$1\" | awk '{print $1}'`": "abs-guide.txt"},{"# inum = inode (index node) number of file": "abs-guide.txt"},{"# ----------------------------------------------------------------------# Every file has an inode, a record that holds its physical address info.": "abs-guide.txt"},{"# ----------------------------------------------------------------------echo; echo -n \"Are you absolutely sure you want to delete \\\"$1\\\" (y/n)? \"": "abs-guide.txt"},{"# The '-v' option to 'rm' also asks this.": "abs-guide.txt"},{"read answer": "abs-guide.txt"},{"case \"$answer\" in": "abs-guide.txt"},{"[nN]) echo \"Changed your mind, huh?\"": "abs-guide.txt"},{"exit $E_CHANGED_MIND": "abs-guide.txt"},{";;": "abs-guide.txt"},{"*)": "abs-guide.txt"},{"echo \"Deleting file \\\"$1\\\".\";;": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"find . -inum $inum -exec rm {} \\;": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^^": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Curly brackets are placeholder": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"for text output by \"find.\"": "abs-guide.txt"},{"echo \"File \"\\\"$1\"\\\" deleted!\"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"The find command also works without the -exec option.": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# Find suid root files.": "abs-guide.txt"},{"# A strange suid file might indicate a security hole,": "abs-guide.txt"},{"#+ or even a system intrusion.": "abs-guide.txt"},{"directory=\"/usr/sbin\"": "abs-guide.txt"},{"# Might also try /sbin, /bin, /usr/bin, /usr/local/bin, etc.": "abs-guide.txt"},{"permissions=\"+4000\" # suid root (dangerous!)": "abs-guide.txt"},{"": "abs-guide.txt"},{"for file in $( find \"$directory\" -perm \"$permissions\" )": "abs-guide.txt"},{"do": "abs-guide.txt"},{"ls -ltF --author \"$file\"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"223": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"See Example 16-30, Example 3-4, and Example 11-10 for scripts using find. Its manpage provides": "abs-guide.txt"},{"more detail on this complex and powerful command.": "abs-guide.txt"},{"xargs": "abs-guide.txt"},{"A filter for feeding arguments to a command, and also a tool for assembling the commands": "abs-guide.txt"},{"themselves. It breaks a data stream into small enough chunks for filters and commands to process.": "abs-guide.txt"},{"Consider it as a powerful replacement for backquotes. In situations where command substitution fails": "abs-guide.txt"},{"with a too many arguments error, substituting xargs often works. [73] Normally, xargs reads from": "abs-guide.txt"},{"stdin or from a pipe, but it can also be given the output of a file.": "abs-guide.txt"},{"The default command for xargs is echo. This means that input piped to xargs may have linefeeds and": "abs-guide.txt"},{"other whitespace characters stripped out.": "abs-guide.txt"},{"bash$ ls -l": "abs-guide.txt"},{"total 0": "abs-guide.txt"},{"-rw-rw-r--rw-rw-r--": "abs-guide.txt"},{"": "abs-guide.txt"},{"1 bozo": "abs-guide.txt"},{"1 bozo": "abs-guide.txt"},{"": "abs-guide.txt"},{"bozo": "abs-guide.txt"},{"bozo": "abs-guide.txt"},{"": "abs-guide.txt"},{"0 Jan 29 23:58 file1": "abs-guide.txt"},{"0 Jan 29 23:58 file2": "abs-guide.txt"},{"": "abs-guide.txt"},{"bash$ ls -l | xargs": "abs-guide.txt"},{"total 0 -rw-rw-r-- 1 bozo bozo 0 Jan 29 23:58 file1 -rw-rw-r-- 1 bozo bozo 0 Jan...": "abs-guide.txt"},{"": "abs-guide.txt"},{"bash$ find ~/mail -type f | xargs grep \"Linux\"": "abs-guide.txt"},{"./misc:User-Agent: slrn/0.9.8.1 (Linux)": "abs-guide.txt"},{"./sent-mail-jul-2005: hosted by the Linux Documentation Project.": "abs-guide.txt"},{"./sent-mail-jul-2005: (Linux Documentation Project Site, rtf version)": "abs-guide.txt"},{"./sent-mail-jul-2005: Subject: Criticism of Bozo's Windows/Linux article": "abs-guide.txt"},{"./sent-mail-jul-2005: while mentioning that the Linux ext2/ext3 filesystem": "abs-guide.txt"},{". . .": "abs-guide.txt"},{"": "abs-guide.txt"},{"ls | xargs -p -l gzip gzips every file in current directory, one at a time, prompting before": "abs-guide.txt"},{"each operation.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Note that xargs processes the arguments passed to it sequentially, one at a time.": "abs-guide.txt"},{"bash$ find /usr/bin | xargs file": "abs-guide.txt"},{"/usr/bin:": "abs-guide.txt"},{"directory": "abs-guide.txt"},{"/usr/bin/foomatic-ppd-options:": "abs-guide.txt"},{". . .": "abs-guide.txt"},{"": "abs-guide.txt"},{"perl script text executable": "abs-guide.txt"},{"": "abs-guide.txt"},{"An interesting xargs option is -n NN, which limits to NN the number of arguments": "abs-guide.txt"},{"passed.": "abs-guide.txt"},{"ls | xargs -n 8 echo lists the files in the current directory in 8 columns.": "abs-guide.txt"},{"Another useful option is -0, in combination with find -print0 or grep -lZ.": "abs-guide.txt"},{"This allows handling arguments containing whitespace or quotes.": "abs-guide.txt"},{"find / -type f -print0 | xargs -0 grep -liwZ GUI | xargs": "abs-guide.txt"},{"-0 rm -f": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"224": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"grep -rliwZ GUI / | xargs -0 rm -f": "abs-guide.txt"},{"Either of the above will remove any file containing \"GUI\". (Thanks, S.C.)": "abs-guide.txt"},{"Or:": "abs-guide.txt"},{"cat /proc/\"$pid\"/\"$OPTION\" | xargs -0 echo": "abs-guide.txt"},{"# Formats output:": "abs-guide.txt"},{"^^^^^^^^^^^^^^^": "abs-guide.txt"},{"# From Han Holl's fixup of \"get-commandline.sh\"": "abs-guide.txt"},{"#+ script in \"/dev and /proc\" chapter.": "abs-guide.txt"},{"": "abs-guide.txt"},{"The -P option to xargs permits running processes in parallel. This speeds up": "abs-guide.txt"},{"execution in a machine with a multicore CPU.": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"ls *gif | xargs -t -n1 -P2 gif2png": "abs-guide.txt"},{"# Converts all the gif images in current directory to png.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Options:": "abs-guide.txt"},{"=======": "abs-guide.txt"},{"-t": "abs-guide.txt"},{"Print command to stderr.": "abs-guide.txt"},{"-n1": "abs-guide.txt"},{"At most 1 argument per command line.": "abs-guide.txt"},{"-P2": "abs-guide.txt"},{"Run up to 2 processes simultaneously.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Thank you, Roberto Polli, for the inspiration.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 16-5. Logfile: Using xargs to monitor system log": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# Generates a log file in current directory": "abs-guide.txt"},{"# from the tail end of /var/log/messages.": "abs-guide.txt"},{"# Note: /var/log/messages must be world readable": "abs-guide.txt"},{"# if this script invoked by an ordinary user.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#root chmod 644 /var/log/messages": "abs-guide.txt"},{"LINES=5": "abs-guide.txt"},{"( date; uname -a ) >>logfile": "abs-guide.txt"},{"# Time and machine name": "abs-guide.txt"},{"echo ---------------------------------------------------------- >>logfile": "abs-guide.txt"},{"tail -n $LINES /var/log/messages | xargs | fmt -s >>logfile": "abs-guide.txt"},{"echo >>logfile": "abs-guide.txt"},{"echo >>logfile": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Note:": "abs-guide.txt"},{"---As Frank Wang points out,": "abs-guide.txt"},{"unmatched quotes (either single or double quotes) in the source file": "abs-guide.txt"},{"may give xargs indigestion.": "abs-guide.txt"},{"He suggests the following substitution for line 15:": "abs-guide.txt"},{"tail -n $LINES /var/log/messages | tr -d \"\\\"'\" | xargs | fmt -s >>logfile": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"225": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Exercise:": "abs-guide.txt"},{"-------Modify this script to track changes in /var/log/messages at intervals": "abs-guide.txt"},{"of 20 minutes.": "abs-guide.txt"},{"Hint: Use the \"watch\" command.": "abs-guide.txt"},{"": "abs-guide.txt"},{"As in find, a curly bracket pair serves as a placeholder for replacement text.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 16-6. Copying files in current directory to another": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# copydir.sh": "abs-guide.txt"},{"# Copy (verbose) all files in current directory ($PWD)": "abs-guide.txt"},{"#+ to directory specified on command-line.": "abs-guide.txt"},{"E_NOARGS=85": "abs-guide.txt"},{"if [ -z \"$1\" ]": "abs-guide.txt"},{"# Exit if no argument given.": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Usage: `basename $0` directory-to-copy-to\"": "abs-guide.txt"},{"exit $E_NOARGS": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"ls": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{". | xargs -i -t cp ./{} $1": "abs-guide.txt"},{"^^ ^^": "abs-guide.txt"},{"^^": "abs-guide.txt"},{"-t is \"verbose\" (output command-line to stderr) option.": "abs-guide.txt"},{"-i is \"replace strings\" option.": "abs-guide.txt"},{"{} is a placeholder for output text.": "abs-guide.txt"},{"This is similar to the use of a curly-bracket pair in \"find.\"": "abs-guide.txt"},{"List the files in current directory (ls .),": "abs-guide.txt"},{"pass the output of \"ls\" as arguments to \"xargs\" (-i -t options),": "abs-guide.txt"},{"then copy (cp) these arguments ({}) to new directory ($1).": "abs-guide.txt"},{"The net result is the exact equivalent of": "abs-guide.txt"},{"cp * $1": "abs-guide.txt"},{"unless any of the filenames has embedded \"whitespace\" characters.": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 16-7. Killing processes by name": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# kill-byname.sh: Killing processes by name.": "abs-guide.txt"},{"# Compare this script with kill-process.sh.": "abs-guide.txt"},{"# For instance,": "abs-guide.txt"},{"#+ try \"./kill-byname.sh xterm\" -#+ and watch all the xterms on your desktop disappear.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Warning:": "abs-guide.txt"},{"------This is a fairly dangerous script.": "abs-guide.txt"},{"Running it carelessly (especially as root)": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"226": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"#+ can cause data loss and other undesirable effects.": "abs-guide.txt"},{"E_BADARGS=66": "abs-guide.txt"},{"if test -z \"$1\" # No command-line arg supplied?": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Usage: `basename $0` Process(es)_to_kill\"": "abs-guide.txt"},{"exit $E_BADARGS": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"PROCESS_NAME=\"$1\"": "abs-guide.txt"},{"ps ax | grep \"$PROCESS_NAME\" | awk '{print $1}' | xargs -i kill {} 2&>/dev/null": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^^": "abs-guide.txt"},{"^^": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"--------------------------------------------------------------Notes:": "abs-guide.txt"},{"-i is the \"replace strings\" option to xargs.": "abs-guide.txt"},{"The curly brackets are the placeholder for the replacement.": "abs-guide.txt"},{"2&>/dev/null suppresses unwanted error messages.": "abs-guide.txt"},{"Can grep \"$PROCESS_NAME\" be replaced by pidof \"$PROCESS_NAME\"?": "abs-guide.txt"},{"---------------------------------------------------------------": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit $?": "abs-guide.txt"},{"# The \"killall\" command has the same effect as this script,": "abs-guide.txt"},{"#+ but using it is not quite as educational.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 16-8. Word frequency analysis using xargs": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# wf2.sh: Crude word frequency analysis on a text file.": "abs-guide.txt"},{"# Uses 'xargs' to decompose lines of text into single words.": "abs-guide.txt"},{"# Compare this example to the \"wf.sh\" script later on.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Check for input file on command-line.": "abs-guide.txt"},{"ARGS=1": "abs-guide.txt"},{"E_BADARGS=85": "abs-guide.txt"},{"E_NOFILE=86": "abs-guide.txt"},{"if [ $# -ne \"$ARGS\" ]": "abs-guide.txt"},{"# Correct number of arguments passed to script?": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Usage: `basename $0` filename\"": "abs-guide.txt"},{"exit $E_BADARGS": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"if [ ! -f \"$1\" ]": "abs-guide.txt"},{"# Does file exist?": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"File \\\"$1\\\" does not exist.\"": "abs-guide.txt"},{"exit $E_NOFILE": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"#####################################################": "abs-guide.txt"},{"cat \"$1\" | xargs -n1 | \\": "abs-guide.txt"},{"# List the file, one word per line.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"227": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"tr A-Z a-z | \\": "abs-guide.txt"},{"# Shift characters to lowercase.": "abs-guide.txt"},{"sed -e 's/\\.//g' -e 's/\\,//g' -e 's/ /\\": "abs-guide.txt"},{"/g' | \\": "abs-guide.txt"},{"# Filter out periods and commas, and": "abs-guide.txt"},{"#+ change space between words to linefeed,": "abs-guide.txt"},{"sort | uniq -c | sort -nr": "abs-guide.txt"},{"# Finally remove duplicates, prefix occurrence count": "abs-guide.txt"},{"#+ and sort numerically.": "abs-guide.txt"},{"#####################################################": "abs-guide.txt"},{"# This does the same job as the \"wf.sh\" example,": "abs-guide.txt"},{"#+ but a bit more ponderously, and it runs more slowly (why?).": "abs-guide.txt"},{"exit $?": "abs-guide.txt"},{"": "abs-guide.txt"},{"expr": "abs-guide.txt"},{"All-purpose expression evaluator: Concatenates and evaluates the arguments according to the": "abs-guide.txt"},{"operation given (arguments must be separated by spaces). Operations may be arithmetic, comparison,": "abs-guide.txt"},{"string, or logical.": "abs-guide.txt"},{"expr 3 + 5": "abs-guide.txt"},{"returns 8": "abs-guide.txt"},{"expr 5 % 3": "abs-guide.txt"},{"returns 2": "abs-guide.txt"},{"expr 1 / 0": "abs-guide.txt"},{"returns the error message, expr: division by zero": "abs-guide.txt"},{"Illegal arithmetic operations not allowed.": "abs-guide.txt"},{"expr 5 \\* 3": "abs-guide.txt"},{"returns 15": "abs-guide.txt"},{"The multiplication operator must be escaped when used in an arithmetic expression with": "abs-guide.txt"},{"expr.": "abs-guide.txt"},{"y=`expr $y + 1`": "abs-guide.txt"},{"Increment a variable, with the same effect as let y=y+1 and y=$(($y+1)). This is an": "abs-guide.txt"},{"example of arithmetic expansion.": "abs-guide.txt"},{"z=`expr substr $string $position $length`": "abs-guide.txt"},{"Extract substring of $length characters, starting at $position.": "abs-guide.txt"},{"Example 16-9. Using expr": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# Demonstrating some of the uses of 'expr'": "abs-guide.txt"},{"# =======================================": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"# Arithmetic Operators": "abs-guide.txt"},{"# ---------- --------echo \"Arithmetic Operators\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"a=`expr 5 + 3`": "abs-guide.txt"},{"echo \"5 + 3 = $a\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"228": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"a=`expr $a + 1`": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"a + 1 = $a\"": "abs-guide.txt"},{"echo \"(incrementing a variable)\"": "abs-guide.txt"},{"a=`expr 5 % 3`": "abs-guide.txt"},{"# modulo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"5 mod 3 = $a\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"# Logical Operators": "abs-guide.txt"},{"# ------- --------# Returns 1 if true, 0 if false,": "abs-guide.txt"},{"#+ opposite of normal Bash convention.": "abs-guide.txt"},{"echo \"Logical Operators\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"x=24": "abs-guide.txt"},{"y=25": "abs-guide.txt"},{"b=`expr $x = $y`": "abs-guide.txt"},{"echo \"b = $b\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Test equality.": "abs-guide.txt"},{"# 0 ( $x -ne $y )": "abs-guide.txt"},{"": "abs-guide.txt"},{"a=3": "abs-guide.txt"},{"b=`expr $a \\> 10`": "abs-guide.txt"},{"echo 'b=`expr $a \\> 10`, therefore...'": "abs-guide.txt"},{"echo \"If a > 10, b = 0 (false)\"": "abs-guide.txt"},{"echo \"b = $b\"": "abs-guide.txt"},{"# 0 ( 3 ! -gt 10 )": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"b=`expr $a \\< 10`": "abs-guide.txt"},{"echo \"If a < 10, b = 1 (true)\"": "abs-guide.txt"},{"echo \"b = $b\"": "abs-guide.txt"},{"# 1 ( 3 -lt 10 )": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"# Note escaping of operators.": "abs-guide.txt"},{"b=`expr $a \\<= 3`": "abs-guide.txt"},{"echo \"If a <= 3, b = 1 (true)\"": "abs-guide.txt"},{"echo \"b = $b\"": "abs-guide.txt"},{"# 1 ( 3 -le 3 )": "abs-guide.txt"},{"# There is also a \"\\>=\" operator (greater than or equal to).": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"# String Operators": "abs-guide.txt"},{"# ------ --------echo \"String Operators\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"a=1234zipper43231": "abs-guide.txt"},{"echo \"The string being operated upon is \\\"$a\\\".\"": "abs-guide.txt"},{"# length: length of string": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"229": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"b=`expr length $a`": "abs-guide.txt"},{"echo \"Length of \\\"$a\\\" is $b.\"": "abs-guide.txt"},{"# index: position of first character in substring": "abs-guide.txt"},{"#": "abs-guide.txt"},{"that matches a character in string": "abs-guide.txt"},{"b=`expr index $a 23`": "abs-guide.txt"},{"echo \"Numerical position of first \\\"2\\\" in \\\"$a\\\" is \\\"$b\\\".\"": "abs-guide.txt"},{"# substr: extract substring, starting position & length specified": "abs-guide.txt"},{"b=`expr substr $a 2 6`": "abs-guide.txt"},{"echo \"Substring of \\\"$a\\\", starting at position 2,\\": "abs-guide.txt"},{"and 6 chars long is \\\"$b\\\".\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# The default behavior of the 'match' operations is to": "abs-guide.txt"},{"#+ search for the specified match at the BEGINNING of the string.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Using Regular Expressions ...": "abs-guide.txt"},{"b=`expr match \"$a\" '[0-9]*'`": "abs-guide.txt"},{"# Numerical count.": "abs-guide.txt"},{"echo Number of digits at the beginning of \\\"$a\\\" is $b.": "abs-guide.txt"},{"b=`expr match \"$a\" '\\([0-9]*\\)'`": "abs-guide.txt"},{"# Note that escaped parentheses": "abs-guide.txt"},{"#": "abs-guide.txt"},{"==": "abs-guide.txt"},{"==": "abs-guide.txt"},{"#+ trigger substring match.": "abs-guide.txt"},{"echo \"The digits at the beginning of \\\"$a\\\" are \\\"$b\\\".\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"The : (null) operator can substitute for match. For example, b=`expr $a : [0-9]*` is": "abs-guide.txt"},{"the exact equivalent of b=`expr match $a [0-9]*` in the above listing.": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"String operations using \\\"expr \\$string : \\\" construct\"": "abs-guide.txt"},{"echo \"===================================================\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"a=1234zipper5FLIPPER43231": "abs-guide.txt"},{"echo \"The string being operated upon is \\\"`expr \"$a\" : '\\(.*\\)'`\\\".\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Escaped parentheses grouping operator.": "abs-guide.txt"},{"== ==": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"***************************": "abs-guide.txt"},{"Escaped parentheses": "abs-guide.txt"},{"match a substring": "abs-guide.txt"},{"***************************": "abs-guide.txt"},{"": "abs-guide.txt"},{"# If no escaped parentheses ...": "abs-guide.txt"},{"#+ then 'expr' converts the string operand to an integer.": "abs-guide.txt"},{"echo \"Length of \\\"$a\\\" is `expr \"$a\" : '.*'`.\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Length of string": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo \"Number of digits at the beginning of \\\"$a\\\" is `expr \"$a\" : '[0-9]*'`.\"": "abs-guide.txt"},{"# ------------------------------------------------------------------------- #": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"The digits at the beginning of \\\"$a\\\" are `expr \"$a\" : '\\([0-9]*\\)'`.\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"230": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"#": "abs-guide.txt"},{"==": "abs-guide.txt"},{"==": "abs-guide.txt"},{"echo \"The first 7 characters of \\\"$a\\\" are `expr \"$a\" : '\\(.......\\)'`.\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"=====": "abs-guide.txt"},{"==": "abs-guide.txt"},{"==": "abs-guide.txt"},{"# Again, escaped parentheses force a substring match.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"echo \"The last 7 characters of \\\"$a\\\" are `expr \"$a\" : '.*\\(.......\\)'`.\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"====": "abs-guide.txt"},{"end of string operator ^^": "abs-guide.txt"},{"# (In fact, means skip over one or more of any characters until specified": "abs-guide.txt"},{"#+ substring found.)": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"The above script illustrates how expr uses the escaped parentheses -- \\( ... \\) -- grouping operator in tandem": "abs-guide.txt"},{"with regular expression parsing to match a substring. Here is a another example, this time from \"real life.\"": "abs-guide.txt"},{"# Strip the whitespace from the beginning and end.": "abs-guide.txt"},{"LRFDATE=`expr \"$LRFDATE\" : '[[:space:]]*\\(.*\\)[[:space:]]*$'`": "abs-guide.txt"},{"# From Peter Knowles' \"booklistgen.sh\" script": "abs-guide.txt"},{"#+ for converting files to Sony Librie/PRS-50X format.": "abs-guide.txt"},{"# (http://booklistgensh.peterknowles.com)": "abs-guide.txt"},{"": "abs-guide.txt"},{"Perl, sed, and awk have far superior string parsing facilities. A short sed or awk \"subroutine\" within a script": "abs-guide.txt"},{"(see Section 36.2) is an attractive alternative to expr.": "abs-guide.txt"},{"See Section 10.1 for more on using expr in string operations.": "abs-guide.txt"},{"": "abs-guide.txt"},{"16.3. Time / Date Commands": "abs-guide.txt"},{"Time/date and timing": "abs-guide.txt"},{"date": "abs-guide.txt"},{"Simply invoked, date prints the date and time to stdout. Where this command gets interesting is in": "abs-guide.txt"},{"its formatting and parsing options.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 16-10. Using date": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# Exercising the 'date' command": "abs-guide.txt"},{"echo \"The number of days since the year's beginning is `date +%j`.\"": "abs-guide.txt"},{"# Needs a leading '+' to invoke formatting.": "abs-guide.txt"},{"# %j gives day of year.": "abs-guide.txt"},{"echo \"The number of seconds elapsed since 01/01/1970 is `date +%s`.\"": "abs-guide.txt"},{"# %s yields number of seconds since \"UNIX epoch\" began,": "abs-guide.txt"},{"#+ but how is this useful?": "abs-guide.txt"},{"prefix=temp": "abs-guide.txt"},{"suffix=$(date +%s) # The \"+%s\" option to 'date' is GNU-specific.": "abs-guide.txt"},{"filename=$prefix.$suffix": "abs-guide.txt"},{"echo \"Temporary filename = $filename\"": "abs-guide.txt"},{"# It's great for creating \"unique and random\" temp filenames,": "abs-guide.txt"},{"#+ even better than using $$.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"231": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# Read the 'date' man page for more formatting options.": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"The -u option gives the UTC (Universal Coordinated Time).": "abs-guide.txt"},{"bash$ date": "abs-guide.txt"},{"Fri Mar 29 21:07:39 MST 2002": "abs-guide.txt"},{"": "abs-guide.txt"},{"bash$ date -u": "abs-guide.txt"},{"Sat Mar 30 04:07:42 UTC 2002": "abs-guide.txt"},{"": "abs-guide.txt"},{"This option facilitates calculating the time between different dates.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 16-11. Date calculations": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# date-calc.sh": "abs-guide.txt"},{"# Author: Nathan Coulter": "abs-guide.txt"},{"# Used in ABS Guide with permission (thanks!).": "abs-guide.txt"},{"MPHR=60": "abs-guide.txt"},{"HPD=24": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Minutes per hour.": "abs-guide.txt"},{"# Hours per day.": "abs-guide.txt"},{"": "abs-guide.txt"},{"diff () {": "abs-guide.txt"},{"printf '%s' $(( $(date -u -d\"$TARGET\" +%s) $(date -u -d\"$CURRENT\" +%s)))": "abs-guide.txt"},{"#": "abs-guide.txt"},{"%d = day of month.": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"CURRENT=$(date -u -d '2007-09-01 17:30:24' '+%F %T.%N %Z')": "abs-guide.txt"},{"TARGET=$(date -u -d'2007-12-25 12:30:00' '+%F %T.%N %Z')": "abs-guide.txt"},{"# %F = full date, %T = %H:%M:%S, %N = nanoseconds, %Z = time zone.": "abs-guide.txt"},{"printf '\\nIn 2007, %s ' \\": "abs-guide.txt"},{"\"$(date -d\"$CURRENT +": "abs-guide.txt"},{"$(( $(diff) /$MPHR /$MPHR /$HPD / 2 )) days\" '+%d %B')\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"%B = name of month": "abs-guide.txt"},{"^ halfway": "abs-guide.txt"},{"printf 'was halfway between %s ' \"$(date -d\"$CURRENT\" '+%d %B')\"": "abs-guide.txt"},{"printf 'and %s\\n' \"$(date -d\"$TARGET\" '+%d %B')\"": "abs-guide.txt"},{"printf '\\nOn %s at %s, there were\\n' \\": "abs-guide.txt"},{"$(date -u -d\"$CURRENT\" +%F) $(date -u -d\"$CURRENT\" +%T)": "abs-guide.txt"},{"DAYS=$(( $(diff) / $MPHR / $MPHR / $HPD ))": "abs-guide.txt"},{"CURRENT=$(date -d\"$CURRENT +$DAYS days\" '+%F %T.%N %Z')": "abs-guide.txt"},{"HOURS=$(( $(diff) / $MPHR / $MPHR ))": "abs-guide.txt"},{"CURRENT=$(date -d\"$CURRENT +$HOURS hours\" '+%F %T.%N %Z')": "abs-guide.txt"},{"MINUTES=$(( $(diff) / $MPHR ))": "abs-guide.txt"},{"CURRENT=$(date -d\"$CURRENT +$MINUTES minutes\" '+%F %T.%N %Z')": "abs-guide.txt"},{"printf '%s days, %s hours, ' \"$DAYS\" \"$HOURS\"": "abs-guide.txt"},{"printf '%s minutes, and %s seconds ' \"$MINUTES\" \"$(diff)\"": "abs-guide.txt"},{"printf 'until Christmas Dinner!\\n\\n'": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Exercise:": "abs-guide.txt"},{"-------Rewrite the diff () function to accept passed parameters,": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"232": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"#+ rather than using global variables.": "abs-guide.txt"},{"": "abs-guide.txt"},{"The date command has quite a number of output options. For example %N gives the nanosecond": "abs-guide.txt"},{"portion of the current time. One interesting use for this is to generate random integers.": "abs-guide.txt"},{"date +%N | sed -e 's/000$//' -e 's/^0//'": "abs-guide.txt"},{"^^^^^^^^^^^^^^^^^^^^^^^^^^^^^": "abs-guide.txt"},{"# Strip off leading and trailing zeroes, if present.": "abs-guide.txt"},{"# Length of generated integer depends on": "abs-guide.txt"},{"#+ how many zeroes stripped off.": "abs-guide.txt"},{"# 115281032": "abs-guide.txt"},{"# 63408725": "abs-guide.txt"},{"# 394504284": "abs-guide.txt"},{"": "abs-guide.txt"},{"There are many more options (try man date).": "abs-guide.txt"},{"date +%j": "abs-guide.txt"},{"# Echoes day of the year (days elapsed since January 1).": "abs-guide.txt"},{"date +%k%M": "abs-guide.txt"},{"# Echoes hour and minute in 24-hour format, as a single digit string.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# The 'TZ' parameter permits overriding the default time zone.": "abs-guide.txt"},{"date": "abs-guide.txt"},{"# Mon Mar 28 21:42:16 MST 2005": "abs-guide.txt"},{"TZ=EST date": "abs-guide.txt"},{"# Mon Mar 28 23:42:16 EST 2005": "abs-guide.txt"},{"# Thanks, Frank Kannemann and Pete Sjoberg, for the tip.": "abs-guide.txt"},{"": "abs-guide.txt"},{"SixDaysAgo=$(date --date='6 days ago')": "abs-guide.txt"},{"OneMonthAgo=$(date --date='1 month ago')": "abs-guide.txt"},{"OneYearAgo=$(date --date='1 year ago')": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Four weeks back (not a month!)": "abs-guide.txt"},{"": "abs-guide.txt"},{"See also Example 3-4 and Example A-43.": "abs-guide.txt"},{"zdump": "abs-guide.txt"},{"Time zone dump: echoes the time in a specified time zone.": "abs-guide.txt"},{"bash$ zdump EST": "abs-guide.txt"},{"EST Tue Sep 18 22:09:22 2001 EST": "abs-guide.txt"},{"": "abs-guide.txt"},{"time": "abs-guide.txt"},{"Outputs verbose timing statistics for executing a command.": "abs-guide.txt"},{"time ls -l / gives something like this:": "abs-guide.txt"},{"real": "abs-guide.txt"},{"user": "abs-guide.txt"},{"sys": "abs-guide.txt"},{"": "abs-guide.txt"},{"0m0.067s": "abs-guide.txt"},{"0m0.004s": "abs-guide.txt"},{"0m0.005s": "abs-guide.txt"},{"": "abs-guide.txt"},{"See also the very similar times command in the previous section.": "abs-guide.txt"},{"As of version 2.0 of Bash, time became a shell reserved word, with slightly altered": "abs-guide.txt"},{"behavior in a pipeline.": "abs-guide.txt"},{"touch": "abs-guide.txt"},{"Utility for updating access/modification times of a file to current system time or other specified time,": "abs-guide.txt"},{"but also useful for creating a new file. The command touch zzz will create a new file of zero": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"233": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"length, named zzz, assuming that zzz did not previously exist. Time-stamping empty files in this": "abs-guide.txt"},{"way is useful for storing date information, for example in keeping track of modification times on a": "abs-guide.txt"},{"project.": "abs-guide.txt"},{"The touch command is equivalent to : >> newfile or >> newfile (for": "abs-guide.txt"},{"ordinary files).": "abs-guide.txt"},{"Before doing a cp -u (copy/update), use touch to update the time stamp of files you": "abs-guide.txt"},{"don't wish overwritten.": "abs-guide.txt"},{"As an example, if the directory /home/bozo/tax_audit contains the files": "abs-guide.txt"},{"spreadsheet-051606.data, spreadsheet-051706.data, and": "abs-guide.txt"},{"spreadsheet-051806.data, then doing a touch spreadsheet*.data will protect": "abs-guide.txt"},{"these files from being overwritten by files with the same names during a cp -u": "abs-guide.txt"},{"/home/bozo/financial_info/spreadsheet*data /home/bozo/tax_audit.": "abs-guide.txt"},{"at": "abs-guide.txt"},{"The at job control command executes a given set of commands at a specified time. Superficially, it": "abs-guide.txt"},{"resembles cron, however, at is chiefly useful for one-time execution of a command set.": "abs-guide.txt"},{"at 2pm January 15 prompts for a set of commands to execute at that time. These commands": "abs-guide.txt"},{"should be shell-script compatible, since, for all practical purposes, the user is typing in an executable": "abs-guide.txt"},{"shell script a line at a time. Input terminates with a Ctl-D.": "abs-guide.txt"},{"Using either the -f option or input redirection (<), at reads a command list from a file. This file is an": "abs-guide.txt"},{"executable shell script, though it should, of course, be non-interactive. Particularly clever is including": "abs-guide.txt"},{"the run-parts command in the file to execute a different set of scripts.": "abs-guide.txt"},{"bash$ at 2:30 am Friday < at-jobs.list": "abs-guide.txt"},{"job 2 at 2000-10-27 02:30": "abs-guide.txt"},{"": "abs-guide.txt"},{"batch": "abs-guide.txt"},{"The batch job control command is similar to at, but it runs a command list when the system load": "abs-guide.txt"},{"drops below .8. Like at, it can read commands from a file with the -f option.": "abs-guide.txt"},{"": "abs-guide.txt"},{"The concept of batch processing dates back to the era of mainframe computers. It means running a": "abs-guide.txt"},{"set of commands without user intervention.": "abs-guide.txt"},{"cal": "abs-guide.txt"},{"Prints a neatly formatted monthly calendar to stdout. Will do current year or a large range of past": "abs-guide.txt"},{"and future years.": "abs-guide.txt"},{"sleep": "abs-guide.txt"},{"This is the shell equivalent of a wait loop. It pauses for a specified number of seconds, doing nothing.": "abs-guide.txt"},{"It can be useful for timing or in processes running in the background, checking for a specific event": "abs-guide.txt"},{"every so often (polling), as in Example 32-6.": "abs-guide.txt"},{"sleep 3": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Pauses 3 seconds.": "abs-guide.txt"},{"": "abs-guide.txt"},{"The sleep command defaults to seconds, but minute, hours, or days may also be": "abs-guide.txt"},{"specified.": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"234": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"sleep 3 h": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Pauses 3 hours!": "abs-guide.txt"},{"": "abs-guide.txt"},{"The watch command may be a better choice than sleep for running commands at": "abs-guide.txt"},{"timed intervals.": "abs-guide.txt"},{"usleep": "abs-guide.txt"},{"Microsleep (the u may be read as the Greek mu, or micro- prefix). This is the same as sleep, above,": "abs-guide.txt"},{"but \"sleeps\" in microsecond intervals. It can be used for fine-grained timing, or for polling an ongoing": "abs-guide.txt"},{"process at very frequent intervals.": "abs-guide.txt"},{"usleep 30": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Pauses 30 microseconds.": "abs-guide.txt"},{"": "abs-guide.txt"},{"This command is part of the Red Hat initscripts / rc-scripts package.": "abs-guide.txt"},{"The usleep command does not provide particularly accurate timing, and is therefore": "abs-guide.txt"},{"unsuitable for critical timing loops.": "abs-guide.txt"},{"hwclock, clock": "abs-guide.txt"},{"The hwclock command accesses or adjusts the machine's hardware clock. Some options require root": "abs-guide.txt"},{"privileges. The /etc/rc.d/rc.sysinit startup file uses hwclock to set the system time from": "abs-guide.txt"},{"the hardware clock at bootup.": "abs-guide.txt"},{"The clock command is a synonym for hwclock.": "abs-guide.txt"},{"": "abs-guide.txt"},{"16.4. Text Processing Commands": "abs-guide.txt"},{"Commands affecting text and text files": "abs-guide.txt"},{"sort": "abs-guide.txt"},{"File sort utility, often used as a filter in a pipe. This command sorts a text stream or file forwards or": "abs-guide.txt"},{"backwards, or according to various keys or character positions. Using the -m option, it merges": "abs-guide.txt"},{"presorted input files. The info page lists its many capabilities and options. See Example 11-10,": "abs-guide.txt"},{"Example 11-11, and Example A-8.": "abs-guide.txt"},{"tsort": "abs-guide.txt"},{"Topological sort, reading in pairs of whitespace-separated strings and sorting according to input": "abs-guide.txt"},{"patterns. The original purpose of tsort was to sort a list of dependencies for an obsolete version of the": "abs-guide.txt"},{"ld linker in an \"ancient\" version of UNIX.": "abs-guide.txt"},{"The results of a tsort will usually differ markedly from those of the standard sort command, above.": "abs-guide.txt"},{"uniq": "abs-guide.txt"},{"This filter removes duplicate lines from a sorted file. It is often seen in a pipe coupled with sort.": "abs-guide.txt"},{"cat list-1 list-2 list-3 | sort | uniq > final.list": "abs-guide.txt"},{"# Concatenates the list files,": "abs-guide.txt"},{"# sorts them,": "abs-guide.txt"},{"# removes duplicate lines,": "abs-guide.txt"},{"# and finally writes the result to an output file.": "abs-guide.txt"},{"": "abs-guide.txt"},{"The useful -c option prefixes each line of the input file with its number of occurrences.": "abs-guide.txt"},{"bash$ cat testfile": "abs-guide.txt"},{"This line occurs only once.": "abs-guide.txt"},{"This line occurs twice.": "abs-guide.txt"},{"This line occurs twice.": "abs-guide.txt"},{"This line occurs three times.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"235": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"This line occurs three times.": "abs-guide.txt"},{"This line occurs three times.": "abs-guide.txt"},{"": "abs-guide.txt"},{"bash$ uniq -c testfile": "abs-guide.txt"},{"1 This line occurs only once.": "abs-guide.txt"},{"2 This line occurs twice.": "abs-guide.txt"},{"3 This line occurs three times.": "abs-guide.txt"},{"": "abs-guide.txt"},{"bash$ sort testfile | uniq -c | sort -nr": "abs-guide.txt"},{"3 This line occurs three times.": "abs-guide.txt"},{"2 This line occurs twice.": "abs-guide.txt"},{"1 This line occurs only once.": "abs-guide.txt"},{"": "abs-guide.txt"},{"The sort INPUTFILE | uniq -c | sort -nr command string produces a frequency of": "abs-guide.txt"},{"occurrence listing on the INPUTFILE file (the -nr options to sort cause a reverse numerical sort).": "abs-guide.txt"},{"This template finds use in analysis of log files and dictionary lists, and wherever the lexical structure": "abs-guide.txt"},{"of a document needs to be examined.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 16-12. Word Frequency Analysis": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# wf.sh: Crude word frequency analysis on a text file.": "abs-guide.txt"},{"# This is a more efficient version of the \"wf2.sh\" script.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Check for input file on command-line.": "abs-guide.txt"},{"ARGS=1": "abs-guide.txt"},{"E_BADARGS=85": "abs-guide.txt"},{"E_NOFILE=86": "abs-guide.txt"},{"if [ $# -ne \"$ARGS\" ] # Correct number of arguments passed to script?": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Usage: `basename $0` filename\"": "abs-guide.txt"},{"exit $E_BADARGS": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"if [ ! -f \"$1\" ]": "abs-guide.txt"},{"# Check if file exists.": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"File \\\"$1\\\" does not exist.\"": "abs-guide.txt"},{"exit $E_NOFILE": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"########################################################": "abs-guide.txt"},{"# main ()": "abs-guide.txt"},{"sed -e 's/\\.//g' -e 's/\\,//g' -e 's/ /\\": "abs-guide.txt"},{"/g' \"$1\" | tr 'A-Z' 'a-z' | sort | uniq -c | sort -nr": "abs-guide.txt"},{"#": "abs-guide.txt"},{"=========================": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Frequency of occurrence": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"Filter out periods and commas, and": "abs-guide.txt"},{"change space between words to linefeed,": "abs-guide.txt"},{"then shift characters to lowercase, and": "abs-guide.txt"},{"finally prefix occurrence count and sort numerically.": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Arun Giridhar suggests modifying the above to:": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"236": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# . . . | sort | uniq -c | sort +1 [-f] | sort +0 -nr": "abs-guide.txt"},{"# This adds a secondary sort key, so instances of": "abs-guide.txt"},{"#+ equal occurrence are sorted alphabetically.": "abs-guide.txt"},{"# As he explains it:": "abs-guide.txt"},{"# \"This is effectively a radix sort, first on the": "abs-guide.txt"},{"#+ least significant column": "abs-guide.txt"},{"#+ (word or string, optionally case-insensitive)": "abs-guide.txt"},{"#+ and last on the most significant column (frequency).\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# As Frank Wang explains, the above is equivalent to": "abs-guide.txt"},{"#+": "abs-guide.txt"},{". . . | sort | uniq -c | sort +0 -nr": "abs-guide.txt"},{"#+ and the following also works:": "abs-guide.txt"},{"#+": "abs-guide.txt"},{". . . | sort | uniq -c | sort -k1nr -k": "abs-guide.txt"},{"########################################################": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"# Exercises:": "abs-guide.txt"},{"# --------# 1) Add 'sed' commands to filter out other punctuation,": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"such as semicolons.": "abs-guide.txt"},{"# 2) Modify the script to also filter out multiple spaces and": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"other whitespace.": "abs-guide.txt"},{"bash$ cat testfile": "abs-guide.txt"},{"This line occurs only once.": "abs-guide.txt"},{"This line occurs twice.": "abs-guide.txt"},{"This line occurs twice.": "abs-guide.txt"},{"This line occurs three times.": "abs-guide.txt"},{"This line occurs three times.": "abs-guide.txt"},{"This line occurs three times.": "abs-guide.txt"},{"": "abs-guide.txt"},{"bash$ ./wf.sh testfile": "abs-guide.txt"},{"6 this": "abs-guide.txt"},{"6 occurs": "abs-guide.txt"},{"6 line": "abs-guide.txt"},{"3 times": "abs-guide.txt"},{"3 three": "abs-guide.txt"},{"2 twice": "abs-guide.txt"},{"1 only": "abs-guide.txt"},{"1 once": "abs-guide.txt"},{"": "abs-guide.txt"},{"expand, unexpand": "abs-guide.txt"},{"The expand filter converts tabs to spaces. It is often used in a pipe.": "abs-guide.txt"},{"The unexpand filter converts spaces to tabs. This reverses the effect of expand.": "abs-guide.txt"},{"cut": "abs-guide.txt"},{"A tool for extracting fields from files. It is similar to the print $N command set in awk, but more": "abs-guide.txt"},{"limited. It may be simpler to use cut in a script than awk. Particularly important are the -d (delimiter)": "abs-guide.txt"},{"and -f (field specifier) options.": "abs-guide.txt"},{"Using cut to obtain a listing of the mounted filesystems:": "abs-guide.txt"},{"cut -d ' ' -f1,2 /etc/mtab": "abs-guide.txt"},{"": "abs-guide.txt"},{"Using cut to list the OS and kernel version:": "abs-guide.txt"},{"uname -a | cut -d\" \" -f1,3,11,12": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"237": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"Using cut to extract message headers from an e-mail folder:": "abs-guide.txt"},{"bash$ grep '^Subject:' read-messages | cut -c10-80": "abs-guide.txt"},{"Re: Linux suitable for mission-critical apps?": "abs-guide.txt"},{"MAKE MILLIONS WORKING AT HOME!!!": "abs-guide.txt"},{"Spam complaint": "abs-guide.txt"},{"Re: Spam complaint": "abs-guide.txt"},{"": "abs-guide.txt"},{"Using cut to parse a file:": "abs-guide.txt"},{"# List all the users in /etc/passwd.": "abs-guide.txt"},{"FILENAME=/etc/passwd": "abs-guide.txt"},{"for user in $(cut -d: -f1 $FILENAME)": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo $user": "abs-guide.txt"},{"done": "abs-guide.txt"},{"# Thanks, Oleg Philon for suggesting this.": "abs-guide.txt"},{"": "abs-guide.txt"},{"cut -d ' ' -f2,3 filename is equivalent to awk -F'[ ]' '{ print $2, $3 }'": "abs-guide.txt"},{"filename": "abs-guide.txt"},{"It is even possible to specify a linefeed as a delimiter. The trick is to actually embed a": "abs-guide.txt"},{"linefeed (RETURN) in the command sequence.": "abs-guide.txt"},{"bash$ cut -d'": "abs-guide.txt"},{"' -f3,7,19 testfile": "abs-guide.txt"},{"This is line 3 of testfile.": "abs-guide.txt"},{"This is line 7 of testfile.": "abs-guide.txt"},{"This is line 19 of testfile.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Thank you, Jaka Kranjc, for pointing this out.": "abs-guide.txt"},{"See also Example 16-48.": "abs-guide.txt"},{"paste": "abs-guide.txt"},{"Tool for merging together different files into a single, multi-column file. In combination with cut,": "abs-guide.txt"},{"useful for creating system log files.": "abs-guide.txt"},{"bash$ cat items": "abs-guide.txt"},{"alphabet blocks": "abs-guide.txt"},{"building blocks": "abs-guide.txt"},{"cables": "abs-guide.txt"},{"bash$ cat prices": "abs-guide.txt"},{"$1.00/dozen": "abs-guide.txt"},{"$2.50 ea.": "abs-guide.txt"},{"$3.75": "abs-guide.txt"},{"bash$ paste items prices": "abs-guide.txt"},{"alphabet blocks $1.00/dozen": "abs-guide.txt"},{"building blocks $2.50 ea.": "abs-guide.txt"},{"cables $3.75": "abs-guide.txt"},{"": "abs-guide.txt"},{"join": "abs-guide.txt"},{"Consider this a special-purpose cousin of paste. This powerful utility allows merging two files in a": "abs-guide.txt"},{"meaningful fashion, which essentially creates a simple version of a relational database.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"238": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"The join command operates on exactly two files, but pastes together only those lines with a common": "abs-guide.txt"},{"tagged field (usually a numerical label), and writes the result to stdout. The files to be joined": "abs-guide.txt"},{"should be sorted according to the tagged field for the matchups to work properly.": "abs-guide.txt"},{"File: 1.data": "abs-guide.txt"},{"100 Shoes": "abs-guide.txt"},{"200 Laces": "abs-guide.txt"},{"300 Socks": "abs-guide.txt"},{"File: 2.data": "abs-guide.txt"},{"100 $40.00": "abs-guide.txt"},{"200 $1.00": "abs-guide.txt"},{"300 $2.00": "abs-guide.txt"},{"bash$ join 1.data 2.data": "abs-guide.txt"},{"File: 1.data 2.data": "abs-guide.txt"},{"100 Shoes $40.00": "abs-guide.txt"},{"200 Laces $1.00": "abs-guide.txt"},{"300 Socks $2.00": "abs-guide.txt"},{"": "abs-guide.txt"},{"The tagged field appears only once in the output.": "abs-guide.txt"},{"head": "abs-guide.txt"},{"lists the beginning of a file to stdout. The default is 10 lines, but a different number can be": "abs-guide.txt"},{"specified. The command has a number of interesting options.": "abs-guide.txt"},{"Example 16-13. Which files are scripts?": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# script-detector.sh: Detects scripts within a directory.": "abs-guide.txt"},{"TESTCHARS=2": "abs-guide.txt"},{"SHABANG='#!'": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Test first 2 characters.": "abs-guide.txt"},{"# Scripts begin with a \"sha-bang.\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"for file in * # Traverse all the files in current directory.": "abs-guide.txt"},{"do": "abs-guide.txt"},{"if [[ `head -c$TESTCHARS \"$file\"` = \"$SHABANG\" ]]": "abs-guide.txt"},{"#": "abs-guide.txt"},{"head -c2": "abs-guide.txt"},{"#!": "abs-guide.txt"},{"# The '-c' option to \"head\" outputs a specified": "abs-guide.txt"},{"#+ number of characters, rather than lines (the default).": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"File \\\"$file\\\" is a script.\"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo \"File \\\"$file\\\" is *not* a script.\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"done": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"# Exercises:": "abs-guide.txt"},{"# --------# 1) Modify this script to take as an optional argument": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"the directory to scan for scripts": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"(rather than just the current working directory).": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"239": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# 2) As it stands, this script gives \"false positives\" for": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"Perl, awk, and other scripting language scripts.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Correct this.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 16-14. Generating 10-digit random numbers": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# rnd.sh: Outputs a 10-digit random number": "abs-guide.txt"},{"# Script by Stephane Chazelas.": "abs-guide.txt"},{"head -c4 /dev/urandom | od -N4 -tu4 | sed -ne '1s/.* //p'": "abs-guide.txt"},{"": "abs-guide.txt"},{"# =================================================================== #": "abs-guide.txt"},{"# Analysis": "abs-guide.txt"},{"# -------# head:": "abs-guide.txt"},{"# -c4 option takes first 4 bytes.": "abs-guide.txt"},{"# od:": "abs-guide.txt"},{"# -N4 option limits output to 4 bytes.": "abs-guide.txt"},{"# -tu4 option selects unsigned decimal format for output.": "abs-guide.txt"},{"# sed:": "abs-guide.txt"},{"# -n option, in combination with \"p\" flag to the \"s\" command,": "abs-guide.txt"},{"# outputs only matched lines.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# The author of this script explains the action of 'sed', as follows.": "abs-guide.txt"},{"# head -c4 /dev/urandom | od -N4 -tu4 | sed -ne '1s/.* //p'": "abs-guide.txt"},{"# ----------------------------------> |": "abs-guide.txt"},{"# Assume output up to \"sed\" --------> |": "abs-guide.txt"},{"# is 0000000 1198195154\\n": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"sed begins reading characters: 0000000 1198195154\\n.": "abs-guide.txt"},{"Here it finds a newline character,": "abs-guide.txt"},{"so it is ready to process the first line (0000000 1198195154).": "abs-guide.txt"},{"It looks at its <range><action>s. The first and only one is": "abs-guide.txt"},{"range": "abs-guide.txt"},{"1": "abs-guide.txt"},{"": "abs-guide.txt"},{"action": "abs-guide.txt"},{"s/.* //p": "abs-guide.txt"},{"": "abs-guide.txt"},{"The line number is in the range, so it executes the action:": "abs-guide.txt"},{"tries to substitute the longest string ending with a space in the line": "abs-guide.txt"},{"(\"0000000 \") with nothing (//), and if it succeeds, prints the result": "abs-guide.txt"},{"(\"p\" is a flag to the \"s\" command here, this is different": "abs-guide.txt"},{"from the \"p\" command).": "abs-guide.txt"},{"": "abs-guide.txt"},{"# sed is now ready to continue reading its input. (Note that before": "abs-guide.txt"},{"#+ continuing, if -n option had not been passed, sed would have printed": "abs-guide.txt"},{"#+ the line once again).": "abs-guide.txt"},{"# Now, sed reads the remainder of the characters, and finds the": "abs-guide.txt"},{"#+ end of the file.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"240": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# It is now ready to process its 2nd line (which is also numbered '$' as": "abs-guide.txt"},{"#+ it's the last one).": "abs-guide.txt"},{"# It sees it is not matched by any <range>, so its job is done.": "abs-guide.txt"},{"# In few word this sed commmand means:": "abs-guide.txt"},{"# \"On the first line only, remove any character up to the right-most space,": "abs-guide.txt"},{"#+ then print it.\"": "abs-guide.txt"},{"# A better way to do this would have been:": "abs-guide.txt"},{"#": "abs-guide.txt"},{"sed -e 's/.* //;q'": "abs-guide.txt"},{"# Here, two <range><action>s (could have been written": "abs-guide.txt"},{"#": "abs-guide.txt"},{"sed -e 's/.* //' -e q):": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"range": "abs-guide.txt"},{"nothing (matches line)": "abs-guide.txt"},{"nothing (matches line)": "abs-guide.txt"},{"": "abs-guide.txt"},{"action": "abs-guide.txt"},{"s/.* //": "abs-guide.txt"},{"q (quit)": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Here, sed only reads its first line of input.": "abs-guide.txt"},{"# It performs both actions, and prints the line (substituted) before": "abs-guide.txt"},{"#+ quitting (because of the \"q\" action) since the \"-n\" option is not passed.": "abs-guide.txt"},{"# =================================================================== #": "abs-guide.txt"},{"# An even simpler altenative to the above one-line script would be:": "abs-guide.txt"},{"#": "abs-guide.txt"},{"head -c4 /dev/urandom| od -An -tu4": "abs-guide.txt"},{"exit": "abs-guide.txt"},{"": "abs-guide.txt"},{"See also Example 16-39.": "abs-guide.txt"},{"tail": "abs-guide.txt"},{"lists the (tail) end of a file to stdout. The default is 10 lines, but this can be changed with the -n": "abs-guide.txt"},{"option. Commonly used to keep track of changes to a system logfile, using the -f option, which": "abs-guide.txt"},{"outputs lines appended to the file.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 16-15. Using tail to monitor the system log": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"filename=sys.log": "abs-guide.txt"},{"cat /dev/null > $filename; echo \"Creating / cleaning out file.\"": "abs-guide.txt"},{"# Creates the file if it does not already exist,": "abs-guide.txt"},{"#+ and truncates it to zero length if it does.": "abs-guide.txt"},{"# : > filename": "abs-guide.txt"},{"and": "abs-guide.txt"},{"> filename also work.": "abs-guide.txt"},{"tail /var/log/messages > $filename": "abs-guide.txt"},{"# /var/log/messages must have world read permission for this to work.": "abs-guide.txt"},{"echo \"$filename contains tail end of system log.\"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"To list a specific line of a text file, pipe the output of head to tail -n 1. For example": "abs-guide.txt"},{"head -n 8 database.txt | tail -n 1 lists the 8th line of the file": "abs-guide.txt"},{"database.txt.": "abs-guide.txt"},{"To set a variable to a given block of a text file:": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"241": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"var=$(head -n $m $filename | tail -n $n)": "abs-guide.txt"},{"# filename = name of file": "abs-guide.txt"},{"# m = from beginning of file, number of lines to end of block": "abs-guide.txt"},{"# n = number of lines to set variable to (trim from end of block)": "abs-guide.txt"},{"": "abs-guide.txt"},{"Newer implementations of tail deprecate the older tail -$LINES filename usage. The": "abs-guide.txt"},{"standard tail -n $LINES filename is correct.": "abs-guide.txt"},{"See also Example 16-5, Example 16-39 and Example 32-6.": "abs-guide.txt"},{"grep": "abs-guide.txt"},{"A multi-purpose file search tool that uses Regular Expressions. It was originally a command/filter in": "abs-guide.txt"},{"the venerable ed line editor: g/re/p -- global - regular expression - print.": "abs-guide.txt"},{"grep pattern [file...]": "abs-guide.txt"},{"Search the target file(s) for occurrences of pattern, where pattern may be literal text or a": "abs-guide.txt"},{"Regular Expression.": "abs-guide.txt"},{"bash$ grep '[rst]ystem.$' osinfo.txt": "abs-guide.txt"},{"The GPL governs the distribution of the Linux operating system.": "abs-guide.txt"},{"": "abs-guide.txt"},{"If no target file(s) specified, grep works as a filter on stdout, as in a pipe.": "abs-guide.txt"},{"bash$ ps ax | grep clock": "abs-guide.txt"},{"765 tty1": "abs-guide.txt"},{"S": "abs-guide.txt"},{"0:00 xclock": "abs-guide.txt"},{"901 pts/1": "abs-guide.txt"},{"S": "abs-guide.txt"},{"0:00 grep clock": "abs-guide.txt"},{"": "abs-guide.txt"},{"The -i option causes a case-insensitive search.": "abs-guide.txt"},{"The -w option matches only whole words.": "abs-guide.txt"},{"The -l option lists only the files in which matches were found, but not the matching lines.": "abs-guide.txt"},{"The -r (recursive) option searches files in the current working directory and all subdirectories below": "abs-guide.txt"},{"it.": "abs-guide.txt"},{"The -n option lists the matching lines, together with line numbers.": "abs-guide.txt"},{"bash$ grep -n Linux osinfo.txt": "abs-guide.txt"},{"2:This is a file containing information about Linux.": "abs-guide.txt"},{"6:The GPL governs the distribution of the Linux operating system.": "abs-guide.txt"},{"": "abs-guide.txt"},{"The -v (or --invert-match) option filters out matches.": "abs-guide.txt"},{"grep pattern1 *.txt | grep -v pattern2": "abs-guide.txt"},{"# Matches all lines in \"*.txt\" files containing \"pattern1\",": "abs-guide.txt"},{"# but ***not*** \"pattern2\".": "abs-guide.txt"},{"": "abs-guide.txt"},{"The -c (--count) option gives a numerical count of matches, rather than actually listing the": "abs-guide.txt"},{"matches.": "abs-guide.txt"},{"grep -c txt *.sgml": "abs-guide.txt"},{"": "abs-guide.txt"},{"# (number of occurrences of \"txt\" in \"*.sgml\" files)": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"242": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"#": "abs-guide.txt"},{"grep -cz .": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^ dot": "abs-guide.txt"},{"# means count (-c) zero-separated (-z) items matching \".\"": "abs-guide.txt"},{"# that is, non-empty ones (containing at least 1 character).": "abs-guide.txt"},{"#": "abs-guide.txt"},{"printf 'a b\\nc d\\n\\n\\n\\n\\n\\000\\n\\000e\\000\\000\\nf' | grep -cz .": "abs-guide.txt"},{"printf 'a b\\nc d\\n\\n\\n\\n\\n\\000\\n\\000e\\000\\000\\nf' | grep -cz '$'": "abs-guide.txt"},{"printf 'a b\\nc d\\n\\n\\n\\n\\n\\000\\n\\000e\\000\\000\\nf' | grep -cz '^'": "abs-guide.txt"},{"#": "abs-guide.txt"},{"printf 'a b\\nc d\\n\\n\\n\\n\\n\\000\\n\\000e\\000\\000\\nf' | grep -c '$'": "abs-guide.txt"},{"# By default, newline chars (\\n) separate items to match.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# 3": "abs-guide.txt"},{"# 5": "abs-guide.txt"},{"# 5": "abs-guide.txt"},{"# 9": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Note that the -z option is GNU \"grep\" specific.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Thanks, S.C.": "abs-guide.txt"},{"": "abs-guide.txt"},{"The --color (or --colour) option marks the matching string in color (on the console or in an": "abs-guide.txt"},{"xterm window). Since grep prints out each entire line containing the matching pattern, this lets you": "abs-guide.txt"},{"see exactly what is being matched. See also the -o option, which shows only the matching portion of": "abs-guide.txt"},{"the line(s).": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 16-16. Printing out the From lines in stored e-mail messages": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# from.sh": "abs-guide.txt"},{"# Emulates the useful 'from' utility in Solaris, BSD, etc.": "abs-guide.txt"},{"# Echoes the \"From\" header line in all messages": "abs-guide.txt"},{"#+ in your e-mail directory.": "abs-guide.txt"},{"": "abs-guide.txt"},{"MAILDIR=~/mail/*": "abs-guide.txt"},{"# No quoting of variable. Why?": "abs-guide.txt"},{"# Maybe check if-exists $MAILDIR:": "abs-guide.txt"},{"if [ -d $MAILDIR ] . . .": "abs-guide.txt"},{"GREP_OPTS=\"-H -A 5 --color\"": "abs-guide.txt"},{"# Show file, plus extra context lines": "abs-guide.txt"},{"#+ and display \"From\" in color.": "abs-guide.txt"},{"TARGETSTR=\"^From\"": "abs-guide.txt"},{"# \"From\" at beginning of line.": "abs-guide.txt"},{"for file in $MAILDIR": "abs-guide.txt"},{"# No quoting of variable.": "abs-guide.txt"},{"do": "abs-guide.txt"},{"grep $GREP_OPTS \"$TARGETSTR\" \"$file\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^^^^^^^^^^": "abs-guide.txt"},{"# Again, do not quote this variable.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"done": "abs-guide.txt"},{"exit $?": "abs-guide.txt"},{"# You might wish to pipe the output of this script to 'more'": "abs-guide.txt"},{"#+ or redirect it to a file . . .": "abs-guide.txt"},{"": "abs-guide.txt"},{"When invoked with more than one target file given, grep specifies which file contains matches.": "abs-guide.txt"},{"bash$ grep Linux osinfo.txt misc.txt": "abs-guide.txt"},{"osinfo.txt:This is a file containing information about Linux.": "abs-guide.txt"},{"osinfo.txt:The GPL governs the distribution of the Linux operating system.": "abs-guide.txt"},{"misc.txt:The Linux operating system is steadily gaining in popularity.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"243": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"To force grep to show the filename when searching only one target file, simply give": "abs-guide.txt"},{"/dev/null as the second file.": "abs-guide.txt"},{"bash$ grep Linux osinfo.txt /dev/null": "abs-guide.txt"},{"osinfo.txt:This is a file containing information about Linux.": "abs-guide.txt"},{"osinfo.txt:The GPL governs the distribution of the Linux operating system.": "abs-guide.txt"},{"": "abs-guide.txt"},{"If there is a successful match, grep returns an exit status of 0, which makes it useful in a condition test": "abs-guide.txt"},{"in a script, especially in combination with the -q option to suppress output.": "abs-guide.txt"},{"SUCCESS=0": "abs-guide.txt"},{"word=Linux": "abs-guide.txt"},{"filename=data.file": "abs-guide.txt"},{"": "abs-guide.txt"},{"# if grep lookup succeeds": "abs-guide.txt"},{"": "abs-guide.txt"},{"grep -q \"$word\" \"$filename\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# The \"-q\" option": "abs-guide.txt"},{"#+ causes nothing to echo to stdout.": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [ $? -eq $SUCCESS ]": "abs-guide.txt"},{"# if grep -q \"$word\" \"$filename\"": "abs-guide.txt"},{"can replace lines 5 - 7.": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"$word found in $filename\"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo \"$word not found in $filename\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 32-6 demonstrates how to use grep to search for a word pattern in a system logfile.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 16-17. Emulating grep in a script": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# grp.sh: Rudimentary reimplementation of grep.": "abs-guide.txt"},{"E_BADARGS=85": "abs-guide.txt"},{"if [ -z \"$1\" ]": "abs-guide.txt"},{"# Check for argument to script.": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Usage: `basename $0` pattern\"": "abs-guide.txt"},{"exit $E_BADARGS": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"for file in *": "abs-guide.txt"},{"# Traverse all files in $PWD.": "abs-guide.txt"},{"do": "abs-guide.txt"},{"output=$(sed -n /\"$1\"/p $file) # Command substitution.": "abs-guide.txt"},{"if [ ! -z \"$output\" ]": "abs-guide.txt"},{"# What happens if \"$output\" is not quoted?": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo -n \"$file: \"": "abs-guide.txt"},{"echo \"$output\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# sed -ne \"/$1/s|^|${file}: |p\" is equivalent to above.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"# Exercises:": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"244": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# --------# 1) Add newlines to output, if more than one match in any given file.": "abs-guide.txt"},{"# 2) Add features.": "abs-guide.txt"},{"": "abs-guide.txt"},{"How can grep search for two (or more) separate patterns? What if you want grep to display all lines": "abs-guide.txt"},{"in a file or files that contain both \"pattern1\" and \"pattern2\"?": "abs-guide.txt"},{"One method is to pipe the result of grep pattern1 to grep pattern2.": "abs-guide.txt"},{"For example, given the following file:": "abs-guide.txt"},{"# Filename: tstfile": "abs-guide.txt"},{"This": "abs-guide.txt"},{"This": "abs-guide.txt"},{"This": "abs-guide.txt"},{"This": "abs-guide.txt"},{"Here": "abs-guide.txt"},{"": "abs-guide.txt"},{"is a sample file.": "abs-guide.txt"},{"is an ordinary text file.": "abs-guide.txt"},{"file does not contain any unusual text.": "abs-guide.txt"},{"file is not unusual.": "abs-guide.txt"},{"is some text.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Now, let's search this file for lines containing both \"file\" and \"text\" . . .": "abs-guide.txt"},{"bash$ grep file tstfile": "abs-guide.txt"},{"# Filename: tstfile": "abs-guide.txt"},{"This is a sample file.": "abs-guide.txt"},{"This is an ordinary text file.": "abs-guide.txt"},{"This file does not contain any unusual text.": "abs-guide.txt"},{"This file is not unusual.": "abs-guide.txt"},{"bash$ grep file tstfile | grep text": "abs-guide.txt"},{"This is an ordinary text file.": "abs-guide.txt"},{"This file does not contain any unusual text.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Now, for an interesting recreational use of grep . . .": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 16-18. Crossword puzzle solver": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# cw-solver.sh": "abs-guide.txt"},{"# This is actually a wrapper around a one-liner (line 46).": "abs-guide.txt"},{"# Crossword puzzle and anagramming word game solver.": "abs-guide.txt"},{"# You know *some* of the letters in the word you're looking for,": "abs-guide.txt"},{"#+ so you need a list of all valid words": "abs-guide.txt"},{"#+ with the known letters in given positions.": "abs-guide.txt"},{"# For example: w...i....n": "abs-guide.txt"},{"#": "abs-guide.txt"},{"1???5????10": "abs-guide.txt"},{"# w in position 1, 3 unknowns, i in the 5th, 4 unknowns, n at the end.": "abs-guide.txt"},{"# (See comments at end of script.)": "abs-guide.txt"},{"": "abs-guide.txt"},{"E_NOPATT=71": "abs-guide.txt"},{"DICT=/usr/share/dict/word.lst": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^^^^^^^^": "abs-guide.txt"},{"Looks for word list here.": "abs-guide.txt"},{"# ASCII word list, one word per line.": "abs-guide.txt"},{"# If you happen to need an appropriate list,": "abs-guide.txt"},{"#+ download the author's \"yawl\" word list package.": "abs-guide.txt"},{"# http://ibiblio.org/pub/Linux/libs/yawl-0.3.2.tar.gz": "abs-guide.txt"},{"# or": "abs-guide.txt"},{"# http://bash.deta.in/yawl-0.3.2.tar.gz": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"245": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"if [ -z \"$1\" ]": "abs-guide.txt"},{"# If no word pattern specified": "abs-guide.txt"},{"then": "abs-guide.txt"},{"#+ as a command-line argument . . .": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"#+ . . . then . . .": "abs-guide.txt"},{"echo \"Usage:\" #+ Usage message.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"\"$0\" \\\"pattern,\\\"\"": "abs-guide.txt"},{"echo \"where \\\"pattern\\\" is in the form\"": "abs-guide.txt"},{"echo \"xxx..x.x...\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"The x's represent known letters,\"": "abs-guide.txt"},{"echo \"and the periods are unknown letters (blanks).\"": "abs-guide.txt"},{"echo \"Letters and periods can be in any position.\"": "abs-guide.txt"},{"echo \"For example, try:": "abs-guide.txt"},{"sh cw-solver.sh w...i....n\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"exit $E_NOPATT": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"# ===============================================": "abs-guide.txt"},{"# This is where all the work gets done.": "abs-guide.txt"},{"grep ^\"$1\"$ \"$DICT\"": "abs-guide.txt"},{"# Yes, only one line!": "abs-guide.txt"},{"#": "abs-guide.txt"},{"|": "abs-guide.txt"},{"|": "abs-guide.txt"},{"# ^ is start-of-word regex anchor.": "abs-guide.txt"},{"# $ is end-of-word regex anchor.": "abs-guide.txt"},{"# From _Stupid Grep Tricks_, vol. 1,": "abs-guide.txt"},{"#+ a book the ABS Guide author may yet get around": "abs-guide.txt"},{"#+ to writing . . . one of these days . . .": "abs-guide.txt"},{"# ===============================================": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit $? # Script terminates here.": "abs-guide.txt"},{"# If there are too many words generated,": "abs-guide.txt"},{"#+ redirect the output to a file.": "abs-guide.txt"},{"$ sh cw-solver.sh w...i....n": "abs-guide.txt"},{"wellington": "abs-guide.txt"},{"workingman": "abs-guide.txt"},{"workingmen": "abs-guide.txt"},{"": "abs-guide.txt"},{"egrep -- extended grep -- is the same as grep -E. This uses a somewhat different, extended set of": "abs-guide.txt"},{"Regular Expressions, which can make the search a bit more flexible. It also allows the boolean | (or)": "abs-guide.txt"},{"operator.": "abs-guide.txt"},{"bash $ egrep 'matches|Matches' file.txt": "abs-guide.txt"},{"Line 1 matches.": "abs-guide.txt"},{"Line 3 Matches.": "abs-guide.txt"},{"Line 4 contains matches, but also Matches": "abs-guide.txt"},{"": "abs-guide.txt"},{"fgrep -- fast grep -- is the same as grep -F. It does a literal string search (no Regular Expressions),": "abs-guide.txt"},{"which generally speeds things up a bit.": "abs-guide.txt"},{"On some Linux distros, egrep and fgrep are symbolic links to, or aliases for": "abs-guide.txt"},{"grep, but invoked with the -E and -F options, respectively.": "abs-guide.txt"},{"Example 16-19. Looking up definitions in Webster's 1913 Dictionary": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"246": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# dict-lookup.sh": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"This script looks up definitions in the 1913 Webster's Dictionary.": "abs-guide.txt"},{"This Public Domain dictionary is available for download": "abs-guide.txt"},{"from various sites, including": "abs-guide.txt"},{"Project Gutenberg (http://www.gutenberg.org/etext/247).": "abs-guide.txt"},{"Convert it from DOS to UNIX format (with only LF at end of line)": "abs-guide.txt"},{"before using it with this script.": "abs-guide.txt"},{"Store the file in plain, uncompressed ASCII text.": "abs-guide.txt"},{"Set DEFAULT_DICTFILE variable below to path/filename.": "abs-guide.txt"},{"": "abs-guide.txt"},{"E_BADARGS=85": "abs-guide.txt"},{"MAXCONTEXTLINES=50": "abs-guide.txt"},{"# Maximum number of lines to show.": "abs-guide.txt"},{"DEFAULT_DICTFILE=\"/usr/share/dict/webster1913-dict.txt\"": "abs-guide.txt"},{"# Default dictionary file pathname.": "abs-guide.txt"},{"# Change this as necessary.": "abs-guide.txt"},{"# Note:": "abs-guide.txt"},{"# ---# This particular edition of the 1913 Webster's": "abs-guide.txt"},{"#+ begins each entry with an uppercase letter": "abs-guide.txt"},{"#+ (lowercase for the remaining characters).": "abs-guide.txt"},{"# Only the *very first line* of an entry begins this way,": "abs-guide.txt"},{"#+ and that's why the search algorithm below works.": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [[ -z $(echo \"$1\" | sed -n '/^[A-Z]/p') ]]": "abs-guide.txt"},{"# Must at least specify word to look up, and": "abs-guide.txt"},{"#+ it must start with an uppercase letter.": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Usage: `basename $0` Word-to-define [dictionary-file]\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"Note: Word to look up must start with capital letter,\"": "abs-guide.txt"},{"echo \"with the rest of the word in lowercase.\"": "abs-guide.txt"},{"echo \"--------------------------------------------\"": "abs-guide.txt"},{"echo \"Examples: Abandon, Dictionary, Marking, etc.\"": "abs-guide.txt"},{"exit $E_BADARGS": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [ -z \"$2\" ]": "abs-guide.txt"},{"": "abs-guide.txt"},{"# May specify different dictionary": "abs-guide.txt"},{"#+ as an argument to this script.": "abs-guide.txt"},{"": "abs-guide.txt"},{"then": "abs-guide.txt"},{"dictfile=$DEFAULT_DICTFILE": "abs-guide.txt"},{"else": "abs-guide.txt"},{"dictfile=\"$2\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# --------------------------------------------------------Definition=$(fgrep -A $MAXCONTEXTLINES \"$1 \\\\\" \"$dictfile\")": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Definitions in form \"Word \\...\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# And, yes, \"fgrep\" is fast enough": "abs-guide.txt"},{"#+ to search even a very large text file.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Now, snip out just the definition block.": "abs-guide.txt"},{"echo \"$Definition\" |": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"247": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"sed -n '1,/^[A-Z]/p' |": "abs-guide.txt"},{"# Print from first line of output": "abs-guide.txt"},{"#+ to the first line of the next entry.": "abs-guide.txt"},{"sed '$d' | sed '$d'": "abs-guide.txt"},{"# Delete last two lines of output": "abs-guide.txt"},{"#+ (blank line and first line of next entry).": "abs-guide.txt"},{"# --------------------------------------------------------exit $?": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Exercises:": "abs-guide.txt"},{"--------1) Modify the script to accept any type of alphabetic input": "abs-guide.txt"},{"+ (uppercase, lowercase, mixed case), and convert it": "abs-guide.txt"},{"+ to an acceptable format for processing.": "abs-guide.txt"},{"2) Convert the script to a GUI application,": "abs-guide.txt"},{"+ using something like 'gdialog' or 'zenity' . . .": "abs-guide.txt"},{"The script will then no longer take its argument(s)": "abs-guide.txt"},{"+ from the command-line.": "abs-guide.txt"},{"3) Modify the script to parse one of the other available": "abs-guide.txt"},{"+ Public Domain Dictionaries, such as the U.S. Census Bureau Gazetteer.": "abs-guide.txt"},{"": "abs-guide.txt"},{"See also Example A-41 for an example of speedy fgrep lookup on a large text file.": "abs-guide.txt"},{"agrep (approximate grep) extends the capabilities of grep to approximate matching. The search string": "abs-guide.txt"},{"may differ by a specified number of characters from the resulting matches. This utility is not part of": "abs-guide.txt"},{"the core Linux distribution.": "abs-guide.txt"},{"": "abs-guide.txt"},{"To search compressed files, use zgrep, zegrep, or zfgrep. These also work on": "abs-guide.txt"},{"non-compressed files, though slower than plain grep, egrep, fgrep. They are handy": "abs-guide.txt"},{"for searching through a mixed set of files, some compressed, some not.": "abs-guide.txt"},{"": "abs-guide.txt"},{"To search bzipped files, use bzgrep.": "abs-guide.txt"},{"look": "abs-guide.txt"},{"The command look works like grep, but does a lookup on a \"dictionary,\" a sorted word list. By": "abs-guide.txt"},{"default, look searches for a match in /usr/dict/words, but a different dictionary file may be": "abs-guide.txt"},{"specified.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 16-20. Checking words in a list for validity": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# lookup: Does a dictionary lookup on each word in a data file.": "abs-guide.txt"},{"file=words.data": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Data file from which to read words to test.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"Testing file $file\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"while [ \"$word\" != end ]": "abs-guide.txt"},{"do": "abs-guide.txt"},{"# ^^^": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Last word in data file.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"248": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"read word": "abs-guide.txt"},{"# From data file, because of redirection at end of loop.": "abs-guide.txt"},{"look $word > /dev/null # Don't want to display lines in dictionary file.": "abs-guide.txt"},{"# Searches for words in the file /usr/share/dict/words": "abs-guide.txt"},{"#+ (usually a link to linux.words).": "abs-guide.txt"},{"lookup=$?": "abs-guide.txt"},{"# Exit status of 'look' command.": "abs-guide.txt"},{"if [ \"$lookup\" -eq 0 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"\\\"$word\\\" is valid.\"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo \"\\\"$word\\\" is invalid.\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"done <\"$file\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Redirects stdin to $file, so \"reads\" come from there.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"# ---------------------------------------------------------------# Code below line will not execute because of \"exit\" command above.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Stephane Chazelas proposes the following, more concise alternative:": "abs-guide.txt"},{"while read word && [[ $word != end ]]": "abs-guide.txt"},{"do if look \"$word\" > /dev/null": "abs-guide.txt"},{"then echo \"\\\"$word\\\" is valid.\"": "abs-guide.txt"},{"else echo \"\\\"$word\\\" is invalid.\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"done <\"$file\"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"sed, awk": "abs-guide.txt"},{"Scripting languages especially suited for parsing text files and command output. May be embedded": "abs-guide.txt"},{"singly or in combination in pipes and shell scripts.": "abs-guide.txt"},{"sed": "abs-guide.txt"},{"Non-interactive \"stream editor\", permits using many ex commands in batch mode. It finds many uses": "abs-guide.txt"},{"in shell scripts.": "abs-guide.txt"},{"awk": "abs-guide.txt"},{"Programmable file extractor and formatter, good for manipulating and/or extracting fields (columns)": "abs-guide.txt"},{"in structured text files. Its syntax is similar to C.": "abs-guide.txt"},{"wc": "abs-guide.txt"},{"wc gives a \"word count\" on a file or I/O stream:": "abs-guide.txt"},{"bash $ wc /usr/share/doc/sed-4.1.2/README": "abs-guide.txt"},{"13 70 447 README": "abs-guide.txt"},{"[13 lines 70 words 447 characters]": "abs-guide.txt"},{"": "abs-guide.txt"},{"wc -w gives only the word count.": "abs-guide.txt"},{"wc -l gives only the line count.": "abs-guide.txt"},{"wc -c gives only the byte count.": "abs-guide.txt"},{"wc -m gives only the character count.": "abs-guide.txt"},{"wc -L gives only the length of the longest line.": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"249": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"Using wc to count how many .txt files are in current working directory:": "abs-guide.txt"},{"$ ls *.txt | wc -l": "abs-guide.txt"},{"# Will work as long as none of the \"*.txt\" files": "abs-guide.txt"},{"#+ have a linefeed embedded in their name.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Alternative ways of doing this are:": "abs-guide.txt"},{"find . -maxdepth 1 -name \\*.txt -print0 | grep -cz .": "abs-guide.txt"},{"(shopt -s nullglob; set -- *.txt; echo $#)": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Thanks, S.C.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Using wc to total up the size of all the files whose names begin with letters in the range d - h": "abs-guide.txt"},{"bash$ wc [d-h]* | grep total | awk '{print $3}'": "abs-guide.txt"},{"71832": "abs-guide.txt"},{"": "abs-guide.txt"},{"Using wc to count the instances of the word \"Linux\" in the main source file for this book.": "abs-guide.txt"},{"bash$ grep Linux abs-book.sgml | wc -l": "abs-guide.txt"},{"138": "abs-guide.txt"},{"": "abs-guide.txt"},{"See also Example 16-39 and Example 20-8.": "abs-guide.txt"},{"Certain commands include some of the functionality of wc as options.": "abs-guide.txt"},{"... | grep foo | wc -l": "abs-guide.txt"},{"# This frequently used construct can be more concisely rendered.": "abs-guide.txt"},{"... | grep -c foo": "abs-guide.txt"},{"# Just use the \"-c\" (or \"--count\") option of grep.": "abs-guide.txt"},{"# Thanks, S.C.": "abs-guide.txt"},{"": "abs-guide.txt"},{"tr": "abs-guide.txt"},{"character translation filter.": "abs-guide.txt"},{"Must use quoting and/or brackets, as appropriate. Quotes prevent the shell from": "abs-guide.txt"},{"reinterpreting the special characters in tr command sequences. Brackets should be": "abs-guide.txt"},{"quoted to prevent expansion by the shell.": "abs-guide.txt"},{"Either tr \"A-Z\" \"*\" <filename or tr A-Z \\* <filename changes all the uppercase": "abs-guide.txt"},{"letters in filename to asterisks (writes to stdout). On some systems this may not work, but tr": "abs-guide.txt"},{"A-Z '[**]' will.": "abs-guide.txt"},{"": "abs-guide.txt"},{"The -d option deletes a range of characters.": "abs-guide.txt"},{"echo \"abcdef\"": "abs-guide.txt"},{"echo \"abcdef\" | tr -d b-d": "abs-guide.txt"},{"": "abs-guide.txt"},{"# abcdef": "abs-guide.txt"},{"# aef": "abs-guide.txt"},{"": "abs-guide.txt"},{"tr -d 0-9 <filename": "abs-guide.txt"},{"# Deletes all digits from the file \"filename\".": "abs-guide.txt"},{"": "abs-guide.txt"},{"The --squeeze-repeats (or -s) option deletes all but the first instance of a string of": "abs-guide.txt"},{"consecutive characters. This option is useful for removing excess whitespace.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"250": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"bash$ echo \"XXXXX\" | tr --squeeze-repeats 'X'": "abs-guide.txt"},{"X": "abs-guide.txt"},{"": "abs-guide.txt"},{"The -c \"complement\" option inverts the character set to match. With this option, tr acts only upon": "abs-guide.txt"},{"those characters not matching the specified set.": "abs-guide.txt"},{"bash$ echo \"acfdeb123\" | tr -c b-d +": "abs-guide.txt"},{"+c+d+b++++": "abs-guide.txt"},{"": "abs-guide.txt"},{"Note that tr recognizes POSIX character classes. [74]": "abs-guide.txt"},{"bash$ echo \"abcd2ef1\" | tr '[:alpha:]' ----2--1": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 16-21. toupper: Transforms a file to all uppercase.": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# Changes a file to all uppercase.": "abs-guide.txt"},{"E_BADARGS=85": "abs-guide.txt"},{"if [ -z \"$1\" ] # Standard check for command-line arg.": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Usage: `basename $0` filename\"": "abs-guide.txt"},{"exit $E_BADARGS": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"tr a-z A-Z <\"$1\"": "abs-guide.txt"},{"# Same effect as above, but using POSIX character set notation:": "abs-guide.txt"},{"#": "abs-guide.txt"},{"tr '[:lower:]' '[:upper:]' <\"$1\"": "abs-guide.txt"},{"# Thanks, S.C.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Or even . . .": "abs-guide.txt"},{"cat \"$1\" | tr a-z A-Z": "abs-guide.txt"},{"Or dozens of other ways . . .": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Exercise:": "abs-guide.txt"},{"Rewrite this script to give the option of changing a file": "abs-guide.txt"},{"to *either* upper or lowercase.": "abs-guide.txt"},{"Hint: Use either the \"case\" or \"select\" command.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 16-22. lowercase: Changes all filenames in working directory to lowercase.": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Changes every filename in working directory to all lowercase.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Inspired by a script of John Dubois,": "abs-guide.txt"},{"#+ which was translated into Bash by Chet Ramey,": "abs-guide.txt"},{"#+ and considerably simplified by the author of the ABS Guide.": "abs-guide.txt"},{"": "abs-guide.txt"},{"for filename in *": "abs-guide.txt"},{"do": "abs-guide.txt"},{"fname=`basename $filename`": "abs-guide.txt"},{"n=`echo $fname | tr A-Z a-z`": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Traverse all files in directory.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Change name to lowercase.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"251": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"if [ \"$fname\" != \"$n\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"mv $fname $n": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"done": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Rename only files not already lowercase.": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit $?": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Code below this line will not execute because of \"exit\".": "abs-guide.txt"},{"#--------------------------------------------------------#": "abs-guide.txt"},{"# To run it, delete script above line.": "abs-guide.txt"},{"# The above script will not work on filenames containing blanks or newlines.": "abs-guide.txt"},{"# Stephane Chazelas therefore suggests the following alternative:": "abs-guide.txt"},{"": "abs-guide.txt"},{"for filename in *": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Not necessary to use basename,": "abs-guide.txt"},{"# since \"*\" won't return any file containing \"/\".": "abs-guide.txt"},{"do n=`echo \"$filename/\" | tr '[:upper:]' '[:lower:]'`": "abs-guide.txt"},{"#": "abs-guide.txt"},{"POSIX char set notation.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Slash added so that trailing newlines are not": "abs-guide.txt"},{"#": "abs-guide.txt"},{"removed by command substitution.": "abs-guide.txt"},{"# Variable substitution:": "abs-guide.txt"},{"n=${n%/}": "abs-guide.txt"},{"# Removes trailing slash, added above, from filename.": "abs-guide.txt"},{"[[ $filename == $n ]] || mv \"$filename\" \"$n\"": "abs-guide.txt"},{"# Checks if filename already lowercase.": "abs-guide.txt"},{"done": "abs-guide.txt"},{"exit $?": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 16-23. du: DOS to UNIX text file conversion.": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# Du.sh: DOS to UNIX text file converter.": "abs-guide.txt"},{"E_WRONGARGS=85": "abs-guide.txt"},{"if [ -z \"$1\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Usage: `basename $0` filename-to-convert\"": "abs-guide.txt"},{"exit $E_WRONGARGS": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"NEWFILENAME=$1.unx": "abs-guide.txt"},{"CR='\\015'": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Carriage return.": "abs-guide.txt"},{"015 is octal ASCII code for CR.": "abs-guide.txt"},{"Lines in a DOS text file end in CR-LF.": "abs-guide.txt"},{"Lines in a UNIX text file end in LF only.": "abs-guide.txt"},{"": "abs-guide.txt"},{"tr -d $CR < $1 > $NEWFILENAME": "abs-guide.txt"},{"# Delete CR's and write to new file.": "abs-guide.txt"},{"echo \"Original DOS text file is \\\"$1\\\".\"": "abs-guide.txt"},{"echo \"Converted UNIX text file is \\\"$NEWFILENAME\\\".\"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"# Exercise:": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"252": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# -------# Change the above script to convert from UNIX to DOS.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 16-24. rot13: ultra-weak encryption.": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# rot13.sh: Classic rot13 algorithm,": "abs-guide.txt"},{"#": "abs-guide.txt"},{"encryption that might fool a 3-year old": "abs-guide.txt"},{"#": "abs-guide.txt"},{"for about 10 minutes.": "abs-guide.txt"},{"# Usage: ./rot13.sh filename": "abs-guide.txt"},{"# or": "abs-guide.txt"},{"./rot13.sh <filename": "abs-guide.txt"},{"# or": "abs-guide.txt"},{"./rot13.sh and supply keyboard input (stdin)": "abs-guide.txt"},{"cat \"$@\" | tr 'a-zA-Z' 'n-za-mN-ZA-M'": "abs-guide.txt"},{"# \"a\" goes to \"n\", \"b\" to \"o\" ...": "abs-guide.txt"},{"# The": "abs-guide.txt"},{"cat \"$@\"": "abs-guide.txt"},{"construct": "abs-guide.txt"},{"#+ permits input either from stdin or from files.": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 16-25. Generating \"Crypto-Quote\" Puzzles": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# crypto-quote.sh: Encrypt quotes": "abs-guide.txt"},{"# Will encrypt famous quotes in a simple monoalphabetic substitution.": "abs-guide.txt"},{"# The result is similar to the \"Crypto Quote\" puzzles": "abs-guide.txt"},{"#+ seen in the Op Ed pages of the Sunday paper.": "abs-guide.txt"},{"": "abs-guide.txt"},{"key=ETAOINSHRDLUBCFGJMQPVWZYXK": "abs-guide.txt"},{"# The \"key\" is nothing more than a scrambled alphabet.": "abs-guide.txt"},{"# Changing the \"key\" changes the encryption.": "abs-guide.txt"},{"# The 'cat \"$@\"' construction gets input either from stdin or from files.": "abs-guide.txt"},{"# If using stdin, terminate input with a Control-D.": "abs-guide.txt"},{"# Otherwise, specify filename as command-line parameter.": "abs-guide.txt"},{"cat \"$@\" | tr \"a-z\" \"A-Z\" | tr \"A-Z\" \"$key\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"| to uppercase |": "abs-guide.txt"},{"encrypt": "abs-guide.txt"},{"# Will work on lowercase, uppercase, or mixed-case quotes.": "abs-guide.txt"},{"# Passes non-alphabetic characters through unchanged.": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Try this script with something like:": "abs-guide.txt"},{"\"Nothing so needs reforming as other people's habits.\"": "abs-guide.txt"},{"--Mark Twain": "abs-guide.txt"},{"Output is:": "abs-guide.txt"},{"\"CFPHRCS QF CIIOQ MINFMBRCS EQ FPHIM GIFGUI'Q HETRPQ.\"": "abs-guide.txt"},{"--BEML PZERC": "abs-guide.txt"},{"": "abs-guide.txt"},{"# To reverse the encryption:": "abs-guide.txt"},{"# cat \"$@\" | tr \"$key\" \"A-Z\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# This simple-minded cipher can be broken by an average 12-year old": "abs-guide.txt"},{"#+ using only pencil and paper.": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"253": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"Exercise:": "abs-guide.txt"},{"-------Modify the script so that it will either encrypt or decrypt,": "abs-guide.txt"},{"depending on command-line argument(s).": "abs-guide.txt"},{"": "abs-guide.txt"},{"Of course, tr lends itself to code obfuscation.": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# jabh.sh": "abs-guide.txt"},{"x=\"wftedskaebjgdBstbdbsmnjgz\"": "abs-guide.txt"},{"echo $x | tr \"a-z\" 'oh, turtleneck Phrase Jar!'": "abs-guide.txt"},{"# Based on the Wikipedia \"Just another Perl hacker\" article.": "abs-guide.txt"},{"": "abs-guide.txt"},{"tr variants": "abs-guide.txt"},{"The tr utility has two historic variants. The BSD version does not use brackets (tr a-z A-Z), but": "abs-guide.txt"},{"the SysV one does (tr '[a-z]' '[A-Z]'). The GNU version of tr resembles the BSD one.": "abs-guide.txt"},{"fold": "abs-guide.txt"},{"A filter that wraps lines of input to a specified width. This is especially useful with the -s option,": "abs-guide.txt"},{"which breaks lines at word spaces (see Example 16-26 and Example A-1).": "abs-guide.txt"},{"fmt": "abs-guide.txt"},{"Simple-minded file formatter, used as a filter in a pipe to \"wrap\" long lines of text output.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 16-26. Formatted file listing.": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"WIDTH=40": "abs-guide.txt"},{"": "abs-guide.txt"},{"# 40 columns wide.": "abs-guide.txt"},{"": "abs-guide.txt"},{"b=`ls /usr/local/bin`": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Get a file listing...": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo $b | fmt -w $WIDTH": "abs-guide.txt"},{"# Could also have been done by": "abs-guide.txt"},{"#": "abs-guide.txt"},{"echo $b | fold - -s -w $WIDTH": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"See also Example 16-5.": "abs-guide.txt"},{"A powerful alternative to fmt is Kamil Toman's par utility, available from": "abs-guide.txt"},{"http://www.cs.berkeley.edu/~amc/Par/.": "abs-guide.txt"},{"col": "abs-guide.txt"},{"This deceptively named filter removes reverse line feeds from an input stream. It also attempts to": "abs-guide.txt"},{"replace whitespace with equivalent tabs. The chief use of col is in filtering the output from certain text": "abs-guide.txt"},{"processing utilities, such as groff and tbl.": "abs-guide.txt"},{"column": "abs-guide.txt"},{"Column formatter. This filter transforms list-type text output into a \"pretty-printed\" table by inserting": "abs-guide.txt"},{"tabs at appropriate places.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"254": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"Example 16-27. Using column to format a directory listing": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# colms.sh": "abs-guide.txt"},{"# A minor modification of the example file in the \"column\" man page.": "abs-guide.txt"},{"": "abs-guide.txt"},{"(printf \"PERMISSIONS LINKS OWNER GROUP SIZE MONTH DAY HH:MM PROG-NAME\\n\" \\": "abs-guide.txt"},{"; ls -l | sed 1d) | column -t": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^^^^^^": "abs-guide.txt"},{"^^": "abs-guide.txt"},{"# The \"sed 1d\" in the pipe deletes the first line of output,": "abs-guide.txt"},{"#+ which would be \"total": "abs-guide.txt"},{"N\",": "abs-guide.txt"},{"#+ where \"N\" is the total number of files found by \"ls -l\".": "abs-guide.txt"},{"# The -t option to \"column\" pretty-prints a table.": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"colrm": "abs-guide.txt"},{"Column removal filter. This removes columns (characters) from a file and writes the file, lacking the": "abs-guide.txt"},{"range of specified columns, back to stdout. colrm 2 4 <filename removes the second": "abs-guide.txt"},{"through fourth characters from each line of the text file filename.": "abs-guide.txt"},{"If the file contains tabs or nonprintable characters, this may cause unpredictable": "abs-guide.txt"},{"behavior. In such cases, consider using expand and unexpand in a pipe preceding": "abs-guide.txt"},{"colrm.": "abs-guide.txt"},{"nl": "abs-guide.txt"},{"Line numbering filter: nl filename lists filename to stdout, but inserts consecutive numbers": "abs-guide.txt"},{"at the beginning of each non-blank line. If filename omitted, operates on stdin.": "abs-guide.txt"},{"The output of nl is very similar to cat -b, since, by default nl does not list blank lines.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 16-28. nl: A self-numbering script.": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# line-number.sh": "abs-guide.txt"},{"# This script echoes itself twice to stdout with its lines numbered.": "abs-guide.txt"},{"echo \"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"line number = $LINENO\" # 'nl' sees this as line 4": "abs-guide.txt"},{"(nl does not number blank lines).": "abs-guide.txt"},{"'cat -n' sees it correctly as line #6.": "abs-guide.txt"},{"": "abs-guide.txt"},{"nl `basename $0`": "abs-guide.txt"},{"echo; echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Now, let's try it with 'cat -n'": "abs-guide.txt"},{"": "abs-guide.txt"},{"cat -n `basename $0`": "abs-guide.txt"},{"# The difference is that 'cat -n' numbers the blank lines.": "abs-guide.txt"},{"# Note that 'nl -ba' will also do so.": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"# -----------------------------------------------------------------": "abs-guide.txt"},{"": "abs-guide.txt"},{"pr": "abs-guide.txt"},{"Print formatting filter. This will paginate files (or stdout) into sections suitable for hard copy": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"255": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"printing or viewing on screen. Various options permit row and column manipulation, joining lines,": "abs-guide.txt"},{"setting margins, numbering lines, adding page headers, and merging files, among other things. The pr": "abs-guide.txt"},{"command combines much of the functionality of nl, paste, fold, column, and expand.": "abs-guide.txt"},{"pr -o 5 --width=65 fileZZZ | more gives a nice paginated listing to screen of": "abs-guide.txt"},{"fileZZZ with margins set at 5 and 65.": "abs-guide.txt"},{"A particularly useful option is -d, forcing double-spacing (same effect as sed -G).": "abs-guide.txt"},{"gettext": "abs-guide.txt"},{"The GNU gettext package is a set of utilities for localizing and translating the text output of programs": "abs-guide.txt"},{"into foreign languages. While originally intended for C programs, it now supports quite a number of": "abs-guide.txt"},{"programming and scripting languages.": "abs-guide.txt"},{"The gettext program works on shell scripts. See the info page.": "abs-guide.txt"},{"msgfmt": "abs-guide.txt"},{"A program for generating binary message catalogs. It is used for localization.": "abs-guide.txt"},{"iconv": "abs-guide.txt"},{"A utility for converting file(s) to a different encoding (character set). Its chief use is for localization.": "abs-guide.txt"},{"# Convert a string from UTF-8 to UTF-16 and print to the BookList": "abs-guide.txt"},{"function write_utf8_string {": "abs-guide.txt"},{"STRING=$1": "abs-guide.txt"},{"BOOKLIST=$2": "abs-guide.txt"},{"echo -n \"$STRING\" | iconv -f UTF8 -t UTF16 | \\": "abs-guide.txt"},{"cut -b 3- | tr -d \\\\n >> \"$BOOKLIST\"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"# From Peter Knowles' \"booklistgen.sh\" script": "abs-guide.txt"},{"#+ for converting files to Sony Librie/PRS-50X format.": "abs-guide.txt"},{"# (http://booklistgensh.peterknowles.com)": "abs-guide.txt"},{"": "abs-guide.txt"},{"recode": "abs-guide.txt"},{"Consider this a fancier version of iconv, above. This very versatile utility for converting a file to a": "abs-guide.txt"},{"different encoding scheme. Note that recode is not part of the standard Linux installation.": "abs-guide.txt"},{"TeX, gs": "abs-guide.txt"},{"TeX and Postscript are text markup languages used for preparing copy for printing or formatted": "abs-guide.txt"},{"video display.": "abs-guide.txt"},{"TeX is Donald Knuth's elaborate typsetting system. It is often convenient to write a shell script": "abs-guide.txt"},{"encapsulating all the options and arguments passed to one of these markup languages.": "abs-guide.txt"},{"Ghostscript (gs) is a GPL-ed Postscript interpreter.": "abs-guide.txt"},{"texexec": "abs-guide.txt"},{"Utility for processing TeX and pdf files. Found in /usr/bin on many Linux distros, it is actually a": "abs-guide.txt"},{"shell wrapper that calls Perl to invoke Tex.": "abs-guide.txt"},{"texexec --pdfarrange --result=Concatenated.pdf *pdf": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Concatenates all the pdf files in the current working directory": "abs-guide.txt"},{"into the merged file, Concatenated.pdf . . .": "abs-guide.txt"},{"(The --pdfarrange option repaginates a pdf file. See also --pdfcombine.)": "abs-guide.txt"},{"The above command-line could be parameterized and put into a shell script.": "abs-guide.txt"},{"": "abs-guide.txt"},{"enscript": "abs-guide.txt"},{"Utility for converting plain text file to PostScript": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"256": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"For example, enscript filename.txt -p filename.ps produces the PostScript output file": "abs-guide.txt"},{"filename.ps.": "abs-guide.txt"},{"groff, tbl, eqn": "abs-guide.txt"},{"Yet another text markup and display formatting language is groff. This is the enhanced GNU version": "abs-guide.txt"},{"of the venerable UNIX roff/troff display and typesetting package. Manpages use groff.": "abs-guide.txt"},{"The tbl table processing utility is considered part of groff, as its function is to convert table markup": "abs-guide.txt"},{"into groff commands.": "abs-guide.txt"},{"The eqn equation processing utility is likewise part of groff, and its function is to convert equation": "abs-guide.txt"},{"markup into groff commands.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 16-29. manview: Viewing formatted manpages": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# manview.sh: Formats the source of a man page for viewing.": "abs-guide.txt"},{"# This script is useful when writing man page source.": "abs-guide.txt"},{"# It lets you look at the intermediate results on the fly": "abs-guide.txt"},{"#+ while working on it.": "abs-guide.txt"},{"E_WRONGARGS=85": "abs-guide.txt"},{"if [ -z \"$1\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Usage: `basename $0` filename\"": "abs-guide.txt"},{"exit $E_WRONGARGS": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# --------------------------groff -Tascii -man $1 | less": "abs-guide.txt"},{"# From the man page for groff.": "abs-guide.txt"},{"# --------------------------# If the man page includes tables and/or equations,": "abs-guide.txt"},{"#+ then the above code will barf.": "abs-guide.txt"},{"# The following line can handle such cases.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"gtbl < \"$1\" | geqn -Tlatin1 | groff -Tlatin1 -mtty-char -man": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Thanks, S.C.": "abs-guide.txt"},{"exit $?": "abs-guide.txt"},{"": "abs-guide.txt"},{"# See also the \"maned.sh\" script.": "abs-guide.txt"},{"": "abs-guide.txt"},{"See also Example A-39.": "abs-guide.txt"},{"lex, yacc": "abs-guide.txt"},{"The lex lexical analyzer produces programs for pattern matching. This has been replaced by the": "abs-guide.txt"},{"nonproprietary flex on Linux systems.": "abs-guide.txt"},{"": "abs-guide.txt"},{"The yacc utility creates a parser based on a set of specifications. This has been replaced by the": "abs-guide.txt"},{"nonproprietary bison on Linux systems.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"257": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"": "abs-guide.txt"},{"16.5. File and Archiving Commands": "abs-guide.txt"},{"Archiving": "abs-guide.txt"},{"tar": "abs-guide.txt"},{"The standard UNIX archiving utility. [75] Originally a Tape ARchiving program, it has developed into": "abs-guide.txt"},{"a general purpose package that can handle all manner of archiving with all types of destination": "abs-guide.txt"},{"devices, ranging from tape drives to regular files to even stdout (see Example 3-4). GNU tar has": "abs-guide.txt"},{"been patched to accept various compression filters, for example: tar czvf archive_name.tar.gz *,": "abs-guide.txt"},{"which recursively archives and gzips all files in a directory tree except dotfiles in the current working": "abs-guide.txt"},{"directory ($PWD). [76]": "abs-guide.txt"},{"Some useful tar options:": "abs-guide.txt"},{"1. -c create (a new archive)": "abs-guide.txt"},{"2. -x extract (files from existing archive)": "abs-guide.txt"},{"3. --delete delete (files from existing archive)": "abs-guide.txt"},{"This option will not work on magnetic tape devices.": "abs-guide.txt"},{"4. -r append (files to existing archive)": "abs-guide.txt"},{"5. -A append (tar files to existing archive)": "abs-guide.txt"},{"6. -t list (contents of existing archive)": "abs-guide.txt"},{"7. -u update archive": "abs-guide.txt"},{"8. -d compare archive with specified filesystem": "abs-guide.txt"},{"9. --after-date only process files with a date stamp after specified date": "abs-guide.txt"},{"10. -z gzip the archive": "abs-guide.txt"},{"(compress or uncompress, depending on whether combined with the -c or -x) option": "abs-guide.txt"},{"11. -j bzip2 the archive": "abs-guide.txt"},{"It may be difficult to recover data from a corrupted gzipped tar archive. When": "abs-guide.txt"},{"archiving important files, make multiple backups.": "abs-guide.txt"},{"shar": "abs-guide.txt"},{"Shell archiving utility. The text and/or binary files in a shell archive are concatenated without": "abs-guide.txt"},{"compression, and the resultant archive is essentially a shell script, complete with #!/bin/sh header,": "abs-guide.txt"},{"containing all the necessary unarchiving commands, as well as the files themselves. Unprintable": "abs-guide.txt"},{"binary characters in the target file(s) are converted to printable ASCII characters in the output shar": "abs-guide.txt"},{"file. Shar archives still show up in Usenet newsgroups, but otherwise shar has been replaced by": "abs-guide.txt"},{"tar/gzip. The unshar command unpacks shar archives.": "abs-guide.txt"},{"The mailshar command is a Bash script that uses shar to concatenate multiple files into a single one": "abs-guide.txt"},{"for e-mailing. This script supports compression and uuencoding.": "abs-guide.txt"},{"ar": "abs-guide.txt"},{"Creation and manipulation utility for archives, mainly used for binary object file libraries.": "abs-guide.txt"},{"rpm": "abs-guide.txt"},{"The Red Hat Package Manager, or rpm utility provides a wrapper for source or binary archives. It": "abs-guide.txt"},{"includes commands for installing and checking the integrity of packages, among other things.": "abs-guide.txt"},{"A simple rpm -i package_name.rpm usually suffices to install a package, though there are many": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"258": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"more options available.": "abs-guide.txt"},{"rpm -qf identifies which package a file originates from.": "abs-guide.txt"},{"bash$ rpm -qf /bin/ls": "abs-guide.txt"},{"coreutils-5.2.1-31": "abs-guide.txt"},{"": "abs-guide.txt"},{"rpm -qa gives a complete list of all installed rpm packages on a given system. An": "abs-guide.txt"},{"rpm -qa package_name lists only the package(s) corresponding to": "abs-guide.txt"},{"package_name.": "abs-guide.txt"},{"bash$ rpm -qa": "abs-guide.txt"},{"redhat-logos-1.1.3-1": "abs-guide.txt"},{"glibc-2.2.4-13": "abs-guide.txt"},{"cracklib-2.7-12": "abs-guide.txt"},{"dosfstools-2.7-1": "abs-guide.txt"},{"gdbm-1.8.0-10": "abs-guide.txt"},{"ksymoops-2.4.1-1": "abs-guide.txt"},{"mktemp-1.5-11": "abs-guide.txt"},{"perl-5.6.0-17": "abs-guide.txt"},{"reiserfs-utils-3.x.0j-2": "abs-guide.txt"},{"...": "abs-guide.txt"},{"": "abs-guide.txt"},{"bash$ rpm -qa docbook-utils": "abs-guide.txt"},{"docbook-utils-0.6.9-2": "abs-guide.txt"},{"": "abs-guide.txt"},{"bash$ rpm -qa docbook | grep docbook": "abs-guide.txt"},{"docbook-dtd31-sgml-1.0-10": "abs-guide.txt"},{"docbook-style-dsssl-1.64-3": "abs-guide.txt"},{"docbook-dtd30-sgml-1.0-10": "abs-guide.txt"},{"docbook-dtd40-sgml-1.0-11": "abs-guide.txt"},{"docbook-utils-pdf-0.6.9-2": "abs-guide.txt"},{"docbook-dtd41-sgml-1.0-10": "abs-guide.txt"},{"docbook-utils-0.6.9-2": "abs-guide.txt"},{"": "abs-guide.txt"},{"cpio": "abs-guide.txt"},{"This specialized archiving copy command (copy input and output) is rarely seen any more, having": "abs-guide.txt"},{"been supplanted by tar/gzip. It still has its uses, such as moving a directory tree. With an appropriate": "abs-guide.txt"},{"block size (for copying) specified, it can be appreciably faster than tar.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 16-30. Using cpio to move a directory tree": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# Copying a directory tree using cpio.": "abs-guide.txt"},{"# Advantages of using 'cpio':": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Speed of copying. It's faster than 'tar' with pipes.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Well suited for copying special files (named pipes, etc.)": "abs-guide.txt"},{"#+ that 'cp' may choke on.": "abs-guide.txt"},{"ARGS=2": "abs-guide.txt"},{"E_BADARGS=65": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"259": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"if [ $# -ne \"$ARGS\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Usage: `basename $0` source destination\"": "abs-guide.txt"},{"exit $E_BADARGS": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"source=\"$1\"": "abs-guide.txt"},{"destination=\"$2\"": "abs-guide.txt"},{"###################################################################": "abs-guide.txt"},{"find \"$source\" -depth | cpio -admvp \"$destination\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^^^^^": "abs-guide.txt"},{"^^^^^": "abs-guide.txt"},{"# Read the 'find' and 'cpio' info pages to decipher these options.": "abs-guide.txt"},{"# The above works only relative to $PWD (current directory) . . .": "abs-guide.txt"},{"#+ full pathnames are specified.": "abs-guide.txt"},{"###################################################################": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Exercise:": "abs-guide.txt"},{"# -------# Add code to check the exit status ($?) of the 'find | cpio' pipe": "abs-guide.txt"},{"#+ and output appropriate error messages if anything went wrong.": "abs-guide.txt"},{"exit $?": "abs-guide.txt"},{"": "abs-guide.txt"},{"rpm2cpio": "abs-guide.txt"},{"This command extracts a cpio archive from an rpm one.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 16-31. Unpacking an rpm archive": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# de-rpm.sh: Unpack an 'rpm' archive": "abs-guide.txt"},{": ${1?\"Usage: `basename $0` target-file\"}": "abs-guide.txt"},{"# Must specify 'rpm' archive name as an argument.": "abs-guide.txt"},{"": "abs-guide.txt"},{"TEMPFILE=$$.cpio": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Tempfile with \"unique\" name.": "abs-guide.txt"},{"$$ is process ID of script.": "abs-guide.txt"},{"": "abs-guide.txt"},{"rpm2cpio < $1 > $TEMPFILE": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Converts rpm archive into": "abs-guide.txt"},{"cpio archive.": "abs-guide.txt"},{"Unpacks cpio archive.": "abs-guide.txt"},{"Deletes cpio archive.": "abs-guide.txt"},{"": "abs-guide.txt"},{"cpio --make-directories -F $TEMPFILE -i": "abs-guide.txt"},{"rm -f $TEMPFILE": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Exercise:": "abs-guide.txt"},{"# Add check for whether 1) \"target-file\" exists and": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"2) it is an rpm archive.": "abs-guide.txt"},{"# Hint:": "abs-guide.txt"},{"Parse output of 'file' command.": "abs-guide.txt"},{"": "abs-guide.txt"},{"pax": "abs-guide.txt"},{"The pax portable archive exchange toolkit facilitates periodic file backups and is designed to be": "abs-guide.txt"},{"cross-compatible between various flavors of UNIX. It was designed to replace tar and cpio.": "abs-guide.txt"},{"pax -wf daily_backup.pax ~/linux-server/files": "abs-guide.txt"},{"# Creates a tar archive of all files in the target directory.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"260": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# Note that the options to pax must be in the correct order -#+ pax -fw": "abs-guide.txt"},{"has an entirely different effect.": "abs-guide.txt"},{"pax -f daily_backup.pax": "abs-guide.txt"},{"# Lists the files in the archive.": "abs-guide.txt"},{"pax -rf daily_backup.pax ~/bsd-server/files": "abs-guide.txt"},{"# Restores the backed-up files from the Linux machine": "abs-guide.txt"},{"#+ onto a BSD one.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Note that pax handles many of the standard archiving and compression commands.": "abs-guide.txt"},{"Compression": "abs-guide.txt"},{"gzip": "abs-guide.txt"},{"The standard GNU/UNIX compression utility, replacing the inferior and proprietary compress. The": "abs-guide.txt"},{"corresponding decompression command is gunzip, which is the equivalent of gzip -d.": "abs-guide.txt"},{"The -c option sends the output of gzip to stdout. This is useful when piping to": "abs-guide.txt"},{"other commands.": "abs-guide.txt"},{"The zcat filter decompresses a gzipped file to stdout, as possible input to a pipe or redirection. This": "abs-guide.txt"},{"is, in effect, a cat command that works on compressed files (including files processed with the older": "abs-guide.txt"},{"compress utility). The zcat command is equivalent to gzip -dc.": "abs-guide.txt"},{"On some commercial UNIX systems, zcat is a synonym for uncompress -c, and will": "abs-guide.txt"},{"not work on gzipped files.": "abs-guide.txt"},{"See also Example 7-7.": "abs-guide.txt"},{"bzip2": "abs-guide.txt"},{"An alternate compression utility, usually more efficient (but slower) than gzip, especially on large": "abs-guide.txt"},{"files. The corresponding decompression command is bunzip2.": "abs-guide.txt"},{"Similar to the zcat command, bzcat decompresses a bzipped2-ed file to stdout.": "abs-guide.txt"},{"Newer versions of tar have been patched with bzip2 support.": "abs-guide.txt"},{"compress, uncompress": "abs-guide.txt"},{"This is an older, proprietary compression utility found in commercial UNIX distributions. The more": "abs-guide.txt"},{"efficient gzip has largely replaced it. Linux distributions generally include a compress workalike for": "abs-guide.txt"},{"compatibility, although gunzip can unarchive files treated with compress.": "abs-guide.txt"},{"The znew command transforms compressed files into gzipped ones.": "abs-guide.txt"},{"sq": "abs-guide.txt"},{"Yet another compression (squeeze) utility, a filter that works only on sorted ASCII word lists. It uses": "abs-guide.txt"},{"the standard invocation syntax for a filter, sq < input-file > output-file. Fast, but not nearly as": "abs-guide.txt"},{"efficient as gzip. The corresponding uncompression filter is unsq, invoked like sq.": "abs-guide.txt"},{"The output of sq may be piped to gzip for further compression.": "abs-guide.txt"},{"zip, unzip": "abs-guide.txt"},{"Cross-platform file archiving and compression utility compatible with DOS pkzip.exe. \"Zipped\"": "abs-guide.txt"},{"archives seem to be a more common medium of file exchange on the Internet than \"tarballs.\"": "abs-guide.txt"},{"unarc, unarj, unrar": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"261": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"These Linux utilities permit unpacking archives compressed with the DOS arc.exe, arj.exe, and": "abs-guide.txt"},{"rar.exe programs.": "abs-guide.txt"},{"lzma, unlzma, lzcat": "abs-guide.txt"},{"Highly efficient Lempel-Ziv-Markov compression. The syntax of lzma is similar to that of gzip. The": "abs-guide.txt"},{"7-zip Website has more information.": "abs-guide.txt"},{"xz, unxz, xzcat": "abs-guide.txt"},{"A new high-efficiency compression tool, backward compatible with lzma, and with an invocation": "abs-guide.txt"},{"syntax similar to gzip. For more information, see the Wikipedia entry.": "abs-guide.txt"},{"File Information": "abs-guide.txt"},{"file": "abs-guide.txt"},{"A utility for identifying file types. The command file file-name will return a file specification": "abs-guide.txt"},{"for file-name, such as ascii text or data. It references the magic numbers found in": "abs-guide.txt"},{"/usr/share/magic, /etc/magic, or /usr/lib/magic, depending on the Linux/UNIX": "abs-guide.txt"},{"distribution.": "abs-guide.txt"},{"The -f option causes file to run in batch mode, to read from a designated file a list of filenames to": "abs-guide.txt"},{"analyze. The -z option, when used on a compressed target file, forces an attempt to analyze the": "abs-guide.txt"},{"uncompressed file type.": "abs-guide.txt"},{"bash$ file test.tar.gz": "abs-guide.txt"},{"test.tar.gz: gzip compressed data, deflated,": "abs-guide.txt"},{"last modified: Sun Sep 16 13:34:51 2001, os: Unix": "abs-guide.txt"},{"bash file -z test.tar.gz": "abs-guide.txt"},{"test.tar.gz: GNU tar archive (gzip compressed data, deflated,": "abs-guide.txt"},{"last modified: Sun Sep 16 13:34:51 2001, os: Unix)": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Find sh and Bash scripts in a given directory:": "abs-guide.txt"},{"DIRECTORY=/usr/local/bin": "abs-guide.txt"},{"KEYWORD=Bourne": "abs-guide.txt"},{"# Bourne and Bourne-Again shell scripts": "abs-guide.txt"},{"file $DIRECTORY/* | fgrep $KEYWORD": "abs-guide.txt"},{"# Output:": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"/usr/local/bin/burn-cd:": "abs-guide.txt"},{"/usr/local/bin/burnit:": "abs-guide.txt"},{"/usr/local/bin/cassette.sh:": "abs-guide.txt"},{"/usr/local/bin/copy-cd:": "abs-guide.txt"},{". . .": "abs-guide.txt"},{"": "abs-guide.txt"},{"Bourne-Again": "abs-guide.txt"},{"Bourne-Again": "abs-guide.txt"},{"Bourne shell": "abs-guide.txt"},{"Bourne-Again": "abs-guide.txt"},{"": "abs-guide.txt"},{"shell script text executable": "abs-guide.txt"},{"shell script text executable": "abs-guide.txt"},{"script text executable": "abs-guide.txt"},{"shell script text executable": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 16-32. Stripping comments from C program files": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# strip-comment.sh: Strips out the comments (/* COMMENT */) in a C program.": "abs-guide.txt"},{"E_NOARGS=0": "abs-guide.txt"},{"E_ARGERROR=66": "abs-guide.txt"},{"E_WRONG_FILE_TYPE=67": "abs-guide.txt"},{"if [ $# -eq \"$E_NOARGS\" ]": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"262": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Usage: `basename $0` C-program-file\" >&2 # Error message to stderr.": "abs-guide.txt"},{"exit $E_ARGERROR": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# Test for correct file type.": "abs-guide.txt"},{"type=`file $1 | awk '{ print $2, $3, $4, $5 }'`": "abs-guide.txt"},{"# \"file $1\" echoes file type . . .": "abs-guide.txt"},{"# Then awk removes the first field, the filename . . .": "abs-guide.txt"},{"# Then the result is fed into the variable \"type.\"": "abs-guide.txt"},{"correct_type=\"ASCII C program text\"": "abs-guide.txt"},{"if [ \"$type\" != \"$correct_type\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"This script works on C program files only.\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"exit $E_WRONG_FILE_TYPE": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Rather cryptic sed script:": "abs-guide.txt"},{"#-------sed '": "abs-guide.txt"},{"/^\\/\\*/d": "abs-guide.txt"},{"/.*\\*\\//d": "abs-guide.txt"},{"' $1": "abs-guide.txt"},{"#-------# Easy to understand if you take several hours to learn sed fundamentals.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Need to add one more line to the sed script to deal with": "abs-guide.txt"},{"#+ case where line of code has a comment following it on same line.": "abs-guide.txt"},{"# This is left as a non-trivial exercise.": "abs-guide.txt"},{"# Also, the above code deletes non-comment lines with a \"*/\" . . .": "abs-guide.txt"},{"#+ not a desirable result.": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"# ---------------------------------------------------------------# Code below this line will not execute because of 'exit 0' above.": "abs-guide.txt"},{"# Stephane Chazelas suggests the following alternative:": "abs-guide.txt"},{"usage() {": "abs-guide.txt"},{"echo \"Usage: `basename $0` C-program-file\" >&2": "abs-guide.txt"},{"exit 1": "abs-guide.txt"},{"}": "abs-guide.txt"},{"WEIRD=`echo -n -e '\\377'`": "abs-guide.txt"},{"# or WEIRD=$'\\377'": "abs-guide.txt"},{"[[ $# -eq 1 ]] || usage": "abs-guide.txt"},{"case `file \"$1\"` in": "abs-guide.txt"},{"*\"C program text\"*) sed -e \"s%/\\*%${WEIRD}%g;s%\\*/%${WEIRD}%g\" \"$1\" \\": "abs-guide.txt"},{"| tr '\\377\\n' '\\n\\377' \\": "abs-guide.txt"},{"| sed -ne 'p;n' \\": "abs-guide.txt"},{"| tr -d '\\n' | tr '\\377' '\\n';;": "abs-guide.txt"},{"*) usage;;": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"This is still fooled by things like:": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"263": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"printf(\"/*\");": "abs-guide.txt"},{"or": "abs-guide.txt"},{"/* /* buggy embedded comment */": "abs-guide.txt"},{"To handle all special cases (comments in strings, comments in string": "abs-guide.txt"},{"where there is a \\\", \\\\\" ...),": "abs-guide.txt"},{"the only way is to write a C parser (using lex or yacc perhaps?).": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"which": "abs-guide.txt"},{"which command gives the full path to \"command.\" This is useful for finding out whether a particular": "abs-guide.txt"},{"command or utility is installed on the system.": "abs-guide.txt"},{"$bash which rm": "abs-guide.txt"},{"/usr/bin/rm": "abs-guide.txt"},{"": "abs-guide.txt"},{"For an interesting use of this command, see Example 36-16.": "abs-guide.txt"},{"whereis": "abs-guide.txt"},{"Similar to which, above, whereis command gives the full path to \"command,\" but also to its": "abs-guide.txt"},{"manpage.": "abs-guide.txt"},{"$bash whereis rm": "abs-guide.txt"},{"rm: /bin/rm /usr/share/man/man1/rm.1.bz2": "abs-guide.txt"},{"": "abs-guide.txt"},{"whatis": "abs-guide.txt"},{"whatis command looks up \"command\" in the whatis database. This is useful for identifying system": "abs-guide.txt"},{"commands and important configuration files. Consider it a simplified man command.": "abs-guide.txt"},{"$bash whatis whatis": "abs-guide.txt"},{"whatis": "abs-guide.txt"},{"": "abs-guide.txt"},{"(1)": "abs-guide.txt"},{"": "abs-guide.txt"},{"- search the whatis database for complete words": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 16-33. Exploring /usr/X11R6/bin": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# What are all those mysterious binaries in /usr/X11R6/bin?": "abs-guide.txt"},{"DIRECTORY=\"/usr/X11R6/bin\"": "abs-guide.txt"},{"# Try also \"/bin\", \"/usr/bin\", \"/usr/local/bin\", etc.": "abs-guide.txt"},{"for file in $DIRECTORY/*": "abs-guide.txt"},{"do": "abs-guide.txt"},{"whatis `basename $file`": "abs-guide.txt"},{"done": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Echoes info about the binary.": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Note: For this to work, you must create a \"whatis\" database": "abs-guide.txt"},{"with /usr/sbin/makewhatis.": "abs-guide.txt"},{"You may wish to redirect output of this script, like so:": "abs-guide.txt"},{"./what.sh >>whatis.db": "abs-guide.txt"},{"or view it a page at a time on stdout,": "abs-guide.txt"},{"./what.sh | less": "abs-guide.txt"},{"": "abs-guide.txt"},{"See also Example 11-3.": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"264": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"vdir": "abs-guide.txt"},{"Show a detailed directory listing. The effect is similar to ls -lb.": "abs-guide.txt"},{"This is one of the GNU fileutils.": "abs-guide.txt"},{"bash$ vdir": "abs-guide.txt"},{"total 10": "abs-guide.txt"},{"-rw-r--r--rw-r--r--rw-r--r--": "abs-guide.txt"},{"": "abs-guide.txt"},{"1 bozo": "abs-guide.txt"},{"1 bozo": "abs-guide.txt"},{"1 bozo": "abs-guide.txt"},{"": "abs-guide.txt"},{"bozo": "abs-guide.txt"},{"bozo": "abs-guide.txt"},{"bozo": "abs-guide.txt"},{"": "abs-guide.txt"},{"4034 Jul 18 22:04 data1.xrolo": "abs-guide.txt"},{"4602 May 25 13:58 data1.xrolo.bak": "abs-guide.txt"},{"877 Dec 17 2000 employment.xrolo": "abs-guide.txt"},{"": "abs-guide.txt"},{"bash ls -l": "abs-guide.txt"},{"total 10": "abs-guide.txt"},{"-rw-r--r--rw-r--r--rw-r--r--": "abs-guide.txt"},{"": "abs-guide.txt"},{"1 bozo": "abs-guide.txt"},{"1 bozo": "abs-guide.txt"},{"1 bozo": "abs-guide.txt"},{"": "abs-guide.txt"},{"bozo": "abs-guide.txt"},{"bozo": "abs-guide.txt"},{"bozo": "abs-guide.txt"},{"": "abs-guide.txt"},{"4034 Jul 18 22:04 data1.xrolo": "abs-guide.txt"},{"4602 May 25 13:58 data1.xrolo.bak": "abs-guide.txt"},{"877 Dec 17 2000 employment.xrolo": "abs-guide.txt"},{"": "abs-guide.txt"},{"locate, slocate": "abs-guide.txt"},{"The locate command searches for files using a database stored for just that purpose. The slocate": "abs-guide.txt"},{"command is the secure version of locate (which may be aliased to slocate).": "abs-guide.txt"},{"$bash locate hickson": "abs-guide.txt"},{"/usr/lib/xephem/catalogs/hickson.edb": "abs-guide.txt"},{"": "abs-guide.txt"},{"getfacl, setfacl": "abs-guide.txt"},{"These commands retrieve or set the file access control list -- the owner, group, and file permissions.": "abs-guide.txt"},{"bash$ getfacl *": "abs-guide.txt"},{"# file: test1.txt": "abs-guide.txt"},{"# owner: bozo": "abs-guide.txt"},{"# group: bozgrp": "abs-guide.txt"},{"user::rwgroup::rwother::r-# file: test2.txt": "abs-guide.txt"},{"# owner: bozo": "abs-guide.txt"},{"# group: bozgrp": "abs-guide.txt"},{"user::rwgroup::rwother::r--": "abs-guide.txt"},{"": "abs-guide.txt"},{"bash$ setfacl -m u:bozo:rw yearly_budget.csv": "abs-guide.txt"},{"bash$ getfacl yearly_budget.csv": "abs-guide.txt"},{"# file: yearly_budget.csv": "abs-guide.txt"},{"# owner: accountant": "abs-guide.txt"},{"# group: budgetgrp": "abs-guide.txt"},{"user::rwuser:bozo:rwuser:accountant:rwgroup::rwmask::rwother::r--": "abs-guide.txt"},{"": "abs-guide.txt"},{"readlink": "abs-guide.txt"},{"Disclose the file that a symbolic link points to.": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"265": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"bash$ readlink /usr/bin/awk": "abs-guide.txt"},{"../../bin/gawk": "abs-guide.txt"},{"": "abs-guide.txt"},{"strings": "abs-guide.txt"},{"Use the strings command to find printable strings in a binary or data file. It will list sequences of": "abs-guide.txt"},{"printable characters found in the target file. This might be handy for a quick 'n dirty examination of a": "abs-guide.txt"},{"core dump or for looking at an unknown graphic image file (strings image-file | more": "abs-guide.txt"},{"might show something like JFIF, which would identify the file as a jpeg graphic). In a script, you": "abs-guide.txt"},{"would probably parse the output of strings with grep or sed. See Example 11-8 and Example 11-10.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 16-34. An \"improved\" strings command": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# wstrings.sh: \"word-strings\" (enhanced \"strings\" command)": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# This script filters the output of \"strings\" by checking it": "abs-guide.txt"},{"#+ against a standard word list file.": "abs-guide.txt"},{"# This effectively eliminates gibberish and noise,": "abs-guide.txt"},{"#+ and outputs only recognized words.": "abs-guide.txt"},{"# ===========================================================": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Standard Check for Script Argument(s)": "abs-guide.txt"},{"ARGS=1": "abs-guide.txt"},{"E_BADARGS=85": "abs-guide.txt"},{"E_NOFILE=86": "abs-guide.txt"},{"if [ $# -ne $ARGS ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Usage: `basename $0` filename\"": "abs-guide.txt"},{"exit $E_BADARGS": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"if [ ! -f \"$1\" ]": "abs-guide.txt"},{"# Check if file exists.": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"File \\\"$1\\\" does not exist.\"": "abs-guide.txt"},{"exit $E_NOFILE": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# ===========================================================": "abs-guide.txt"},{"": "abs-guide.txt"},{"MINSTRLEN=3": "abs-guide.txt"},{"# Minimum string length.": "abs-guide.txt"},{"WORDFILE=/usr/share/dict/linux.words # Dictionary file.": "abs-guide.txt"},{"# May specify a different word list file": "abs-guide.txt"},{"#+ of one-word-per-line format.": "abs-guide.txt"},{"# For example, the \"yawl\" word-list package,": "abs-guide.txt"},{"# http://bash.deta.in/yawl-0.3.2.tar.gz": "abs-guide.txt"},{"": "abs-guide.txt"},{"wlist=`strings \"$1\" | tr A-Z a-z | tr '[:space:]' Z | \\": "abs-guide.txt"},{"tr -cs '[:alpha:]' Z | tr -s '\\173-\\377' Z | tr Z ' '`": "abs-guide.txt"},{"# Translate output of 'strings' command with multiple passes of 'tr'.": "abs-guide.txt"},{"# \"tr A-Z a-z\" converts to lowercase.": "abs-guide.txt"},{"# \"tr '[:space:]'\" converts whitespace characters to Z's.": "abs-guide.txt"},{"# \"tr -cs '[:alpha:]' Z\" converts non-alphabetic characters to Z's,": "abs-guide.txt"},{"#+ and squeezes multiple consecutive Z's.": "abs-guide.txt"},{"# \"tr -s '\\173-\\377' Z\" converts all characters past 'z' to Z's": "abs-guide.txt"},{"#+ and squeezes multiple consecutive Z's,": "abs-guide.txt"},{"#+ which gets rid of all the weird characters that the previous": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"266": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"#+ translation failed to deal with.": "abs-guide.txt"},{"# Finally, \"tr Z ' '\" converts all those Z's to whitespace,": "abs-guide.txt"},{"#+ which will be seen as word separators in the loop below.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"***********************************************************************": "abs-guide.txt"},{"Note the technique of feeding/piping the output of 'tr' back to itself,": "abs-guide.txt"},{"but with different arguments and/or options on each successive pass.": "abs-guide.txt"},{"***********************************************************************": "abs-guide.txt"},{"": "abs-guide.txt"},{"for word in $wlist": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Important:": "abs-guide.txt"},{"# $wlist must not be quoted here.": "abs-guide.txt"},{"# \"$wlist\" does not work.": "abs-guide.txt"},{"# Why not?": "abs-guide.txt"},{"": "abs-guide.txt"},{"do": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"strlen=${#word}": "abs-guide.txt"},{"if [ \"$strlen\" -lt \"$MINSTRLEN\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"continue": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"String length.": "abs-guide.txt"},{"Skip over short strings.": "abs-guide.txt"},{"": "abs-guide.txt"},{"grep -Fw $word \"$WORDFILE\"": "abs-guide.txt"},{"^^^": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Match whole words only.": "abs-guide.txt"},{"# \"Fixed strings\" and": "abs-guide.txt"},{"#+ \"whole words\" options.": "abs-guide.txt"},{"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"exit $?": "abs-guide.txt"},{"": "abs-guide.txt"},{"Comparison": "abs-guide.txt"},{"diff, patch": "abs-guide.txt"},{"diff: flexible file comparison utility. It compares the target files line-by-line sequentially. In some": "abs-guide.txt"},{"applications, such as comparing word dictionaries, it may be helpful to filter the files through sort and": "abs-guide.txt"},{"uniq before piping them to diff. diff file-1 file-2 outputs the lines in the files that differ,": "abs-guide.txt"},{"with carets showing which file each particular line belongs to.": "abs-guide.txt"},{"The --side-by-side option to diff outputs each compared file, line by line, in separate columns,": "abs-guide.txt"},{"with non-matching lines marked. The -c and -u options likewise make the output of the command": "abs-guide.txt"},{"easier to interpret.": "abs-guide.txt"},{"There are available various fancy frontends for diff, such as sdiff, wdiff, xdiff, and mgdiff.": "abs-guide.txt"},{"The diff command returns an exit status of 0 if the compared files are identical, and 1": "abs-guide.txt"},{"if they differ (or 2 when binary files are being compared). This permits use of diff in a": "abs-guide.txt"},{"test construct within a shell script (see below).": "abs-guide.txt"},{"A common use for diff is generating difference files to be used with patch The -e option outputs": "abs-guide.txt"},{"files suitable for ed or ex scripts.": "abs-guide.txt"},{"": "abs-guide.txt"},{"patch: flexible versioning utility. Given a difference file generated by diff, patch can upgrade a": "abs-guide.txt"},{"previous version of a package to a newer version. It is much more convenient to distribute a relatively": "abs-guide.txt"},{"small \"diff\" file than the entire body of a newly revised package. Kernel \"patches\" have become the": "abs-guide.txt"},{"preferred method of distributing the frequent releases of the Linux kernel.": "abs-guide.txt"},{"patch -p1 <patch-file": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"267": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# Takes all the changes listed in 'patch-file'": "abs-guide.txt"},{"# and applies them to the files referenced therein.": "abs-guide.txt"},{"# This upgrades to a newer version of the package.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Patching the kernel:": "abs-guide.txt"},{"cd /usr/src": "abs-guide.txt"},{"gzip -cd patchXX.gz | patch -p0": "abs-guide.txt"},{"# Upgrading kernel source using 'patch'.": "abs-guide.txt"},{"# From the Linux kernel docs \"README\",": "abs-guide.txt"},{"# by anonymous author (Alan Cox?).": "abs-guide.txt"},{"": "abs-guide.txt"},{"The diff command can also recursively compare directories (for the filenames": "abs-guide.txt"},{"present).": "abs-guide.txt"},{"bash$ diff -r ~/notes1 ~/notes2": "abs-guide.txt"},{"Only in /home/bozo/notes1: file02": "abs-guide.txt"},{"Only in /home/bozo/notes1: file03": "abs-guide.txt"},{"Only in /home/bozo/notes2: file04": "abs-guide.txt"},{"": "abs-guide.txt"},{"Use zdiff to compare gzipped files.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Use diffstat to create a histogram (point-distribution graph) of output from diff.": "abs-guide.txt"},{"diff3, merge": "abs-guide.txt"},{"An extended version of diff that compares three files at a time. This command returns an exit value of": "abs-guide.txt"},{"0 upon successful execution, but unfortunately this gives no information about the results of the": "abs-guide.txt"},{"comparison.": "abs-guide.txt"},{"bash$ diff3 file-1 file-2 file-3": "abs-guide.txt"},{"====": "abs-guide.txt"},{"1:1c": "abs-guide.txt"},{"This is line 1 of \"file-1\".": "abs-guide.txt"},{"2:1c": "abs-guide.txt"},{"This is line 1 of \"file-2\".": "abs-guide.txt"},{"3:1c": "abs-guide.txt"},{"This is line 1 of \"file-3\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"The merge (3-way file merge) command is an interesting adjunct to diff3. Its syntax is merge": "abs-guide.txt"},{"Mergefile file1 file2. The result is to output to Mergefile the changes that lead from": "abs-guide.txt"},{"file1 to file2. Consider this command a stripped-down version of patch.": "abs-guide.txt"},{"sdiff": "abs-guide.txt"},{"Compare and/or edit two files in order to merge them into an output file. Because of its interactive": "abs-guide.txt"},{"nature, this command would find little use in a script.": "abs-guide.txt"},{"cmp": "abs-guide.txt"},{"The cmp command is a simpler version of diff, above. Whereas diff reports the differences between": "abs-guide.txt"},{"two files, cmp merely shows at what point they differ.": "abs-guide.txt"},{"Like diff, cmp returns an exit status of 0 if the compared files are identical, and 1 if": "abs-guide.txt"},{"they differ. This permits use in a test construct within a shell script.": "abs-guide.txt"},{"Example 16-35. Using cmp to compare two files within a script.": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"268": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# file-comparison.sh": "abs-guide.txt"},{"ARGS=2 # Two args to script expected.": "abs-guide.txt"},{"E_BADARGS=85": "abs-guide.txt"},{"E_UNREADABLE=86": "abs-guide.txt"},{"if [ $# -ne \"$ARGS\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Usage: `basename $0` file1 file2\"": "abs-guide.txt"},{"exit $E_BADARGS": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"if [[ ! -r \"$1\" || ! -r \"$2\" ]]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Both files to be compared must exist and be readable.\"": "abs-guide.txt"},{"exit $E_UNREADABLE": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"cmp $1 $2 &> /dev/null": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Redirection to /dev/null buries the output of the \"cmp\" command.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"cmp -s $1 $2 has same result (\"-s\" silent flag to \"cmp\")": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Thank you Anders Gustavsson for pointing this out.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Also works with 'diff', i.e.,": "abs-guide.txt"},{"#+ diff $1 $2 &> /dev/null": "abs-guide.txt"},{"if [ $? -eq 0 ]": "abs-guide.txt"},{"# Test exit status of \"cmp\" command.": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"File \\\"$1\\\" is identical to file \\\"$2\\\".\"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo \"File \\\"$1\\\" differs from file \\\"$2\\\".\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Use zcmp on gzipped files.": "abs-guide.txt"},{"comm": "abs-guide.txt"},{"Versatile file comparison utility. The files must be sorted for this to be useful.": "abs-guide.txt"},{"comm -options first-file second-file": "abs-guide.txt"},{"comm file-1 file-2 outputs three columns:": "abs-guide.txt"},{"\u25ca column 1 = lines unique to file-1": "abs-guide.txt"},{"\u25ca column 2 = lines unique to file-2": "abs-guide.txt"},{"\u25ca column 3 = lines common to both.": "abs-guide.txt"},{"The options allow suppressing output of one or more columns.": "abs-guide.txt"},{"\u25ca -1 suppresses column 1": "abs-guide.txt"},{"\u25ca -2 suppresses column 2": "abs-guide.txt"},{"\u25ca -3 suppresses column 3": "abs-guide.txt"},{"\u25ca -12 suppresses both columns 1 and 2, etc.": "abs-guide.txt"},{"This command is useful for comparing \"dictionaries\" or word lists -- sorted text files with one word": "abs-guide.txt"},{"per line.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"269": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"Utilities": "abs-guide.txt"},{"basename": "abs-guide.txt"},{"Strips the path information from a file name, printing only the file name. The construction": "abs-guide.txt"},{"basename $0 lets the script know its name, that is, the name it was invoked by. This can be used": "abs-guide.txt"},{"for \"usage\" messages if, for example a script is called with missing arguments:": "abs-guide.txt"},{"echo \"Usage: `basename $0` arg1 arg2 ... argn\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"dirname": "abs-guide.txt"},{"Strips the basename from a filename, printing only the path information.": "abs-guide.txt"},{"basename and dirname can operate on any arbitrary string. The argument does not": "abs-guide.txt"},{"need to refer to an existing file, or even be a filename for that matter (see Example": "abs-guide.txt"},{"A-7).": "abs-guide.txt"},{"Example 16-36. basename and dirname": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"address=/home/bozo/daily-journal.txt": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"\"Basename of /home/bozo/daily-journal.txt = `basename $address`\"": "abs-guide.txt"},{"\"Dirname of /home/bozo/daily-journal.txt = `dirname $address`\"": "abs-guide.txt"},{"\"My own home is `basename ~/`.\"": "abs-guide.txt"},{"\"The home of my home is `dirname ~/`.\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# `basename ~` also works.": "abs-guide.txt"},{"# `dirname ~` also works.": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"split, csplit": "abs-guide.txt"},{"These are utilities for splitting a file into smaller chunks. Their usual use is for splitting up large files": "abs-guide.txt"},{"in order to back them up on floppies or preparatory to e-mailing or uploading them.": "abs-guide.txt"},{"The csplit command splits a file according to context, the split occuring where patterns are matched.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 16-37. A script that copies itself in sections": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# splitcopy.sh": "abs-guide.txt"},{"# A script that splits itself into chunks,": "abs-guide.txt"},{"#+ then reassembles the chunks into an exact copy": "abs-guide.txt"},{"#+ of the original script.": "abs-guide.txt"},{"CHUNKSIZE=4": "abs-guide.txt"},{"OUTPREFIX=xx": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Size of first chunk of split files.": "abs-guide.txt"},{"# csplit prefixes, by default,": "abs-guide.txt"},{"#+ files with \"xx\" ...": "abs-guide.txt"},{"": "abs-guide.txt"},{"csplit \"$0\" \"$CHUNKSIZE\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Some": "abs-guide.txt"},{"Line": "abs-guide.txt"},{"Line": "abs-guide.txt"},{"Line": "abs-guide.txt"},{"Line": "abs-guide.txt"},{"Line": "abs-guide.txt"},{"": "abs-guide.txt"},{"comment lines for padding . . .": "abs-guide.txt"},{"15": "abs-guide.txt"},{"16": "abs-guide.txt"},{"17": "abs-guide.txt"},{"18": "abs-guide.txt"},{"19": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"270": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# Line 20": "abs-guide.txt"},{"cat \"$OUTPREFIX\"* > \"$0.copy\"": "abs-guide.txt"},{"rm \"$OUTPREFIX\"*": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Concatenate the chunks.": "abs-guide.txt"},{"# Get rid of the chunks.": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit $?": "abs-guide.txt"},{"": "abs-guide.txt"},{"Encoding and Encryption": "abs-guide.txt"},{"sum, cksum, md5sum, sha1sum": "abs-guide.txt"},{"These are utilities for generating checksums. A checksum is a number [77] mathematically calculated": "abs-guide.txt"},{"from the contents of a file, for the purpose of checking its integrity. A script might refer to a list of": "abs-guide.txt"},{"checksums for security purposes, such as ensuring that the contents of key system files have not been": "abs-guide.txt"},{"altered or corrupted. For security applications, use the md5sum (message digest 5 checksum)": "abs-guide.txt"},{"command, or better yet, the newer sha1sum (Secure Hash Algorithm). [78]": "abs-guide.txt"},{"bash$ cksum /boot/vmlinuz": "abs-guide.txt"},{"1670054224 804083 /boot/vmlinuz": "abs-guide.txt"},{"bash$ echo -n \"Top Secret\" | cksum": "abs-guide.txt"},{"3391003827 10": "abs-guide.txt"},{"": "abs-guide.txt"},{"bash$ md5sum /boot/vmlinuz": "abs-guide.txt"},{"0f43eccea8f09e0a0b2b5cf1dcf333ba": "abs-guide.txt"},{"": "abs-guide.txt"},{"/boot/vmlinuz": "abs-guide.txt"},{"": "abs-guide.txt"},{"bash$ echo -n \"Top Secret\" | md5sum": "abs-guide.txt"},{"8babc97a6f62a4649716f4df8d61728f -": "abs-guide.txt"},{"": "abs-guide.txt"},{"The cksum command shows the size, in bytes, of its target, whether file or stdout.": "abs-guide.txt"},{"The md5sum and sha1sum commands display a dash when they receive their input": "abs-guide.txt"},{"from stdout.": "abs-guide.txt"},{"Example 16-38. Checking file integrity": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# file-integrity.sh: Checking whether files in a given directory": "abs-guide.txt"},{"#": "abs-guide.txt"},{"have been tampered with.": "abs-guide.txt"},{"E_DIR_NOMATCH=80": "abs-guide.txt"},{"E_BAD_DBFILE=81": "abs-guide.txt"},{"dbfile=File_record.md5": "abs-guide.txt"},{"# Filename for storing records (database file).": "abs-guide.txt"},{"": "abs-guide.txt"},{"set_up_database ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"echo \"\"$directory\"\" > \"$dbfile\"": "abs-guide.txt"},{"# Write directory name to first line of file.": "abs-guide.txt"},{"md5sum \"$directory\"/* >> \"$dbfile\"": "abs-guide.txt"},{"# Append md5 checksums and filenames.": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"271": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"check_database ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"local n=0": "abs-guide.txt"},{"local filename": "abs-guide.txt"},{"local checksum": "abs-guide.txt"},{"# ------------------------------------------- #": "abs-guide.txt"},{"# This file check should be unnecessary,": "abs-guide.txt"},{"#+ but better safe than sorry.": "abs-guide.txt"},{"if [ ! -r \"$dbfile\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Unable to read checksum database file!\"": "abs-guide.txt"},{"exit $E_BAD_DBFILE": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# ------------------------------------------- #": "abs-guide.txt"},{"while read record[n]": "abs-guide.txt"},{"do": "abs-guide.txt"},{"directory_checked=\"${record[0]}\"": "abs-guide.txt"},{"if [ \"$directory_checked\" != \"$directory\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Directories do not match up!\"": "abs-guide.txt"},{"# Tried to use file for a different directory.": "abs-guide.txt"},{"exit $E_DIR_NOMATCH": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"if [ \"$n\" -gt 0 ]": "abs-guide.txt"},{"# Not directory name.": "abs-guide.txt"},{"then": "abs-guide.txt"},{"filename[n]=$( echo ${record[$n]} | awk '{ print $2 }' )": "abs-guide.txt"},{"# md5sum writes records backwards,": "abs-guide.txt"},{"#+ checksum first, then filename.": "abs-guide.txt"},{"checksum[n]=$( md5sum \"${filename[n]}\" )": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [ \"${record[n]}\" = \"${checksum[n]}\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"${filename[n]} unchanged.\"": "abs-guide.txt"},{"elif [ \"`basename ${filename[n]}`\" != \"$dbfile\" ]": "abs-guide.txt"},{"# Skip over checksum database file,": "abs-guide.txt"},{"#+ as it will change with each invocation of script.": "abs-guide.txt"},{"# --# This unfortunately means that when running": "abs-guide.txt"},{"#+ this script on $PWD, tampering with the": "abs-guide.txt"},{"#+ checksum database file will not be detected.": "abs-guide.txt"},{"# Exercise: Fix this.": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"${filename[n]} : CHECKSUM ERROR!\"": "abs-guide.txt"},{"# File has been changed since last checked.": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"let \"n+=1\"": "abs-guide.txt"},{"done <\"$dbfile\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Read from checksum database file.": "abs-guide.txt"},{"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"272": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# =================================================== #": "abs-guide.txt"},{"# main ()": "abs-guide.txt"},{"if [ -z \"$1\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"directory=\"$PWD\"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"directory=\"$1\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"# If not specified,": "abs-guide.txt"},{"#+ use current working directory.": "abs-guide.txt"},{"": "abs-guide.txt"},{"clear": "abs-guide.txt"},{"# Clear screen.": "abs-guide.txt"},{"echo \" Running file integrity check on $directory\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"# ------------------------------------------------------------------ #": "abs-guide.txt"},{"if [ ! -r \"$dbfile\" ] # Need to create database file?": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Setting up database file, \\\"\"$directory\"/\"$dbfile\"\\\".\"; echo": "abs-guide.txt"},{"set_up_database": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# ------------------------------------------------------------------ #": "abs-guide.txt"},{"check_database": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Do the actual work.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"# You may wish to redirect the stdout of this script to a file,": "abs-guide.txt"},{"#+ especially if the directory checked has many files in it.": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"# For a much more thorough file integrity check,": "abs-guide.txt"},{"#+ consider the \"Tripwire\" package,": "abs-guide.txt"},{"#+ http://sourceforge.net/projects/tripwire/.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Also see Example A-19, Example 36-16, and Example 10-2 for creative uses of the md5sum": "abs-guide.txt"},{"command.": "abs-guide.txt"},{"There have been reports that the 128-bit md5sum can be cracked, so the more secure": "abs-guide.txt"},{"160-bit sha1sum is a welcome new addition to the checksum toolkit.": "abs-guide.txt"},{"bash$ md5sum testfile": "abs-guide.txt"},{"e181e2c8720c60522c4c4c981108e367": "abs-guide.txt"},{"": "abs-guide.txt"},{"testfile": "abs-guide.txt"},{"": "abs-guide.txt"},{"bash$ sha1sum testfile": "abs-guide.txt"},{"5d7425a9c08a66c3177f1e31286fa40986ffc996": "abs-guide.txt"},{"": "abs-guide.txt"},{"testfile": "abs-guide.txt"},{"": "abs-guide.txt"},{"Security consultants have demonstrated that even sha1sum can be compromised. Fortunately, newer": "abs-guide.txt"},{"Linux distros include longer bit-length sha224sum, sha256sum, sha384sum, and sha512sum": "abs-guide.txt"},{"commands.": "abs-guide.txt"},{"uuencode": "abs-guide.txt"},{"This utility encodes binary files (images, sound files, compressed files, etc.) into ASCII characters,": "abs-guide.txt"},{"making them suitable for transmission in the body of an e-mail message or in a newsgroup posting.": "abs-guide.txt"},{"This is especially useful where MIME (multimedia) encoding is not available.": "abs-guide.txt"},{"uudecode": "abs-guide.txt"},{"This reverses the encoding, decoding uuencoded files back into the original binaries.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"273": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"Example 16-39. Uudecoding encoded files": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# Uudecodes all uuencoded files in current working directory.": "abs-guide.txt"},{"lines=35": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Allow 35 lines for the header (very generous).": "abs-guide.txt"},{"": "abs-guide.txt"},{"for File in *": "abs-guide.txt"},{"# Test all the files in $PWD.": "abs-guide.txt"},{"do": "abs-guide.txt"},{"search1=`head -n $lines $File | grep begin | wc -w`": "abs-guide.txt"},{"search2=`tail -n $lines $File | grep end | wc -w`": "abs-guide.txt"},{"# Uuencoded files have a \"begin\" near the beginning,": "abs-guide.txt"},{"#+ and an \"end\" near the end.": "abs-guide.txt"},{"if [ \"$search1\" -gt 0 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"if [ \"$search2\" -gt 0 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"uudecoding - $File -\"": "abs-guide.txt"},{"uudecode $File": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"done": "abs-guide.txt"},{"# Note that running this script upon itself fools it": "abs-guide.txt"},{"#+ into thinking it is a uuencoded file,": "abs-guide.txt"},{"#+ because it contains both \"begin\" and \"end\".": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"Exercise:": "abs-guide.txt"},{"-------Modify this script to check each file for a newsgroup header,": "abs-guide.txt"},{"and skip to next if not found.": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"The fold -s command may be useful (possibly in a pipe) to process long uudecoded": "abs-guide.txt"},{"text messages downloaded from Usenet newsgroups.": "abs-guide.txt"},{"mimencode, mmencode": "abs-guide.txt"},{"The mimencode and mmencode commands process multimedia-encoded e-mail attachments.": "abs-guide.txt"},{"Although mail user agents (such as pine or kmail) normally handle this automatically, these particular": "abs-guide.txt"},{"utilities permit manipulating such attachments manually from the command-line or in batch": "abs-guide.txt"},{"processing mode by means of a shell script.": "abs-guide.txt"},{"crypt": "abs-guide.txt"},{"At one time, this was the standard UNIX file encryption utility. [79] Politically-motivated government": "abs-guide.txt"},{"regulations prohibiting the export of encryption software resulted in the disappearance of crypt from": "abs-guide.txt"},{"much of the UNIX world, and it is still missing from most Linux distributions. Fortunately,": "abs-guide.txt"},{"programmers have come up with a number of decent alternatives to it, among them the author's very": "abs-guide.txt"},{"own cruft (see Example A-4).": "abs-guide.txt"},{"openssl": "abs-guide.txt"},{"This is an Open Source implementation of Secure Sockets Layer encryption.": "abs-guide.txt"},{"# To encrypt a file:": "abs-guide.txt"},{"openssl aes-128-ecb -salt -in file.txt -out file.encrypted \\": "abs-guide.txt"},{"-pass pass:my_password": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^^^^^^^^^^^": "abs-guide.txt"},{"User-selected password.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"aes-128-ecb": "abs-guide.txt"},{"is the encryption method chosen.": "abs-guide.txt"},{"# To decrypt an openssl-encrypted file:": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"274": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"openssl aes-128-ecb -d -salt -in file.encrypted -out file.txt \\": "abs-guide.txt"},{"-pass pass:my_password": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^^^^^^^^^^^": "abs-guide.txt"},{"User-selected password.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Piping openssl to/from tar makes it possible to encrypt an entire directory tree.": "abs-guide.txt"},{"# To encrypt a directory:": "abs-guide.txt"},{"sourcedir=\"/home/bozo/testfiles\"": "abs-guide.txt"},{"encrfile=\"encr-dir.tar.gz\"": "abs-guide.txt"},{"password=my_secret_password": "abs-guide.txt"},{"tar czvf - \"$sourcedir\" |": "abs-guide.txt"},{"openssl des3 -salt -out \"$encrfile\" -pass pass:\"$password\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^^^^": "abs-guide.txt"},{"Uses des3 encryption.": "abs-guide.txt"},{"# Writes encrypted file \"encr-dir.tar.gz\" in current working directory.": "abs-guide.txt"},{"# To decrypt the resulting tarball:": "abs-guide.txt"},{"openssl des3 -d -salt -in \"$encrfile\" -pass pass:\"$password\" |": "abs-guide.txt"},{"tar -xzv": "abs-guide.txt"},{"# Decrypts and unpacks into current working directory.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Of course, openssl has many other uses, such as obtaining signed certificates for Web sites. See the": "abs-guide.txt"},{"info page.": "abs-guide.txt"},{"shred": "abs-guide.txt"},{"Securely erase a file by overwriting it multiple times with random bit patterns before deleting it. This": "abs-guide.txt"},{"command has the same effect as Example 16-61, but does it in a more thorough and elegant manner.": "abs-guide.txt"},{"This is one of the GNU fileutils.": "abs-guide.txt"},{"Advanced forensic technology may still be able to recover the contents of a file, even": "abs-guide.txt"},{"after application of shred.": "abs-guide.txt"},{"Miscellaneous": "abs-guide.txt"},{"mktemp": "abs-guide.txt"},{"Create a temporary file [80] with a \"unique\" filename. When invoked from the command-line without": "abs-guide.txt"},{"additional arguments, it creates a zero-length file in the /tmp directory.": "abs-guide.txt"},{"bash$ mktemp": "abs-guide.txt"},{"/tmp/tmp.zzsvql3154": "abs-guide.txt"},{"": "abs-guide.txt"},{"PREFIX=filename": "abs-guide.txt"},{"tempfile=`mktemp $PREFIX.XXXXXX`": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^^^^^^ Need at least 6 placeholders": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"in the filename template.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"If no filename template supplied,": "abs-guide.txt"},{"#+ \"tmp.XXXXXXXXXX\" is the default.": "abs-guide.txt"},{"echo \"tempfile name = $tempfile\"": "abs-guide.txt"},{"# tempfile name = filename.QA2ZpY": "abs-guide.txt"},{"#": "abs-guide.txt"},{"or something similar...": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"Creates a file of that name in the current working directory": "abs-guide.txt"},{"with 600 file permissions.": "abs-guide.txt"},{"A \"umask 177\" is therefore unnecessary,": "abs-guide.txt"},{"but it's good programming practice nevertheless.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"275": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"make": "abs-guide.txt"},{"Utility for building and compiling binary packages. This can also be used for any set of operations": "abs-guide.txt"},{"triggered by incremental changes in source files.": "abs-guide.txt"},{"The make command checks a Makefile, a list of file dependencies and operations to be carried out.": "abs-guide.txt"},{"The make utility is, in effect, a powerful scripting language similar in many ways to Bash, but with": "abs-guide.txt"},{"the capability of recognizing dependencies. For in-depth coverage of this useful tool set, see the GNU": "abs-guide.txt"},{"software documentation site.": "abs-guide.txt"},{"install": "abs-guide.txt"},{"Special purpose file copying command, similar to cp, but capable of setting permissions and attributes": "abs-guide.txt"},{"of the copied files. This command seems tailormade for installing software packages, and as such it": "abs-guide.txt"},{"shows up frequently in Makefiles (in the make install : section). It could likewise prove": "abs-guide.txt"},{"useful in installation scripts.": "abs-guide.txt"},{"dos2unix": "abs-guide.txt"},{"This utility, written by Benjamin Lin and collaborators, converts DOS-formatted text files (lines": "abs-guide.txt"},{"terminated by CR-LF) to UNIX format (lines terminated by LF only), and vice-versa.": "abs-guide.txt"},{"ptx": "abs-guide.txt"},{"The ptx [targetfile] command outputs a permuted index (cross-reference list) of the targetfile. This": "abs-guide.txt"},{"may be further filtered and formatted in a pipe, if necessary.": "abs-guide.txt"},{"more, less": "abs-guide.txt"},{"Pagers that display a text file or stream to stdout, one screenful at a time. These may be used to": "abs-guide.txt"},{"filter the output of stdout . . . or of a script.": "abs-guide.txt"},{"An interesting application of more is to \"test drive\" a command sequence, to forestall potentially": "abs-guide.txt"},{"unpleasant consequences.": "abs-guide.txt"},{"ls /home/bozo | awk '{print \"rm -rf \" $1}' | more": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^^^^": "abs-guide.txt"},{"# Testing the effect of the following (disastrous) command-line:": "abs-guide.txt"},{"#": "abs-guide.txt"},{"ls /home/bozo | awk '{print \"rm -rf \" $1}' | sh": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Hand off to the shell to execute . . .": "abs-guide.txt"},{"^^": "abs-guide.txt"},{"": "abs-guide.txt"},{"The less pager has the interesting property of doing a formatted display of man page source. See": "abs-guide.txt"},{"Example A-39.": "abs-guide.txt"},{"": "abs-guide.txt"},{"16.6. Communications Commands": "abs-guide.txt"},{"Certain of the following commands find use in network data transfer and analysis, as well as in chasing": "abs-guide.txt"},{"spammers.": "abs-guide.txt"},{"Information and Statistics": "abs-guide.txt"},{"host": "abs-guide.txt"},{"Searches for information about an Internet host by name or IP address, using DNS.": "abs-guide.txt"},{"bash$ host surfacemail.com": "abs-guide.txt"},{"surfacemail.com. has address 202.92.42.236": "abs-guide.txt"},{"": "abs-guide.txt"},{"ipcalc": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"276": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"Displays IP information for a host. With the -h option, ipcalc does a reverse DNS lookup, finding the": "abs-guide.txt"},{"name of the host (server) from the IP address.": "abs-guide.txt"},{"bash$ ipcalc -h 202.92.42.236": "abs-guide.txt"},{"HOSTNAME=surfacemail.com": "abs-guide.txt"},{"": "abs-guide.txt"},{"nslookup": "abs-guide.txt"},{"Do an Internet \"name server lookup\" on a host by IP address. This is essentially equivalent to ipcalc": "abs-guide.txt"},{"-h or dig -x . The command may be run either interactively or noninteractively, i.e., from within a": "abs-guide.txt"},{"script.": "abs-guide.txt"},{"The nslookup command has allegedly been \"deprecated,\" but it is still useful.": "abs-guide.txt"},{"bash$ nslookup -sil 66.97.104.180": "abs-guide.txt"},{"nslookup kuhleersparnis.ch": "abs-guide.txt"},{"Server:": "abs-guide.txt"},{"135.116.137.2": "abs-guide.txt"},{"Address:": "abs-guide.txt"},{"135.116.137.2#53": "abs-guide.txt"},{"Non-authoritative answer:": "abs-guide.txt"},{"Name:": "abs-guide.txt"},{"kuhleersparnis.ch": "abs-guide.txt"},{"": "abs-guide.txt"},{"dig": "abs-guide.txt"},{"Domain Information Groper. Similar to nslookup, dig does an Internet name server lookup on a host.": "abs-guide.txt"},{"May be run from the command-line or from within a script.": "abs-guide.txt"},{"Some interesting options to dig are +time=N for setting a query timeout to N seconds, +nofail for": "abs-guide.txt"},{"continuing to query servers until a reply is received, and -x for doing a reverse address lookup.": "abs-guide.txt"},{"Compare the output of dig -x with ipcalc -h and nslookup.": "abs-guide.txt"},{"bash$ dig -x 81.9.6.2": "abs-guide.txt"},{";; Got answer:": "abs-guide.txt"},{";; ->>HEADER<<- opcode: QUERY, status: NXDOMAIN, id: 11649": "abs-guide.txt"},{";; flags: qr rd ra; QUERY: 1, ANSWER: 0, AUTHORITY: 1, ADDITIONAL: 0": "abs-guide.txt"},{";; QUESTION SECTION:": "abs-guide.txt"},{";2.6.9.81.in-addr.arpa.": "abs-guide.txt"},{";; AUTHORITY SECTION:": "abs-guide.txt"},{"6.9.81.in-addr.arpa.": "abs-guide.txt"},{"3600": "abs-guide.txt"},{"2002031705 900 600 86400 3600": "abs-guide.txt"},{";;": "abs-guide.txt"},{";;": "abs-guide.txt"},{";;": "abs-guide.txt"},{";;": "abs-guide.txt"},{"": "abs-guide.txt"},{"IN": "abs-guide.txt"},{"": "abs-guide.txt"},{"PTR": "abs-guide.txt"},{"": "abs-guide.txt"},{"IN": "abs-guide.txt"},{"": "abs-guide.txt"},{"SOA": "abs-guide.txt"},{"": "abs-guide.txt"},{"ns.eltel.net. noc.eltel.net.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Query time: 537 msec": "abs-guide.txt"},{"SERVER: 135.116.137.2#53(135.116.137.2)": "abs-guide.txt"},{"WHEN: Wed Jun 26 08:35:24 2002": "abs-guide.txt"},{"MSG SIZE rcvd: 91": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 16-40. Finding out where to report a spammer": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# spam-lookup.sh: Look up abuse contact to report a spammer.": "abs-guide.txt"},{"# Thanks, Michael Zick.": "abs-guide.txt"},{"# Check for command-line arg.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"277": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"ARGCOUNT=1": "abs-guide.txt"},{"E_WRONGARGS=85": "abs-guide.txt"},{"if [ $# -ne \"$ARGCOUNT\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Usage: `basename $0` domain-name\"": "abs-guide.txt"},{"exit $E_WRONGARGS": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"dig +short $1.contacts.abuse.net -c in -t txt": "abs-guide.txt"},{"# Also try:": "abs-guide.txt"},{"#": "abs-guide.txt"},{"dig +nssearch $1": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Tries to find \"authoritative name servers\" and display SOA records.": "abs-guide.txt"},{"# The following also works:": "abs-guide.txt"},{"#": "abs-guide.txt"},{"whois -h whois.abuse.net $1": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^^ ^^^^^^^^^^^^^^^ Specify host.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Can even lookup multiple spammers with this, i.e.\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"whois -h whois.abuse.net $spamdomain1 $spamdomain2 . . .": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Exercise:": "abs-guide.txt"},{"-------Expand the functionality of this script": "abs-guide.txt"},{"so that it automatically e-mails a notification": "abs-guide.txt"},{"to the responsible ISP's contact address(es).": "abs-guide.txt"},{"Hint: use the \"mail\" command.": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit $?": "abs-guide.txt"},{"# spam-lookup.sh chinatietong.com": "abs-guide.txt"},{"#": "abs-guide.txt"},{"A known spam domain.": "abs-guide.txt"},{"# \"crnet_mgr@chinatietong.com\"": "abs-guide.txt"},{"# \"crnet_tec@chinatietong.com\"": "abs-guide.txt"},{"# \"postmaster@chinatietong.com\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# For a more elaborate version of this script,": "abs-guide.txt"},{"#+ see the SpamViz home page, http://www.spamviz.net/index.html.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 16-41. Analyzing a spam domain": "abs-guide.txt"},{"#! /bin/bash": "abs-guide.txt"},{"# is-spammer.sh: Identifying spam domains": "abs-guide.txt"},{"# $Id: is-spammer, v 1.4 2004/09/01 19:37:52 mszick Exp $": "abs-guide.txt"},{"# Above line is RCS ID info.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# This is a simplified version of the \"is_spammer.bash": "abs-guide.txt"},{"#+ script in the Contributed Scripts appendix.": "abs-guide.txt"},{"# is-spammer <domain.name>": "abs-guide.txt"},{"# Uses an external program: 'dig'": "abs-guide.txt"},{"# Tested with version: 9.2.4rc5": "abs-guide.txt"},{"# Uses functions.": "abs-guide.txt"},{"# Uses IFS to parse strings by assignment into arrays.": "abs-guide.txt"},{"# And even does something useful: checks e-mail blacklists.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"278": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# Use the domain.name(s) from the text body:": "abs-guide.txt"},{"# http://www.good_stuff.spammer.biz/just_ignore_everything_else": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^^^^^^^^^^^": "abs-guide.txt"},{"# Or the domain.name(s) from any e-mail address:": "abs-guide.txt"},{"# Really_Good_Offer@spammer.biz": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# as the only argument to this script.": "abs-guide.txt"},{"#(PS: have your Inet connection running)": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# So, to invoke this script in the above two instances:": "abs-guide.txt"},{"#": "abs-guide.txt"},{"is-spammer.sh spammer.biz": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Whitespace == :Space:Tab:Line Feed:Carriage Return:": "abs-guide.txt"},{"WSP_IFS=$'\\x20'$'\\x09'$'\\x0A'$'\\x0D'": "abs-guide.txt"},{"# No Whitespace == Line Feed:Carriage Return": "abs-guide.txt"},{"No_WSP=$'\\x0A'$'\\x0D'": "abs-guide.txt"},{"# Field separator for dotted decimal ip addresses": "abs-guide.txt"},{"ADR_IFS=${No_WSP}'.'": "abs-guide.txt"},{"# Get the dns text resource record.": "abs-guide.txt"},{"# get_txt <error_code> <list_query>": "abs-guide.txt"},{"get_txt() {": "abs-guide.txt"},{"# Parse $1 by assignment at the dots.": "abs-guide.txt"},{"local -a dns": "abs-guide.txt"},{"IFS=$ADR_IFS": "abs-guide.txt"},{"dns=( $1 )": "abs-guide.txt"},{"IFS=$WSP_IFS": "abs-guide.txt"},{"if [ \"${dns[0]}\" == '127' ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"# See if there is a reason.": "abs-guide.txt"},{"echo $(dig +short $2 -t txt)": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"}": "abs-guide.txt"},{"# Get the": "abs-guide.txt"},{"# chk_adr": "abs-guide.txt"},{"chk_adr()": "abs-guide.txt"},{"local": "abs-guide.txt"},{"local": "abs-guide.txt"},{"local": "abs-guide.txt"},{"": "abs-guide.txt"},{"dns address resource record.": "abs-guide.txt"},{"<rev_dns> <list_server>": "abs-guide.txt"},{"{": "abs-guide.txt"},{"reply": "abs-guide.txt"},{"server": "abs-guide.txt"},{"reason": "abs-guide.txt"},{"": "abs-guide.txt"},{"server=${1}${2}": "abs-guide.txt"},{"reply=$( dig +short ${server} )": "abs-guide.txt"},{"# If reply might be an error code . . .": "abs-guide.txt"},{"if [ ${#reply} -gt 6 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"reason=$(get_txt ${reply} ${server} )": "abs-guide.txt"},{"reason=${reason:-${reply}}": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"echo ${reason:-' not blacklisted.'}": "abs-guide.txt"},{"}": "abs-guide.txt"},{"# Need to get the IP address from the name.": "abs-guide.txt"},{"echo 'Get address of: '$1": "abs-guide.txt"},{"ip_adr=$(dig +short $1)": "abs-guide.txt"},{"dns_reply=${ip_adr:-' no answer '}": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"279": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"echo ' Found address: '${dns_reply}": "abs-guide.txt"},{"# A valid reply is at least 4 digits plus 3 dots.": "abs-guide.txt"},{"if [ ${#ip_adr} -gt 6 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"declare query": "abs-guide.txt"},{"# Parse by assignment at the dots.": "abs-guide.txt"},{"declare -a dns": "abs-guide.txt"},{"IFS=$ADR_IFS": "abs-guide.txt"},{"dns=( ${ip_adr} )": "abs-guide.txt"},{"IFS=$WSP_IFS": "abs-guide.txt"},{"# Reorder octets into dns query order.": "abs-guide.txt"},{"rev_dns=\"${dns[3]}\"'.'\"${dns[2]}\"'.'\"${dns[1]}\"'.'\"${dns[0]}\"'.'": "abs-guide.txt"},{"# See: http://www.spamhaus.org (Conservative, well maintained)": "abs-guide.txt"},{"echo -n 'spamhaus.org says: '": "abs-guide.txt"},{"echo $(chk_adr ${rev_dns} 'sbl-xbl.spamhaus.org')": "abs-guide.txt"},{"# See: http://ordb.org (Open mail relays)": "abs-guide.txt"},{"echo -n '": "abs-guide.txt"},{"ordb.org says: '": "abs-guide.txt"},{"echo $(chk_adr ${rev_dns} 'relays.ordb.org')": "abs-guide.txt"},{"# See: http://www.spamcop.net/ (You can report spammers here)": "abs-guide.txt"},{"echo -n ' spamcop.net says: '": "abs-guide.txt"},{"echo $(chk_adr ${rev_dns} 'bl.spamcop.net')": "abs-guide.txt"},{"# # # other blacklist operations # # #": "abs-guide.txt"},{"# See: http://cbl.abuseat.org.": "abs-guide.txt"},{"echo -n ' abuseat.org says: '": "abs-guide.txt"},{"echo $(chk_adr ${rev_dns} 'cbl.abuseat.org')": "abs-guide.txt"},{"# See: http://dsbl.org/usage (Various mail relays)": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo 'Distributed Server Listings'": "abs-guide.txt"},{"echo -n '": "abs-guide.txt"},{"list.dsbl.org says: '": "abs-guide.txt"},{"echo $(chk_adr ${rev_dns} 'list.dsbl.org')": "abs-guide.txt"},{"echo -n '": "abs-guide.txt"},{"multihop.dsbl.org says: '": "abs-guide.txt"},{"echo $(chk_adr ${rev_dns} 'multihop.dsbl.org')": "abs-guide.txt"},{"echo -n 'unconfirmed.dsbl.org says: '": "abs-guide.txt"},{"echo $(chk_adr ${rev_dns} 'unconfirmed.dsbl.org')": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo 'Could not use that address.'": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"# Exercises:": "abs-guide.txt"},{"# -------# 1) Check arguments to script,": "abs-guide.txt"},{"#": "abs-guide.txt"},{"and exit with appropriate error message if necessary.": "abs-guide.txt"},{"# 2) Check if on-line at invocation of script,": "abs-guide.txt"},{"#": "abs-guide.txt"},{"and exit with appropriate error message if necessary.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"280": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# 3) Substitute generic variables for \"hard-coded\" BHL domains.": "abs-guide.txt"},{"# 4) Set a time-out for the script using the \"+time=\" option": "abs-guide.txt"},{"to the 'dig' command.": "abs-guide.txt"},{"": "abs-guide.txt"},{"For a much more elaborate version of the above script, see Example A-28.": "abs-guide.txt"},{"traceroute": "abs-guide.txt"},{"Trace the route taken by packets sent to a remote host. This command works within a LAN, WAN, or": "abs-guide.txt"},{"over the Internet. The remote host may be specified by an IP address. The output of this command": "abs-guide.txt"},{"may be filtered by grep or sed in a pipe.": "abs-guide.txt"},{"bash$ traceroute 81.9.6.2": "abs-guide.txt"},{"traceroute to 81.9.6.2 (81.9.6.2), 30 hops max, 38 byte packets": "abs-guide.txt"},{"1 tc43.xjbnnbrb.com (136.30.178.8) 191.303 ms 179.400 ms 179.767 ms": "abs-guide.txt"},{"2 or0.xjbnnbrb.com (136.30.178.1) 179.536 ms 179.534 ms 169.685 ms": "abs-guide.txt"},{"3 192.168.11.101 (192.168.11.101) 189.471 ms 189.556 ms *": "abs-guide.txt"},{"...": "abs-guide.txt"},{"": "abs-guide.txt"},{"ping": "abs-guide.txt"},{"Broadcast an ICMP ECHO_REQUEST packet to another machine, either on a local or remote": "abs-guide.txt"},{"network. This is a diagnostic tool for testing network connections, and it should be used with caution.": "abs-guide.txt"},{"bash$ ping localhost": "abs-guide.txt"},{"PING localhost.localdomain (127.0.0.1) from 127.0.0.1 : 56(84) bytes of data.": "abs-guide.txt"},{"64 bytes from localhost.localdomain (127.0.0.1): icmp_seq=0 ttl=255 time=709 usec": "abs-guide.txt"},{"64 bytes from localhost.localdomain (127.0.0.1): icmp_seq=1 ttl=255 time=286 usec": "abs-guide.txt"},{"--- localhost.localdomain ping statistics --2 packets transmitted, 2 packets received, 0% packet loss": "abs-guide.txt"},{"round-trip min/avg/max/mdev = 0.286/0.497/0.709/0.212 ms": "abs-guide.txt"},{"": "abs-guide.txt"},{"A successful ping returns an exit status of 0. This can be tested for in a script.": "abs-guide.txt"},{"": "abs-guide.txt"},{"HNAME=news-15.net # Notorious spammer.": "abs-guide.txt"},{"# HNAME=$HOST": "abs-guide.txt"},{"# Debug: test for localhost.": "abs-guide.txt"},{"count=2 # Send only two pings.": "abs-guide.txt"},{"if [[ `ping -c $count \"$HNAME\"` ]]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"\"$HNAME\" still up and broadcasting spam your way.\"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo \"\"$HNAME\" seems to be down. Pity.\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"whois": "abs-guide.txt"},{"Perform a DNS (Domain Name System) lookup. The -h option permits specifying which particular": "abs-guide.txt"},{"whois server to query. See Example 4-6 and Example 16-40.": "abs-guide.txt"},{"finger": "abs-guide.txt"},{"Retrieve information about users on a network. Optionally, this command can display a user's": "abs-guide.txt"},{"~/.plan, ~/.project, and ~/.forward files, if present.": "abs-guide.txt"},{"bash$ finger": "abs-guide.txt"},{"Login Name": "abs-guide.txt"},{"bozo": "abs-guide.txt"},{"Bozo Bozeman": "abs-guide.txt"},{"bozo": "abs-guide.txt"},{"Bozo Bozeman": "abs-guide.txt"},{"bozo": "abs-guide.txt"},{"Bozo Bozeman": "abs-guide.txt"},{"": "abs-guide.txt"},{"Tty": "abs-guide.txt"},{"tty1": "abs-guide.txt"},{"ttyp0": "abs-guide.txt"},{"ttyp1": "abs-guide.txt"},{"": "abs-guide.txt"},{"Idle": "abs-guide.txt"},{"8": "abs-guide.txt"},{"": "abs-guide.txt"},{"Login Time": "abs-guide.txt"},{"Office": "abs-guide.txt"},{"Jun 25 16:59": "abs-guide.txt"},{"Jun 25 16:59": "abs-guide.txt"},{"Jun 25 17:07": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"Office Phone": "abs-guide.txt"},{"(:0)": "abs-guide.txt"},{"(:0.0)": "abs-guide.txt"},{"(:0.0)": "abs-guide.txt"},{"": "abs-guide.txt"},{"281": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"": "abs-guide.txt"},{"bash$ finger bozo": "abs-guide.txt"},{"Login: bozo": "abs-guide.txt"},{"Name: Bozo Bozeman": "abs-guide.txt"},{"Directory: /home/bozo": "abs-guide.txt"},{"Shell: /bin/bash": "abs-guide.txt"},{"Office: 2355 Clown St., 543-1234": "abs-guide.txt"},{"On since Fri Aug 31 20:13 (MST) on tty1": "abs-guide.txt"},{"1 hour 38 minutes idle": "abs-guide.txt"},{"On since Fri Aug 31 20:13 (MST) on pts/0": "abs-guide.txt"},{"12 seconds idle": "abs-guide.txt"},{"On since Fri Aug 31 20:13 (MST) on pts/1": "abs-guide.txt"},{"On since Fri Aug 31 20:31 (MST) on pts/2": "abs-guide.txt"},{"1 hour 16 minutes idle": "abs-guide.txt"},{"Mail last read Tue Jul 3 10:08 2007 (MST)": "abs-guide.txt"},{"No Plan.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Out of security considerations, many networks disable finger and its associated daemon. [81]": "abs-guide.txt"},{"chfn": "abs-guide.txt"},{"Change information disclosed by the finger command.": "abs-guide.txt"},{"vrfy": "abs-guide.txt"},{"Verify an Internet e-mail address.": "abs-guide.txt"},{"This command seems to be missing from newer Linux distros.": "abs-guide.txt"},{"Remote Host Access": "abs-guide.txt"},{"sx, rx": "abs-guide.txt"},{"The sx and rx command set serves to transfer files to and from a remote host using the xmodem": "abs-guide.txt"},{"protocol. These are generally part of a communications package, such as minicom.": "abs-guide.txt"},{"sz, rz": "abs-guide.txt"},{"The sz and rz command set serves to transfer files to and from a remote host using the zmodem": "abs-guide.txt"},{"protocol. Zmodem has certain advantages over xmodem, such as faster transmission rate and": "abs-guide.txt"},{"resumption of interrupted file transfers. Like sx and rx, these are generally part of a communications": "abs-guide.txt"},{"package.": "abs-guide.txt"},{"ftp": "abs-guide.txt"},{"Utility and protocol for uploading / downloading files to or from a remote host. An ftp session can be": "abs-guide.txt"},{"automated in a script (see Example 19-6 and Example A-4).": "abs-guide.txt"},{"uucp, uux, cu": "abs-guide.txt"},{"uucp: UNIX to UNIX copy. This is a communications package for transferring files between UNIX": "abs-guide.txt"},{"servers. A shell script is an effective way to handle a uucp command sequence.": "abs-guide.txt"},{"Since the advent of the Internet and e-mail, uucp seems to have faded into obscurity, but it still exists": "abs-guide.txt"},{"and remains perfectly workable in situations where an Internet connection is not available or": "abs-guide.txt"},{"appropriate. The advantage of uucp is that it is fault-tolerant, so even if there is a service interruption": "abs-guide.txt"},{"the copy operation will resume where it left off when the connection is restored.": "abs-guide.txt"},{"--uux: UNIX to UNIX execute. Execute a command on a remote system. This command is part of the": "abs-guide.txt"},{"uucp package.": "abs-guide.txt"},{"--cu: Call Up a remote system and connect as a simple terminal. It is a sort of dumbed-down version of": "abs-guide.txt"},{"telnet. This command is part of the uucp package.": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"282": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"telnet": "abs-guide.txt"},{"Utility and protocol for connecting to a remote host.": "abs-guide.txt"},{"The telnet protocol contains security holes and should therefore probably be avoided.": "abs-guide.txt"},{"Its use within a shell script is not recommended.": "abs-guide.txt"},{"wget": "abs-guide.txt"},{"The wget utility noninteractively retrieves or downloads files from a Web or ftp site. It works well in": "abs-guide.txt"},{"a script.": "abs-guide.txt"},{"wget -p http://www.xyz23.com/file01.html": "abs-guide.txt"},{"# The -p or --page-requisite option causes wget to fetch all files": "abs-guide.txt"},{"#+ required to display the specified page.": "abs-guide.txt"},{"wget -r ftp://ftp.xyz24.net/~bozo/project_files/ -O $SAVEFILE": "abs-guide.txt"},{"# The -r option recursively follows and retrieves all links": "abs-guide.txt"},{"#+ on the specified site.": "abs-guide.txt"},{"wget -c ftp://ftp.xyz25.net/bozofiles/filename.tar.bz2": "abs-guide.txt"},{"# The -c option lets wget resume an interrupted download.": "abs-guide.txt"},{"# This works with ftp servers and many HTTP sites.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 16-42. Getting a stock quote": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# quote-fetch.sh: Download a stock quote.": "abs-guide.txt"},{"": "abs-guide.txt"},{"E_NOPARAMS=86": "abs-guide.txt"},{"if [ -z \"$1\" ] # Must specify a stock (symbol) to fetch.": "abs-guide.txt"},{"then echo \"Usage: `basename $0` stock-symbol\"": "abs-guide.txt"},{"exit $E_NOPARAMS": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"stock_symbol=$1": "abs-guide.txt"},{"file_suffix=.html": "abs-guide.txt"},{"# Fetches an HTML file, so name it appropriately.": "abs-guide.txt"},{"URL='http://finance.yahoo.com/q?s='": "abs-guide.txt"},{"# Yahoo finance board, with stock query suffix.": "abs-guide.txt"},{"# ----------------------------------------------------------wget -O ${stock_symbol}${file_suffix} \"${URL}${stock_symbol}\"": "abs-guide.txt"},{"# -----------------------------------------------------------": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"To look up stuff on http://search.yahoo.com:": "abs-guide.txt"},{"----------------------------------------------------------URL=\"http://search.yahoo.com/search?fr=ush-news&p=${query}\"": "abs-guide.txt"},{"wget -O \"$savefilename\" \"${URL}\"": "abs-guide.txt"},{"----------------------------------------------------------Saves a list of relevant URLs.": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit $?": "abs-guide.txt"},{"# Exercises:": "abs-guide.txt"},{"# --------#": "abs-guide.txt"},{"# 1) Add a test to ensure the user running the script is on-line.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"283": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"#": "abs-guide.txt"},{"(Hint: parse the output of 'ps -ax' for \"ppp\" or \"connect.\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# 2) Modify this script to fetch the local weather report,": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"taking the user's zip code as an argument.": "abs-guide.txt"},{"": "abs-guide.txt"},{"See also Example A-30 and Example A-31.": "abs-guide.txt"},{"lynx": "abs-guide.txt"},{"The lynx Web and file browser can be used inside a script (with the -dump option) to retrieve a file": "abs-guide.txt"},{"from a Web or ftp site noninteractively.": "abs-guide.txt"},{"lynx -dump http://www.xyz23.com/file01.html >$SAVEFILE": "abs-guide.txt"},{"": "abs-guide.txt"},{"With the -traversal option, lynx starts at the HTTP URL specified as an argument, then \"crawls\"": "abs-guide.txt"},{"through all links located on that particular server. Used together with the -crawl option, outputs": "abs-guide.txt"},{"page text to a log file.": "abs-guide.txt"},{"rlogin": "abs-guide.txt"},{"Remote login, initates a session on a remote host. This command has security issues, so use ssh": "abs-guide.txt"},{"instead.": "abs-guide.txt"},{"rsh": "abs-guide.txt"},{"Remote shell, executes command(s) on a remote host. This has security issues, so use ssh": "abs-guide.txt"},{"instead.": "abs-guide.txt"},{"rcp": "abs-guide.txt"},{"Remote copy, copies files between two different networked machines.": "abs-guide.txt"},{"rsync": "abs-guide.txt"},{"Remote synchronize, updates (synchronizes) files between two different networked machines.": "abs-guide.txt"},{"bash$ rsync -a ~/sourcedir/*txt /node1/subdirectory/": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 16-43. Updating FC4": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# fc4upd.sh": "abs-guide.txt"},{"# Script author: Frank Wang.": "abs-guide.txt"},{"# Slight stylistic modifications by ABS Guide author.": "abs-guide.txt"},{"# Used in ABS Guide with permission.": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"Download Fedora Core 4 update from mirror site using rsync.": "abs-guide.txt"},{"Should also work for newer Fedora Cores -- 5, 6, . . .": "abs-guide.txt"},{"Only download latest package if multiple versions exist,": "abs-guide.txt"},{"to save space.": "abs-guide.txt"},{"": "abs-guide.txt"},{"URL=rsync://distro.ibiblio.org/fedora-linux-core/updates/": "abs-guide.txt"},{"# URL=rsync://ftp.kddilabs.jp/fedora/core/updates/": "abs-guide.txt"},{"# URL=rsync://rsync.planetmirror.com/fedora-linux-core/updates/": "abs-guide.txt"},{"DEST=${1:-/var/www/html/fedora/updates/}": "abs-guide.txt"},{"LOG=/tmp/repo-update-$(/bin/date +%Y-%m-%d).txt": "abs-guide.txt"},{"PID_FILE=/var/run/${0##*/}.pid": "abs-guide.txt"},{"E_RETURN=85": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Something unexpected happened.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# General rsync options": "abs-guide.txt"},{"# -r: recursive download": "abs-guide.txt"},{"# -t: reserve time": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"284": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# -v: verbose": "abs-guide.txt"},{"OPTS=\"-rtv --delete-excluded --delete-after --partial\"": "abs-guide.txt"},{"# rsync include pattern": "abs-guide.txt"},{"# Leading slash causes absolute path name match.": "abs-guide.txt"},{"INCLUDE=(": "abs-guide.txt"},{"\"/4/i386/kde-i18n-Chinese*\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^": "abs-guide.txt"},{"^": "abs-guide.txt"},{"# Quoting is necessary to prevent globbing.": "abs-guide.txt"},{")": "abs-guide.txt"},{"": "abs-guide.txt"},{"# rsync exclude pattern": "abs-guide.txt"},{"# Temporarily comment out unwanted pkgs using \"#\" . . .": "abs-guide.txt"},{"EXCLUDE=(": "abs-guide.txt"},{"/1": "abs-guide.txt"},{"/2": "abs-guide.txt"},{"/3": "abs-guide.txt"},{"/testing": "abs-guide.txt"},{"/4/SRPMS": "abs-guide.txt"},{"/4/ppc": "abs-guide.txt"},{"/4/x86_64": "abs-guide.txt"},{"/4/i386/debug": "abs-guide.txt"},{"\"/4/i386/kde-i18n-*\"": "abs-guide.txt"},{"\"/4/i386/openoffice.org-langpack-*\"": "abs-guide.txt"},{"\"/4/i386/*i586.rpm\"": "abs-guide.txt"},{"\"/4/i386/GFS-*\"": "abs-guide.txt"},{"\"/4/i386/cman-*\"": "abs-guide.txt"},{"\"/4/i386/dlm-*\"": "abs-guide.txt"},{"\"/4/i386/gnbd-*\"": "abs-guide.txt"},{"\"/4/i386/kernel-smp*\"": "abs-guide.txt"},{"# \"/4/i386/kernel-xen*\"": "abs-guide.txt"},{"# \"/4/i386/xen-*\"": "abs-guide.txt"},{")": "abs-guide.txt"},{"": "abs-guide.txt"},{"init () {": "abs-guide.txt"},{"# Let pipe command return possible rsync error, e.g., stalled network.": "abs-guide.txt"},{"set -o pipefail": "abs-guide.txt"},{"# Newly introduced in Bash, version 3.": "abs-guide.txt"},{"TMP=${TMPDIR:-/tmp}/${0##*/}.$$": "abs-guide.txt"},{"trap \"{": "abs-guide.txt"},{"rm -f $TMP 2>/dev/null": "abs-guide.txt"},{"}\" EXIT": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Store refined download list.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Clear temporary file on exit.": "abs-guide.txt"},{"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"check_pid () {": "abs-guide.txt"},{"# Check if process exists.": "abs-guide.txt"},{"if [ -s \"$PID_FILE\" ]; then": "abs-guide.txt"},{"echo \"PID file exists. Checking ...\"": "abs-guide.txt"},{"PID=$(/bin/egrep -o \"^[[:digit:]]+\" $PID_FILE)": "abs-guide.txt"},{"if /bin/ps --pid $PID &>/dev/null; then": "abs-guide.txt"},{"echo \"Process $PID found. ${0##*/} seems to be running!\"": "abs-guide.txt"},{"/usr/bin/logger -t ${0##*/} \\": "abs-guide.txt"},{"\"Process $PID found. ${0##*/} seems to be running!\"": "abs-guide.txt"},{"exit $E_RETURN": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"echo \"Process $PID not found. Start new process . . .\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"285": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Set overall file update range starting from root or $URL,": "abs-guide.txt"},{"#+ according to above patterns.": "abs-guide.txt"},{"set_range () {": "abs-guide.txt"},{"include=": "abs-guide.txt"},{"exclude=": "abs-guide.txt"},{"for p in \"${INCLUDE[@]}\"; do": "abs-guide.txt"},{"include=\"$include --include \\\"$p\\\"\"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"for p in \"${EXCLUDE[@]}\"; do": "abs-guide.txt"},{"exclude=\"$exclude --exclude \\\"$p\\\"\"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Retrieve and refine rsync update list.": "abs-guide.txt"},{"get_list () {": "abs-guide.txt"},{"echo $$ > $PID_FILE || {": "abs-guide.txt"},{"echo \"Can't write to pid file $PID_FILE\"": "abs-guide.txt"},{"exit $E_RETURN": "abs-guide.txt"},{"}": "abs-guide.txt"},{"echo -n \"Retrieving and refining update list . . .\"": "abs-guide.txt"},{"# Retrieve list -- 'eval' is needed to run rsync as a single command.": "abs-guide.txt"},{"# $3 and $4 is the date and time of file creation.": "abs-guide.txt"},{"# $5 is the full package name.": "abs-guide.txt"},{"previous=": "abs-guide.txt"},{"pre_file=": "abs-guide.txt"},{"pre_date=0": "abs-guide.txt"},{"eval /bin/nice /usr/bin/rsync \\": "abs-guide.txt"},{"-r $include $exclude $URL | \\": "abs-guide.txt"},{"egrep '^dr.x|^-r' | \\": "abs-guide.txt"},{"awk '{print $3, $4, $5}' | \\": "abs-guide.txt"},{"sort -k3 | \\": "abs-guide.txt"},{"{ while read line; do": "abs-guide.txt"},{"# Get seconds since epoch, to filter out obsolete pkgs.": "abs-guide.txt"},{"cur_date=$(date -d \"$(echo $line | awk '{print $1, $2}')\" +%s)": "abs-guide.txt"},{"# echo $cur_date": "abs-guide.txt"},{"# Get file name.": "abs-guide.txt"},{"cur_file=$(echo $line | awk '{print $3}')": "abs-guide.txt"},{"# echo $cur_file": "abs-guide.txt"},{"# Get rpm pkg name from file name, if possible.": "abs-guide.txt"},{"if [[ $cur_file == *rpm ]]; then": "abs-guide.txt"},{"pkg_name=$(echo $cur_file | sed -r -e \\": "abs-guide.txt"},{"'s/(^([^_-]+[_-])+)[[:digit:]]+\\..*[_-].*$/\\1/')": "abs-guide.txt"},{"else": "abs-guide.txt"},{"pkg_name=": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# echo $pkg_name": "abs-guide.txt"},{"if [ -z \"$pkg_name\" ]; then": "abs-guide.txt"},{"# If not a rpm file,": "abs-guide.txt"},{"echo $cur_file >> $TMP": "abs-guide.txt"},{"#+ then append to download list.": "abs-guide.txt"},{"elif [ \"$pkg_name\" != \"$previous\" ]; then": "abs-guide.txt"},{"# A new pkg found.": "abs-guide.txt"},{"echo $pre_file >> $TMP": "abs-guide.txt"},{"# Output latest file.": "abs-guide.txt"},{"previous=$pkg_name": "abs-guide.txt"},{"# Save current.": "abs-guide.txt"},{"pre_date=$cur_date": "abs-guide.txt"},{"pre_file=$cur_file": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"286": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"elif [ \"$cur_date\" -gt \"$pre_date\" ]; then": "abs-guide.txt"},{"# If same pkg, but newer,": "abs-guide.txt"},{"pre_date=$cur_date": "abs-guide.txt"},{"#+ then update latest pointer.": "abs-guide.txt"},{"pre_file=$cur_file": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo $pre_file >> $TMP": "abs-guide.txt"},{"# TMP contains ALL": "abs-guide.txt"},{"#+ of refined list now.": "abs-guide.txt"},{"# echo \"subshell=$BASH_SUBSHELL\"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Bracket required here to let final \"echo $pre_file >> $TMP\"": "abs-guide.txt"},{"# Remained in the same subshell ( 1 ) with the entire loop.": "abs-guide.txt"},{"": "abs-guide.txt"},{"RET=$?": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Get return code of the pipe command.": "abs-guide.txt"},{"": "abs-guide.txt"},{"[ \"$RET\" -ne 0 ] && {": "abs-guide.txt"},{"echo \"List retrieving failed with code $RET\"": "abs-guide.txt"},{"exit $E_RETURN": "abs-guide.txt"},{"}": "abs-guide.txt"},{"echo \"done\"; echo": "abs-guide.txt"},{"}": "abs-guide.txt"},{"# Real rsync download part.": "abs-guide.txt"},{"get_file () {": "abs-guide.txt"},{"echo \"Downloading...\"": "abs-guide.txt"},{"/bin/nice /usr/bin/rsync \\": "abs-guide.txt"},{"$OPTS \\": "abs-guide.txt"},{"--filter \"merge,+/ $TMP\" \\": "abs-guide.txt"},{"--exclude '*' \\": "abs-guide.txt"},{"$URL $DEST": "abs-guide.txt"},{"\\": "abs-guide.txt"},{"| /usr/bin/tee $LOG": "abs-guide.txt"},{"RET=$?": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"--filter merge,+/ is crucial for the intention.": "abs-guide.txt"},{"+ modifier means include and / means absolute path.": "abs-guide.txt"},{"Then sorted list in $TMP will contain ascending dir name and": "abs-guide.txt"},{"prevent the following --exclude '*' from \"shortcutting the circuit.\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo \"Done\"": "abs-guide.txt"},{"rm -f $PID_FILE 2>/dev/null": "abs-guide.txt"},{"return $RET": "abs-guide.txt"},{"}": "abs-guide.txt"},{"# ------# Main": "abs-guide.txt"},{"init": "abs-guide.txt"},{"check_pid": "abs-guide.txt"},{"set_range": "abs-guide.txt"},{"get_list": "abs-guide.txt"},{"get_file": "abs-guide.txt"},{"RET=$?": "abs-guide.txt"},{"# ------if [ \"$RET\" -eq 0 ]; then": "abs-guide.txt"},{"/usr/bin/logger -t ${0##*/} \"Fedora update mirrored successfully.\"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"/usr/bin/logger -t ${0##*/} \\": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"287": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"\"Fedora update mirrored with failure code: $RET\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"exit $RET": "abs-guide.txt"},{"": "abs-guide.txt"},{"See also Example A-32.": "abs-guide.txt"},{"Using rcp, rsync, and similar utilities with security implications in a shell script may": "abs-guide.txt"},{"not be advisable. Consider, instead, using ssh, scp, or an expect script.": "abs-guide.txt"},{"ssh": "abs-guide.txt"},{"Secure shell, logs onto a remote host and executes commands there. This secure replacement for": "abs-guide.txt"},{"telnet, rlogin, rcp, and rsh uses identity authentication and encryption. See its manpage for details.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 16-44. Using ssh": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# remote.bash: Using ssh.": "abs-guide.txt"},{"# This example by Michael Zick.": "abs-guide.txt"},{"# Used with permission.": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"Presumptions:": "abs-guide.txt"},{"-----------fd-2 isn't being captured ( '2>/dev/null' ).": "abs-guide.txt"},{"ssh/sshd presumes stderr ('2') will display to user.": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"sshd is running on your machine.": "abs-guide.txt"},{"For any 'standard' distribution, it probably is,": "abs-guide.txt"},{"and without any funky ssh-keygen having been done.": "abs-guide.txt"},{"Try ssh to your machine from the command-line:": "abs-guide.txt"},{"$ ssh $HOSTNAME": "abs-guide.txt"},{"Without extra set-up you'll be asked for your password.": "abs-guide.txt"},{"enter password": "abs-guide.txt"},{"when done, $ exit": "abs-guide.txt"},{"Did that work? If so, you're ready for more fun.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Try ssh to your machine as 'root':": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"$ ssh -l root $HOSTNAME": "abs-guide.txt"},{"#": "abs-guide.txt"},{"When asked for password, enter root's, not yours.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Last login: Tue Aug 10 20:25:49 2004 from localhost.localdomain": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Enter 'exit' when done.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"The above gives you an interactive shell.": "abs-guide.txt"},{"It is possible for sshd to be set up in a 'single command' mode,": "abs-guide.txt"},{"but that is beyond the scope of this example.": "abs-guide.txt"},{"The only thing to note is that the following will work in": "abs-guide.txt"},{"'single command' mode.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# A basic, write stdout (local) command.": "abs-guide.txt"},{"ls -l": "abs-guide.txt"},{"# Now the same basic command on a remote machine.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"288": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# Pass a different 'USERNAME' 'HOSTNAME' if desired:": "abs-guide.txt"},{"USER=${USERNAME:-$(whoami)}": "abs-guide.txt"},{"HOST=${HOSTNAME:-$(hostname)}": "abs-guide.txt"},{"# Now excute the above command-line on the remote host,": "abs-guide.txt"},{"#+ with all transmissions encrypted.": "abs-guide.txt"},{"ssh -l ${USER} ${HOST} \" ls -l \"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"The expected result is a listing of your username's home": "abs-guide.txt"},{"directory on the remote machine.": "abs-guide.txt"},{"To see any difference, run this script from somewhere": "abs-guide.txt"},{"other than your home directory.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# In other words, the Bash command is passed as a quoted line": "abs-guide.txt"},{"#+ to the remote shell, which executes it on the remote machine.": "abs-guide.txt"},{"# In this case, sshd does ' bash -c \"ls -l\" '": "abs-guide.txt"},{"on your behalf.": "abs-guide.txt"},{"# For information on topics such as not having to enter a": "abs-guide.txt"},{"#+ password/passphrase for every command-line, see": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"man ssh": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"man ssh-keygen": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"man sshd_config.": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Within a loop, ssh may cause unexpected behavior. According to a Usenet post in the": "abs-guide.txt"},{"comp.unix shell archives, ssh inherits the loop's stdin. To remedy this, pass ssh": "abs-guide.txt"},{"either the -n or -f option.": "abs-guide.txt"},{"Thanks, Jason Bechtel, for pointing this out.": "abs-guide.txt"},{"scp": "abs-guide.txt"},{"Secure copy, similar in function to rcp, copies files between two different networked machines,": "abs-guide.txt"},{"but does so using authentication, and with a security level similar to ssh.": "abs-guide.txt"},{"Local Network": "abs-guide.txt"},{"write": "abs-guide.txt"},{"This is a utility for terminal-to-terminal communication. It allows sending lines from your terminal": "abs-guide.txt"},{"(console or xterm) to that of another user. The mesg command may, of course, be used to disable": "abs-guide.txt"},{"write access to a terminal": "abs-guide.txt"},{"Since write is interactive, it would not normally find use in a script.": "abs-guide.txt"},{"netconfig": "abs-guide.txt"},{"A command-line utility for configuring a network adapter (using DHCP). This command is native to": "abs-guide.txt"},{"Red Hat centric Linux distros.": "abs-guide.txt"},{"Mail": "abs-guide.txt"},{"mail": "abs-guide.txt"},{"Send or read e-mail messages.": "abs-guide.txt"},{"This stripped-down command-line mail client works fine as a command embedded in a script.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"289": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"Example 16-45. A script that mails itself": "abs-guide.txt"},{"#!/bin/sh": "abs-guide.txt"},{"# self-mailer.sh: Self-mailing script": "abs-guide.txt"},{"adr=${1:-`whoami`}": "abs-guide.txt"},{"# Default to current user, if not specified.": "abs-guide.txt"},{"# Typing 'self-mailer.sh wiseguy@superdupergenius.com'": "abs-guide.txt"},{"#+ sends this script to that addressee.": "abs-guide.txt"},{"# Just 'self-mailer.sh' (no argument) sends the script": "abs-guide.txt"},{"#+ to the person invoking it, for example, bozo@localhost.localdomain.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# For more on the ${parameter:-default} construct,": "abs-guide.txt"},{"#+ see the \"Parameter Substitution\" section": "abs-guide.txt"},{"#+ of the \"Variables Revisited\" chapter.": "abs-guide.txt"},{"# ============================================================================": "abs-guide.txt"},{"cat $0 | mail -s \"Script \\\"`basename $0`\\\" has mailed itself to you.\" \"$adr\"": "abs-guide.txt"},{"# ============================================================================": "abs-guide.txt"},{"# -------------------------------------------# Greetings from the self-mailing script.": "abs-guide.txt"},{"# A mischievous person has run this script,": "abs-guide.txt"},{"#+ which has caused it to mail itself to you.": "abs-guide.txt"},{"# Apparently, some people have nothing better": "abs-guide.txt"},{"#+ to do with their time.": "abs-guide.txt"},{"# -------------------------------------------echo \"At `date`, script \\\"`basename $0`\\\" mailed to \"$adr\".\"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"# Note that the \"mailx\" command (in \"send\" mode) may be substituted": "abs-guide.txt"},{"#+ for \"mail\" ... but with somewhat different options.": "abs-guide.txt"},{"": "abs-guide.txt"},{"mailto": "abs-guide.txt"},{"Similar to the mail command, mailto sends e-mail messages from the command-line or in a script.": "abs-guide.txt"},{"However, mailto also permits sending MIME (multimedia) messages.": "abs-guide.txt"},{"mailstats": "abs-guide.txt"},{"Show mail statistics. This command may be invoked only by root.": "abs-guide.txt"},{"root# mailstats": "abs-guide.txt"},{"Statistics from Tue Jan 1 20:32:08 2008": "abs-guide.txt"},{"M": "abs-guide.txt"},{"msgsfr bytes_from": "abs-guide.txt"},{"msgsto": "abs-guide.txt"},{"bytes_to msgsrej msgsdis msgsqur": "abs-guide.txt"},{"4": "abs-guide.txt"},{"1682": "abs-guide.txt"},{"24118K": "abs-guide.txt"},{"0": "abs-guide.txt"},{"0K": "abs-guide.txt"},{"0": "abs-guide.txt"},{"0": "abs-guide.txt"},{"0": "abs-guide.txt"},{"9": "abs-guide.txt"},{"212": "abs-guide.txt"},{"640K": "abs-guide.txt"},{"1894": "abs-guide.txt"},{"25131K": "abs-guide.txt"},{"0": "abs-guide.txt"},{"0": "abs-guide.txt"},{"0": "abs-guide.txt"},{"=====================================================================": "abs-guide.txt"},{"T": "abs-guide.txt"},{"1894": "abs-guide.txt"},{"24758K": "abs-guide.txt"},{"1894": "abs-guide.txt"},{"25131K": "abs-guide.txt"},{"0": "abs-guide.txt"},{"0": "abs-guide.txt"},{"0": "abs-guide.txt"},{"C": "abs-guide.txt"},{"414": "abs-guide.txt"},{"0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Mailer": "abs-guide.txt"},{"esmtp": "abs-guide.txt"},{"local": "abs-guide.txt"},{"": "abs-guide.txt"},{"vacation": "abs-guide.txt"},{"This utility automatically replies to e-mails that the intended recipient is on vacation and temporarily": "abs-guide.txt"},{"unavailable. It runs on a network, in conjunction with sendmail, and is not applicable to a dial-up": "abs-guide.txt"},{"POPmail account.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"290": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"": "abs-guide.txt"},{"16.7. Terminal Control Commands": "abs-guide.txt"},{"Command affecting the console or terminal": "abs-guide.txt"},{"tput": "abs-guide.txt"},{"Initialize terminal and/or fetch information about it from terminfo data. Various options permit certain": "abs-guide.txt"},{"terminal operations: tput clear is the equivalent of clear; tput reset is the equivalent of reset.": "abs-guide.txt"},{"bash$ tput longname": "abs-guide.txt"},{"xterm terminal emulator (X Window System)": "abs-guide.txt"},{"": "abs-guide.txt"},{"Issuing a tput cup X Y moves the cursor to the (X,Y) coordinates in the current terminal. A clear to": "abs-guide.txt"},{"erase the terminal screen would normally precede this.": "abs-guide.txt"},{"Some interesting options to tput are:": "abs-guide.txt"},{"\u25ca bold, for high-intensity text": "abs-guide.txt"},{"\u25ca smul, to underline text in the terminal": "abs-guide.txt"},{"\u25ca smso, to render text in reverse": "abs-guide.txt"},{"\u25ca sgr0, to reset the terminal parameters (to normal), without clearing the screen": "abs-guide.txt"},{"Example scripts using tput:": "abs-guide.txt"},{"1. Example 36-15": "abs-guide.txt"},{"2. Example 36-13": "abs-guide.txt"},{"3. Example A-44": "abs-guide.txt"},{"4. Example A-42": "abs-guide.txt"},{"5. Example 27-2": "abs-guide.txt"},{"Note that stty offers a more powerful command set for controlling a terminal.": "abs-guide.txt"},{"infocmp": "abs-guide.txt"},{"This command prints out extensive information about the current terminal. It references the terminfo": "abs-guide.txt"},{"database.": "abs-guide.txt"},{"bash$ infocmp": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Reconstructed via infocmp from file:": "abs-guide.txt"},{"/usr/share/terminfo/r/rxvt": "abs-guide.txt"},{"rxvt|rxvt terminal emulator (X Window System),": "abs-guide.txt"},{"am, bce, eo, km, mir, msgr, xenl, xon,": "abs-guide.txt"},{"colors#8, cols#80, it#8, lines#24, pairs#64,": "abs-guide.txt"},{"acsc=``aaffggjjkkllmmnnooppqqrrssttuuvvwwxxyyzz{{||}}~~,": "abs-guide.txt"},{"bel=^G, blink=\\E[5m, bold=\\E[1m,": "abs-guide.txt"},{"civis=\\E[?25l,": "abs-guide.txt"},{"clear=\\E[H\\E[2J, cnorm=\\E[?25h, cr=^M,": "abs-guide.txt"},{"...": "abs-guide.txt"},{"": "abs-guide.txt"},{"reset": "abs-guide.txt"},{"Reset terminal parameters and clear text screen. As with clear, the cursor and prompt reappear in the": "abs-guide.txt"},{"upper lefthand corner of the terminal.": "abs-guide.txt"},{"clear": "abs-guide.txt"},{"The clear command simply clears the text screen at the console or in an xterm. The prompt and cursor": "abs-guide.txt"},{"reappear at the upper lefthand corner of the screen or xterm window. This command may be used": "abs-guide.txt"},{"either at the command line or in a script. See Example 11-26.": "abs-guide.txt"},{"resize": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"291": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"Echoes commands necessary to set $TERM and $TERMCAP to duplicate the size (dimensions) of the": "abs-guide.txt"},{"current terminal.": "abs-guide.txt"},{"bash$ resize": "abs-guide.txt"},{"set noglob;": "abs-guide.txt"},{"setenv COLUMNS '80';": "abs-guide.txt"},{"setenv LINES '24';": "abs-guide.txt"},{"unset noglob;": "abs-guide.txt"},{"": "abs-guide.txt"},{"script": "abs-guide.txt"},{"This utility records (saves to a file) all the user keystrokes at the command-line in a console or an": "abs-guide.txt"},{"xterm window. This, in effect, creates a record of a session.": "abs-guide.txt"},{"": "abs-guide.txt"},{"16.8. Math Commands": "abs-guide.txt"},{"\"Doing the numbers\"": "abs-guide.txt"},{"factor": "abs-guide.txt"},{"Decompose an integer into prime factors.": "abs-guide.txt"},{"bash$ factor 27417": "abs-guide.txt"},{"27417: 3 13 19 37": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 16-46. Generating prime numbers": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# primes2.sh": "abs-guide.txt"},{"# Generating prime numbers the quick-and-easy way,": "abs-guide.txt"},{"#+ without resorting to fancy algorithms.": "abs-guide.txt"},{"CEILING=10000": "abs-guide.txt"},{"PRIME=0": "abs-guide.txt"},{"E_NOTPRIME=": "abs-guide.txt"},{"": "abs-guide.txt"},{"# 1 to 10000": "abs-guide.txt"},{"": "abs-guide.txt"},{"is_prime ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"local factors": "abs-guide.txt"},{"factors=( $(factor $1) )": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Load output of `factor` into array.": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [ -z \"${factors[2]}\" ]": "abs-guide.txt"},{"# Third element of \"factors\" array:": "abs-guide.txt"},{"#+ ${factors[2]} is 2nd factor of argument.": "abs-guide.txt"},{"# If it is blank, then there is no 2nd factor,": "abs-guide.txt"},{"#+ and the argument is therefore prime.": "abs-guide.txt"},{"then": "abs-guide.txt"},{"return $PRIME": "abs-guide.txt"},{"# 0": "abs-guide.txt"},{"else": "abs-guide.txt"},{"return $E_NOTPRIME": "abs-guide.txt"},{"# null": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"}": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"for n in $(seq $CEILING)": "abs-guide.txt"},{"do": "abs-guide.txt"},{"if is_prime $n": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"292": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"then": "abs-guide.txt"},{"printf %5d $n": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^ Five positions per number suffices.": "abs-guide.txt"},{"done": "abs-guide.txt"},{"#": "abs-guide.txt"},{"For a higher $CEILING, adjust upward, as necessary.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"exit": "abs-guide.txt"},{"": "abs-guide.txt"},{"bc": "abs-guide.txt"},{"Bash can't handle floating point calculations, and it lacks operators for certain important mathematical": "abs-guide.txt"},{"functions. Fortunately, bc gallops to the rescue.": "abs-guide.txt"},{"Not just a versatile, arbitrary precision calculation utility, bc offers many of the facilities of a": "abs-guide.txt"},{"programming language. It has a syntax vaguely resembling C.": "abs-guide.txt"},{"Since it is a fairly well-behaved UNIX utility, and may therefore be used in a pipe, bc comes in handy": "abs-guide.txt"},{"in scripts.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Here is a simple template for using bc to calculate a script variable. This uses command substitution.": "abs-guide.txt"},{"variable=$(echo \"OPTIONS; OPERATIONS\" | bc)": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 16-47. Monthly Payment on a Mortgage": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# monthlypmt.sh: Calculates monthly payment on a mortgage.": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"This is a modification of code in the": "abs-guide.txt"},{"\"mcalc\" (mortgage calculator) package,": "abs-guide.txt"},{"by Jeff Schmidt": "abs-guide.txt"},{"and": "abs-guide.txt"},{"Mendel Cooper (yours truly, the ABS Guide author).": "abs-guide.txt"},{"http://www.ibiblio.org/pub/Linux/apps/financial/mcalc-1.6.tar.gz": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"Given the principal, interest rate, and term of a mortgage,\"": "abs-guide.txt"},{"echo \"calculate the monthly payment.\"": "abs-guide.txt"},{"bottom=1.0": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"read": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"read": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"read": "abs-guide.txt"},{"": "abs-guide.txt"},{"-n \"Enter principal (no commas) \"": "abs-guide.txt"},{"principal": "abs-guide.txt"},{"-n \"Enter interest rate (percent) \"": "abs-guide.txt"},{"interest_r": "abs-guide.txt"},{"-n \"Enter term (months) \"": "abs-guide.txt"},{"term": "abs-guide.txt"},{"": "abs-guide.txt"},{"# If 12%, enter \"12\", not \".12\".": "abs-guide.txt"},{"": "abs-guide.txt"},{"interest_r=$(echo \"scale=9; $interest_r/100.0\" | bc) # Convert to decimal.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^^^^^^^^^^^^^^^^^ Divide by 100.": "abs-guide.txt"},{"# \"scale\" determines how many decimal places.": "abs-guide.txt"},{"interest_rate=$(echo \"scale=9; $interest_r/12 + 1.0\" | bc)": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"293": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"": "abs-guide.txt"},{"top=$(echo \"scale=9; $principal*$interest_rate^$term\" | bc)": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Standard formula for figuring interest.": "abs-guide.txt"},{"echo; echo \"Please be patient. This may take a while.\"": "abs-guide.txt"},{"let \"months = $term - 1\"": "abs-guide.txt"},{"# ====================================================================": "abs-guide.txt"},{"for ((x=$months; x > 0; x--))": "abs-guide.txt"},{"do": "abs-guide.txt"},{"bot=$(echo \"scale=9; $interest_rate^$x\" | bc)": "abs-guide.txt"},{"bottom=$(echo \"scale=9; $bottom+$bot\" | bc)": "abs-guide.txt"},{"# bottom = $(($bottom + $bot\"))": "abs-guide.txt"},{"done": "abs-guide.txt"},{"# ====================================================================": "abs-guide.txt"},{"# -------------------------------------------------------------------# Rick Boivie pointed out a more efficient implementation": "abs-guide.txt"},{"#+ of the above loop, which decreases computation time by 2/3.": "abs-guide.txt"},{"# for ((x=1; x <= $months; x++))": "abs-guide.txt"},{"# do": "abs-guide.txt"},{"#": "abs-guide.txt"},{"bottom=$(echo \"scale=9; $bottom * $interest_rate + 1\" | bc)": "abs-guide.txt"},{"# done": "abs-guide.txt"},{"": "abs-guide.txt"},{"# And then he came up with an even more efficient alternative,": "abs-guide.txt"},{"#+ one that cuts down the run time by about 95%!": "abs-guide.txt"},{"# bottom=`{": "abs-guide.txt"},{"#": "abs-guide.txt"},{"echo \"scale=9; bottom=$bottom; interest_rate=$interest_rate\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"for ((x=1; x <= $months; x++))": "abs-guide.txt"},{"#": "abs-guide.txt"},{"do": "abs-guide.txt"},{"#": "abs-guide.txt"},{"echo 'bottom = bottom * interest_rate + 1'": "abs-guide.txt"},{"#": "abs-guide.txt"},{"done": "abs-guide.txt"},{"#": "abs-guide.txt"},{"echo 'bottom'": "abs-guide.txt"},{"#": "abs-guide.txt"},{"} | bc`": "abs-guide.txt"},{"# Embeds a 'for loop' within command substitution.": "abs-guide.txt"},{"# -------------------------------------------------------------------------# On the other hand, Frank Wang suggests:": "abs-guide.txt"},{"# bottom=$(echo \"scale=9; ($interest_rate^$term-1)/($interest_rate-1)\" | bc)": "abs-guide.txt"},{"# Because . . .": "abs-guide.txt"},{"# The algorithm behind the loop": "abs-guide.txt"},{"#+ is actually a sum of geometric proportion series.": "abs-guide.txt"},{"# The sum formula is e0(1-q^n)/(1-q),": "abs-guide.txt"},{"#+ where e0 is the first element and q=e(n+1)/e(n)": "abs-guide.txt"},{"#+ and n is the number of elements.": "abs-guide.txt"},{"# --------------------------------------------------------------------------": "abs-guide.txt"},{"": "abs-guide.txt"},{"# let \"payment = $top/$bottom\"": "abs-guide.txt"},{"payment=$(echo \"scale=2; $top/$bottom\" | bc)": "abs-guide.txt"},{"# Use two decimal places for dollars and cents.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"monthly payment = \\$$payment\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Echo a dollar sign in front of amount.": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"294": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Exercises:": "abs-guide.txt"},{"#": "abs-guide.txt"},{"1) Filter": "abs-guide.txt"},{"#": "abs-guide.txt"},{"2) Filter": "abs-guide.txt"},{"#": "abs-guide.txt"},{"3) If you": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"expand": "abs-guide.txt"},{"": "abs-guide.txt"},{"input to permit commas in principal amount.": "abs-guide.txt"},{"input to permit interest to be entered as percent or decimal.": "abs-guide.txt"},{"are really ambitious,": "abs-guide.txt"},{"this script to print complete amortization tables.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 16-48. Base Conversion": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"###########################################################################": "abs-guide.txt"},{"# Shellscript: base.sh - print number to different bases (Bourne Shell)": "abs-guide.txt"},{"# Author": "abs-guide.txt"},{": Heiner Steven (heiner.steven@odn.de)": "abs-guide.txt"},{"# Date": "abs-guide.txt"},{": 07-03-95": "abs-guide.txt"},{"# Category": "abs-guide.txt"},{": Desktop": "abs-guide.txt"},{"# $Id: base.sh,v 1.2 2000/02/06 19:55:35 heiner Exp $": "abs-guide.txt"},{"# ==> Above line is RCS ID info.": "abs-guide.txt"},{"###########################################################################": "abs-guide.txt"},{"# Description": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Changes": "abs-guide.txt"},{"# 21-03-95 stv fixed error occuring with 0xb as input (0.2)": "abs-guide.txt"},{"###########################################################################": "abs-guide.txt"},{"# ==> Used in ABS Guide with the script author's permission.": "abs-guide.txt"},{"# ==> Comments added by ABS Guide author.": "abs-guide.txt"},{"NOARGS=85": "abs-guide.txt"},{"PN=`basename \"$0\"`": "abs-guide.txt"},{"VER=`echo '$Revision: 1.2 $' | cut -d' ' -f2`": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Program name": "abs-guide.txt"},{"# ==> VER=1.2": "abs-guide.txt"},{"": "abs-guide.txt"},{"Usage () {": "abs-guide.txt"},{"echo \"$PN - print number to different bases, $VER (stv '95)": "abs-guide.txt"},{"usage: $PN [number ...]": "abs-guide.txt"},{"If no number is given, the numbers are read from standard input.": "abs-guide.txt"},{"A number may be": "abs-guide.txt"},{"binary (base 2)": "abs-guide.txt"},{"starting with 0b (i.e. 0b1100)": "abs-guide.txt"},{"octal (base 8)": "abs-guide.txt"},{"starting with 0 (i.e. 014)": "abs-guide.txt"},{"hexadecimal (base 16)": "abs-guide.txt"},{"starting with 0x (i.e. 0xc)": "abs-guide.txt"},{"decimal": "abs-guide.txt"},{"otherwise (i.e. 12)\" >&2": "abs-guide.txt"},{"exit $NOARGS": "abs-guide.txt"},{"}": "abs-guide.txt"},{"# ==> Prints usage message.": "abs-guide.txt"},{"Msg () {": "abs-guide.txt"},{"for i": "abs-guide.txt"},{"# ==> in [list] missing. Why?": "abs-guide.txt"},{"do echo \"$PN: $i\" >&2": "abs-guide.txt"},{"done": "abs-guide.txt"},{"}": "abs-guide.txt"},{"Fatal () { Msg \"$@\"; exit 66; }": "abs-guide.txt"},{"PrintBases () {": "abs-guide.txt"},{"# Determine base of the number": "abs-guide.txt"},{"for i": "abs-guide.txt"},{"# ==> in [list] missing...": "abs-guide.txt"},{"do": "abs-guide.txt"},{"# ==> so operates on command-line arg(s).": "abs-guide.txt"},{"case \"$i\" in": "abs-guide.txt"},{"0b*)": "abs-guide.txt"},{"ibase=2;;": "abs-guide.txt"},{"# binary": "abs-guide.txt"},{"0x*|[a-f]*|[A-F]*) ibase=16;;": "abs-guide.txt"},{"# hexadecimal": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"295": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"0*)": "abs-guide.txt"},{"ibase=8;;": "abs-guide.txt"},{"# octal": "abs-guide.txt"},{"[1-9]*)": "abs-guide.txt"},{"ibase=10;;": "abs-guide.txt"},{"# decimal": "abs-guide.txt"},{"*)": "abs-guide.txt"},{"Msg \"illegal number $i - ignored\"": "abs-guide.txt"},{"continue;;": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"# Remove prefix, convert hex digits to uppercase (bc needs this).": "abs-guide.txt"},{"number=`echo \"$i\" | sed -e 's:^0[bBxX]::' | tr '[a-f]' '[A-F]'`": "abs-guide.txt"},{"# ==> Uses \":\" as sed separator, rather than \"/\".": "abs-guide.txt"},{"# Convert number to decimal": "abs-guide.txt"},{"dec=`echo \"ibase=$ibase; $number\" | bc`": "abs-guide.txt"},{"case \"$dec\" in": "abs-guide.txt"},{"[0-9]*)": "abs-guide.txt"},{";;": "abs-guide.txt"},{"*)": "abs-guide.txt"},{"continue;;": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"": "abs-guide.txt"},{"# ==> 'bc' is calculator utility.": "abs-guide.txt"},{"# number ok": "abs-guide.txt"},{"# error: ignore": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Print all conversions in one line.": "abs-guide.txt"},{"# ==> 'here document' feeds command list to 'bc'.": "abs-guide.txt"},{"echo `bc <<!": "abs-guide.txt"},{"obase=16; \"hex=\"; $dec": "abs-guide.txt"},{"obase=10; \"dec=\"; $dec": "abs-guide.txt"},{"obase=8; \"oct=\"; $dec": "abs-guide.txt"},{"obase=2; \"bin=\"; $dec": "abs-guide.txt"},{"!": "abs-guide.txt"},{"` | sed -e 's: :": "abs-guide.txt"},{"": "abs-guide.txt"},{":g'": "abs-guide.txt"},{"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"}": "abs-guide.txt"},{"while [ $# -gt 0 ]": "abs-guide.txt"},{"# ==> Is a \"while loop\" really necessary here,": "abs-guide.txt"},{"# ==>+ since all the cases either break out of the loop": "abs-guide.txt"},{"# ==>+ or terminate the script.": "abs-guide.txt"},{"# ==> (Above comment by Paulo Marcel Coelho Aragao.)": "abs-guide.txt"},{"do": "abs-guide.txt"},{"case \"$1\" in": "abs-guide.txt"},{"--)": "abs-guide.txt"},{"shift; break;;": "abs-guide.txt"},{"-h)": "abs-guide.txt"},{"Usage;;": "abs-guide.txt"},{"# ==> Help message.": "abs-guide.txt"},{"-*)": "abs-guide.txt"},{"Usage;;": "abs-guide.txt"},{"*)": "abs-guide.txt"},{"break;;": "abs-guide.txt"},{"# First number": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"# ==> Error checking for illegal input might be appropriate.": "abs-guide.txt"},{"shift": "abs-guide.txt"},{"done": "abs-guide.txt"},{"if [ $# -gt 0 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"PrintBases \"$@\"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"while read line": "abs-guide.txt"},{"do": "abs-guide.txt"},{"PrintBases $line": "abs-guide.txt"},{"done": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Read from stdin.": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit": "abs-guide.txt"},{"": "abs-guide.txt"},{"An alternate method of invoking bc involves using a here document embedded within a command": "abs-guide.txt"},{"substitution block. This is especially appropriate when a script needs to pass a list of options and": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"296": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"commands to bc.": "abs-guide.txt"},{"variable=`bc << LIMIT_STRING": "abs-guide.txt"},{"options": "abs-guide.txt"},{"statements": "abs-guide.txt"},{"operations": "abs-guide.txt"},{"LIMIT_STRING": "abs-guide.txt"},{"`": "abs-guide.txt"},{"...or...": "abs-guide.txt"},{"": "abs-guide.txt"},{"variable=$(bc << LIMIT_STRING": "abs-guide.txt"},{"options": "abs-guide.txt"},{"statements": "abs-guide.txt"},{"operations": "abs-guide.txt"},{"LIMIT_STRING": "abs-guide.txt"},{")": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 16-49. Invoking bc using a here document": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# Invoking 'bc' using command substitution": "abs-guide.txt"},{"# in combination with a 'here document'.": "abs-guide.txt"},{"": "abs-guide.txt"},{"var1=`bc << EOF": "abs-guide.txt"},{"18.33 * 19.78": "abs-guide.txt"},{"EOF": "abs-guide.txt"},{"`": "abs-guide.txt"},{"echo $var1": "abs-guide.txt"},{"": "abs-guide.txt"},{"# 362.56": "abs-guide.txt"},{"": "abs-guide.txt"},{"# $( ... ) notation also works.": "abs-guide.txt"},{"v1=23.53": "abs-guide.txt"},{"v2=17.881": "abs-guide.txt"},{"v3=83.501": "abs-guide.txt"},{"v4=171.63": "abs-guide.txt"},{"var2=$(bc << EOF": "abs-guide.txt"},{"scale = 4": "abs-guide.txt"},{"a = ( $v1 + $v2 )": "abs-guide.txt"},{"b = ( $v3 * $v4 )": "abs-guide.txt"},{"a * b + 15.35": "abs-guide.txt"},{"EOF": "abs-guide.txt"},{")": "abs-guide.txt"},{"echo $var2": "abs-guide.txt"},{"# 593487.8452": "abs-guide.txt"},{"": "abs-guide.txt"},{"var3=$(bc -l << EOF": "abs-guide.txt"},{"scale = 9": "abs-guide.txt"},{"s ( 1.7 )": "abs-guide.txt"},{"EOF": "abs-guide.txt"},{")": "abs-guide.txt"},{"# Returns the sine of 1.7 radians.": "abs-guide.txt"},{"# The \"-l\" option calls the 'bc' math library.": "abs-guide.txt"},{"echo $var3": "abs-guide.txt"},{"# .991664810": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Now, try it in a function...": "abs-guide.txt"},{"hypotenuse ()": "abs-guide.txt"},{"# Calculate hypotenuse of a right triangle.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"297": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"{": "abs-guide.txt"},{"# c = sqrt( a^2 + b^2 )": "abs-guide.txt"},{"hyp=$(bc -l << EOF": "abs-guide.txt"},{"scale = 9": "abs-guide.txt"},{"sqrt ( $1 * $1 + $2 * $2 )": "abs-guide.txt"},{"EOF": "abs-guide.txt"},{")": "abs-guide.txt"},{"# Can't directly return floating point values from a Bash function.": "abs-guide.txt"},{"# But, can echo-and-capture:": "abs-guide.txt"},{"echo \"$hyp\"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"hyp=$(hypotenuse 3.68 7.31)": "abs-guide.txt"},{"echo \"hypotenuse = $hyp\"": "abs-guide.txt"},{"# 8.184039344": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 16-50. Calculating PI": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# cannon.sh: Approximating PI by firing cannonballs.": "abs-guide.txt"},{"# Author: Mendel Cooper": "abs-guide.txt"},{"# License: Public Domain": "abs-guide.txt"},{"# Version 2.2, reldate 13oct08.": "abs-guide.txt"},{"# This is a very simple instance of a \"Monte Carlo\" simulation:": "abs-guide.txt"},{"#+ a mathematical model of a real-life event,": "abs-guide.txt"},{"#+ using pseudorandom numbers to emulate random chance.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Consider a perfectly square plot of land, 10000 units on a side.": "abs-guide.txt"},{"This land has a perfectly circular lake in its center,": "abs-guide.txt"},{"with a diameter of 10000 units.": "abs-guide.txt"},{"The plot is actually mostly water, except for land in the four corners.": "abs-guide.txt"},{"(Think of it as a square with an inscribed circle.)": "abs-guide.txt"},{"We will fire iron cannonballs from an old-style cannon": "abs-guide.txt"},{"at the square.": "abs-guide.txt"},{"All the shots impact somewhere on the square,": "abs-guide.txt"},{"either in the lake or on the dry corners.": "abs-guide.txt"},{"Since the lake takes up most of the area,": "abs-guide.txt"},{"most of the shots will SPLASH! into the water.": "abs-guide.txt"},{"Just a few shots will THUD! into solid ground": "abs-guide.txt"},{"in the four corners of the square.": "abs-guide.txt"},{"If we take enough random, unaimed shots at the square,": "abs-guide.txt"},{"Then the ratio of SPLASHES to total shots will approximate": "abs-guide.txt"},{"the value of PI/4.": "abs-guide.txt"},{"The simplified explanation is that the cannon is actually": "abs-guide.txt"},{"shooting only at the upper right-hand quadrant of the square,": "abs-guide.txt"},{"i.e., Quadrant I of the Cartesian coordinate plane.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Theoretically, the more shots taken, the better the fit.": "abs-guide.txt"},{"However, a shell script, as opposed to a compiled language": "abs-guide.txt"},{"with floating-point math built in, requires some compromises.": "abs-guide.txt"},{"This decreases the accuracy of the simulation.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"298": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"DIMENSION=10000": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Length of each side of the plot.": "abs-guide.txt"},{"# Also sets ceiling for random integers generated.": "abs-guide.txt"},{"": "abs-guide.txt"},{"MAXSHOTS=1000": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Fire this many shots.": "abs-guide.txt"},{"# 10000 or more would be better, but would take too long.": "abs-guide.txt"},{"# Scaling factor.": "abs-guide.txt"},{"": "abs-guide.txt"},{"PMULTIPLIER=4.0": "abs-guide.txt"},{"": "abs-guide.txt"},{"declare -r M_PI=3.141592654": "abs-guide.txt"},{"# Actual 9-place value of PI, for comparison purposes.": "abs-guide.txt"},{"get_random ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"SEED=$(head -n 1 /dev/urandom | od -N 1 | awk '{": "abs-guide.txt"},{"RANDOM=$SEED": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"let \"rnum = $RANDOM % $DIMENSION\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"echo $rnum": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"print $2 }')": "abs-guide.txt"},{"From \"seeding-random.sh\"": "abs-guide.txt"},{"example script.": "abs-guide.txt"},{"Range less than 10000.": "abs-guide.txt"},{"": "abs-guide.txt"},{"distance=": "abs-guide.txt"},{"# Declare global variable.": "abs-guide.txt"},{"hypotenuse ()": "abs-guide.txt"},{"# Calculate hypotenuse of a right triangle.": "abs-guide.txt"},{"{": "abs-guide.txt"},{"# From \"alt-bc.sh\" example.": "abs-guide.txt"},{"distance=$(bc -l << EOF": "abs-guide.txt"},{"scale = 0": "abs-guide.txt"},{"sqrt ( $1 * $1 + $2 * $2 )": "abs-guide.txt"},{"EOF": "abs-guide.txt"},{")": "abs-guide.txt"},{"# Setting \"scale\" to zero rounds down result to integer value,": "abs-guide.txt"},{"#+ a necessary compromise in this script.": "abs-guide.txt"},{"# It decreases the accuracy of this simulation.": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"# ==========================================================": "abs-guide.txt"},{"# main() {": "abs-guide.txt"},{"# \"Main\" code block, mimicking a C-language main() function.": "abs-guide.txt"},{"# Initialize variables.": "abs-guide.txt"},{"shots=0": "abs-guide.txt"},{"splashes=0": "abs-guide.txt"},{"thuds=0": "abs-guide.txt"},{"Pi=0": "abs-guide.txt"},{"error=0": "abs-guide.txt"},{"while [ \"$shots\" -lt": "abs-guide.txt"},{"do": "abs-guide.txt"},{"": "abs-guide.txt"},{"\"$MAXSHOTS\" ]": "abs-guide.txt"},{"": "abs-guide.txt"},{"xCoord=$(get_random)": "abs-guide.txt"},{"yCoord=$(get_random)": "abs-guide.txt"},{"hypotenuse $xCoord $yCoord": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Main loop.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Get random X and Y coords.": "abs-guide.txt"},{"# Hypotenuse of": "abs-guide.txt"},{"#+ right-triangle = distance.": "abs-guide.txt"},{"": "abs-guide.txt"},{"((shots++))": "abs-guide.txt"},{"printf": "abs-guide.txt"},{"printf": "abs-guide.txt"},{"printf": "abs-guide.txt"},{"printf": "abs-guide.txt"},{"": "abs-guide.txt"},{"\"#%4d": "abs-guide.txt"},{"\" $shots": "abs-guide.txt"},{"\"Xc = %4d \" $xCoord": "abs-guide.txt"},{"\"Yc = %4d \" $yCoord": "abs-guide.txt"},{"\"Distance = %5d \" $distance": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"Distance from": "abs-guide.txt"},{"center of lake": "abs-guide.txt"},{"-- the \"origin\" -coordinate (0,0).": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [ \"$distance\" -le \"$DIMENSION\" ]": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"299": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo -n \"SPLASH!": "abs-guide.txt"},{"((splashes++))": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo -n \"THUD!": "abs-guide.txt"},{"((thuds++))": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"Pi=$(echo \"scale=9; $PMULTIPLIER*$splashes/$shots\" | bc)": "abs-guide.txt"},{"# Multiply ratio by 4.0.": "abs-guide.txt"},{"echo -n \"PI ~ $Pi\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"After $shots shots, PI looks like approximately": "abs-guide.txt"},{"$Pi\"": "abs-guide.txt"},{"# Tends to run a bit high,": "abs-guide.txt"},{"#+ possibly due to round-off error and imperfect randomness of $RANDOM.": "abs-guide.txt"},{"# But still usually within plus-or-minus 5% . . .": "abs-guide.txt"},{"#+ a pretty fair rough approximation.": "abs-guide.txt"},{"error=$(echo \"scale=9; $Pi - $M_PI\" | bc)": "abs-guide.txt"},{"pct_error=$(echo \"scale=2; 100.0 * $error / $M_PI\" | bc)": "abs-guide.txt"},{"echo -n \"Deviation from mathematical value of PI =": "abs-guide.txt"},{"$error\"": "abs-guide.txt"},{"echo \" ($pct_error% error)\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"# End of \"main\" code block.": "abs-guide.txt"},{"# }": "abs-guide.txt"},{"# ==========================================================": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"One might well wonder whether a shell script is appropriate for": "abs-guide.txt"},{"an application as complex and computation-intensive as a simulation.": "abs-guide.txt"},{"There": "abs-guide.txt"},{"1) As": "abs-guide.txt"},{"2) To": "abs-guide.txt"},{"it": "abs-guide.txt"},{"": "abs-guide.txt"},{"are at least two justifications.": "abs-guide.txt"},{"a proof of concept: to show it can be done.": "abs-guide.txt"},{"prototype and test the algorithms before rewriting": "abs-guide.txt"},{"in a compiled high-level language.": "abs-guide.txt"},{"": "abs-guide.txt"},{"See also Example A-37.": "abs-guide.txt"},{"dc": "abs-guide.txt"},{"The dc (desk calculator) utility is stack-oriented and uses RPN (Reverse Polish Notation). Like bc, it": "abs-guide.txt"},{"has much of the power of a programming language.": "abs-guide.txt"},{"Similar to the procedure with bc, echo a command-string to dc.": "abs-guide.txt"},{"echo \"[Printing a string ... ]P\" | dc": "abs-guide.txt"},{"# The P command prints the string between the preceding brackets.": "abs-guide.txt"},{"# And now for some simple arithmetic.": "abs-guide.txt"},{"echo \"7 8 * p\" | dc": "abs-guide.txt"},{"# 56": "abs-guide.txt"},{"# Pushes 7, then 8 onto the stack,": "abs-guide.txt"},{"#+ multiplies (\"*\" operator), then prints the result (\"p\" operator).": "abs-guide.txt"},{"": "abs-guide.txt"},{"Most persons avoid dc, because of its non-intuitive input and rather cryptic operators. Yet, it has its": "abs-guide.txt"},{"uses.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 16-51. Converting a decimal number to hexadecimal": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"300": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# hexconvert.sh: Convert a decimal number to hexadecimal.": "abs-guide.txt"},{"E_NOARGS=85 # Command-line arg missing.": "abs-guide.txt"},{"BASE=16": "abs-guide.txt"},{"# Hexadecimal.": "abs-guide.txt"},{"if [ -z \"$1\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"# Need a command-line argument.": "abs-guide.txt"},{"echo \"Usage: $0 number\"": "abs-guide.txt"},{"exit $E_NOARGS": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# Exercise: add argument validity checking.": "abs-guide.txt"},{"": "abs-guide.txt"},{"hexcvt ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"if [ -z \"$1\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo 0": "abs-guide.txt"},{"return": "abs-guide.txt"},{"# \"Return\" 0 if no arg passed to function.": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"echo \"\"$1\" \"$BASE\" o p\" | dc": "abs-guide.txt"},{"#": "abs-guide.txt"},{"o": "abs-guide.txt"},{"sets radix (numerical base) of output.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"p prints the top of stack.": "abs-guide.txt"},{"# For other options: 'man dc' ...": "abs-guide.txt"},{"return": "abs-guide.txt"},{"}": "abs-guide.txt"},{"hexcvt \"$1\"": "abs-guide.txt"},{"exit": "abs-guide.txt"},{"": "abs-guide.txt"},{"Studying the info page for dc is a painful path to understanding its intricacies. There seems to be a": "abs-guide.txt"},{"small, select group of dc wizards who delight in showing off their mastery of this powerful, but": "abs-guide.txt"},{"arcane utility.": "abs-guide.txt"},{"bash$ echo \"16i[q]sa[ln0=aln100%Pln100/snlbx]sbA0D68736142snlbxq\" | dc": "abs-guide.txt"},{"Bash": "abs-guide.txt"},{"": "abs-guide.txt"},{"dc": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"<<< 10k5v1+2/p # 1.6180339887": "abs-guide.txt"},{"^^^": "abs-guide.txt"},{"Feed operations to dc using a Here String.": "abs-guide.txt"},{"^^^": "abs-guide.txt"},{"Pushes 10 and sets that as the precision (10k).": "abs-guide.txt"},{"^^": "abs-guide.txt"},{"Pushes 5 and takes its square root": "abs-guide.txt"},{"(5v, v = square root).": "abs-guide.txt"},{"^^": "abs-guide.txt"},{"Pushes 1 and adds it to the running total (1+).": "abs-guide.txt"},{"^^ Pushes 2 and divides the running total by that (2/).": "abs-guide.txt"},{"^ Pops and prints the result (p)": "abs-guide.txt"},{"The result is 1.6180339887 ...": "abs-guide.txt"},{"... which happens to be the Pythagorean Golden Ratio, to 10 places.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 16-52. Factoring": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# factr.sh: Factor a number": "abs-guide.txt"},{"MIN=2": "abs-guide.txt"},{"# Will not work for number smaller than this.": "abs-guide.txt"},{"E_NOARGS=85": "abs-guide.txt"},{"E_TOOSMALL=86": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"301": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"if [ -z $1 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Usage: $0 number\"": "abs-guide.txt"},{"exit $E_NOARGS": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"if [ \"$1\" -lt \"$MIN\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Number to factor must be $MIN or greater.\"": "abs-guide.txt"},{"exit $E_TOOSMALL": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# Exercise: Add type checking (to reject non-integer arg).": "abs-guide.txt"},{"echo \"Factors of $1:\"": "abs-guide.txt"},{"# ------------------------------------------------------echo \"$1[p]s2[lip/dli%0=1dvsr]s12sid2%0=13sidvsr[dli%0=\\": "abs-guide.txt"},{"1lrli2+dsi!>.]ds.xd1<2\" | dc": "abs-guide.txt"},{"# ------------------------------------------------------# Above code written by Michel Charpentier <charpov@cs.unh.edu>": "abs-guide.txt"},{"# (as a one-liner, here broken into two lines for display purposes).": "abs-guide.txt"},{"# Used in ABS Guide with permission (thanks!).": "abs-guide.txt"},{"exit": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"$ sh factr.sh 270138": "abs-guide.txt"},{"2": "abs-guide.txt"},{"3": "abs-guide.txt"},{"11": "abs-guide.txt"},{"4093": "abs-guide.txt"},{"": "abs-guide.txt"},{"awk": "abs-guide.txt"},{"Yet another way of doing floating point math in a script is using awk's built-in math functions in a": "abs-guide.txt"},{"shell wrapper.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 16-53. Calculating the hypotenuse of a triangle": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# hypotenuse.sh: Returns the \"hypotenuse\" of a right triangle.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"(square root of sum of squares of the \"legs\")": "abs-guide.txt"},{"ARGS=2": "abs-guide.txt"},{"E_BADARGS=85": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Script needs sides of triangle passed.": "abs-guide.txt"},{"# Wrong number of arguments.": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [ $# -ne \"$ARGS\" ] # Test number of arguments to script.": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Usage: `basename $0` side_1 side_2\"": "abs-guide.txt"},{"exit $E_BADARGS": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"AWKSCRIPT=' { printf( \"%3.7f\\n\", sqrt($1*$1 + $2*$2) ) } '": "abs-guide.txt"},{"#": "abs-guide.txt"},{"command(s) / parameters passed to awk": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Now, pipe the parameters to awk.": "abs-guide.txt"},{"echo -n \"Hypotenuse of $1 and $2 = \"": "abs-guide.txt"},{"echo $1 $2 | awk \"$AWKSCRIPT\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^^^^^^^^^^^^": "abs-guide.txt"},{"# An echo-and-pipe is an easy way of passing shell parameters to awk.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"302": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"exit": "abs-guide.txt"},{"# Exercise: Rewrite this script using 'bc' rather than awk.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Which method is more intuitive?": "abs-guide.txt"},{"": "abs-guide.txt"},{"16.9. Miscellaneous Commands": "abs-guide.txt"},{"Command that fit in no special category": "abs-guide.txt"},{"jot, seq": "abs-guide.txt"},{"These utilities emit a sequence of integers, with a user-selectable increment.": "abs-guide.txt"},{"The default separator character between each integer is a newline, but this can be changed with the -s": "abs-guide.txt"},{"option.": "abs-guide.txt"},{"bash$ seq 5": "abs-guide.txt"},{"1": "abs-guide.txt"},{"2": "abs-guide.txt"},{"3": "abs-guide.txt"},{"4": "abs-guide.txt"},{"5": "abs-guide.txt"},{"": "abs-guide.txt"},{"bash$ seq -s : 5": "abs-guide.txt"},{"1:2:3:4:5": "abs-guide.txt"},{"": "abs-guide.txt"},{"Both jot and seq come in handy in a for loop.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 16-54. Using seq to generate loop arguments": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# Using \"seq\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"for a in `seq 80` # or": "abs-guide.txt"},{"for a in $( seq 80 )": "abs-guide.txt"},{"# Same as": "abs-guide.txt"},{"for a in 1 2 3 4 5 ... 80": "abs-guide.txt"},{"(saves much typing!).": "abs-guide.txt"},{"# May also use 'jot' (if present on system).": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo -n \"$a \"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"# 1 2 3 4 5 ... 80": "abs-guide.txt"},{"# Example of using the output of a command to generate": "abs-guide.txt"},{"# the [list] in a \"for\" loop.": "abs-guide.txt"},{"echo; echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"COUNT=80": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Yes, 'seq' also accepts a replaceable parameter.": "abs-guide.txt"},{"": "abs-guide.txt"},{"for a in `seq $COUNT` # or": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo -n \"$a \"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"# 1 2 3 4 5 ... 80": "abs-guide.txt"},{"": "abs-guide.txt"},{"for a in $( seq $COUNT )": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"303": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"echo; echo": "abs-guide.txt"},{"BEGIN=75": "abs-guide.txt"},{"END=80": "abs-guide.txt"},{"for a in `seq $BEGIN $END`": "abs-guide.txt"},{"# Giving \"seq\" two arguments starts the count at the first one,": "abs-guide.txt"},{"#+ and continues until it reaches the second.": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo -n \"$a \"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"# 75 76 77 78 79 80": "abs-guide.txt"},{"echo; echo": "abs-guide.txt"},{"BEGIN=45": "abs-guide.txt"},{"INTERVAL=5": "abs-guide.txt"},{"END=80": "abs-guide.txt"},{"for a in `seq $BEGIN $INTERVAL $END`": "abs-guide.txt"},{"# Giving \"seq\" three arguments starts the count at the first one,": "abs-guide.txt"},{"#+ uses the second for a step interval,": "abs-guide.txt"},{"#+ and continues until it reaches the third.": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo -n \"$a \"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"# 45 50 55 60 65 70 75 80": "abs-guide.txt"},{"echo; echo": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"A simpler example:": "abs-guide.txt"},{"# Create a set of 10 files,": "abs-guide.txt"},{"#+ named file.1, file.2 . . . file.10.": "abs-guide.txt"},{"COUNT=10": "abs-guide.txt"},{"PREFIX=file": "abs-guide.txt"},{"for filename in `seq $COUNT`": "abs-guide.txt"},{"do": "abs-guide.txt"},{"touch $PREFIX.$filename": "abs-guide.txt"},{"# Or, can do other operations,": "abs-guide.txt"},{"#+ such as rm, grep, etc.": "abs-guide.txt"},{"done": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 16-55. Letter Count\"": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# letter-count.sh: Counting letter occurrences in a text file.": "abs-guide.txt"},{"# Written by Stefano Palmeri.": "abs-guide.txt"},{"# Used in ABS Guide with permission.": "abs-guide.txt"},{"# Slightly modified by document author.": "abs-guide.txt"},{"MINARGS=2": "abs-guide.txt"},{"E_BADARGS=65": "abs-guide.txt"},{"FILE=$1": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Script requires at least two arguments.": "abs-guide.txt"},{"": "abs-guide.txt"},{"let LETTERS=$#-1": "abs-guide.txt"},{"": "abs-guide.txt"},{"# How many letters specified (as command-line args).": "abs-guide.txt"},{"# (Subtract 1 from number of command-line args.)": "abs-guide.txt"},{"": "abs-guide.txt"},{"show_help(){": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"304": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo Usage: `basename $0` file letters": "abs-guide.txt"},{"echo Note: `basename $0` arguments are case sensitive.": "abs-guide.txt"},{"echo Example: `basename $0` foobar.txt G n U L i N U x.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"}": "abs-guide.txt"},{"# Checks number of arguments.": "abs-guide.txt"},{"if [ $# -lt $MINARGS ]; then": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"Not enough arguments.\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"show_help": "abs-guide.txt"},{"exit $E_BADARGS": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Checks if file exists.": "abs-guide.txt"},{"if [ ! -f $FILE ]; then": "abs-guide.txt"},{"echo \"File \\\"$FILE\\\" does not exist.\"": "abs-guide.txt"},{"exit $E_BADARGS": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Counts letter occurrences .": "abs-guide.txt"},{"for n in `seq $LETTERS`; do": "abs-guide.txt"},{"shift": "abs-guide.txt"},{"if [[ `echo -n \"$1\" | wc -c` -eq 1 ]]; then": "abs-guide.txt"},{"#": "abs-guide.txt"},{"echo \"$1\" -\\> `cat $FILE | tr -cd \"$1\" | wc -c` #": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo \"$1 is not a single char.\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"done": "abs-guide.txt"},{"": "abs-guide.txt"},{"Checks arg.": "abs-guide.txt"},{"Counting.": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit $?": "abs-guide.txt"},{"# This script has exactly the same functionality as letter-count2.sh,": "abs-guide.txt"},{"#+ but executes faster.": "abs-guide.txt"},{"# Why?": "abs-guide.txt"},{"": "abs-guide.txt"},{"Somewhat more capable than seq, jot is a classic UNIX utility that is not normally": "abs-guide.txt"},{"included in a standard Linux distro. However, the source rpm is available for": "abs-guide.txt"},{"download from the MIT repository.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Unlike seq, jot can generate a sequence of random numbers, using the -r option.": "abs-guide.txt"},{"bash$ jot -r 3 999": "abs-guide.txt"},{"1069": "abs-guide.txt"},{"1272": "abs-guide.txt"},{"1428": "abs-guide.txt"},{"": "abs-guide.txt"},{"getopt": "abs-guide.txt"},{"The getopt command parses command-line options preceded by a dash. This external command": "abs-guide.txt"},{"corresponds to the getopts Bash builtin. Using getopt permits handling long options by means of the": "abs-guide.txt"},{"-l flag, and this also allows parameter reshuffling.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"305": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"Example 16-56. Using getopt to parse command-line options": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# Using getopt": "abs-guide.txt"},{"# Try the following when invoking this script:": "abs-guide.txt"},{"#": "abs-guide.txt"},{"sh ex33a.sh -a": "abs-guide.txt"},{"#": "abs-guide.txt"},{"sh ex33a.sh -abc": "abs-guide.txt"},{"#": "abs-guide.txt"},{"sh ex33a.sh -a -b -c": "abs-guide.txt"},{"#": "abs-guide.txt"},{"sh ex33a.sh -d": "abs-guide.txt"},{"#": "abs-guide.txt"},{"sh ex33a.sh -dXYZ": "abs-guide.txt"},{"#": "abs-guide.txt"},{"sh ex33a.sh -d XYZ": "abs-guide.txt"},{"#": "abs-guide.txt"},{"sh ex33a.sh -abcd": "abs-guide.txt"},{"#": "abs-guide.txt"},{"sh ex33a.sh -abcdZ": "abs-guide.txt"},{"#": "abs-guide.txt"},{"sh ex33a.sh -z": "abs-guide.txt"},{"#": "abs-guide.txt"},{"sh ex33a.sh a": "abs-guide.txt"},{"# Explain the results of each of the above.": "abs-guide.txt"},{"E_OPTERR=65": "abs-guide.txt"},{"if [ \"$#\" -eq 0 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"# Script needs at least one command-line argument.": "abs-guide.txt"},{"echo \"Usage $0 -[options a,b,c]\"": "abs-guide.txt"},{"exit $E_OPTERR": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"set -- `getopt \"abcd:\" \"$@\"`": "abs-guide.txt"},{"# Sets positional parameters to command-line arguments.": "abs-guide.txt"},{"# What happens if you use \"$*\" instead of \"$@\"?": "abs-guide.txt"},{"while [ ! -z \"$1\" ]": "abs-guide.txt"},{"do": "abs-guide.txt"},{"case \"$1\" in": "abs-guide.txt"},{"-a) echo \"Option": "abs-guide.txt"},{"-b) echo \"Option": "abs-guide.txt"},{"-c) echo \"Option": "abs-guide.txt"},{"-d) echo \"Option": "abs-guide.txt"},{"*) break;;": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"": "abs-guide.txt"},{"\\\"a\\\"\";;": "abs-guide.txt"},{"\\\"b\\\"\";;": "abs-guide.txt"},{"\\\"c\\\"\";;": "abs-guide.txt"},{"\\\"d\\\" $2\";;": "abs-guide.txt"},{"": "abs-guide.txt"},{"shift": "abs-guide.txt"},{"done": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"It is usually better to use the 'getopts' builtin in a script.": "abs-guide.txt"},{"See \"ex33.sh.\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"As Peggy Russell points out:": "abs-guide.txt"},{"It is often necessary to include an eval to correctly process whitespace and quotes.": "abs-guide.txt"},{"args=$(getopt -o a:bc:d -- \"$@\")": "abs-guide.txt"},{"eval set -- \"$args\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"See Example 10-5 for a simplified emulation of getopt.": "abs-guide.txt"},{"run-parts": "abs-guide.txt"},{"The run-parts command [82] executes all the scripts in a target directory, sequentially in": "abs-guide.txt"},{"ASCII-sorted filename order. Of course, the scripts need to have execute permission.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"306": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"The cron daemon invokes run-parts to run the scripts in the /etc/cron.* directories.": "abs-guide.txt"},{"yes": "abs-guide.txt"},{"In its default behavior the yes command feeds a continuous string of the character y followed by a": "abs-guide.txt"},{"line feed to stdout. A control-C terminates the run. A different output string may be specified, as": "abs-guide.txt"},{"in yes different string, which would continually output different string to": "abs-guide.txt"},{"stdout.": "abs-guide.txt"},{"One might well ask the purpose of this. From the command-line or in a script, the output of yes can be": "abs-guide.txt"},{"redirected or piped into a program expecting user input. In effect, this becomes a sort of poor man's": "abs-guide.txt"},{"version of expect.": "abs-guide.txt"},{"yes | fsck /dev/hda1 runs fsck non-interactively (careful!).": "abs-guide.txt"},{"yes | rm -r dirname has same effect as rm -rf dirname (careful!).": "abs-guide.txt"},{"Caution advised when piping yes to a potentially dangerous system command, such as": "abs-guide.txt"},{"fsck or fdisk. It might have unintended consequences.": "abs-guide.txt"},{"The yes command parses variables, or more accurately, it echoes parsed variables. For": "abs-guide.txt"},{"example:": "abs-guide.txt"},{"bash$ yes $BASH_VERSION": "abs-guide.txt"},{"3.1.17(1)-release": "abs-guide.txt"},{"3.1.17(1)-release": "abs-guide.txt"},{"3.1.17(1)-release": "abs-guide.txt"},{"3.1.17(1)-release": "abs-guide.txt"},{"3.1.17(1)-release": "abs-guide.txt"},{". . .": "abs-guide.txt"},{"": "abs-guide.txt"},{"This particular \"feature\" may be used to create a very large ASCII file on the fly:": "abs-guide.txt"},{"bash$ yes $PATH > huge_file.txt": "abs-guide.txt"},{"Ctl-C": "abs-guide.txt"},{"": "abs-guide.txt"},{"Hit Ctl-C very quickly, or you just might get more than you bargained for. . . .": "abs-guide.txt"},{"The yes command may be emulated in a very simple script function.": "abs-guide.txt"},{"yes ()": "abs-guide.txt"},{"{ # Trivial emulation of \"yes\" ...": "abs-guide.txt"},{"local DEFAULT_TEXT=\"y\"": "abs-guide.txt"},{"while [ true ]": "abs-guide.txt"},{"# Endless loop.": "abs-guide.txt"},{"do": "abs-guide.txt"},{"if [ -z \"$1\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"$DEFAULT_TEXT\"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"# If argument ...": "abs-guide.txt"},{"echo \"$1\"": "abs-guide.txt"},{"# ... expand and echo it.": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"done": "abs-guide.txt"},{"# The only things missing are the": "abs-guide.txt"},{"}": "abs-guide.txt"},{"#+ --help and --version options.": "abs-guide.txt"},{"": "abs-guide.txt"},{"banner": "abs-guide.txt"},{"Prints arguments as a large vertical banner to stdout, using an ASCII character (default '#'). This": "abs-guide.txt"},{"may be redirected to a printer for hardcopy.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"307": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"Note that banner has been dropped from many Linux distros, presumably because it is no longer": "abs-guide.txt"},{"considered useful.": "abs-guide.txt"},{"printenv": "abs-guide.txt"},{"Show all the environmental variables set for a particular user.": "abs-guide.txt"},{"bash$ printenv | grep HOME": "abs-guide.txt"},{"HOME=/home/bozo": "abs-guide.txt"},{"": "abs-guide.txt"},{"lp": "abs-guide.txt"},{"The lp and lpr commands send file(s) to the print queue, to be printed as hard copy. [83] These": "abs-guide.txt"},{"commands trace the origin of their names to the line printers of another era. [84]": "abs-guide.txt"},{"bash$ lp file1.txt or bash lp <file1.txt": "abs-guide.txt"},{"It is often useful to pipe the formatted output from pr to lp.": "abs-guide.txt"},{"bash$ pr -options file1.txt | lp": "abs-guide.txt"},{"Formatting packages, such as groff and Ghostscript may send their output directly to lp.": "abs-guide.txt"},{"bash$ groff -Tascii file.tr | lp": "abs-guide.txt"},{"bash$ gs -options | lp file.ps": "abs-guide.txt"},{"Related commands are lpq, for viewing the print queue, and lprm, for removing jobs from the print": "abs-guide.txt"},{"queue.": "abs-guide.txt"},{"tee": "abs-guide.txt"},{"[UNIX borrows an idea from the plumbing trade.]": "abs-guide.txt"},{"This is a redirection operator, but with a difference. Like the plumber's tee, it permits \"siphoning off\"": "abs-guide.txt"},{"to a file the output of a command or commands within a pipe, but without affecting the result. This is": "abs-guide.txt"},{"useful for printing an ongoing process to a file or paper, perhaps to keep track of it for debugging": "abs-guide.txt"},{"purposes.": "abs-guide.txt"},{"(redirection)": "abs-guide.txt"},{"|----> to file": "abs-guide.txt"},{"|": "abs-guide.txt"},{"==========================|====================": "abs-guide.txt"},{"command ---> command ---> |tee ---> command ---> ---> output of pipe": "abs-guide.txt"},{"===============================================": "abs-guide.txt"},{"": "abs-guide.txt"},{"cat listfile* | sort | tee check.file | uniq > result.file": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^^^^^^^^^^^^^^": "abs-guide.txt"},{"^^^^": "abs-guide.txt"},{"# The file \"check.file\" contains the concatenated sorted \"listfiles,\"": "abs-guide.txt"},{"#+ before the duplicate lines are removed by 'uniq.'": "abs-guide.txt"},{"": "abs-guide.txt"},{"mkfifo": "abs-guide.txt"},{"This obscure command creates a named pipe, a temporary first-in-first-out buffer for transferring data": "abs-guide.txt"},{"between processes. [85] Typically, one process writes to the FIFO, and the other reads from it. See": "abs-guide.txt"},{"Example A-14.": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"308": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# This short script by Omair Eshkenazi.": "abs-guide.txt"},{"# Used in ABS Guide with permission (thanks!).": "abs-guide.txt"},{"mkfifo pipe1": "abs-guide.txt"},{"mkfifo pipe2": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Yes, pipes can be given names.": "abs-guide.txt"},{"# Hence the designation \"named pipe.\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"(cut -d' ' -f1 | tr \"a-z\" \"A-Z\") >pipe2 <pipe1 &": "abs-guide.txt"},{"ls -l | tr -s ' ' | cut -d' ' -f3,9- | tee pipe1 |": "abs-guide.txt"},{"cut -d' ' -f2 | paste - pipe2": "abs-guide.txt"},{"rm -f pipe1": "abs-guide.txt"},{"rm -f pipe2": "abs-guide.txt"},{"# No need to kill background processes when script terminates (why not?).": "abs-guide.txt"},{"exit $?": "abs-guide.txt"},{"Now, invoke the script and explain the output:": "abs-guide.txt"},{"sh mkfifo-example.sh": "abs-guide.txt"},{"4830.tar.gz": "abs-guide.txt"},{"pipe1": "abs-guide.txt"},{"BOZO": "abs-guide.txt"},{"pipe2": "abs-guide.txt"},{"BOZO": "abs-guide.txt"},{"mkfifo-example.sh": "abs-guide.txt"},{"Mixed.msg BOZO": "abs-guide.txt"},{"": "abs-guide.txt"},{"BOZO": "abs-guide.txt"},{"": "abs-guide.txt"},{"BOZO": "abs-guide.txt"},{"": "abs-guide.txt"},{"pathchk": "abs-guide.txt"},{"This command checks the validity of a filename. If the filename exceeds the maximum allowable": "abs-guide.txt"},{"length (255 characters) or one or more of the directories in its path is not searchable, then an error": "abs-guide.txt"},{"message results.": "abs-guide.txt"},{"Unfortunately, pathchk does not return a recognizable error code, and it is therefore pretty much": "abs-guide.txt"},{"useless in a script. Consider instead the file test operators.": "abs-guide.txt"},{"dd": "abs-guide.txt"},{"Though this somewhat obscure and much feared data duplicator command originated as a utility for": "abs-guide.txt"},{"exchanging data on magnetic tapes between UNIX minicomputers and IBM mainframes, it still has its": "abs-guide.txt"},{"uses. The dd command simply copies a file (or stdin/stdout), but with conversions. Possible": "abs-guide.txt"},{"conversions include ASCII/EBCDIC, [86] upper/lower case, swapping of byte pairs between input": "abs-guide.txt"},{"and output, and skipping and/or truncating the head or tail of the input file.": "abs-guide.txt"},{"# Converting a file to all uppercase:": "abs-guide.txt"},{"dd if=$filename conv=ucase > $filename.uppercase": "abs-guide.txt"},{"#": "abs-guide.txt"},{"lcase": "abs-guide.txt"},{"# For lower case conversion": "abs-guide.txt"},{"": "abs-guide.txt"},{"Some basic options to dd are:": "abs-guide.txt"},{"\u25ca if=INFILE": "abs-guide.txt"},{"INFILE is the source file.": "abs-guide.txt"},{"\u25ca of=OUTFILE": "abs-guide.txt"},{"OUTFILE is the target file, the file that will have the data written to it.": "abs-guide.txt"},{"\u25ca bs=BLOCKSIZE": "abs-guide.txt"},{"This is the size of each block of data being read and written, usually a power of 2.": "abs-guide.txt"},{"\u25ca skip=BLOCKS": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"309": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"How many blocks of data to skip in INFILE before starting to copy. This is useful when the": "abs-guide.txt"},{"INFILE has \"garbage\" or garbled data in its header or when it is desirable to copy only a": "abs-guide.txt"},{"portion of the INFILE.": "abs-guide.txt"},{"\u25ca seek=BLOCKS": "abs-guide.txt"},{"How many blocks of data to skip in OUTFILE before starting to copy, leaving blank data at": "abs-guide.txt"},{"beginning of OUTFILE.": "abs-guide.txt"},{"\u25ca count=BLOCKS": "abs-guide.txt"},{"Copy only this many blocks of data, rather than the entire INFILE.": "abs-guide.txt"},{"\u25ca conv=CONVERSION": "abs-guide.txt"},{"Type of conversion to be applied to INFILE data before copying operation.": "abs-guide.txt"},{"A dd --help lists all the options this powerful utility takes.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 16-57. A script that copies itself": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# self-copy.sh": "abs-guide.txt"},{"# This script copies itself.": "abs-guide.txt"},{"file_subscript=copy": "abs-guide.txt"},{"dd if=$0 of=$0.$file_subscript 2>/dev/null": "abs-guide.txt"},{"# Suppress messages from dd:": "abs-guide.txt"},{"^^^^^^^^^^^": "abs-guide.txt"},{"exit $?": "abs-guide.txt"},{"# A program whose only output is its own source code": "abs-guide.txt"},{"#+ is called a \"quine\" per Willard Quine.": "abs-guide.txt"},{"# Does this script qualify as a quine?": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 16-58. Exercising dd": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# exercising-dd.sh": "abs-guide.txt"},{"# Script by Stephane Chazelas.": "abs-guide.txt"},{"# Somewhat modified by ABS Guide author.": "abs-guide.txt"},{"infile=$0": "abs-guide.txt"},{"outfile=log.txt": "abs-guide.txt"},{"n=8": "abs-guide.txt"},{"p=11": "abs-guide.txt"},{"": "abs-guide.txt"},{"# This script.": "abs-guide.txt"},{"# Output file left behind.": "abs-guide.txt"},{"": "abs-guide.txt"},{"dd if=$infile of=$outfile bs=1 skip=$((n-1)) count=$((p-n+1)) 2> /dev/null": "abs-guide.txt"},{"# Extracts characters n to p (8 to 11) from this script (\"bash\").": "abs-guide.txt"},{"# ---------------------------------------------------------------echo -n \"hello vertical world\" | dd cbs=1 conv=unblock 2> /dev/null": "abs-guide.txt"},{"# Echoes \"hello vertical world\" vertically downward.": "abs-guide.txt"},{"# Why? A newline follows each character dd emits.": "abs-guide.txt"},{"exit $?": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"310": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"To demonstrate just how versatile dd is, let's use it to capture keystrokes.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 16-59. Capturing Keystrokes": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# dd-keypress.sh: Capture keystrokes without needing to press ENTER.": "abs-guide.txt"},{"": "abs-guide.txt"},{"keypresses=4": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Number of keypresses to capture.": "abs-guide.txt"},{"": "abs-guide.txt"},{"old_tty_setting=$(stty -g)": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Save old terminal settings.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo \"Press $keypresses keys.\"": "abs-guide.txt"},{"stty -icanon -echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Disable canonical mode.": "abs-guide.txt"},{"# Disable local echo.": "abs-guide.txt"},{"keys=$(dd bs=1 count=$keypresses 2> /dev/null)": "abs-guide.txt"},{"# 'dd' uses stdin, if \"if\" (input file) not specified.": "abs-guide.txt"},{"stty \"$old_tty_setting\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Restore old terminal settings.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo \"You pressed the \\\"$keys\\\" keys.\"": "abs-guide.txt"},{"# Thanks, Stephane Chazelas, for showing the way.": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"The dd command can do random access on a data stream.": "abs-guide.txt"},{"echo -n . | dd bs=1 seek=4 of=file conv=notrunc": "abs-guide.txt"},{"# The \"conv=notrunc\" option means that the output file": "abs-guide.txt"},{"#+ will not be truncated.": "abs-guide.txt"},{"# Thanks, S.C.": "abs-guide.txt"},{"": "abs-guide.txt"},{"The dd command can copy raw data and disk images to and from devices, such as floppies and tape": "abs-guide.txt"},{"drives (Example A-5). A common use is creating boot floppies.": "abs-guide.txt"},{"dd if=kernel-image of=/dev/fd0H1440": "abs-guide.txt"},{"Similarly, dd can copy the entire contents of a floppy, even one formatted with a \"foreign\" OS, to the": "abs-guide.txt"},{"hard drive as an image file.": "abs-guide.txt"},{"dd if=/dev/fd0 of=/home/bozo/projects/floppy.img": "abs-guide.txt"},{"Likewise, dd can create bootable flash drives and SD cards.": "abs-guide.txt"},{"dd if=image.iso of=/dev/sdb": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 16-60. Preparing a bootable SD card for the Raspberry Pi": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# rp.sdcard.sh": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"311": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# Preparing an SD card with a bootable image for the Raspberry Pi.": "abs-guide.txt"},{"# $1 = imagefile name": "abs-guide.txt"},{"# $2 = sdcard (device file)": "abs-guide.txt"},{"# Otherwise defaults to the defaults, see below.": "abs-guide.txt"},{"DEFAULTbs=4M": "abs-guide.txt"},{"DEFAULTif=\"2013-07-26-wheezy-raspbian.img\"": "abs-guide.txt"},{"DEFAULTsdcard=\"/dev/mmcblk0\"": "abs-guide.txt"},{"ROOTUSER_NAME=root": "abs-guide.txt"},{"E_NOTROOT=81": "abs-guide.txt"},{"E_NOIMAGE=82": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Block size, 4 mb default.": "abs-guide.txt"},{"Commonly used distro.": "abs-guide.txt"},{"May be different. Check!": "abs-guide.txt"},{"Must run as root!": "abs-guide.txt"},{"": "abs-guide.txt"},{"username=$(id -nu)": "abs-guide.txt"},{"# Who is running this script?": "abs-guide.txt"},{"if [ \"$username\" != \"$ROOTUSER_NAME\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"This script must run as root or with root privileges.\"": "abs-guide.txt"},{"exit $E_NOTROOT": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"if [ -n \"$1\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"imagefile=\"$1\"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"imagefile=\"$DEFAULTif\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"if [ -n \"$2\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"sdcard=\"$2\"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"sdcard=\"$DEFAULTsdcard\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"if [ ! -e $imagefile ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Image file \\\"$imagefile\\\" not found!\"": "abs-guide.txt"},{"exit $E_NOIMAGE": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"echo \"Last chance to change your mind!\"; echo": "abs-guide.txt"},{"read -s -n1 -p \"Hit a key to write $imagefile to $sdcard [Ctl-c to exit].\"": "abs-guide.txt"},{"echo; echo": "abs-guide.txt"},{"echo \"Writing $imagefile to $sdcard ...\"": "abs-guide.txt"},{"dd bs=$DEFAULTbs if=$imagefile of=$sdcard": "abs-guide.txt"},{"exit $?": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Exercises:": "abs-guide.txt"},{"--------1) Provide additional error checking.": "abs-guide.txt"},{"2) Have script autodetect device file for SD card (difficult!).": "abs-guide.txt"},{"3) Have script sutodetect image file (*img) in $PWD.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Other applications of dd include initializing temporary swap files (Example 31-2) and ramdisks": "abs-guide.txt"},{"(Example 31-3). It can even do a low-level copy of an entire hard drive partition, although this is not": "abs-guide.txt"},{"necessarily recommended.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"312": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"People (with presumably nothing better to do with their time) are constantly thinking of interesting": "abs-guide.txt"},{"applications of dd.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 16-61. Securely deleting a file": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# blot-out.sh: Erase \"all\" traces of a file.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"This script overwrites a target file alternately": "abs-guide.txt"},{"with random bytes, then zeros before finally deleting it.": "abs-guide.txt"},{"After that, even examining the raw disk sectors by conventional methods": "abs-guide.txt"},{"will not reveal the original file data.": "abs-guide.txt"},{"": "abs-guide.txt"},{"PASSES=7": "abs-guide.txt"},{"": "abs-guide.txt"},{"BLOCKSIZE=1": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"E_BADARGS=70": "abs-guide.txt"},{"E_NOT_FOUND=71": "abs-guide.txt"},{"E_CHANGED_MIND=72": "abs-guide.txt"},{"": "abs-guide.txt"},{"Number of file-shredding passes.": "abs-guide.txt"},{"Increasing this slows script execution,": "abs-guide.txt"},{"especially on large target files.": "abs-guide.txt"},{"I/O with /dev/urandom requires unit block size,": "abs-guide.txt"},{"otherwise you get weird results.": "abs-guide.txt"},{"Various error exit codes.": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [ -z \"$1\" ]": "abs-guide.txt"},{"# No filename specified.": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Usage: `basename $0` filename\"": "abs-guide.txt"},{"exit $E_BADARGS": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"file=$1": "abs-guide.txt"},{"if [ ! -e \"$file\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"File \\\"$file\\\" not found.\"": "abs-guide.txt"},{"exit $E_NOT_FOUND": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"echo; echo -n \"Are you absolutely sure you want to blot out \\\"$file\\\" (y/n)? \"": "abs-guide.txt"},{"read answer": "abs-guide.txt"},{"case \"$answer\" in": "abs-guide.txt"},{"[nN]) echo \"Changed your mind, huh?\"": "abs-guide.txt"},{"exit $E_CHANGED_MIND": "abs-guide.txt"},{";;": "abs-guide.txt"},{"*)": "abs-guide.txt"},{"echo \"Blotting out file \\\"$file\\\".\";;": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"": "abs-guide.txt"},{"flength=$(ls -l \"$file\" | awk '{print $5}')": "abs-guide.txt"},{"pass_count=1": "abs-guide.txt"},{"chmod u+w \"$file\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Field 5 is file length.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Allow overwriting/deleting the file.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"while [ \"$pass_count\" -le \"$PASSES\" ]": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo \"Pass #$pass_count\"": "abs-guide.txt"},{"sync": "abs-guide.txt"},{"# Flush buffers.": "abs-guide.txt"},{"dd if=/dev/urandom of=$file bs=$BLOCKSIZE count=$flength": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"313": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# Fill with random bytes.": "abs-guide.txt"},{"sync": "abs-guide.txt"},{"# Flush buffers again.": "abs-guide.txt"},{"dd if=/dev/zero of=$file bs=$BLOCKSIZE count=$flength": "abs-guide.txt"},{"# Fill with zeros.": "abs-guide.txt"},{"sync": "abs-guide.txt"},{"# Flush buffers yet again.": "abs-guide.txt"},{"let \"pass_count += 1\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"done": "abs-guide.txt"},{"": "abs-guide.txt"},{"rm -f $file": "abs-guide.txt"},{"sync": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Finally, delete scrambled and shredded file.": "abs-guide.txt"},{"# Flush buffers a final time.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo \"File \\\"$file\\\" blotted out and deleted.\"; echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"This is a fairly secure, if inefficient and slow method": "abs-guide.txt"},{"of thoroughly \"shredding\" a file.": "abs-guide.txt"},{"The \"shred\" command, part of the GNU \"fileutils\" package,": "abs-guide.txt"},{"does the same thing, although more efficiently.": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"The file cannot not be \"undeleted\" or retrieved by normal methods.": "abs-guide.txt"},{"However . . .": "abs-guide.txt"},{"this simple method would *not* likely withstand": "abs-guide.txt"},{"sophisticated forensic analysis.": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"This script may not play well with a journaled file system.": "abs-guide.txt"},{"Exercise (difficult): Fix it so it does.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Tom Vier's \"wipe\" file-deletion package does a much more thorough job": "abs-guide.txt"},{"#+ of file shredding than this simple script.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"http://www.ibiblio.org/pub/Linux/utils/file/wipe-2.0.0.tar.bz2": "abs-guide.txt"},{"# For an in-depth analysis on the topic of file deletion and security,": "abs-guide.txt"},{"#+ see Peter Gutmann's paper,": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"\"Secure Deletion of Data From Magnetic and Solid-State Memory\".": "abs-guide.txt"},{"#": "abs-guide.txt"},{"http://www.cs.auckland.ac.nz/~pgut001/pubs/secure_del.html": "abs-guide.txt"},{"": "abs-guide.txt"},{"See also the dd thread entry in the bibliography.": "abs-guide.txt"},{"od": "abs-guide.txt"},{"The od, or octal dump filter converts input (or files) to octal (base-8) or other bases. This is useful for": "abs-guide.txt"},{"viewing or processing binary data files or otherwise unreadable system device files, such as": "abs-guide.txt"},{"/dev/urandom, and as a filter for binary data.": "abs-guide.txt"},{"head -c4 /dev/urandom | od -N4 -tu4 | sed -ne '1s/.* //p'": "abs-guide.txt"},{"# Sample output: 1324725719, 3918166450, 2989231420, etc.": "abs-guide.txt"},{"# From rnd.sh example script, by St\u00e9phane Chazelas": "abs-guide.txt"},{"": "abs-guide.txt"},{"See also Example 9-16 and Example A-36.": "abs-guide.txt"},{"hexdump": "abs-guide.txt"},{"Performs a hexadecimal, octal, decimal, or ASCII dump of a binary file. This command is the rough": "abs-guide.txt"},{"equivalent of od, above, but not nearly as useful. May be used to view the contents of a binary file, in": "abs-guide.txt"},{"combination with dd and less.": "abs-guide.txt"},{"dd if=/bin/ls | hexdump -C | less": "abs-guide.txt"},{"# The -C option nicely formats the output in tabular form.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"314": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"objdump": "abs-guide.txt"},{"Displays information about an object file or binary executable in either hexadecimal form or as a": "abs-guide.txt"},{"disassembled listing (with the -d option).": "abs-guide.txt"},{"bash$ objdump -d /bin/ls": "abs-guide.txt"},{"/bin/ls:": "abs-guide.txt"},{"file format elf32-i386": "abs-guide.txt"},{"Disassembly of section .init:": "abs-guide.txt"},{"080490bc <.init>:": "abs-guide.txt"},{"80490bc:": "abs-guide.txt"},{"55": "abs-guide.txt"},{"80490bd:": "abs-guide.txt"},{"89 e5": "abs-guide.txt"},{". . .": "abs-guide.txt"},{"": "abs-guide.txt"},{"push": "abs-guide.txt"},{"mov": "abs-guide.txt"},{"": "abs-guide.txt"},{"%ebp": "abs-guide.txt"},{"%esp,%ebp": "abs-guide.txt"},{"": "abs-guide.txt"},{"mcookie": "abs-guide.txt"},{"This command generates a \"magic cookie,\" a 128-bit (32-character) pseudorandom hexadecimal": "abs-guide.txt"},{"number, normally used as an authorization \"signature\" by the X server. This also available for use in a": "abs-guide.txt"},{"script as a \"quick 'n dirty\" random number.": "abs-guide.txt"},{"random000=$(mcookie)": "abs-guide.txt"},{"": "abs-guide.txt"},{"Of course, a script could use md5sum for the same purpose.": "abs-guide.txt"},{"# Generate md5 checksum on the script itself.": "abs-guide.txt"},{"random001=`md5sum $0 | awk '{print $1}'`": "abs-guide.txt"},{"# Uses 'awk' to strip off the filename.": "abs-guide.txt"},{"": "abs-guide.txt"},{"The mcookie command gives yet another way to generate a \"unique\" filename.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 16-62. Filename generator": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# tempfile-name.sh:": "abs-guide.txt"},{"": "abs-guide.txt"},{"temp filename generator": "abs-guide.txt"},{"": "abs-guide.txt"},{"BASE_STR=`mcookie`": "abs-guide.txt"},{"POS=11": "abs-guide.txt"},{"LEN=5": "abs-guide.txt"},{"": "abs-guide.txt"},{"# 32-character magic cookie.": "abs-guide.txt"},{"# Arbitrary position in magic cookie string.": "abs-guide.txt"},{"# Get $LEN consecutive characters.": "abs-guide.txt"},{"": "abs-guide.txt"},{"prefix=temp": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"This is, after all, a \"temp\" file.": "abs-guide.txt"},{"For more \"uniqueness,\" generate the": "abs-guide.txt"},{"filename prefix using the same method": "abs-guide.txt"},{"as the suffix, below.": "abs-guide.txt"},{"": "abs-guide.txt"},{"suffix=${BASE_STR:POS:LEN}": "abs-guide.txt"},{"# Extract a 5-character string,": "abs-guide.txt"},{"#+ starting at position 11.": "abs-guide.txt"},{"temp_filename=$prefix.$suffix": "abs-guide.txt"},{"# Construct the filename.": "abs-guide.txt"},{"echo \"Temp filename = \"$temp_filename\"\"": "abs-guide.txt"},{"# sh tempfile-name.sh": "abs-guide.txt"},{"# Temp filename = temp.e19ea": "abs-guide.txt"},{"# Compare this method of generating \"unique\" filenames": "abs-guide.txt"},{"#+ with the 'date' method in ex51.sh.": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"315": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"units": "abs-guide.txt"},{"This utility converts between different units of measure. While normally invoked in interactive mode,": "abs-guide.txt"},{"units may find use in a script.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 16-63. Converting meters to miles": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# unit-conversion.sh": "abs-guide.txt"},{"# Must have 'units' utility installed.": "abs-guide.txt"},{"": "abs-guide.txt"},{"convert_units () # Takes as arguments the units to convert.": "abs-guide.txt"},{"{": "abs-guide.txt"},{"cf=$(units \"$1\" \"$2\" | sed --silent -e '1p' | awk '{print $2}')": "abs-guide.txt"},{"# Strip off everything except the actual conversion factor.": "abs-guide.txt"},{"echo \"$cf\"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"Unit1=miles": "abs-guide.txt"},{"Unit2=meters": "abs-guide.txt"},{"cfactor=`convert_units $Unit1 $Unit2`": "abs-guide.txt"},{"quantity=3.73": "abs-guide.txt"},{"result=$(echo $quantity*$cfactor | bc)": "abs-guide.txt"},{"echo \"There are $result $Unit2 in $quantity $Unit1.\"": "abs-guide.txt"},{"# What happens if you pass incompatible units,": "abs-guide.txt"},{"#+ such as \"acres\" and \"miles\" to the function?": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"# Exercise: Edit this script to accept command-line parameters,": "abs-guide.txt"},{"#": "abs-guide.txt"},{"with appropriate error checking, of course.": "abs-guide.txt"},{"": "abs-guide.txt"},{"m4": "abs-guide.txt"},{"A hidden treasure, m4 is a powerful macro [87] processing filter, virtually a complete language.": "abs-guide.txt"},{"Although originally written as a pre-processor for RatFor, m4 turned out to be useful as a stand-alone": "abs-guide.txt"},{"utility. In fact, m4 combines some of the functionality of eval, tr, and awk, in addition to its extensive": "abs-guide.txt"},{"macro expansion facilities.": "abs-guide.txt"},{"The April, 2002 issue of Linux Journal has a very nice article on m4 and its uses.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 16-64. Using m4": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# m4.sh: Using the m4 macro processor": "abs-guide.txt"},{"# Strings": "abs-guide.txt"},{"string=abcdA01": "abs-guide.txt"},{"echo \"len($string)\" | m4": "abs-guide.txt"},{"echo \"substr($string,4)\" | m4": "abs-guide.txt"},{"echo \"regexp($string,[0-1][0-1],\\&Z)\" | m4": "abs-guide.txt"},{"# Arithmetic": "abs-guide.txt"},{"var=99": "abs-guide.txt"},{"echo \"incr($var)\" | m4": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"7": "abs-guide.txt"},{"# A01": "abs-guide.txt"},{"# 01Z": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"100": "abs-guide.txt"},{"": "abs-guide.txt"},{"316": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"echo \"eval($var / 3)\" | m4": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"33": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit": "abs-guide.txt"},{"": "abs-guide.txt"},{"xmessage": "abs-guide.txt"},{"This X-based variant of echo pops up a message/query window on the desktop.": "abs-guide.txt"},{"xmessage Left click to continue -button okay": "abs-guide.txt"},{"": "abs-guide.txt"},{"zenity": "abs-guide.txt"},{"The zenity utility is adept at displaying GTK+ dialog widgets and very suitable for scripting purposes.": "abs-guide.txt"},{"doexec": "abs-guide.txt"},{"The doexec command enables passing an arbitrary list of arguments to a binary executable. In": "abs-guide.txt"},{"particular, passing argv[0] (which corresponds to $0 in a script) lets the executable be invoked by": "abs-guide.txt"},{"various names, and it can then carry out different sets of actions, according to the name by which it": "abs-guide.txt"},{"was called. What this amounts to is roundabout way of passing options to an executable.": "abs-guide.txt"},{"For example, the /usr/local/bin directory might contain a binary called \"aaa\". Invoking doexec": "abs-guide.txt"},{"/usr/local/bin/aaa list would list all those files in the current working directory beginning with an \"a\",": "abs-guide.txt"},{"while invoking (the same executable with) doexec /usr/local/bin/aaa delete would delete those files.": "abs-guide.txt"},{"The various behaviors of the executable must be defined within the code of the": "abs-guide.txt"},{"executable itself, analogous to something like the following in a shell script:": "abs-guide.txt"},{"case `basename $0` in": "abs-guide.txt"},{"\"name1\" ) do_something;;": "abs-guide.txt"},{"\"name2\" ) do_something_else;;": "abs-guide.txt"},{"\"name3\" ) do_yet_another_thing;;": "abs-guide.txt"},{"*": "abs-guide.txt"},{") bail_out;;": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"": "abs-guide.txt"},{"dialog": "abs-guide.txt"},{"The dialog family of tools provide a method of calling interactive \"dialog\" boxes from a script. The": "abs-guide.txt"},{"more elaborate variations of dialog -- gdialog, Xdialog, and kdialog -- actually invoke X-Windows": "abs-guide.txt"},{"widgets.": "abs-guide.txt"},{"sox": "abs-guide.txt"},{"The sox, or \"sound exchange\" command plays and performs transformations on sound files. In fact,": "abs-guide.txt"},{"the /usr/bin/play executable (now deprecated) is nothing but a shell wrapper for sox.": "abs-guide.txt"},{"For example, sox soundfile.wav soundfile.au changes a WAV sound file into a (Sun audio format)": "abs-guide.txt"},{"AU sound file.": "abs-guide.txt"},{"Shell scripts are ideally suited for batch-processing sox operations on sound files. For examples, see": "abs-guide.txt"},{"the Linux Radio Timeshift HOWTO and the MP3do Project.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 16. External Filters, Programs and Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"317": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fChapter 17. System and Administrative Commands": "abs-guide.txt"},{"The startup and shutdown scripts in /etc/rc.d illustrate the uses (and usefulness) of many of these": "abs-guide.txt"},{"comands. These are usually invoked by root and used for system maintenance or emergency filesystem": "abs-guide.txt"},{"repairs. Use with caution, as some of these commands may damage your system if misused.": "abs-guide.txt"},{"Users and Groups": "abs-guide.txt"},{"users": "abs-guide.txt"},{"Show all logged on users. This is the approximate equivalent of who -q.": "abs-guide.txt"},{"groups": "abs-guide.txt"},{"Lists the current user and the groups she belongs to. This corresponds to the $GROUPS internal": "abs-guide.txt"},{"variable, but gives the group names, rather than the numbers.": "abs-guide.txt"},{"bash$ groups": "abs-guide.txt"},{"bozita cdrom cdwriter audio xgrp": "abs-guide.txt"},{"bash$ echo $GROUPS": "abs-guide.txt"},{"501": "abs-guide.txt"},{"": "abs-guide.txt"},{"chown, chgrp": "abs-guide.txt"},{"The chown command changes the ownership of a file or files. This command is a useful method that": "abs-guide.txt"},{"root can use to shift file ownership from one user to another. An ordinary user may not change the": "abs-guide.txt"},{"ownership of files, not even her own files. [88]": "abs-guide.txt"},{"root# chown bozo *.txt": "abs-guide.txt"},{"": "abs-guide.txt"},{"The chgrp command changes the group ownership of a file or files. You must be owner of the": "abs-guide.txt"},{"file(s) as well as a member of the destination group (or root) to use this operation.": "abs-guide.txt"},{"chgrp --recursive dunderheads *.data": "abs-guide.txt"},{"# The \"dunderheads\" group will now own all the \"*.data\" files": "abs-guide.txt"},{"#+ all the way down the $PWD directory tree (that's what \"recursive\" means).": "abs-guide.txt"},{"": "abs-guide.txt"},{"useradd, userdel": "abs-guide.txt"},{"The useradd administrative command adds a user account to the system and creates a home directory": "abs-guide.txt"},{"for that particular user, if so specified. The corresponding userdel command removes a user account": "abs-guide.txt"},{"from the system [89] and deletes associated files.": "abs-guide.txt"},{"The adduser command is a synonym for useradd and is usually a symbolic link to it.": "abs-guide.txt"},{"usermod": "abs-guide.txt"},{"Modify a user account. Changes may be made to the password, group membership, expiration date,": "abs-guide.txt"},{"and other attributes of a given user's account. With this command, a user's password may be locked,": "abs-guide.txt"},{"which has the effect of disabling the account.": "abs-guide.txt"},{"groupmod": "abs-guide.txt"},{"Modify a given group. The group name and/or ID number may be changed using this command.": "abs-guide.txt"},{"id": "abs-guide.txt"},{"The id command lists the real and effective user IDs and the group IDs of the user associated with the": "abs-guide.txt"},{"current process. This is the counterpart to the $UID, $EUID, and $GROUPS internal Bash variables.": "abs-guide.txt"},{"bash$ id": "abs-guide.txt"},{"uid=501(bozo) gid=501(bozo) groups=501(bozo),22(cdrom),80(cdwriter),81(audio)": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 17. System and Administrative Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"318": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"bash$ echo $UID": "abs-guide.txt"},{"501": "abs-guide.txt"},{"": "abs-guide.txt"},{"The id command shows the effective IDs only when they differ from the real ones.": "abs-guide.txt"},{"Also see Example 9-5.": "abs-guide.txt"},{"lid": "abs-guide.txt"},{"The lid (list ID) command shows the group(s) that a given user belongs to, or alternately, the users": "abs-guide.txt"},{"belonging to a given group. May be invoked only by root.": "abs-guide.txt"},{"root# lid bozo": "abs-guide.txt"},{"bozo(gid=500)": "abs-guide.txt"},{"": "abs-guide.txt"},{"root# lid daemon": "abs-guide.txt"},{"bin(gid=1)": "abs-guide.txt"},{"daemon(gid=2)": "abs-guide.txt"},{"adm(gid=4)": "abs-guide.txt"},{"lp(gid=7)": "abs-guide.txt"},{"": "abs-guide.txt"},{"who": "abs-guide.txt"},{"Show all users logged on to the system.": "abs-guide.txt"},{"bash$ who": "abs-guide.txt"},{"bozo tty1": "abs-guide.txt"},{"bozo pts/0": "abs-guide.txt"},{"bozo pts/1": "abs-guide.txt"},{"bozo pts/2": "abs-guide.txt"},{"": "abs-guide.txt"},{"Apr 27 17:45": "abs-guide.txt"},{"Apr 27 17:46": "abs-guide.txt"},{"Apr 27 17:47": "abs-guide.txt"},{"Apr 27 17:49": "abs-guide.txt"},{"": "abs-guide.txt"},{"The -m gives detailed information about only the current user. Passing any two arguments to who is": "abs-guide.txt"},{"the equivalent of who -m, as in who am i or who The Man.": "abs-guide.txt"},{"bash$ who -m": "abs-guide.txt"},{"localhost.localdomain!bozo": "abs-guide.txt"},{"": "abs-guide.txt"},{"pts/2": "abs-guide.txt"},{"": "abs-guide.txt"},{"Apr 27 17:49": "abs-guide.txt"},{"": "abs-guide.txt"},{"whoami is similar to who -m, but only lists the user name.": "abs-guide.txt"},{"bash$ whoami": "abs-guide.txt"},{"bozo": "abs-guide.txt"},{"": "abs-guide.txt"},{"w": "abs-guide.txt"},{"Show all logged on users and the processes belonging to them. This is an extended version of who.": "abs-guide.txt"},{"The output of w may be piped to grep to find a specific user and/or process.": "abs-guide.txt"},{"bash$ w | grep startx": "abs-guide.txt"},{"bozo tty1": "abs-guide.txt"},{"-": "abs-guide.txt"},{"": "abs-guide.txt"},{"4:22pm": "abs-guide.txt"},{"": "abs-guide.txt"},{"6:41": "abs-guide.txt"},{"": "abs-guide.txt"},{"4.47s": "abs-guide.txt"},{"": "abs-guide.txt"},{"0.45s": "abs-guide.txt"},{"": "abs-guide.txt"},{"startx": "abs-guide.txt"},{"": "abs-guide.txt"},{"logname": "abs-guide.txt"},{"Show current user's login name (as found in /var/run/utmp). This is a near-equivalent to": "abs-guide.txt"},{"whoami, above.": "abs-guide.txt"},{"bash$ logname": "abs-guide.txt"},{"bozo": "abs-guide.txt"},{"bash$ whoami": "abs-guide.txt"},{"bozo": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 17. System and Administrative Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"319": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"However . . .": "abs-guide.txt"},{"bash$ su": "abs-guide.txt"},{"Password: ......": "abs-guide.txt"},{"bash# whoami": "abs-guide.txt"},{"root": "abs-guide.txt"},{"bash# logname": "abs-guide.txt"},{"bozo": "abs-guide.txt"},{"": "abs-guide.txt"},{"While logname prints the name of the logged in user, whoami gives the name of the": "abs-guide.txt"},{"user attached to the current process. As we have just seen, sometimes these are not the": "abs-guide.txt"},{"same.": "abs-guide.txt"},{"su": "abs-guide.txt"},{"Runs a program or script as a substitute user. su rjones starts a shell as user rjones. A naked su": "abs-guide.txt"},{"defaults to root. See Example A-14.": "abs-guide.txt"},{"sudo": "abs-guide.txt"},{"Runs a command as root (or another user). This may be used in a script, thus permitting a regular": "abs-guide.txt"},{"user to run the script.": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# Some commands.": "abs-guide.txt"},{"sudo cp /root/secretfile /home/bozo/secret": "abs-guide.txt"},{"# Some more commands.": "abs-guide.txt"},{"": "abs-guide.txt"},{"The file /etc/sudoers holds the names of users permitted to invoke sudo.": "abs-guide.txt"},{"passwd": "abs-guide.txt"},{"Sets, changes, or manages a user's password.": "abs-guide.txt"},{"The passwd command can be used in a script, but probably should not be.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 17-1. Setting a new password": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# setnew-password.sh: For demonstration purposes only.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Not a good idea to actually run this script.": "abs-guide.txt"},{"# This script must be run as root.": "abs-guide.txt"},{"ROOT_UID=0": "abs-guide.txt"},{"E_WRONG_USER=65": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Root has $UID 0.": "abs-guide.txt"},{"# Not root?": "abs-guide.txt"},{"": "abs-guide.txt"},{"E_NOSUCHUSER=70": "abs-guide.txt"},{"SUCCESS=0": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [ \"$UID\" -ne \"$ROOT_UID\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo; echo \"Only root can run this script.\"; echo": "abs-guide.txt"},{"exit $E_WRONG_USER": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"You should know better than to run this script, root.\"": "abs-guide.txt"},{"echo \"Even root users get the blues... \"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 17. System and Administrative Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"320": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"": "abs-guide.txt"},{"username=bozo": "abs-guide.txt"},{"NEWPASSWORD=security_violation": "abs-guide.txt"},{"# Check if bozo lives here.": "abs-guide.txt"},{"grep -q \"$username\" /etc/passwd": "abs-guide.txt"},{"if [ $? -ne $SUCCESS ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"User $username does not exist.\"": "abs-guide.txt"},{"echo \"No password changed.\"": "abs-guide.txt"},{"exit $E_NOSUCHUSER": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"echo \"$NEWPASSWORD\" | passwd --stdin \"$username\"": "abs-guide.txt"},{"# The '--stdin' option to 'passwd' permits": "abs-guide.txt"},{"#+ getting a new password from stdin (or a pipe).": "abs-guide.txt"},{"echo; echo \"User $username's password changed!\"": "abs-guide.txt"},{"# Using the 'passwd' command in a script is dangerous.": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"The passwd command's -l, -u, and -d options permit locking, unlocking, and deleting a user's": "abs-guide.txt"},{"password. Only root may use these options.": "abs-guide.txt"},{"ac": "abs-guide.txt"},{"Show users' logged in time, as read from /var/log/wtmp. This is one of the GNU accounting": "abs-guide.txt"},{"utilities.": "abs-guide.txt"},{"bash$ ac": "abs-guide.txt"},{"total": "abs-guide.txt"},{"": "abs-guide.txt"},{"68.08": "abs-guide.txt"},{"": "abs-guide.txt"},{"last": "abs-guide.txt"},{"List last logged in users, as read from /var/log/wtmp. This command can also show remote": "abs-guide.txt"},{"logins.": "abs-guide.txt"},{"For example, to show the last few times the system rebooted:": "abs-guide.txt"},{"bash$ last reboot": "abs-guide.txt"},{"reboot": "abs-guide.txt"},{"system boot 2.6.9-1.667": "abs-guide.txt"},{"reboot": "abs-guide.txt"},{"system boot 2.6.9-1.667": "abs-guide.txt"},{"reboot": "abs-guide.txt"},{"system boot 2.6.9-1.667": "abs-guide.txt"},{"reboot": "abs-guide.txt"},{"system boot 2.6.9-1.667": "abs-guide.txt"},{". . .": "abs-guide.txt"},{"wtmp begins Tue Feb": "abs-guide.txt"},{"": "abs-guide.txt"},{"Fri Feb 4 18:18": "abs-guide.txt"},{"Fri Feb 4 15:20": "abs-guide.txt"},{"Fri Feb 4 12:56": "abs-guide.txt"},{"Thu Feb 3 21:08": "abs-guide.txt"},{"": "abs-guide.txt"},{"(00:02)": "abs-guide.txt"},{"(01:27)": "abs-guide.txt"},{"(00:49)": "abs-guide.txt"},{"(02:17)": "abs-guide.txt"},{"": "abs-guide.txt"},{"1 12:50:09 2005": "abs-guide.txt"},{"": "abs-guide.txt"},{"newgrp": "abs-guide.txt"},{"Change user's group ID without logging out. This permits access to the new group's files. Since users": "abs-guide.txt"},{"may be members of multiple groups simultaneously, this command finds only limited use.": "abs-guide.txt"},{"Kurt Glaesemann points out that the newgrp command could prove helpful in setting": "abs-guide.txt"},{"the default group permissions for files a user writes. However, the chgrp command": "abs-guide.txt"},{"might be more convenient for this purpose.": "abs-guide.txt"},{"Terminals": "abs-guide.txt"},{"tty": "abs-guide.txt"},{"Chapter 17. System and Administrative Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"321": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"Echoes the name (filename) of the current user's terminal. Note that each separate xterm window": "abs-guide.txt"},{"counts as a different terminal.": "abs-guide.txt"},{"bash$ tty": "abs-guide.txt"},{"/dev/pts/1": "abs-guide.txt"},{"": "abs-guide.txt"},{"stty": "abs-guide.txt"},{"Shows and/or changes terminal settings. This complex command, used in a script, can control": "abs-guide.txt"},{"terminal behavior and the way output displays. See the info page, and study it carefully.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 17-2. Setting an erase character": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# erase.sh: Using \"stty\" to set an erase character when reading input.": "abs-guide.txt"},{"echo -n \"What is your name? \"": "abs-guide.txt"},{"read name": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Try to backspace": "abs-guide.txt"},{"#+ to erase characters of input.": "abs-guide.txt"},{"# Problems?": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo \"Your name is $name.\"": "abs-guide.txt"},{"stty": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"read": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"erase '#'": "abs-guide.txt"},{"-n \"What is your name? \"": "abs-guide.txt"},{"name": "abs-guide.txt"},{"\"Your name is $name.\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Set \"hashmark\" (#) as erase character.": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Use # to erase last character typed.": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"# Even after the script exits, the new key value remains set.": "abs-guide.txt"},{"# Exercise: How would you reset the erase character to the default value?": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 17-3. secret password: Turning off terminal echoing": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# secret-pw.sh: secret password": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"read": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"-n \"Enter password \"": "abs-guide.txt"},{"passwd": "abs-guide.txt"},{"\"password is $passwd\"": "abs-guide.txt"},{"-n \"If someone had been looking over your shoulder, \"": "abs-guide.txt"},{"\"your password would have been compromised.\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo && echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Two line-feeds in an \"and list.\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"stty -echo": "abs-guide.txt"},{"# Turns off screen echo.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"May also be done with": "abs-guide.txt"},{"#": "abs-guide.txt"},{"read -sp passwd": "abs-guide.txt"},{"#": "abs-guide.txt"},{"A big Thank You to Leigh James for pointing this out.": "abs-guide.txt"},{"echo -n \"Enter password again \"": "abs-guide.txt"},{"read passwd": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"password is $passwd\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"stty echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Restores screen echo.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 17. System and Administrative Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"322": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"# Do an 'info stty' for more on this useful-but-tricky command.": "abs-guide.txt"},{"": "abs-guide.txt"},{"A creative use of stty is detecting a user keypress (without hitting ENTER).": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 17-4. Keypress detection": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# keypress.sh: Detect a user keypress (\"hot keys\").": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"old_tty_settings=$(stty -g)": "abs-guide.txt"},{"stty -icanon": "abs-guide.txt"},{"Keypress=$(head -c1)": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Save old settings (why?).": "abs-guide.txt"},{"# or $(dd bs=1 count=1 2> /dev/null)": "abs-guide.txt"},{"# on non-GNU systems": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"Key pressed was \\\"\"$Keypress\"\\\".\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"stty \"$old_tty_settings\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Restore old settings.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Thanks, Stephane Chazelas.": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Also see Example 9-3 and Example A-43.": "abs-guide.txt"},{"": "abs-guide.txt"},{"terminals and modes": "abs-guide.txt"},{"Normally, a terminal works in the canonical mode. When a user hits a key, the resulting character does": "abs-guide.txt"},{"not immediately go to the program actually running in this terminal. A buffer local to the terminal stores": "abs-guide.txt"},{"keystrokes. When the user hits the ENTER key, this sends all the stored keystrokes to the program": "abs-guide.txt"},{"running. There is even a basic line editor inside the terminal.": "abs-guide.txt"},{"bash$ stty -a": "abs-guide.txt"},{"speed 9600 baud; rows 36; columns 96; line = 0;": "abs-guide.txt"},{"intr = ^C; quit = ^\\; erase = ^H; kill = ^U; eof = ^D; eol = <undef>; eol2 = <undef>;": "abs-guide.txt"},{"start = ^Q; stop = ^S; susp = ^Z; rprnt = ^R; werase = ^W; lnext = ^V; flush = ^O;": "abs-guide.txt"},{"...": "abs-guide.txt"},{"isig icanon iexten echo echoe echok -echonl -noflsh -xcase -tostop -echoprt": "abs-guide.txt"},{"": "abs-guide.txt"},{"Using canonical mode, it is possible to redefine the special keys for the local terminal line editor.": "abs-guide.txt"},{"bash$ cat > filexxx": "abs-guide.txt"},{"wha<ctl-W>I<ctl-H>foo bar<ctl-U>hello world<ENTER>": "abs-guide.txt"},{"<ctl-D>": "abs-guide.txt"},{"bash$ cat filexxx": "abs-guide.txt"},{"hello world": "abs-guide.txt"},{"bash$ wc -c < filexxx": "abs-guide.txt"},{"12": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 17. System and Administrative Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"323": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"The process controlling the terminal receives only 12 characters (11 alphabetic ones, plus a newline),": "abs-guide.txt"},{"although the user hit 26 keys.": "abs-guide.txt"},{"In non-canonical (\"raw\") mode, every key hit (including special editing keys such as ctl-H) sends a": "abs-guide.txt"},{"character immediately to the controlling process.": "abs-guide.txt"},{"The Bash prompt disables both icanon and echo, since it replaces the basic terminal line editor with its": "abs-guide.txt"},{"own more elaborate one. For example, when you hit ctl-A at the Bash prompt, there's no ^A echoed by": "abs-guide.txt"},{"the terminal, but Bash gets a \\1 character, interprets it, and moves the cursor to the begining of the line.": "abs-guide.txt"},{"St\u00e9phane Chazelas": "abs-guide.txt"},{"setterm": "abs-guide.txt"},{"Set certain terminal attributes. This command writes to its terminal's stdout a string that changes": "abs-guide.txt"},{"the behavior of that terminal.": "abs-guide.txt"},{"bash$ setterm -cursor off": "abs-guide.txt"},{"bash$": "abs-guide.txt"},{"": "abs-guide.txt"},{"The setterm command can be used within a script to change the appearance of text written to": "abs-guide.txt"},{"stdout, although there are certainly better tools available for this purpose.": "abs-guide.txt"},{"setterm -bold on": "abs-guide.txt"},{"echo bold hello": "abs-guide.txt"},{"setterm -bold off": "abs-guide.txt"},{"echo normal hello": "abs-guide.txt"},{"": "abs-guide.txt"},{"tset": "abs-guide.txt"},{"Show or initialize terminal settings. This is a less capable version of stty.": "abs-guide.txt"},{"bash$ tset -r": "abs-guide.txt"},{"Terminal type is xterm-xfree86.": "abs-guide.txt"},{"Kill is control-U (^U).": "abs-guide.txt"},{"Interrupt is control-C (^C).": "abs-guide.txt"},{"": "abs-guide.txt"},{"setserial": "abs-guide.txt"},{"Set or display serial port parameters. This command must be run by root and is usually found in a": "abs-guide.txt"},{"system setup script.": "abs-guide.txt"},{"# From /etc/pcmcia/serial script:": "abs-guide.txt"},{"IRQ=`setserial /dev/$DEVICE | sed -e 's/.*IRQ: //'`": "abs-guide.txt"},{"setserial /dev/$DEVICE irq 0 ; setserial /dev/$DEVICE irq $IRQ": "abs-guide.txt"},{"": "abs-guide.txt"},{"getty, agetty": "abs-guide.txt"},{"The initialization process for a terminal uses getty or agetty to set it up for login by a user. These": "abs-guide.txt"},{"commands are not used within user shell scripts. Their scripting counterpart is stty.": "abs-guide.txt"},{"mesg": "abs-guide.txt"},{"Enables or disables write access to the current user's terminal. Disabling access would prevent another": "abs-guide.txt"},{"user on the network to write to the terminal.": "abs-guide.txt"},{"It can be quite annoying to have a message about ordering pizza suddenly appear in": "abs-guide.txt"},{"the middle of the text file you are editing. On a multi-user network, you might": "abs-guide.txt"},{"therefore wish to disable write access to your terminal when you need to avoid": "abs-guide.txt"},{"Chapter 17. System and Administrative Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"324": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"interruptions.": "abs-guide.txt"},{"wall": "abs-guide.txt"},{"This is an acronym for \"write all,\" i.e., sending a message to all users at every terminal logged into the": "abs-guide.txt"},{"network. It is primarily a system administrator's tool, useful, for example, when warning everyone": "abs-guide.txt"},{"that the system will shortly go down due to a problem (see Example 19-1).": "abs-guide.txt"},{"bash$ wall System going down for maintenance in 5 minutes!": "abs-guide.txt"},{"Broadcast message from bozo (pts/1) Sun Jul 8 13:53:27 2001...": "abs-guide.txt"},{"System going down for maintenance in 5 minutes!": "abs-guide.txt"},{"": "abs-guide.txt"},{"If write access to a particular terminal has been disabled with mesg, then wall cannot": "abs-guide.txt"},{"send a message to that terminal.": "abs-guide.txt"},{"Information and Statistics": "abs-guide.txt"},{"uname": "abs-guide.txt"},{"Output system specifications (OS, kernel version, etc.) to stdout. Invoked with the -a option, gives": "abs-guide.txt"},{"verbose system info (see Example 16-5). The -s option shows only the OS type.": "abs-guide.txt"},{"bash$ uname": "abs-guide.txt"},{"Linux": "abs-guide.txt"},{"bash$ uname -s": "abs-guide.txt"},{"Linux": "abs-guide.txt"},{"": "abs-guide.txt"},{"bash$ uname -a": "abs-guide.txt"},{"Linux iron.bozo 2.6.15-1.2054_FC5 #1 Tue Mar 14 15:48:33 EST 2006": "abs-guide.txt"},{"i686 i686 i386 GNU/Linux": "abs-guide.txt"},{"": "abs-guide.txt"},{"arch": "abs-guide.txt"},{"Show system architecture. Equivalent to uname -m. See Example 11-27.": "abs-guide.txt"},{"bash$ arch": "abs-guide.txt"},{"i686": "abs-guide.txt"},{"bash$ uname -m": "abs-guide.txt"},{"i686": "abs-guide.txt"},{"": "abs-guide.txt"},{"lastcomm": "abs-guide.txt"},{"Gives information about previous commands, as stored in the /var/account/pacct file.": "abs-guide.txt"},{"Command name and user name can be specified by options. This is one of the GNU accounting": "abs-guide.txt"},{"utilities.": "abs-guide.txt"},{"lastlog": "abs-guide.txt"},{"List the last login time of all system users. This references the /var/log/lastlog file.": "abs-guide.txt"},{"bash$ lastlog": "abs-guide.txt"},{"root": "abs-guide.txt"},{"tty1": "abs-guide.txt"},{"bin": "abs-guide.txt"},{"daemon": "abs-guide.txt"},{"...": "abs-guide.txt"},{"bozo": "abs-guide.txt"},{"tty1": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 17. System and Administrative Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"Fri Dec 7 18:43:21 -0700 2001": "abs-guide.txt"},{"**Never logged in**": "abs-guide.txt"},{"**Never logged in**": "abs-guide.txt"},{"Sat Dec": "abs-guide.txt"},{"": "abs-guide.txt"},{"8 21:14:29 -0700 2001": "abs-guide.txt"},{"": "abs-guide.txt"},{"325": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"bash$ lastlog | grep root": "abs-guide.txt"},{"root": "abs-guide.txt"},{"tty1": "abs-guide.txt"},{"": "abs-guide.txt"},{"Fri Dec": "abs-guide.txt"},{"": "abs-guide.txt"},{"7 18:43:21 -0700 2001": "abs-guide.txt"},{"": "abs-guide.txt"},{"This command will fail if the user invoking it does not have read permission for the": "abs-guide.txt"},{"/var/log/lastlog file.": "abs-guide.txt"},{"lsof": "abs-guide.txt"},{"List open files. This command outputs a detailed table of all currently open files and gives": "abs-guide.txt"},{"information about their owner, size, the processes associated with them, and more. Of course, lsof": "abs-guide.txt"},{"may be piped to grep and/or awk to parse and analyze its results.": "abs-guide.txt"},{"bash$ lsof": "abs-guide.txt"},{"COMMAND": "abs-guide.txt"},{"PID": "abs-guide.txt"},{"init": "abs-guide.txt"},{"1": "abs-guide.txt"},{"init": "abs-guide.txt"},{"1": "abs-guide.txt"},{"init": "abs-guide.txt"},{"1": "abs-guide.txt"},{"cardmgr": "abs-guide.txt"},{"213": "abs-guide.txt"},{"...": "abs-guide.txt"},{"": "abs-guide.txt"},{"USER": "abs-guide.txt"},{"root": "abs-guide.txt"},{"root": "abs-guide.txt"},{"root": "abs-guide.txt"},{"root": "abs-guide.txt"},{"": "abs-guide.txt"},{"FD": "abs-guide.txt"},{"mem": "abs-guide.txt"},{"mem": "abs-guide.txt"},{"mem": "abs-guide.txt"},{"mem": "abs-guide.txt"},{"": "abs-guide.txt"},{"TYPE": "abs-guide.txt"},{"REG": "abs-guide.txt"},{"REG": "abs-guide.txt"},{"REG": "abs-guide.txt"},{"REG": "abs-guide.txt"},{"": "abs-guide.txt"},{"DEVICE": "abs-guide.txt"},{"3,5": "abs-guide.txt"},{"3,5": "abs-guide.txt"},{"3,5": "abs-guide.txt"},{"3,5": "abs-guide.txt"},{"": "abs-guide.txt"},{"SIZE": "abs-guide.txt"},{"30748": "abs-guide.txt"},{"73120": "abs-guide.txt"},{"931668": "abs-guide.txt"},{"36956": "abs-guide.txt"},{"": "abs-guide.txt"},{"NODE NAME": "abs-guide.txt"},{"30303 /sbin/init": "abs-guide.txt"},{"8069 /lib/ld-2.1.3.so": "abs-guide.txt"},{"8075 /lib/libc-2.1.3.so": "abs-guide.txt"},{"30357 /sbin/cardmgr": "abs-guide.txt"},{"": "abs-guide.txt"},{"The lsof command is a useful, if complex administrative tool. If you are unable to dismount a": "abs-guide.txt"},{"filesystem and get an error message that it is still in use, then running lsof helps determine which files": "abs-guide.txt"},{"are still open on that filesystem. The -i option lists open network socket files, and this can help trace": "abs-guide.txt"},{"intrusion or hack attempts.": "abs-guide.txt"},{"bash$ lsof -an -i tcp": "abs-guide.txt"},{"COMMAND PID USER FD TYPE DEVICE SIZE NODE NAME": "abs-guide.txt"},{"firefox 2330 bozo 32u IPv4": "abs-guide.txt"},{"9956": "abs-guide.txt"},{"TCP 66.0.118.137:57596->67.112.7.104:http ...": "abs-guide.txt"},{"firefox 2330 bozo 38u IPv4 10535": "abs-guide.txt"},{"TCP 66.0.118.137:57708->216.79.48.24:http ...": "abs-guide.txt"},{"": "abs-guide.txt"},{"See Example 30-2 for an effective use of lsof.": "abs-guide.txt"},{"strace": "abs-guide.txt"},{"System trace: diagnostic and debugging tool for tracing system calls and signals. This command and": "abs-guide.txt"},{"ltrace, following, are useful for diagnosing why a given program or package fails to run . . . perhaps": "abs-guide.txt"},{"due to missing libraries or related causes.": "abs-guide.txt"},{"bash$ strace df": "abs-guide.txt"},{"execve(\"/bin/df\", [\"df\"], [/* 45 vars */]) = 0": "abs-guide.txt"},{"uname({sys=\"Linux\", node=\"bozo.localdomain\", ...}) = 0": "abs-guide.txt"},{"brk(0)": "abs-guide.txt"},{"= 0x804f5e4": "abs-guide.txt"},{"...": "abs-guide.txt"},{"": "abs-guide.txt"},{"This is the Linux equivalent of the Solaris truss command.": "abs-guide.txt"},{"ltrace": "abs-guide.txt"},{"Library trace: diagnostic and debugging tool that traces library calls invoked by a given command.": "abs-guide.txt"},{"bash$ ltrace df": "abs-guide.txt"},{"__libc_start_main(0x804a910, 1, 0xbfb589a4, 0x804fb70, 0x804fb68 <unfinished ...>:": "abs-guide.txt"},{"setlocale(6, \"\")": "abs-guide.txt"},{"= \"en_US.UTF-8\"": "abs-guide.txt"},{"bindtextdomain(\"coreutils\", \"/usr/share/locale\") = \"/usr/share/locale\"": "abs-guide.txt"},{"textdomain(\"coreutils\")": "abs-guide.txt"},{"= \"coreutils\"": "abs-guide.txt"},{"__cxa_atexit(0x804b650, 0, 0, 0x8052bf0, 0xbfb58908) = 0": "abs-guide.txt"},{"getenv(\"DF_BLOCK_SIZE\")": "abs-guide.txt"},{"= NULL": "abs-guide.txt"},{"...": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 17. System and Administrative Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"326": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"nc": "abs-guide.txt"},{"The nc (netcat) utility is a complete toolkit for connecting to and listening to TCP and UDP ports. It is": "abs-guide.txt"},{"useful as a diagnostic and testing tool and as a component in simple script-based HTTP clients and": "abs-guide.txt"},{"servers.": "abs-guide.txt"},{"bash$ nc localhost.localdomain 25": "abs-guide.txt"},{"220 localhost.localdomain ESMTP Sendmail 8.13.1/8.13.1;": "abs-guide.txt"},{"Thu, 31 Mar 2005 15:41:35 -0700": "abs-guide.txt"},{"": "abs-guide.txt"},{"A real-life usage example.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 17-5. Checking a remote server for identd": "abs-guide.txt"},{"#! /bin/sh": "abs-guide.txt"},{"## Duplicate DaveG's ident-scan thingie using netcat. Oooh, he'll be p*ssed.": "abs-guide.txt"},{"## Args: target port [port port port ...]": "abs-guide.txt"},{"## Hose stdout _and_ stderr together.": "abs-guide.txt"},{"##": "abs-guide.txt"},{"## Advantages: runs slower than ident-scan, giving remote inetd less cause": "abs-guide.txt"},{"##+ for alarm, and only hits the few known daemon ports you specify.": "abs-guide.txt"},{"## Disadvantages: requires numeric-only port args, the output sleazitude,": "abs-guide.txt"},{"##+ and won't work for r-services when coming from high source ports.": "abs-guide.txt"},{"# Script author: Hobbit <hobbit@avian.org>": "abs-guide.txt"},{"# Used in ABS Guide with permission.": "abs-guide.txt"},{"# --------------------------------------------------E_BADARGS=65": "abs-guide.txt"},{"# Need at least two args.": "abs-guide.txt"},{"TWO_WINKS=2": "abs-guide.txt"},{"# How long to sleep.": "abs-guide.txt"},{"THREE_WINKS=3": "abs-guide.txt"},{"IDPORT=113": "abs-guide.txt"},{"# Authentication \"tap ident\" port.": "abs-guide.txt"},{"RAND1=999": "abs-guide.txt"},{"RAND2=31337": "abs-guide.txt"},{"TIMEOUT0=9": "abs-guide.txt"},{"TIMEOUT1=8": "abs-guide.txt"},{"TIMEOUT2=4": "abs-guide.txt"},{"# --------------------------------------------------case \"${2}\" in": "abs-guide.txt"},{"\"\" ) echo \"Need HOST and at least one PORT.\" ; exit $E_BADARGS ;;": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"# Ping 'em once and see if they *are* running identd.": "abs-guide.txt"},{"nc -z -w $TIMEOUT0 \"$1\" $IDPORT || \\": "abs-guide.txt"},{"{ echo \"Oops, $1 isn't running identd.\" ; exit 0 ; }": "abs-guide.txt"},{"# -z scans for listening daemons.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"-w $TIMEOUT = How long to try to connect.": "abs-guide.txt"},{"# Generate a randomish base port.": "abs-guide.txt"},{"RP=`expr $$ % $RAND1 + $RAND2`": "abs-guide.txt"},{"TRG=\"$1\"": "abs-guide.txt"},{"shift": "abs-guide.txt"},{"while test \"$1\" ; do": "abs-guide.txt"},{"nc -v -w $TIMEOUT1 -p ${RP} \"$TRG\" ${1} < /dev/null > /dev/null &": "abs-guide.txt"},{"PROC=$!": "abs-guide.txt"},{"sleep $THREE_WINKS": "abs-guide.txt"},{"echo \"${1},${RP}\" | nc -w $TIMEOUT2 -r \"$TRG\" $IDPORT 2>&1": "abs-guide.txt"},{"sleep $TWO_WINKS": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 17. System and Administrative Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"327": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# Does this look like a lamer script or what . . . ?": "abs-guide.txt"},{"# ABS Guide author comments: \"Ain't really all that bad . . .": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"kinda clever, actually.\"": "abs-guide.txt"},{"kill -HUP $PROC": "abs-guide.txt"},{"RP=`expr ${RP} + 1`": "abs-guide.txt"},{"shift": "abs-guide.txt"},{"done": "abs-guide.txt"},{"exit $?": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Notes:": "abs-guide.txt"},{"-----": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Try commenting out line 30 and running this script": "abs-guide.txt"},{"#+ with \"localhost.localdomain 25\" as arguments.": "abs-guide.txt"},{"# For more of Hobbit's 'nc' example scripts,": "abs-guide.txt"},{"#+ look in the documentation:": "abs-guide.txt"},{"#+ the /usr/share/doc/nc-X.XX/scripts directory.": "abs-guide.txt"},{"": "abs-guide.txt"},{"And, of course, there's Dr. Andrew Tridgell's notorious one-line script in the BitKeeper Affair:": "abs-guide.txt"},{"echo clone | nc thunk.org 5000 > e2fsprogs.dat": "abs-guide.txt"},{"": "abs-guide.txt"},{"free": "abs-guide.txt"},{"Shows memory and cache usage in tabular form. The output of this command lends itself to parsing,": "abs-guide.txt"},{"using grep, awk or Perl. The procinfo command shows all the information that free does, and much": "abs-guide.txt"},{"more.": "abs-guide.txt"},{"bash$ free": "abs-guide.txt"},{"total": "abs-guide.txt"},{"Mem:": "abs-guide.txt"},{"30504": "abs-guide.txt"},{"-/+ buffers/cache:": "abs-guide.txt"},{"Swap:": "abs-guide.txt"},{"68540": "abs-guide.txt"},{"": "abs-guide.txt"},{"used": "abs-guide.txt"},{"28624": "abs-guide.txt"},{"10640": "abs-guide.txt"},{"3128": "abs-guide.txt"},{"": "abs-guide.txt"},{"free": "abs-guide.txt"},{"1880": "abs-guide.txt"},{"19864": "abs-guide.txt"},{"65412": "abs-guide.txt"},{"": "abs-guide.txt"},{"shared": "abs-guide.txt"},{"15820": "abs-guide.txt"},{"": "abs-guide.txt"},{"buffers": "abs-guide.txt"},{"1608": "abs-guide.txt"},{"": "abs-guide.txt"},{"cached": "abs-guide.txt"},{"16376": "abs-guide.txt"},{"": "abs-guide.txt"},{"To show unused RAM memory:": "abs-guide.txt"},{"bash$ free | grep Mem | awk '{ print $4 }'": "abs-guide.txt"},{"1880": "abs-guide.txt"},{"": "abs-guide.txt"},{"procinfo": "abs-guide.txt"},{"Extract and list information and statistics from the /proc pseudo-filesystem. This gives a very": "abs-guide.txt"},{"extensive and detailed listing.": "abs-guide.txt"},{"bash$ procinfo | grep Bootup": "abs-guide.txt"},{"Bootup: Wed Mar 21 15:15:50 2001": "abs-guide.txt"},{"": "abs-guide.txt"},{"Load average: 0.04 0.21 0.34 3/47 6829": "abs-guide.txt"},{"": "abs-guide.txt"},{"lsdev": "abs-guide.txt"},{"List devices, that is, show installed hardware.": "abs-guide.txt"},{"bash$ lsdev": "abs-guide.txt"},{"Device": "abs-guide.txt"},{"DMA": "abs-guide.txt"},{"IRQ I/O Ports": "abs-guide.txt"},{"-----------------------------------------------cascade": "abs-guide.txt"},{"4": "abs-guide.txt"},{"2": "abs-guide.txt"},{"dma": "abs-guide.txt"},{"0080-008f": "abs-guide.txt"},{"dma1": "abs-guide.txt"},{"0000-001f": "abs-guide.txt"},{"dma2": "abs-guide.txt"},{"00c0-00df": "abs-guide.txt"},{"fpu": "abs-guide.txt"},{"00f0-00ff": "abs-guide.txt"},{"ide0": "abs-guide.txt"},{"14 01f0-01f7 03f6-03f6": "abs-guide.txt"},{"...": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 17. System and Administrative Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"328": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"du": "abs-guide.txt"},{"Show (disk) file usage, recursively. Defaults to current working directory, unless otherwise specified.": "abs-guide.txt"},{"bash$ du -ach": "abs-guide.txt"},{"1.0k": "abs-guide.txt"},{"./wi.sh": "abs-guide.txt"},{"1.0k": "abs-guide.txt"},{"./tst.sh": "abs-guide.txt"},{"1.0k": "abs-guide.txt"},{"./random.file": "abs-guide.txt"},{"6.0k": "abs-guide.txt"},{".": "abs-guide.txt"},{"6.0k": "abs-guide.txt"},{"total": "abs-guide.txt"},{"": "abs-guide.txt"},{"df": "abs-guide.txt"},{"Shows filesystem usage in tabular form.": "abs-guide.txt"},{"bash$ df": "abs-guide.txt"},{"Filesystem": "abs-guide.txt"},{"/dev/hda5": "abs-guide.txt"},{"/dev/hda8": "abs-guide.txt"},{"/dev/hda7": "abs-guide.txt"},{"": "abs-guide.txt"},{"1k-blocks": "abs-guide.txt"},{"273262": "abs-guide.txt"},{"222525": "abs-guide.txt"},{"1408796": "abs-guide.txt"},{"": "abs-guide.txt"},{"Used Available Use% Mounted on": "abs-guide.txt"},{"92607": "abs-guide.txt"},{"166547 36% /": "abs-guide.txt"},{"123951": "abs-guide.txt"},{"87085 59% /home": "abs-guide.txt"},{"1075744": "abs-guide.txt"},{"261488 80% /usr": "abs-guide.txt"},{"": "abs-guide.txt"},{"dmesg": "abs-guide.txt"},{"Lists all system bootup messages to stdout. Handy for debugging and ascertaining which device": "abs-guide.txt"},{"drivers were installed and which system interrupts in use. The output of dmesg may, of course, be": "abs-guide.txt"},{"parsed with grep, sed, or awk from within a script.": "abs-guide.txt"},{"bash$ dmesg | grep hda": "abs-guide.txt"},{"Kernel command line: ro root=/dev/hda2": "abs-guide.txt"},{"hda: IBM-DLGA-23080, ATA DISK drive": "abs-guide.txt"},{"hda: 6015744 sectors (3080 MB) w/96KiB Cache, CHS=746/128/63": "abs-guide.txt"},{"hda: hda1 hda2 hda3 < hda5 hda6 hda7 > hda4": "abs-guide.txt"},{"": "abs-guide.txt"},{"stat": "abs-guide.txt"},{"Gives detailed and verbose statistics on a given file (even a directory or device file) or set of files.": "abs-guide.txt"},{"bash$ stat test.cru": "abs-guide.txt"},{"File: \"test.cru\"": "abs-guide.txt"},{"Size: 49970": "abs-guide.txt"},{"Allocated Blocks: 100": "abs-guide.txt"},{"Filetype: Regular File": "abs-guide.txt"},{"Mode: (0664/-rw-rw-r--)": "abs-guide.txt"},{"Uid: ( 501/ bozo) Gid: ( 501/ bozo)": "abs-guide.txt"},{"Device: 3,8": "abs-guide.txt"},{"Inode: 18185": "abs-guide.txt"},{"Links: 1": "abs-guide.txt"},{"Access: Sat Jun 2 16:40:24 2001": "abs-guide.txt"},{"Modify: Sat Jun 2 16:40:24 2001": "abs-guide.txt"},{"Change: Sat Jun 2 16:40:24 2001": "abs-guide.txt"},{"": "abs-guide.txt"},{"If the target file does not exist, stat returns an error message.": "abs-guide.txt"},{"bash$ stat nonexistent-file": "abs-guide.txt"},{"nonexistent-file: No such file or directory": "abs-guide.txt"},{"": "abs-guide.txt"},{"In a script, you can use stat to extract information about files (and filesystems) and set variables": "abs-guide.txt"},{"accordingly.": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# fileinfo2.sh": "abs-guide.txt"},{"# Per suggestion of Jo\u00ebl Bourquard and . . .": "abs-guide.txt"},{"# http://www.linuxquestions.org/questions/showthread.php?t=410766": "abs-guide.txt"},{"": "abs-guide.txt"},{"FILENAME=testfile.txt": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 17. System and Administrative Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"329": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"file_name=$(stat -c%n \"$FILENAME\")": "abs-guide.txt"},{"# Same as \"$FILENAME\" of course.": "abs-guide.txt"},{"file_owner=$(stat -c%U \"$FILENAME\")": "abs-guide.txt"},{"file_size=$(stat -c%s \"$FILENAME\")": "abs-guide.txt"},{"# Certainly easier than using \"ls -l $FILENAME\"": "abs-guide.txt"},{"#+ and then parsing with sed.": "abs-guide.txt"},{"file_inode=$(stat -c%i \"$FILENAME\")": "abs-guide.txt"},{"file_type=$(stat -c%F \"$FILENAME\")": "abs-guide.txt"},{"file_access_rights=$(stat -c%A \"$FILENAME\")": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"\"File": "abs-guide.txt"},{"\"File": "abs-guide.txt"},{"\"File": "abs-guide.txt"},{"\"File": "abs-guide.txt"},{"\"File": "abs-guide.txt"},{"\"File": "abs-guide.txt"},{"": "abs-guide.txt"},{"name:": "abs-guide.txt"},{"owner:": "abs-guide.txt"},{"size:": "abs-guide.txt"},{"inode:": "abs-guide.txt"},{"type:": "abs-guide.txt"},{"access rights:": "abs-guide.txt"},{"": "abs-guide.txt"},{"$file_name\"": "abs-guide.txt"},{"$file_owner\"": "abs-guide.txt"},{"$file_size\"": "abs-guide.txt"},{"$file_inode\"": "abs-guide.txt"},{"$file_type\"": "abs-guide.txt"},{"$file_access_rights\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"sh fileinfo2.sh": "abs-guide.txt"},{"File": "abs-guide.txt"},{"File": "abs-guide.txt"},{"File": "abs-guide.txt"},{"File": "abs-guide.txt"},{"File": "abs-guide.txt"},{"File": "abs-guide.txt"},{"": "abs-guide.txt"},{"name:": "abs-guide.txt"},{"owner:": "abs-guide.txt"},{"size:": "abs-guide.txt"},{"inode:": "abs-guide.txt"},{"type:": "abs-guide.txt"},{"access rights:": "abs-guide.txt"},{"": "abs-guide.txt"},{"testfile.txt": "abs-guide.txt"},{"bozo": "abs-guide.txt"},{"418": "abs-guide.txt"},{"1730378": "abs-guide.txt"},{"regular file": "abs-guide.txt"},{"-rw-rw-r--": "abs-guide.txt"},{"": "abs-guide.txt"},{"vmstat": "abs-guide.txt"},{"Display virtual memory statistics.": "abs-guide.txt"},{"bash$ vmstat": "abs-guide.txt"},{"procs": "abs-guide.txt"},{"r b w": "abs-guide.txt"},{"swpd": "abs-guide.txt"},{"0 0 0": "abs-guide.txt"},{"0": "abs-guide.txt"},{"": "abs-guide.txt"},{"free": "abs-guide.txt"},{"11040": "abs-guide.txt"},{"": "abs-guide.txt"},{"buff": "abs-guide.txt"},{"2636": "abs-guide.txt"},{"": "abs-guide.txt"},{"memory": "abs-guide.txt"},{"cache": "abs-guide.txt"},{"38952": "abs-guide.txt"},{"": "abs-guide.txt"},{"si": "abs-guide.txt"},{"0": "abs-guide.txt"},{"": "abs-guide.txt"},{"swap": "abs-guide.txt"},{"so": "abs-guide.txt"},{"0": "abs-guide.txt"},{"": "abs-guide.txt"},{"bi": "abs-guide.txt"},{"33": "abs-guide.txt"},{"": "abs-guide.txt"},{"io system": "abs-guide.txt"},{"bo": "abs-guide.txt"},{"in": "abs-guide.txt"},{"7 271": "abs-guide.txt"},{"": "abs-guide.txt"},{"cs": "abs-guide.txt"},{"88": "abs-guide.txt"},{"": "abs-guide.txt"},{"us": "abs-guide.txt"},{"8": "abs-guide.txt"},{"": "abs-guide.txt"},{"cpu": "abs-guide.txt"},{"sy id": "abs-guide.txt"},{"3 89": "abs-guide.txt"},{"": "abs-guide.txt"},{"uptime": "abs-guide.txt"},{"Shows how long the system has been running, along with associated statistics.": "abs-guide.txt"},{"bash$ uptime": "abs-guide.txt"},{"10:28pm up 1:57,": "abs-guide.txt"},{"": "abs-guide.txt"},{"3 users,": "abs-guide.txt"},{"": "abs-guide.txt"},{"load average: 0.17, 0.34, 0.27": "abs-guide.txt"},{"": "abs-guide.txt"},{"A load average of 1 or less indicates that the system handles processes immediately. A": "abs-guide.txt"},{"load average greater than 1 means that processes are being queued. When the load": "abs-guide.txt"},{"average gets above 3 (on a single-core processor), then system performance is": "abs-guide.txt"},{"significantly degraded.": "abs-guide.txt"},{"hostname": "abs-guide.txt"},{"Lists the system's host name. This command sets the host name in an /etc/rc.d setup script": "abs-guide.txt"},{"(/etc/rc.d/rc.sysinit or similar). It is equivalent to uname -n, and a counterpart to the": "abs-guide.txt"},{"$HOSTNAME internal variable.": "abs-guide.txt"},{"bash$ hostname": "abs-guide.txt"},{"localhost.localdomain": "abs-guide.txt"},{"bash$ echo $HOSTNAME": "abs-guide.txt"},{"localhost.localdomain": "abs-guide.txt"},{"": "abs-guide.txt"},{"Similar to the hostname command are the domainname, dnsdomainname, nisdomainname, and": "abs-guide.txt"},{"ypdomainname commands. Use these to display or set the system DNS or NIS/YP domain name.": "abs-guide.txt"},{"Various options to hostname also perform these functions.": "abs-guide.txt"},{"Chapter 17. System and Administrative Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"330": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"hostid": "abs-guide.txt"},{"Echo a 32-bit hexadecimal numerical identifier for the host machine.": "abs-guide.txt"},{"bash$ hostid": "abs-guide.txt"},{"7f0100": "abs-guide.txt"},{"": "abs-guide.txt"},{"This command allegedly fetches a \"unique\" serial number for a particular system.": "abs-guide.txt"},{"Certain product registration procedures use this number to brand a particular user": "abs-guide.txt"},{"license. Unfortunately, hostid only returns the machine network address in": "abs-guide.txt"},{"hexadecimal, with pairs of bytes transposed.": "abs-guide.txt"},{"The network address of a typical non-networked Linux machine, is found in": "abs-guide.txt"},{"/etc/hosts.": "abs-guide.txt"},{"bash$ cat /etc/hosts": "abs-guide.txt"},{"127.0.0.1": "abs-guide.txt"},{"": "abs-guide.txt"},{"localhost.localdomain localhost": "abs-guide.txt"},{"": "abs-guide.txt"},{"As it happens, transposing the bytes of 127.0.0.1, we get 0.127.1.0, which": "abs-guide.txt"},{"translates in hex to 007f0100, the exact equivalent of what hostid returns, above.": "abs-guide.txt"},{"There exist only a few million other Linux machines with this identical hostid.": "abs-guide.txt"},{"sar": "abs-guide.txt"},{"Invoking sar (System Activity Reporter) gives a very detailed rundown on system statistics. The": "abs-guide.txt"},{"Santa Cruz Operation (\"Old\" SCO) released sar as Open Source in June, 1999.": "abs-guide.txt"},{"This command is not part of the base Linux distribution, but may be obtained as part of the sysstat": "abs-guide.txt"},{"utilities package, written by Sebastien Godard.": "abs-guide.txt"},{"bash$ sar": "abs-guide.txt"},{"Linux 2.4.9 (brooks.seringas.fr)": "abs-guide.txt"},{"10:30:00": "abs-guide.txt"},{"10:40:00": "abs-guide.txt"},{"10:50:00": "abs-guide.txt"},{"11:00:00": "abs-guide.txt"},{"Average:": "abs-guide.txt"},{"": "abs-guide.txt"},{"CPU": "abs-guide.txt"},{"all": "abs-guide.txt"},{"all": "abs-guide.txt"},{"all": "abs-guide.txt"},{"all": "abs-guide.txt"},{"": "abs-guide.txt"},{"%user": "abs-guide.txt"},{"2.21": "abs-guide.txt"},{"3.36": "abs-guide.txt"},{"1.12": "abs-guide.txt"},{"2.23": "abs-guide.txt"},{"": "abs-guide.txt"},{"14:32:30": "abs-guide.txt"},{"": "abs-guide.txt"},{"LINUX RESTART": "abs-guide.txt"},{"": "abs-guide.txt"},{"15:00:00": "abs-guide.txt"},{"15:10:00": "abs-guide.txt"},{"15:20:00": "abs-guide.txt"},{"15:30:00": "abs-guide.txt"},{"Average:": "abs-guide.txt"},{"": "abs-guide.txt"},{"CPU": "abs-guide.txt"},{"all": "abs-guide.txt"},{"all": "abs-guide.txt"},{"all": "abs-guide.txt"},{"all": "abs-guide.txt"},{"": "abs-guide.txt"},{"%user": "abs-guide.txt"},{"8.59": "abs-guide.txt"},{"4.07": "abs-guide.txt"},{"0.79": "abs-guide.txt"},{"6.33": "abs-guide.txt"},{"": "abs-guide.txt"},{"09/26/03": "abs-guide.txt"},{"%nice": "abs-guide.txt"},{"10.90": "abs-guide.txt"},{"0.00": "abs-guide.txt"},{"0.00": "abs-guide.txt"},{"3.63": "abs-guide.txt"},{"": "abs-guide.txt"},{"%system": "abs-guide.txt"},{"65.48": "abs-guide.txt"},{"72.36": "abs-guide.txt"},{"80.77": "abs-guide.txt"},{"72.87": "abs-guide.txt"},{"": "abs-guide.txt"},{"%iowait": "abs-guide.txt"},{"0.00": "abs-guide.txt"},{"0.00": "abs-guide.txt"},{"0.00": "abs-guide.txt"},{"0.00": "abs-guide.txt"},{"": "abs-guide.txt"},{"%idle": "abs-guide.txt"},{"21.41": "abs-guide.txt"},{"24.28": "abs-guide.txt"},{"18.11": "abs-guide.txt"},{"21.27": "abs-guide.txt"},{"": "abs-guide.txt"},{"%nice": "abs-guide.txt"},{"2.40": "abs-guide.txt"},{"1.00": "abs-guide.txt"},{"2.94": "abs-guide.txt"},{"1.70": "abs-guide.txt"},{"": "abs-guide.txt"},{"%system": "abs-guide.txt"},{"17.47": "abs-guide.txt"},{"11.95": "abs-guide.txt"},{"7.56": "abs-guide.txt"},{"14.71": "abs-guide.txt"},{"": "abs-guide.txt"},{"%iowait": "abs-guide.txt"},{"0.00": "abs-guide.txt"},{"0.00": "abs-guide.txt"},{"0.00": "abs-guide.txt"},{"0.00": "abs-guide.txt"},{"": "abs-guide.txt"},{"%idle": "abs-guide.txt"},{"71.54": "abs-guide.txt"},{"82.98": "abs-guide.txt"},{"88.71": "abs-guide.txt"},{"77.26": "abs-guide.txt"},{"": "abs-guide.txt"},{"readelf": "abs-guide.txt"},{"Show information and statistics about a designated elf binary. This is part of the binutils package.": "abs-guide.txt"},{"bash$ readelf -h /bin/bash": "abs-guide.txt"},{"ELF Header:": "abs-guide.txt"},{"Magic:": "abs-guide.txt"},{"7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00": "abs-guide.txt"},{"Class:": "abs-guide.txt"},{"ELF32": "abs-guide.txt"},{"Data:": "abs-guide.txt"},{"2's complement, little endian": "abs-guide.txt"},{"Version:": "abs-guide.txt"},{"1 (current)": "abs-guide.txt"},{"OS/ABI:": "abs-guide.txt"},{"UNIX - System V": "abs-guide.txt"},{"ABI Version:": "abs-guide.txt"},{"0": "abs-guide.txt"},{"Type:": "abs-guide.txt"},{"EXEC (Executable file)": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 17. System and Administrative Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"331": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{". . .": "abs-guide.txt"},{"": "abs-guide.txt"},{"size": "abs-guide.txt"},{"The size [/path/to/binary] command gives the segment sizes of a binary executable or archive file.": "abs-guide.txt"},{"This is mainly of use to programmers.": "abs-guide.txt"},{"bash$ size /bin/bash": "abs-guide.txt"},{"text": "abs-guide.txt"},{"data": "abs-guide.txt"},{"bss": "abs-guide.txt"},{"495971": "abs-guide.txt"},{"22496": "abs-guide.txt"},{"17392": "abs-guide.txt"},{"": "abs-guide.txt"},{"dec": "abs-guide.txt"},{"535859": "abs-guide.txt"},{"": "abs-guide.txt"},{"hex filename": "abs-guide.txt"},{"82d33 /bin/bash": "abs-guide.txt"},{"": "abs-guide.txt"},{"System Logs": "abs-guide.txt"},{"logger": "abs-guide.txt"},{"Appends a user-generated message to the system log (/var/log/messages). You do not have to": "abs-guide.txt"},{"be root to invoke logger.": "abs-guide.txt"},{"logger Experiencing instability in network connection at 23:10, 05/21.": "abs-guide.txt"},{"# Now, do a 'tail /var/log/messages'.": "abs-guide.txt"},{"": "abs-guide.txt"},{"By embedding a logger command in a script, it is possible to write debugging information to": "abs-guide.txt"},{"/var/log/messages.": "abs-guide.txt"},{"logger -t $0 -i Logging at line \"$LINENO\".": "abs-guide.txt"},{"# The \"-t\" option specifies the tag for the logger entry.": "abs-guide.txt"},{"# The \"-i\" option records the process ID.": "abs-guide.txt"},{"# tail /var/log/message": "abs-guide.txt"},{"# ...": "abs-guide.txt"},{"# Jul 7 20:48:58 localhost ./test.sh[1712]: Logging at line 3.": "abs-guide.txt"},{"": "abs-guide.txt"},{"logrotate": "abs-guide.txt"},{"This utility manages the system log files, rotating, compressing, deleting, and/or e-mailing them, as": "abs-guide.txt"},{"appropriate. This keeps the /var/log from getting cluttered with old log files. Usually cron runs": "abs-guide.txt"},{"logrotate on a daily basis.": "abs-guide.txt"},{"Adding an appropriate entry to /etc/logrotate.conf makes it possible to manage personal log": "abs-guide.txt"},{"files, as well as system-wide ones.": "abs-guide.txt"},{"Stefano Falsetto has created rottlog, which he considers to be an improved version of": "abs-guide.txt"},{"logrotate.": "abs-guide.txt"},{"Job Control": "abs-guide.txt"},{"ps": "abs-guide.txt"},{"Process Statistics: lists currently executing processes by owner and PID (process ID). This is usually": "abs-guide.txt"},{"invoked with ax or aux options, and may be piped to grep or sed to search for a specific process (see": "abs-guide.txt"},{"Example 15-14 and Example 29-3).": "abs-guide.txt"},{"bash$": "abs-guide.txt"},{"295 ?": "abs-guide.txt"},{"": "abs-guide.txt"},{"ps ax | grep sendmail": "abs-guide.txt"},{"S": "abs-guide.txt"},{"0:00 sendmail: accepting connections on port 25": "abs-guide.txt"},{"": "abs-guide.txt"},{"To display system processes in graphical \"tree\" format: ps afjx or ps ax --forest.": "abs-guide.txt"},{"pgrep, pkill": "abs-guide.txt"},{"Combining the ps command with grep or kill.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 17. System and Administrative Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"332": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"bash$ ps a | grep mingetty": "abs-guide.txt"},{"2212 tty2": "abs-guide.txt"},{"Ss+": "abs-guide.txt"},{"0:00 /sbin/mingetty tty2": "abs-guide.txt"},{"2213 tty3": "abs-guide.txt"},{"Ss+": "abs-guide.txt"},{"0:00 /sbin/mingetty tty3": "abs-guide.txt"},{"2214 tty4": "abs-guide.txt"},{"Ss+": "abs-guide.txt"},{"0:00 /sbin/mingetty tty4": "abs-guide.txt"},{"2215 tty5": "abs-guide.txt"},{"Ss+": "abs-guide.txt"},{"0:00 /sbin/mingetty tty5": "abs-guide.txt"},{"2216 tty6": "abs-guide.txt"},{"Ss+": "abs-guide.txt"},{"0:00 /sbin/mingetty tty6": "abs-guide.txt"},{"4849 pts/2": "abs-guide.txt"},{"S+": "abs-guide.txt"},{"0:00 grep mingetty": "abs-guide.txt"},{"": "abs-guide.txt"},{"bash$ pgrep mingetty": "abs-guide.txt"},{"2212 mingetty": "abs-guide.txt"},{"2213 mingetty": "abs-guide.txt"},{"2214 mingetty": "abs-guide.txt"},{"2215 mingetty": "abs-guide.txt"},{"2216 mingetty": "abs-guide.txt"},{"": "abs-guide.txt"},{"Compare the action of pkill with killall.": "abs-guide.txt"},{"pstree": "abs-guide.txt"},{"Lists currently executing processes in \"tree\" format. The -p option shows the PIDs, as well as the": "abs-guide.txt"},{"process names.": "abs-guide.txt"},{"top": "abs-guide.txt"},{"Continuously updated display of most cpu-intensive processes. The -b option displays in text mode,": "abs-guide.txt"},{"so that the output may be parsed or accessed from a script.": "abs-guide.txt"},{"bash$ top -b": "abs-guide.txt"},{"8:30pm up 3 min, 3 users, load average: 0.49, 0.32, 0.13": "abs-guide.txt"},{"45 processes: 44 sleeping, 1 running, 0 zombie, 0 stopped": "abs-guide.txt"},{"CPU states: 13.6% user, 7.3% system, 0.0% nice, 78.9% idle": "abs-guide.txt"},{"Mem:": "abs-guide.txt"},{"78396K av,": "abs-guide.txt"},{"65468K used,": "abs-guide.txt"},{"12928K free,": "abs-guide.txt"},{"0K shrd,": "abs-guide.txt"},{"Swap: 157208K av,": "abs-guide.txt"},{"0K used, 157208K free": "abs-guide.txt"},{"PID": "abs-guide.txt"},{"848": "abs-guide.txt"},{"1": "abs-guide.txt"},{"2": "abs-guide.txt"},{"...": "abs-guide.txt"},{"": "abs-guide.txt"},{"USER": "abs-guide.txt"},{"bozo": "abs-guide.txt"},{"root": "abs-guide.txt"},{"root": "abs-guide.txt"},{"": "abs-guide.txt"},{"PRI": "abs-guide.txt"},{"17": "abs-guide.txt"},{"8": "abs-guide.txt"},{"9": "abs-guide.txt"},{"": "abs-guide.txt"},{"NI": "abs-guide.txt"},{"0": "abs-guide.txt"},{"0": "abs-guide.txt"},{"0": "abs-guide.txt"},{"": "abs-guide.txt"},{"SIZE": "abs-guide.txt"},{"996": "abs-guide.txt"},{"512": "abs-guide.txt"},{"0": "abs-guide.txt"},{"": "abs-guide.txt"},{"RSS SHARE STAT %CPU %MEM": "abs-guide.txt"},{"996": "abs-guide.txt"},{"800 R": "abs-guide.txt"},{"5.6 1.2": "abs-guide.txt"},{"512": "abs-guide.txt"},{"444 S": "abs-guide.txt"},{"0.0 0.6": "abs-guide.txt"},{"0": "abs-guide.txt"},{"0 SW": "abs-guide.txt"},{"0.0 0.0": "abs-guide.txt"},{"": "abs-guide.txt"},{"TIME": "abs-guide.txt"},{"0:00": "abs-guide.txt"},{"0:04": "abs-guide.txt"},{"0:00": "abs-guide.txt"},{"": "abs-guide.txt"},{"2352K buff": "abs-guide.txt"},{"37244K cached": "abs-guide.txt"},{"": "abs-guide.txt"},{"COMMAND": "abs-guide.txt"},{"top": "abs-guide.txt"},{"init": "abs-guide.txt"},{"keventd": "abs-guide.txt"},{"": "abs-guide.txt"},{"nice": "abs-guide.txt"},{"Run a background job with an altered priority. Priorities run from 19 (lowest) to -20 (highest). Only": "abs-guide.txt"},{"root may set the negative (higher) priorities. Related commands are renice and snice, which change": "abs-guide.txt"},{"the priority of a running process or processes, and skill, which sends a kill signal to a process or": "abs-guide.txt"},{"processes.": "abs-guide.txt"},{"nohup": "abs-guide.txt"},{"Keeps a command running even after user logs off. The command will run as a foreground process": "abs-guide.txt"},{"unless followed by &. If you use nohup within a script, consider coupling it with a wait to avoid": "abs-guide.txt"},{"creating an orphan or zombie process.": "abs-guide.txt"},{"pidof": "abs-guide.txt"},{"Identifies process ID (PID) of a running job. Since job control commands, such as kill and renice act": "abs-guide.txt"},{"on the PID of a process (not its name), it is sometimes necessary to identify that PID. The pidof": "abs-guide.txt"},{"command is the approximate counterpart to the $PPID internal variable.": "abs-guide.txt"},{"bash$ pidof xclock": "abs-guide.txt"},{"880": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 17. System and Administrative Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"333": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"Example 17-6. pidof helps kill a process": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# kill-process.sh": "abs-guide.txt"},{"NOPROCESS=2": "abs-guide.txt"},{"process=xxxyyyzzz # Use nonexistent process.": "abs-guide.txt"},{"# For demo purposes only...": "abs-guide.txt"},{"# ... don't want to actually kill any actual process with this script.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# If, for example, you wanted to use this script to logoff the Internet,": "abs-guide.txt"},{"#": "abs-guide.txt"},{"process=pppd": "abs-guide.txt"},{"t=`pidof $process`": "abs-guide.txt"},{"# Find pid (process id) of $process.": "abs-guide.txt"},{"# The pid is needed by 'kill' (can't 'kill' by program name).": "abs-guide.txt"},{"if [ -z \"$t\" ]": "abs-guide.txt"},{"# If process not present, 'pidof' returns null.": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Process $process was not running.\"": "abs-guide.txt"},{"echo \"Nothing killed.\"": "abs-guide.txt"},{"exit $NOPROCESS": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"kill $t": "abs-guide.txt"},{"": "abs-guide.txt"},{"# May need 'kill -9' for stubborn process.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Need a check here to see if process allowed itself to be killed.": "abs-guide.txt"},{"# Perhaps another \" t=`pidof $process` \" or ...": "abs-guide.txt"},{"": "abs-guide.txt"},{"# This entire script could be replaced by": "abs-guide.txt"},{"#": "abs-guide.txt"},{"kill $(pidof -x process_name)": "abs-guide.txt"},{"# or": "abs-guide.txt"},{"#": "abs-guide.txt"},{"killall process_name": "abs-guide.txt"},{"# but it would not be as instructive.": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"fuser": "abs-guide.txt"},{"Identifies the processes (by PID) that are accessing a given file, set of files, or directory. May also be": "abs-guide.txt"},{"invoked with the -k option, which kills those processes. This has interesting implications for system": "abs-guide.txt"},{"security, especially in scripts preventing unauthorized users from accessing system services.": "abs-guide.txt"},{"bash$ fuser -u /usr/bin/vim": "abs-guide.txt"},{"/usr/bin/vim:": "abs-guide.txt"},{"3207e(bozo)": "abs-guide.txt"},{"": "abs-guide.txt"},{"bash$ fuser -u /dev/null": "abs-guide.txt"},{"/dev/null:": "abs-guide.txt"},{"3009(bozo)": "abs-guide.txt"},{"": "abs-guide.txt"},{"3010(bozo)": "abs-guide.txt"},{"": "abs-guide.txt"},{"3197(bozo)": "abs-guide.txt"},{"": "abs-guide.txt"},{"3199(bozo)": "abs-guide.txt"},{"": "abs-guide.txt"},{"One important application for fuser is when physically inserting or removing storage media, such as": "abs-guide.txt"},{"CD ROM disks or USB flash drives. Sometimes trying a umount fails with a device is busy error": "abs-guide.txt"},{"message. This means that some user(s) and/or process(es) are accessing the device. An fuser -um": "abs-guide.txt"},{"/dev/device_name will clear up the mystery, so you can kill any relevant processes.": "abs-guide.txt"},{"bash$ umount /mnt/usbdrive": "abs-guide.txt"},{"umount: /mnt/usbdrive: device is busy": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 17. System and Administrative Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"334": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"bash$ fuser -um /dev/usbdrive": "abs-guide.txt"},{"/mnt/usbdrive:": "abs-guide.txt"},{"1772c(bozo)": "abs-guide.txt"},{"bash$ kill -9 1772": "abs-guide.txt"},{"bash$ umount /mnt/usbdrive": "abs-guide.txt"},{"": "abs-guide.txt"},{"The fuser command, invoked with the -n option identifies the processes accessing a port. This is": "abs-guide.txt"},{"especially useful in combination with nmap.": "abs-guide.txt"},{"root# nmap localhost.localdomain": "abs-guide.txt"},{"PORT": "abs-guide.txt"},{"STATE SERVICE": "abs-guide.txt"},{"25/tcp": "abs-guide.txt"},{"open smtp": "abs-guide.txt"},{"": "abs-guide.txt"},{"root# fuser -un tcp 25": "abs-guide.txt"},{"25/tcp:": "abs-guide.txt"},{"2095(root)": "abs-guide.txt"},{"root# ps ax | grep 2095 | grep -v grep": "abs-guide.txt"},{"2095 ?": "abs-guide.txt"},{"Ss": "abs-guide.txt"},{"0:00 sendmail: accepting connections": "abs-guide.txt"},{"": "abs-guide.txt"},{"cron": "abs-guide.txt"},{"Administrative program scheduler, performing such duties as cleaning up and deleting system log": "abs-guide.txt"},{"files and updating the slocate database. This is the superuser version of at (although each user may": "abs-guide.txt"},{"have their own crontab file which can be changed with the crontab command). It runs as a daemon": "abs-guide.txt"},{"and executes scheduled entries from /etc/crontab.": "abs-guide.txt"},{"Some flavors of Linux run crond, Matthew Dillon's version of cron.": "abs-guide.txt"},{"Process Control and Booting": "abs-guide.txt"},{"init": "abs-guide.txt"},{"The init command is the parent of all processes. Called in the final step of a bootup, init determines": "abs-guide.txt"},{"the runlevel of the system from /etc/inittab. Invoked by its alias telinit, and by root only.": "abs-guide.txt"},{"telinit": "abs-guide.txt"},{"Symlinked to init, this is a means of changing the system runlevel, usually done for system": "abs-guide.txt"},{"maintenance or emergency filesystem repairs. Invoked only by root. This command can be dangerous": "abs-guide.txt"},{"-- be certain you understand it well before using!": "abs-guide.txt"},{"runlevel": "abs-guide.txt"},{"Shows the current and last runlevel, that is, whether the system is halted (runlevel 0), in single-user": "abs-guide.txt"},{"mode (1), in multi-user mode (2 or 3), in X Windows (5), or rebooting (6). This command accesses": "abs-guide.txt"},{"the /var/run/utmp file.": "abs-guide.txt"},{"halt, shutdown, reboot": "abs-guide.txt"},{"Command set to shut the system down, usually just prior to a power down.": "abs-guide.txt"},{"On some Linux distros, the halt command has 755 permissions, so it can be invoked": "abs-guide.txt"},{"by a non-root user. A careless halt in a terminal or a script may shut down the system!": "abs-guide.txt"},{"service": "abs-guide.txt"},{"Starts or stops a system service. The startup scripts in /etc/init.d and /etc/rc.d use this": "abs-guide.txt"},{"command to start services at bootup.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 17. System and Administrative Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"335": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"root# /sbin/service iptables stop": "abs-guide.txt"},{"Flushing firewall rules:": "abs-guide.txt"},{"Setting chains to policy ACCEPT: filter": "abs-guide.txt"},{"Unloading iptables modules:": "abs-guide.txt"},{"": "abs-guide.txt"},{"[": "abs-guide.txt"},{"[": "abs-guide.txt"},{"[": "abs-guide.txt"},{"": "abs-guide.txt"},{"OK ]": "abs-guide.txt"},{"OK ]": "abs-guide.txt"},{"OK ]": "abs-guide.txt"},{"": "abs-guide.txt"},{"Network": "abs-guide.txt"},{"nmap": "abs-guide.txt"},{"Network mapper and port scanner. This command scans a server to locate open ports and the services": "abs-guide.txt"},{"associated with those ports. It can also report information about packet filters and firewalls. This is an": "abs-guide.txt"},{"important security tool for locking down a network against hacking attempts.": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"SERVER=$HOST": "abs-guide.txt"},{"PORT_NUMBER=25": "abs-guide.txt"},{"": "abs-guide.txt"},{"# localhost.localdomain (127.0.0.1).": "abs-guide.txt"},{"# SMTP port.": "abs-guide.txt"},{"": "abs-guide.txt"},{"nmap $SERVER | grep -w \"$PORT_NUMBER\" # Is that particular port open?": "abs-guide.txt"},{"#": "abs-guide.txt"},{"grep -w matches whole words only,": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"so this wouldn't match port 1025, for example.": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"# 25/tcp": "abs-guide.txt"},{"": "abs-guide.txt"},{"open": "abs-guide.txt"},{"": "abs-guide.txt"},{"smtp": "abs-guide.txt"},{"": "abs-guide.txt"},{"ifconfig": "abs-guide.txt"},{"Network interface configuration and tuning utility.": "abs-guide.txt"},{"bash$ ifconfig -a": "abs-guide.txt"},{"lo": "abs-guide.txt"},{"Link encap:Local Loopback": "abs-guide.txt"},{"inet addr:127.0.0.1 Mask:255.0.0.0": "abs-guide.txt"},{"UP LOOPBACK RUNNING MTU:16436 Metric:1": "abs-guide.txt"},{"RX packets:10 errors:0 dropped:0 overruns:0 frame:0": "abs-guide.txt"},{"TX packets:10 errors:0 dropped:0 overruns:0 carrier:0": "abs-guide.txt"},{"collisions:0 txqueuelen:0": "abs-guide.txt"},{"RX bytes:700 (700.0 b) TX bytes:700 (700.0 b)": "abs-guide.txt"},{"": "abs-guide.txt"},{"The ifconfig command is most often used at bootup to set up the interfaces, or to shut them down": "abs-guide.txt"},{"when rebooting.": "abs-guide.txt"},{"# Code snippets from /etc/rc.d/init.d/network": "abs-guide.txt"},{"# ...": "abs-guide.txt"},{"# Check that networking is up.": "abs-guide.txt"},{"[ ${NETWORKING} = \"no\" ] && exit 0": "abs-guide.txt"},{"[ -x /sbin/ifconfig ] || exit 0": "abs-guide.txt"},{"# ...": "abs-guide.txt"},{"for i in $interfaces ; do": "abs-guide.txt"},{"if ifconfig $i 2>/dev/null | grep -q \"UP\" >/dev/null 2>&1 ; then": "abs-guide.txt"},{"action \"Shutting down interface $i: \" ./ifdown $i boot": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# The GNU-specific \"-q\" option to \"grep\" means \"quiet\", i.e.,": "abs-guide.txt"},{"#+ producing no output.": "abs-guide.txt"},{"# Redirecting output to /dev/null is therefore not strictly necessary.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 17. System and Administrative Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"336": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# ...": "abs-guide.txt"},{"echo \"Currently active devices:\"": "abs-guide.txt"},{"echo `/sbin/ifconfig | grep ^[a-z] | awk '{print $1}'`": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^^^^^ should be quoted to prevent globbing.": "abs-guide.txt"},{"# The following also work.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"echo $(/sbin/ifconfig | awk '/^[a-z]/ { print $1 })'": "abs-guide.txt"},{"#": "abs-guide.txt"},{"echo $(/sbin/ifconfig | sed -e 's/ .*//')": "abs-guide.txt"},{"# Thanks, S.C., for additional comments.": "abs-guide.txt"},{"": "abs-guide.txt"},{"See also Example 32-6.": "abs-guide.txt"},{"netstat": "abs-guide.txt"},{"Show current network statistics and information, such as routing tables and active connections. This": "abs-guide.txt"},{"utility accesses information in /proc/net (Chapter 29). See Example 29-4.": "abs-guide.txt"},{"netstat -r is equivalent to route.": "abs-guide.txt"},{"bash$ netstat": "abs-guide.txt"},{"Active Internet connections (w/o servers)": "abs-guide.txt"},{"Proto Recv-Q Send-Q Local Address": "abs-guide.txt"},{"Foreign Address": "abs-guide.txt"},{"State": "abs-guide.txt"},{"Active UNIX domain sockets (w/o servers)": "abs-guide.txt"},{"Proto RefCnt Flags": "abs-guide.txt"},{"Type": "abs-guide.txt"},{"State": "abs-guide.txt"},{"I-Node Path": "abs-guide.txt"},{"unix 11": "abs-guide.txt"},{"[ ]": "abs-guide.txt"},{"DGRAM": "abs-guide.txt"},{"906": "abs-guide.txt"},{"/dev/log": "abs-guide.txt"},{"unix 3": "abs-guide.txt"},{"[ ]": "abs-guide.txt"},{"STREAM": "abs-guide.txt"},{"CONNECTED": "abs-guide.txt"},{"4514": "abs-guide.txt"},{"/tmp/.X11-unix/X0": "abs-guide.txt"},{"unix 3": "abs-guide.txt"},{"[ ]": "abs-guide.txt"},{"STREAM": "abs-guide.txt"},{"CONNECTED": "abs-guide.txt"},{"4513": "abs-guide.txt"},{". . .": "abs-guide.txt"},{"": "abs-guide.txt"},{"A netstat -lptu shows sockets that are listening to ports, and the associated processes.": "abs-guide.txt"},{"This can be useful for determining whether a computer has been hacked or": "abs-guide.txt"},{"compromised.": "abs-guide.txt"},{"iwconfig": "abs-guide.txt"},{"This is the command set for configuring a wireless network. It is the wireless equivalent of ifconfig,": "abs-guide.txt"},{"above.": "abs-guide.txt"},{"ip": "abs-guide.txt"},{"General purpose utility for setting up, changing, and analyzing IP (Internet Protocol) networks and": "abs-guide.txt"},{"attached devices. This command is part of the iproute2 package.": "abs-guide.txt"},{"bash$ ip link show": "abs-guide.txt"},{"1: lo: <LOOPBACK,UP> mtu 16436 qdisc noqueue": "abs-guide.txt"},{"link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00": "abs-guide.txt"},{"2: eth0: <BROADCAST,MULTICAST> mtu 1500 qdisc pfifo_fast qlen 1000": "abs-guide.txt"},{"link/ether 00:d0:59:ce:af:da brd ff:ff:ff:ff:ff:ff": "abs-guide.txt"},{"3: sit0: <NOARP> mtu 1480 qdisc noop": "abs-guide.txt"},{"link/sit 0.0.0.0 brd 0.0.0.0": "abs-guide.txt"},{"": "abs-guide.txt"},{"bash$ ip route list": "abs-guide.txt"},{"169.254.0.0/16 dev lo": "abs-guide.txt"},{"": "abs-guide.txt"},{"scope link": "abs-guide.txt"},{"": "abs-guide.txt"},{"Or, in a script:": "abs-guide.txt"},{"": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# Script by Juan Nicolas Ruiz": "abs-guide.txt"},{"# Used with his kind permission.": "abs-guide.txt"},{"# Setting up (and stopping) a GRE tunnel.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 17. System and Administrative Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"337": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"": "abs-guide.txt"},{"# --- start-tunnel.sh --LOCAL_IP=\"192.168.1.17\"": "abs-guide.txt"},{"REMOTE_IP=\"10.0.5.33\"": "abs-guide.txt"},{"OTHER_IFACE=\"192.168.0.100\"": "abs-guide.txt"},{"REMOTE_NET=\"192.168.3.0/24\"": "abs-guide.txt"},{"/sbin/ip tunnel add netb mode gre remote $REMOTE_IP \\": "abs-guide.txt"},{"local $LOCAL_IP ttl 255": "abs-guide.txt"},{"/sbin/ip addr add $OTHER_IFACE dev netb": "abs-guide.txt"},{"/sbin/ip link set netb up": "abs-guide.txt"},{"/sbin/ip route add $REMOTE_NET dev netb": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"#############################################": "abs-guide.txt"},{"": "abs-guide.txt"},{"# --- stop-tunnel.sh --REMOTE_NET=\"192.168.3.0/24\"": "abs-guide.txt"},{"/sbin/ip route del $REMOTE_NET dev netb": "abs-guide.txt"},{"/sbin/ip link set netb down": "abs-guide.txt"},{"/sbin/ip tunnel del netb": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"route": "abs-guide.txt"},{"Show info about or make changes to the kernel routing table.": "abs-guide.txt"},{"bash$ route": "abs-guide.txt"},{"Destination": "abs-guide.txt"},{"Gateway": "abs-guide.txt"},{"Genmask": "abs-guide.txt"},{"Flags": "abs-guide.txt"},{"pm3-67.bozosisp *": "abs-guide.txt"},{"255.255.255.255 UH": "abs-guide.txt"},{"127.0.0.0": "abs-guide.txt"},{"*": "abs-guide.txt"},{"255.0.0.0": "abs-guide.txt"},{"U": "abs-guide.txt"},{"default": "abs-guide.txt"},{"pm3-67.bozosisp 0.0.0.0": "abs-guide.txt"},{"UG": "abs-guide.txt"},{"": "abs-guide.txt"},{"MSS Window": "abs-guide.txt"},{"40 0": "abs-guide.txt"},{"40 0": "abs-guide.txt"},{"40 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"irtt Iface": "abs-guide.txt"},{"0 ppp0": "abs-guide.txt"},{"0 lo": "abs-guide.txt"},{"0 ppp0": "abs-guide.txt"},{"": "abs-guide.txt"},{"iptables": "abs-guide.txt"},{"The iptables command set is a packet filtering tool used mainly for such security purposes as setting": "abs-guide.txt"},{"up network firewalls. This is a complex tool, and a detailed explanation of its use is beyond the scope": "abs-guide.txt"},{"of this document. Oskar Andreasson's tutorial is a reasonable starting point.": "abs-guide.txt"},{"See also shutting down iptables and Example 30-2.": "abs-guide.txt"},{"chkconfig": "abs-guide.txt"},{"Check network and system configuration. This command lists and manages the network and system": "abs-guide.txt"},{"services started at bootup in the /etc/rc?.d directory.": "abs-guide.txt"},{"Originally a port from IRIX to Red Hat Linux, chkconfig may not be part of the core installation of": "abs-guide.txt"},{"some Linux flavors.": "abs-guide.txt"},{"bash$ chkconfig --list": "abs-guide.txt"},{"atd": "abs-guide.txt"},{"0:off": "abs-guide.txt"},{"rwhod": "abs-guide.txt"},{"0:off": "abs-guide.txt"},{"...": "abs-guide.txt"},{"": "abs-guide.txt"},{"1:off": "abs-guide.txt"},{"1:off": "abs-guide.txt"},{"": "abs-guide.txt"},{"2:off": "abs-guide.txt"},{"2:off": "abs-guide.txt"},{"": "abs-guide.txt"},{"3:on": "abs-guide.txt"},{"3:off": "abs-guide.txt"},{"": "abs-guide.txt"},{"4:on": "abs-guide.txt"},{"4:off": "abs-guide.txt"},{"": "abs-guide.txt"},{"5:on": "abs-guide.txt"},{"5:off": "abs-guide.txt"},{"": "abs-guide.txt"},{"6:off": "abs-guide.txt"},{"6:off": "abs-guide.txt"},{"": "abs-guide.txt"},{"tcpdump": "abs-guide.txt"},{"Network packet \"sniffer.\" This is a tool for analyzing and troubleshooting traffic on a network by": "abs-guide.txt"},{"dumping packet headers that match specified criteria.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 17. System and Administrative Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"338": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"Dump ip packet traffic between hosts bozoville and caduceus:": "abs-guide.txt"},{"bash$ tcpdump ip host bozoville and caduceus": "abs-guide.txt"},{"": "abs-guide.txt"},{"Of course, the output of tcpdump can be parsed with certain of the previously discussed text": "abs-guide.txt"},{"processing utilities.": "abs-guide.txt"},{"Filesystem": "abs-guide.txt"},{"mount": "abs-guide.txt"},{"Mount a filesystem, usually on an external device, such as a floppy or CDROM. The file": "abs-guide.txt"},{"/etc/fstab provides a handy listing of available filesystems, partitions, and devices, including": "abs-guide.txt"},{"options, that may be automatically or manually mounted. The file /etc/mtab shows the currently": "abs-guide.txt"},{"mounted filesystems and partitions (including the virtual ones, such as /proc).": "abs-guide.txt"},{"mount -a mounts all filesystems and partitions listed in /etc/fstab, except those with a noauto": "abs-guide.txt"},{"option. At bootup, a startup script in /etc/rc.d (rc.sysinit or something similar) invokes this": "abs-guide.txt"},{"to get everything mounted.": "abs-guide.txt"},{"mount -t iso9660 /dev/cdrom /mnt/cdrom": "abs-guide.txt"},{"# Mounts CD ROM. ISO 9660 is a standard CD ROM filesystem.": "abs-guide.txt"},{"mount /mnt/cdrom": "abs-guide.txt"},{"# Shortcut, if /mnt/cdrom listed in /etc/fstab": "abs-guide.txt"},{"": "abs-guide.txt"},{"The versatile mount command can even mount an ordinary file on a block device, and the file will act": "abs-guide.txt"},{"as if it were a filesystem. Mount accomplishes that by associating the file with a loopback device. One": "abs-guide.txt"},{"application of this is to mount and examine an ISO9660 filesystem image before burning it onto a": "abs-guide.txt"},{"CDR. [90]": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 17-7. Checking a CD image": "abs-guide.txt"},{"# As root...": "abs-guide.txt"},{"mkdir /mnt/cdtest": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Prepare a mount point, if not already there.": "abs-guide.txt"},{"": "abs-guide.txt"},{"mount -r -t iso9660 -o loop cd-image.iso /mnt/cdtest": "abs-guide.txt"},{"# Mount the image.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"\"-o loop\" option equivalent to \"losetup /dev/loop0\"": "abs-guide.txt"},{"cd /mnt/cdtest": "abs-guide.txt"},{"# Now, check the image.": "abs-guide.txt"},{"ls -alR": "abs-guide.txt"},{"# List the files in the directory tree there.": "abs-guide.txt"},{"# And so forth.": "abs-guide.txt"},{"": "abs-guide.txt"},{"umount": "abs-guide.txt"},{"Unmount a currently mounted filesystem. Before physically removing a previously mounted floppy or": "abs-guide.txt"},{"CDROM disk, the device must be umounted, else filesystem corruption may result.": "abs-guide.txt"},{"umount /mnt/cdrom": "abs-guide.txt"},{"# You may now press the eject button and safely remove the disk.": "abs-guide.txt"},{"": "abs-guide.txt"},{"The automount utility, if properly installed, can mount and unmount floppies or": "abs-guide.txt"},{"CDROM disks as they are accessed or removed. On \"multispindle\" laptops with": "abs-guide.txt"},{"swappable floppy and optical drives, this can cause problems, however.": "abs-guide.txt"},{"gnome-mount": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 17. System and Administrative Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"339": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"The newer Linux distros have deprecated mount and umount. The successor, for command-line": "abs-guide.txt"},{"mounting of removable storage devices, is gnome-mount. It can take the -d option to mount a device": "abs-guide.txt"},{"file by its listing in /dev.": "abs-guide.txt"},{"For example, to mount a USB flash drive:": "abs-guide.txt"},{"bash$ gnome-mount -d /dev/sda1": "abs-guide.txt"},{"gnome-mount 0.4": "abs-guide.txt"},{"": "abs-guide.txt"},{"bash$ df": "abs-guide.txt"},{". . .": "abs-guide.txt"},{"/dev/sda1": "abs-guide.txt"},{"": "abs-guide.txt"},{"63584": "abs-guide.txt"},{"": "abs-guide.txt"},{"12034": "abs-guide.txt"},{"": "abs-guide.txt"},{"51550": "abs-guide.txt"},{"": "abs-guide.txt"},{"19% /media/disk": "abs-guide.txt"},{"": "abs-guide.txt"},{"sync": "abs-guide.txt"},{"Forces an immediate write of all updated data from buffers to hard drive (synchronize drive with": "abs-guide.txt"},{"buffers). While not strictly necessary, a sync assures the sys admin or user that the data just changed": "abs-guide.txt"},{"will survive a sudden power failure. In the olden days, a sync; sync (twice, just to make": "abs-guide.txt"},{"absolutely sure) was a useful precautionary measure before a system reboot.": "abs-guide.txt"},{"At times, you may wish to force an immediate buffer flush, as when securely deleting a file (see": "abs-guide.txt"},{"Example 16-61) or when the lights begin to flicker.": "abs-guide.txt"},{"losetup": "abs-guide.txt"},{"Sets up and configures loopback devices.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 17-8. Creating a filesystem in a file": "abs-guide.txt"},{"SIZE=1000000": "abs-guide.txt"},{"": "abs-guide.txt"},{"# 1 meg": "abs-guide.txt"},{"": "abs-guide.txt"},{"head -c $SIZE < /dev/zero > file": "abs-guide.txt"},{"losetup /dev/loop0 file": "abs-guide.txt"},{"mke2fs /dev/loop0": "abs-guide.txt"},{"mount -o loop /dev/loop0 /mnt": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Set up file of designated size.": "abs-guide.txt"},{"Set it up as loopback device.": "abs-guide.txt"},{"Create filesystem.": "abs-guide.txt"},{"Mount it.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Thanks, S.C.": "abs-guide.txt"},{"": "abs-guide.txt"},{"mkswap": "abs-guide.txt"},{"Creates a swap partition or file. The swap area must subsequently be enabled with swapon.": "abs-guide.txt"},{"swapon, swapoff": "abs-guide.txt"},{"Enable / disable swap partitition or file. These commands usually take effect at bootup and shutdown.": "abs-guide.txt"},{"mke2fs": "abs-guide.txt"},{"Create a Linux ext2 filesystem. This command must be invoked as root.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 17-9. Adding a new hard drive": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Adding a second hard drive to system.": "abs-guide.txt"},{"Software configuration. Assumes hardware already mounted.": "abs-guide.txt"},{"From an article by the author of the ABS Guide.": "abs-guide.txt"},{"In issue #38 of _Linux Gazette_, http://www.linuxgazette.com.": "abs-guide.txt"},{"": "abs-guide.txt"},{"ROOT_UID=0": "abs-guide.txt"},{"E_NOTROOT=67": "abs-guide.txt"},{"": "abs-guide.txt"},{"# This script must be run as root.": "abs-guide.txt"},{"# Non-root exit error.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 17. System and Administrative Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"340": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"if [ \"$UID\" -ne \"$ROOT_UID\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Must be root to run this script.\"": "abs-guide.txt"},{"exit $E_NOTROOT": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# Use with extreme caution!": "abs-guide.txt"},{"# If something goes wrong, you may wipe out your current filesystem.": "abs-guide.txt"},{"": "abs-guide.txt"},{"NEWDISK=/dev/hdb": "abs-guide.txt"},{"MOUNTPOINT=/mnt/newdisk": "abs-guide.txt"},{"": "abs-guide.txt"},{"fdisk $NEWDISK": "abs-guide.txt"},{"mke2fs -cv $NEWDISK1": "abs-guide.txt"},{"# Note:": "abs-guide.txt"},{"^": "abs-guide.txt"},{"mkdir $MOUNTPOINT": "abs-guide.txt"},{"chmod 777 $MOUNTPOINT": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Assumes /dev/hdb vacant. Check!": "abs-guide.txt"},{"# Or choose another mount point.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Check for bad blocks (verbose output).": "abs-guide.txt"},{"/dev/hdb1, *not* /dev/hdb!": "abs-guide.txt"},{"# Makes new drive accessible to all users.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Now, test ...": "abs-guide.txt"},{"mount -t ext2 /dev/hdb1 /mnt/newdisk": "abs-guide.txt"},{"Try creating a directory.": "abs-guide.txt"},{"If it works, umount it, and proceed.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Final step:": "abs-guide.txt"},{"# Add the following line to /etc/fstab.": "abs-guide.txt"},{"# /dev/hdb1 /mnt/newdisk ext2 defaults": "abs-guide.txt"},{"": "abs-guide.txt"},{"1 1": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit": "abs-guide.txt"},{"": "abs-guide.txt"},{"See also Example 17-8 and Example 31-3.": "abs-guide.txt"},{"mkdosfs": "abs-guide.txt"},{"Create a DOS FAT filesystem.": "abs-guide.txt"},{"tune2fs": "abs-guide.txt"},{"Tune ext2 filesystem. May be used to change filesystem parameters, such as maximum mount count.": "abs-guide.txt"},{"This must be invoked as root.": "abs-guide.txt"},{"This is an extremely dangerous command. Use it at your own risk, as you may": "abs-guide.txt"},{"inadvertently destroy your filesystem.": "abs-guide.txt"},{"dumpe2fs": "abs-guide.txt"},{"Dump (list to stdout) very verbose filesystem info. This must be invoked as root.": "abs-guide.txt"},{"root# dumpe2fs /dev/hda7 |": "abs-guide.txt"},{"dumpe2fs 1.19, 13-Jul-2000": "abs-guide.txt"},{"Mount count:": "abs-guide.txt"},{"Maximum mount count:": "abs-guide.txt"},{"": "abs-guide.txt"},{"grep 'ount count'": "abs-guide.txt"},{"for EXT2 FS 0.5b, 95/08/09": "abs-guide.txt"},{"6": "abs-guide.txt"},{"20": "abs-guide.txt"},{"": "abs-guide.txt"},{"hdparm": "abs-guide.txt"},{"List or change hard disk parameters. This command must be invoked as root, and it may be dangerous": "abs-guide.txt"},{"if misused.": "abs-guide.txt"},{"fdisk": "abs-guide.txt"},{"Create or change a partition table on a storage device, usually a hard drive. This command must be": "abs-guide.txt"},{"invoked as root.": "abs-guide.txt"},{"Use this command with extreme caution. If something goes wrong, you may destroy": "abs-guide.txt"},{"Chapter 17. System and Administrative Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"341": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"an existing filesystem.": "abs-guide.txt"},{"fsck, e2fsck, debugfs": "abs-guide.txt"},{"Filesystem check, repair, and debug command set.": "abs-guide.txt"},{"fsck: a front end for checking a UNIX filesystem (may invoke other utilities). The actual filesystem": "abs-guide.txt"},{"type generally defaults to ext2.": "abs-guide.txt"},{"e2fsck: ext2 filesystem checker.": "abs-guide.txt"},{"debugfs: ext2 filesystem debugger. One of the uses of this versatile, but dangerous command is to": "abs-guide.txt"},{"(attempt to) recover deleted files. For advanced users only!": "abs-guide.txt"},{"All of these should be invoked as root, and they can damage or destroy a filesystem if": "abs-guide.txt"},{"misused.": "abs-guide.txt"},{"badblocks": "abs-guide.txt"},{"Checks for bad blocks (physical media flaws) on a storage device. This command finds use when": "abs-guide.txt"},{"formatting a newly installed hard drive or testing the integrity of backup media. [91] As an example,": "abs-guide.txt"},{"badblocks /dev/fd0 tests a floppy disk.": "abs-guide.txt"},{"The badblocks command may be invoked destructively (overwrite all data) or in non-destructive": "abs-guide.txt"},{"read-only mode. If root user owns the device to be tested, as is generally the case, then root must": "abs-guide.txt"},{"invoke this command.": "abs-guide.txt"},{"lsusb, usbmodules": "abs-guide.txt"},{"The lsusb command lists all USB (Universal Serial Bus) buses and the devices hooked up to them.": "abs-guide.txt"},{"The usbmodules command outputs information about the driver modules for connected USB devices.": "abs-guide.txt"},{"bash$ lsusb": "abs-guide.txt"},{"Bus 001 Device 001: ID 0000:0000": "abs-guide.txt"},{"Device Descriptor:": "abs-guide.txt"},{"bLength": "abs-guide.txt"},{"18": "abs-guide.txt"},{"bDescriptorType": "abs-guide.txt"},{"1": "abs-guide.txt"},{"bcdUSB": "abs-guide.txt"},{"1.00": "abs-guide.txt"},{"bDeviceClass": "abs-guide.txt"},{"9 Hub": "abs-guide.txt"},{"bDeviceSubClass": "abs-guide.txt"},{"0": "abs-guide.txt"},{"bDeviceProtocol": "abs-guide.txt"},{"0": "abs-guide.txt"},{"bMaxPacketSize0": "abs-guide.txt"},{"8": "abs-guide.txt"},{"idVendor": "abs-guide.txt"},{"0x0000": "abs-guide.txt"},{"idProduct": "abs-guide.txt"},{"0x0000": "abs-guide.txt"},{". . .": "abs-guide.txt"},{"": "abs-guide.txt"},{"lspci": "abs-guide.txt"},{"Lists pci busses present.": "abs-guide.txt"},{"bash$ lspci": "abs-guide.txt"},{"00:00.0 Host": "abs-guide.txt"},{"(Brookdale)": "abs-guide.txt"},{"00:01.0 PCI": "abs-guide.txt"},{"(Brookdale)": "abs-guide.txt"},{"00:1d.0 USB": "abs-guide.txt"},{"00:1d.1 USB": "abs-guide.txt"},{"00:1d.2 USB": "abs-guide.txt"},{"00:1e.0 PCI": "abs-guide.txt"},{"": "abs-guide.txt"},{"bridge: Intel Corporation 82845 845": "abs-guide.txt"},{"Chipset Host Bridge (rev 04)": "abs-guide.txt"},{"bridge: Intel Corporation 82845 845": "abs-guide.txt"},{"Chipset AGP Bridge (rev 04)": "abs-guide.txt"},{"Controller: Intel Corporation 82801CA/CAM USB (Hub #1)": "abs-guide.txt"},{"Controller: Intel Corporation 82801CA/CAM USB (Hub #2)": "abs-guide.txt"},{"Controller: Intel Corporation 82801CA/CAM USB (Hub #3)": "abs-guide.txt"},{"bridge: Intel Corporation 82801 Mobile PCI Bridge (rev": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 17. System and Administrative Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"(rev 02)": "abs-guide.txt"},{"(rev 02)": "abs-guide.txt"},{"(rev 02)": "abs-guide.txt"},{"42)": "abs-guide.txt"},{"": "abs-guide.txt"},{"342": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{". . .": "abs-guide.txt"},{"": "abs-guide.txt"},{"mkbootdisk": "abs-guide.txt"},{"Creates a boot floppy which can be used to bring up the system if, for example, the MBR (master boot": "abs-guide.txt"},{"record) becomes corrupted. Of special interest is the --iso option, which uses mkisofs to create a": "abs-guide.txt"},{"bootable ISO9660 filesystem image suitable for burning a bootable CDR.": "abs-guide.txt"},{"The mkbootdisk command is actually a Bash script, written by Erik Troan, in the /sbin directory.": "abs-guide.txt"},{"mkisofs": "abs-guide.txt"},{"Creates an ISO9660 filesystem suitable for a CDR image.": "abs-guide.txt"},{"chroot": "abs-guide.txt"},{"CHange ROOT directory. Normally commands are fetched from $PATH, relative to /, the default": "abs-guide.txt"},{"root directory. This changes the root directory to a different one (and also changes the working": "abs-guide.txt"},{"directory to there). This is useful for security purposes, for instance when the system administrator": "abs-guide.txt"},{"wishes to restrict certain users, such as those telnetting in, to a secured portion of the filesystem (this": "abs-guide.txt"},{"is sometimes referred to as confining a guest user to a \"chroot jail\"). Note that after a chroot, the": "abs-guide.txt"},{"execution path for system binaries is no longer valid.": "abs-guide.txt"},{"A chroot /opt would cause references to /usr/bin to be translated to /opt/usr/bin.": "abs-guide.txt"},{"Likewise, chroot /aaa/bbb /bin/ls would redirect future instances of ls to /aaa/bbb as": "abs-guide.txt"},{"the base directory, rather than / as is normally the case. An alias XX 'chroot /aaa/bbb ls' in a user's": "abs-guide.txt"},{"~/.bashrc effectively restricts which portion of the filesystem she may run command \"XX\" on.": "abs-guide.txt"},{"The chroot command is also handy when running from an emergency boot floppy (chroot to": "abs-guide.txt"},{"/dev/fd0), or as an option to lilo when recovering from a system crash. Other uses include": "abs-guide.txt"},{"installation from a different filesystem (an rpm option) or running a readonly filesystem from a CD": "abs-guide.txt"},{"ROM. Invoke only as root, and use with care.": "abs-guide.txt"},{"It might be necessary to copy certain system files to a chrooted directory, since the": "abs-guide.txt"},{"normal $PATH can no longer be relied upon.": "abs-guide.txt"},{"lockfile": "abs-guide.txt"},{"This utility is part of the procmail package (www.procmail.org). It creates a lock file, a semaphore": "abs-guide.txt"},{"that controls access to a file, device, or resource.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Definition: A semaphore is a flag or signal. (The usage originated in railroading, where a": "abs-guide.txt"},{"colored flag, lantern, or striped movable arm semaphore indicated whether a particular track was in": "abs-guide.txt"},{"use and therefore unavailable for another train.) A UNIX process can check the appropriate": "abs-guide.txt"},{"semaphore to determine whether a particular resource is available/accessible.": "abs-guide.txt"},{"The lock file serves as a flag that this particular file, device, or resource is in use by a process (and is": "abs-guide.txt"},{"therefore \"busy\"). The presence of a lock file permits only restricted access (or no access) to other": "abs-guide.txt"},{"processes.": "abs-guide.txt"},{"lockfile /home/bozo/lockfiles/$0.lock": "abs-guide.txt"},{"# Creates a write-protected lockfile prefixed with the name of the script.": "abs-guide.txt"},{"lockfile /home/bozo/lockfiles/${0##*/}.lock": "abs-guide.txt"},{"# A safer version of the above, as pointed out by E. Choroba.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Lock files are used in such applications as protecting system mail folders from simultaneously being": "abs-guide.txt"},{"changed by multiple users, indicating that a modem port is being accessed, and showing that an": "abs-guide.txt"},{"instance of Firefox is using its cache. Scripts may check for the existence of a lock file created by a": "abs-guide.txt"},{"Chapter 17. System and Administrative Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"343": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"certain process to check if that process is running. Note that if a script attempts to create a lock file": "abs-guide.txt"},{"that already exists, the script will likely hang.": "abs-guide.txt"},{"Normally, applications create and check for lock files in the /var/lock directory. [92] A script can": "abs-guide.txt"},{"test for the presence of a lock file by something like the following.": "abs-guide.txt"},{"appname=xyzip": "abs-guide.txt"},{"# Application \"xyzip\" created lock file \"/var/lock/xyzip.lock\".": "abs-guide.txt"},{"if [ -e \"/var/lock/$appname.lock\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"#+ Prevent other programs & scripts": "abs-guide.txt"},{"# from accessing files/resources used by xyzip.": "abs-guide.txt"},{"...": "abs-guide.txt"},{"": "abs-guide.txt"},{"flock": "abs-guide.txt"},{"Much less useful than the lockfile command is flock. It sets an \"advisory\" lock on a file and then": "abs-guide.txt"},{"executes a command while the lock is on. This is to prevent any other process from setting a lock on": "abs-guide.txt"},{"that file until completion of the specified command.": "abs-guide.txt"},{"flock $0 cat $0 > lockfile__$0": "abs-guide.txt"},{"# Set a lock on the script the above line appears in,": "abs-guide.txt"},{"#+ while listing the script to stdout.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Unlike lockfile, flock does not automatically create a lock file.": "abs-guide.txt"},{"mknod": "abs-guide.txt"},{"Creates block or character device files (may be necessary when installing new hardware on the": "abs-guide.txt"},{"system). The MAKEDEV utility has virtually all of the functionality of mknod, and is easier to use.": "abs-guide.txt"},{"MAKEDEV": "abs-guide.txt"},{"Utility for creating device files. It must be run as root, and in the /dev directory. It is a sort of": "abs-guide.txt"},{"advanced version of mknod.": "abs-guide.txt"},{"tmpwatch": "abs-guide.txt"},{"Automatically deletes files which have not been accessed within a specified period of time. Usually": "abs-guide.txt"},{"invoked by cron to remove stale log files.": "abs-guide.txt"},{"Backup": "abs-guide.txt"},{"dump, restore": "abs-guide.txt"},{"The dump command is an elaborate filesystem backup utility, generally used on larger installations": "abs-guide.txt"},{"and networks. [93] It reads raw disk partitions and writes a backup file in a binary format. Files to be": "abs-guide.txt"},{"backed up may be saved to a variety of storage media, including disks and tape drives. The restore": "abs-guide.txt"},{"command restores backups made with dump.": "abs-guide.txt"},{"fdformat": "abs-guide.txt"},{"Perform a low-level format on a floppy disk (/dev/fd0*).": "abs-guide.txt"},{"System Resources": "abs-guide.txt"},{"ulimit": "abs-guide.txt"},{"Sets an upper limit on use of system resources. Usually invoked with the -f option, which sets a limit": "abs-guide.txt"},{"on file size (ulimit -f 1000 limits files to 1 meg maximum). [94] The -t option limits the coredump": "abs-guide.txt"},{"size (ulimit -c 0 eliminates coredumps). Normally, the value of ulimit would be set in": "abs-guide.txt"},{"/etc/profile and/or ~/.bash_profile (see Appendix H).": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 17. System and Administrative Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"344": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"Judicious use of ulimit can protect a system against the dreaded fork bomb.": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# This script is for illustrative purposes only.": "abs-guide.txt"},{"# Run it at your own peril -- it WILL freeze your system.": "abs-guide.txt"},{"while true": "abs-guide.txt"},{"do": "abs-guide.txt"},{"$0 &": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Endless loop.": "abs-guide.txt"},{"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"This script invokes itself . . .": "abs-guide.txt"},{"forks an infinite number of times . . .": "abs-guide.txt"},{"until the system freezes up because all resources exhausted.": "abs-guide.txt"},{"This is the notorious \"sorcerer's appentice\" scenario.": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Will not exit here, because this script will never terminate.": "abs-guide.txt"},{"": "abs-guide.txt"},{"A ulimit -Hu XX (where XX is the user process limit) in /etc/profile would abort this": "abs-guide.txt"},{"script when it exceeded the preset limit.": "abs-guide.txt"},{"quota": "abs-guide.txt"},{"Display user or group disk quotas.": "abs-guide.txt"},{"setquota": "abs-guide.txt"},{"Set user or group disk quotas from the command-line.": "abs-guide.txt"},{"umask": "abs-guide.txt"},{"User file creation permissions mask. Limit the default file attributes for a particular user. All files": "abs-guide.txt"},{"created by that user take on the attributes specified by umask. The (octal) value passed to umask": "abs-guide.txt"},{"defines the file permissions disabled. For example, umask 022 ensures that new files will have at": "abs-guide.txt"},{"most 755 permissions (777 NAND 022). [95] Of course, the user may later change the attributes of": "abs-guide.txt"},{"particular files with chmod. The usual practice is to set the value of umask in /etc/profile": "abs-guide.txt"},{"and/or ~/.bash_profile (see Appendix H).": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 17-10. Using umask to hide an output file from prying eyes": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# rot13a.sh: Same as \"rot13.sh\" script, but writes output to \"secure\" file.": "abs-guide.txt"},{"# Usage: ./rot13a.sh filename": "abs-guide.txt"},{"# or": "abs-guide.txt"},{"./rot13a.sh <filename": "abs-guide.txt"},{"# or": "abs-guide.txt"},{"./rot13a.sh and supply keyboard input (stdin)": "abs-guide.txt"},{"umask 177": "abs-guide.txt"},{"": "abs-guide.txt"},{"# File creation mask.": "abs-guide.txt"},{"# Files created by this script": "abs-guide.txt"},{"#+ will have 600 permissions.": "abs-guide.txt"},{"": "abs-guide.txt"},{"OUTFILE=decrypted.txt": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Results output to file \"decrypted.txt\"": "abs-guide.txt"},{"#+ which can only be read/written": "abs-guide.txt"},{"# by invoker of script (or root).": "abs-guide.txt"},{"": "abs-guide.txt"},{"cat \"$@\" | tr 'a-zA-Z' 'n-za-mN-ZA-M' > $OUTFILE": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^^ Input from stdin or a file.": "abs-guide.txt"},{"^^^^^^^^^^ Output redirected to file.": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"rdev": "abs-guide.txt"},{"Get info about or make changes to root device, swap space, or video mode. The functionality of rdev": "abs-guide.txt"},{"has generally been taken over by lilo, but rdev remains useful for setting up a ram disk. This is a": "abs-guide.txt"},{"dangerous command, if misused.": "abs-guide.txt"},{"Modules": "abs-guide.txt"},{"Chapter 17. System and Administrative Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"345": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"lsmod": "abs-guide.txt"},{"List installed kernel modules.": "abs-guide.txt"},{"bash$ lsmod": "abs-guide.txt"},{"Module": "abs-guide.txt"},{"autofs": "abs-guide.txt"},{"opl3": "abs-guide.txt"},{"serial_cs": "abs-guide.txt"},{"sb": "abs-guide.txt"},{"uart401": "abs-guide.txt"},{"sound": "abs-guide.txt"},{"soundlow": "abs-guide.txt"},{"soundcore": "abs-guide.txt"},{"ds": "abs-guide.txt"},{"i82365": "abs-guide.txt"},{"pcmcia_core": "abs-guide.txt"},{"": "abs-guide.txt"},{"Size Used by": "abs-guide.txt"},{"9456": "abs-guide.txt"},{"2 (autoclean)": "abs-guide.txt"},{"11376": "abs-guide.txt"},{"0": "abs-guide.txt"},{"5456": "abs-guide.txt"},{"0 (unused)": "abs-guide.txt"},{"34752": "abs-guide.txt"},{"0": "abs-guide.txt"},{"6384": "abs-guide.txt"},{"0 [sb]": "abs-guide.txt"},{"58368": "abs-guide.txt"},{"0 [opl3 sb uart401]": "abs-guide.txt"},{"464": "abs-guide.txt"},{"0 [sound]": "abs-guide.txt"},{"2800": "abs-guide.txt"},{"6 [sb sound]": "abs-guide.txt"},{"6448": "abs-guide.txt"},{"2 [serial_cs]": "abs-guide.txt"},{"22928": "abs-guide.txt"},{"2": "abs-guide.txt"},{"45984": "abs-guide.txt"},{"0 [serial_cs ds i82365]": "abs-guide.txt"},{"": "abs-guide.txt"},{"Doing a cat /proc/modules gives the same information.": "abs-guide.txt"},{"insmod": "abs-guide.txt"},{"Force installation of a kernel module (use modprobe instead, when possible). Must be invoked as": "abs-guide.txt"},{"root.": "abs-guide.txt"},{"rmmod": "abs-guide.txt"},{"Force unloading of a kernel module. Must be invoked as root.": "abs-guide.txt"},{"modprobe": "abs-guide.txt"},{"Module loader that is normally invoked automatically in a startup script. Must be invoked as root.": "abs-guide.txt"},{"depmod": "abs-guide.txt"},{"Creates module dependency file. Usually invoked from a startup script.": "abs-guide.txt"},{"modinfo": "abs-guide.txt"},{"Output information about a loadable module.": "abs-guide.txt"},{"bash$ modinfo hid": "abs-guide.txt"},{"filename:": "abs-guide.txt"},{"/lib/modules/2.4.20-6/kernel/drivers/usb/hid.o": "abs-guide.txt"},{"description: \"USB HID support drivers\"": "abs-guide.txt"},{"author:": "abs-guide.txt"},{"\"Andreas Gal, Vojtech Pavlik <vojtech@suse.cz>\"": "abs-guide.txt"},{"license:": "abs-guide.txt"},{"\"GPL\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"Miscellaneous": "abs-guide.txt"},{"env": "abs-guide.txt"},{"Runs a program or script with certain environmental variables set or changed (without changing the": "abs-guide.txt"},{"overall system environment). The [varname=xxx] permits changing the environmental variable": "abs-guide.txt"},{"varname for the duration of the script. With no options specified, this command lists all the": "abs-guide.txt"},{"environmental variable settings. [96]": "abs-guide.txt"},{"The first line of a script (the \"sha-bang\" line) may use env when the path to the shell": "abs-guide.txt"},{"or interpreter is unknown.": "abs-guide.txt"},{"#! /usr/bin/env perl": "abs-guide.txt"},{"print \"This Perl script will run,\\n\";": "abs-guide.txt"},{"print \"even when I don't know where to find Perl.\\n\";": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 17. System and Administrative Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"346": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# Good for portable cross-platform scripts,": "abs-guide.txt"},{"# where the Perl binaries may not be in the expected place.": "abs-guide.txt"},{"# Thanks, S.C.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Or even ...": "abs-guide.txt"},{"#!/bin/env bash": "abs-guide.txt"},{"# Queries the $PATH enviromental variable for the location of bash.": "abs-guide.txt"},{"# Therefore ...": "abs-guide.txt"},{"# This script will run where Bash is not in its usual place, in /bin.": "abs-guide.txt"},{"...": "abs-guide.txt"},{"": "abs-guide.txt"},{"ldd": "abs-guide.txt"},{"Show shared lib dependencies for an executable file.": "abs-guide.txt"},{"bash$ ldd /bin/ls": "abs-guide.txt"},{"libc.so.6 => /lib/libc.so.6 (0x4000c000)": "abs-guide.txt"},{"/lib/ld-linux.so.2 => /lib/ld-linux.so.2 (0x80000000)": "abs-guide.txt"},{"": "abs-guide.txt"},{"watch": "abs-guide.txt"},{"Run a command repeatedly, at specified time intervals.": "abs-guide.txt"},{"The default is two-second intervals, but this may be changed with the -n option.": "abs-guide.txt"},{"watch -n 5 tail /var/log/messages": "abs-guide.txt"},{"# Shows tail end of system log, /var/log/messages, every five seconds.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Unfortunately, piping the output of watch command to grep does not work.": "abs-guide.txt"},{"strip": "abs-guide.txt"},{"Remove the debugging symbolic references from an executable binary. This decreases its size, but": "abs-guide.txt"},{"makes debugging it impossible.": "abs-guide.txt"},{"This command often occurs in a Makefile, but rarely in a shell script.": "abs-guide.txt"},{"nm": "abs-guide.txt"},{"List symbols in an unstripped compiled binary.": "abs-guide.txt"},{"xrandr": "abs-guide.txt"},{"Command-line tool for manipulating the root window of the screen.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 17-11. Backlight: changes the brightness of the (laptop) screen backlight": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# backlight.sh": "abs-guide.txt"},{"# reldate 02dec2011": "abs-guide.txt"},{"# A bug in Fedora Core 16/17 messes up the keyboard backlight controls.": "abs-guide.txt"},{"# This script is a quick-n-dirty workaround, essentially a shell wrapper": "abs-guide.txt"},{"#+ for xrandr. It gives more control than on-screen sliders and widgets.": "abs-guide.txt"},{"OUTPUT=$(xrandr | grep LV | awk '{print $1}')": "abs-guide.txt"},{"# Get display name!": "abs-guide.txt"},{"INCR=.05": "abs-guide.txt"},{"# For finer-grained control, set INCR to .03 or .02.": "abs-guide.txt"},{"old_brightness=$(xrandr --verbose | grep rightness | awk '{ print $2 }')": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [ -z \"$1\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 17. System and Administrative Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"347": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"bright=1": "abs-guide.txt"},{"": "abs-guide.txt"},{"# If no command-line arg, set brightness to 1.0 (default).": "abs-guide.txt"},{"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"if [ \"$1\" = \"+\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"bright=$(echo \"scale=2; $old_brightness + $INCR\" | bc)": "abs-guide.txt"},{"": "abs-guide.txt"},{"# +.05": "abs-guide.txt"},{"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"if [ \"$1\" = \"-\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"bright=$(echo \"scale=2; $old_brightness - $INCR\" | bc)": "abs-guide.txt"},{"": "abs-guide.txt"},{"# -.05": "abs-guide.txt"},{"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"if [ \"$1\" = \"#\" ]": "abs-guide.txt"},{"# Echoes current brightness; does not change it.": "abs-guide.txt"},{"then": "abs-guide.txt"},{"bright=$old_brightness": "abs-guide.txt"},{"else": "abs-guide.txt"},{"if [[ \"$1\" = \"h\" || \"$1\" = \"H\" ]]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"Usage:\"": "abs-guide.txt"},{"echo \"$0 [No args]": "abs-guide.txt"},{"Sets/resets brightness to default (1.0).\"": "abs-guide.txt"},{"echo \"$0 +": "abs-guide.txt"},{"Increments brightness by 0.5.\"": "abs-guide.txt"},{"echo \"$0 Decrements brightness by 0.5.\"": "abs-guide.txt"},{"echo \"$0 #": "abs-guide.txt"},{"Echoes current brightness without changing it.\"": "abs-guide.txt"},{"echo \"$0 N (number)": "abs-guide.txt"},{"Sets brightness to N (useful range .7 - 1.2).\"": "abs-guide.txt"},{"echo \"$0 h [H]": "abs-guide.txt"},{"Echoes this help message.\"": "abs-guide.txt"},{"echo \"$0 any-other": "abs-guide.txt"},{"Gives xrandr usage message.\"": "abs-guide.txt"},{"bright=$old_brightness": "abs-guide.txt"},{"else": "abs-guide.txt"},{"bright=\"$1\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"xrandr --output \"$OUTPUT\" --brightness \"$bright\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# See xrandr manpage.": "abs-guide.txt"},{"# As root!": "abs-guide.txt"},{"": "abs-guide.txt"},{"E_CHANGE0=$?": "abs-guide.txt"},{"echo \"Current brightness = $bright\"": "abs-guide.txt"},{"exit $E_CHANGE0": "abs-guide.txt"},{"": "abs-guide.txt"},{"# =========== Or, alternately . . . ==================== #": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# backlight2.sh": "abs-guide.txt"},{"# reldate 20jun2012": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"A bug in Fedora Core 16/17 messes up the keyboard backlight controls.": "abs-guide.txt"},{"This is a quick-n-dirty workaround, an alternate to backlight.sh.": "abs-guide.txt"},{"": "abs-guide.txt"},{"target_dir=\\": "abs-guide.txt"},{"/sys/devices/pci0000:00/0000:00:01.0/0000:01:00.0/backlight/acpi_video0": "abs-guide.txt"},{"# Hardware directory.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 17. System and Administrative Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"348": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"actual_brightness=$(cat $target_dir/actual_brightness)": "abs-guide.txt"},{"max_brightness=$(cat $target_dir/max_brightness)": "abs-guide.txt"},{"Brightness=$target_dir/brightness": "abs-guide.txt"},{"let \"req_brightness = actual_brightness\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Requested brightness.": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [ \"$1\" = \"-\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"# Decrement brightness 1 notch.": "abs-guide.txt"},{"let \"req_brightness = $actual_brightness - 1\"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"if [ \"$1\" = \"+\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"# Increment brightness 1 notch.": "abs-guide.txt"},{"let \"req_brightness = $actual_brightness + 1\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"if [ $req_brightness -gt $max_brightness ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"req_brightness=$max_brightness": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# Do not exceed max. hardware design brightness.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"Old brightness = $actual_brightness\"": "abs-guide.txt"},{"echo \"Max brightness = $max_brightness\"": "abs-guide.txt"},{"echo \"Requested brightness = $req_brightness\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"# =====================================": "abs-guide.txt"},{"echo $req_brightness > $Brightness": "abs-guide.txt"},{"# Must be root for this to take effect.": "abs-guide.txt"},{"E_CHANGE1=$?": "abs-guide.txt"},{"# Successful?": "abs-guide.txt"},{"# =====================================": "abs-guide.txt"},{"if [ \"$?\" -eq 0 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Changed brightness!\"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo \"Failed to change brightness!\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"act_brightness=$(cat $Brightness)": "abs-guide.txt"},{"echo \"Actual brightness = $act_brightness\"": "abs-guide.txt"},{"scale0=2": "abs-guide.txt"},{"sf=100 # Scale factor.": "abs-guide.txt"},{"pct=$(echo \"scale=$scale0; $act_brightness / $max_brightness * $sf\" | bc)": "abs-guide.txt"},{"echo \"Percentage brightness = $pct%\"": "abs-guide.txt"},{"exit $E_CHANGE1": "abs-guide.txt"},{"": "abs-guide.txt"},{"rdist": "abs-guide.txt"},{"Remote distribution client: synchronizes, clones, or backs up a file system on a remote server.": "abs-guide.txt"},{"": "abs-guide.txt"},{"17.1. Analyzing a System Script": "abs-guide.txt"},{"Using our knowledge of administrative commands, let us examine a system script. One of the shortest and": "abs-guide.txt"},{"simplest to understand scripts is \"killall,\" [97] used to suspend running processes at system shutdown.": "abs-guide.txt"},{"Chapter 17. System and Administrative Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"349": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"Example 17-12. killall, from /etc/rc.d/init.d": "abs-guide.txt"},{"#!/bin/sh": "abs-guide.txt"},{"# --> Comments added by the author of this document marked by \"# -->\".": "abs-guide.txt"},{"# --> This is part of the 'rc' script package": "abs-guide.txt"},{"# --> by Miquel van Smoorenburg, <miquels@drinkel.nl.mugnet.org>.": "abs-guide.txt"},{"# --> This particular script seems to be Red Hat / FC specific": "abs-guide.txt"},{"# --> (may not be present in other distributions).": "abs-guide.txt"},{"# Bring down all unneeded services that are still running": "abs-guide.txt"},{"#+ (there shouldn't be any, so this is just a sanity check)": "abs-guide.txt"},{"for i in /var/lock/subsys/*; do": "abs-guide.txt"},{"# --> Standard for/in loop, but since \"do\" is on same line,": "abs-guide.txt"},{"# --> it is necessary to add \";\".": "abs-guide.txt"},{"# Check if the script is there.": "abs-guide.txt"},{"[ ! -f $i ] && continue": "abs-guide.txt"},{"# --> This is a clever use of an \"and list\", equivalent to:": "abs-guide.txt"},{"# --> if [ ! -f \"$i\" ]; then continue": "abs-guide.txt"},{"# Get the subsystem name.": "abs-guide.txt"},{"subsys=${i#/var/lock/subsys/}": "abs-guide.txt"},{"# --> Match variable name, which, in this case, is the file name.": "abs-guide.txt"},{"# --> This is the exact equivalent of subsys=`basename $i`.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"-->": "abs-guide.txt"},{"-->+": "abs-guide.txt"},{"-->+": "abs-guide.txt"},{"-->": "abs-guide.txt"},{"": "abs-guide.txt"},{"It gets it from the lock file name": "abs-guide.txt"},{"(if there is a lock file,": "abs-guide.txt"},{"that's proof the process has been running).": "abs-guide.txt"},{"See the \"lockfile\" entry, above.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Bring the subsystem down.": "abs-guide.txt"},{"if [ -f /etc/rc.d/init.d/$subsys.init ]; then": "abs-guide.txt"},{"/etc/rc.d/init.d/$subsys.init stop": "abs-guide.txt"},{"else": "abs-guide.txt"},{"/etc/rc.d/init.d/$subsys stop": "abs-guide.txt"},{"# --> Suspend running jobs and daemons.": "abs-guide.txt"},{"# --> Note that \"stop\" is a positional parameter,": "abs-guide.txt"},{"# -->+ not a shell builtin.": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"done": "abs-guide.txt"},{"": "abs-guide.txt"},{"That wasn't so bad. Aside from a little fancy footwork with variable matching, there is no new material there.": "abs-guide.txt"},{"Exercise 1. In /etc/rc.d/init.d, analyze the halt script. It is a bit longer than killall, but similar in": "abs-guide.txt"},{"concept. Make a copy of this script somewhere in your home directory and experiment with it (do not run it as": "abs-guide.txt"},{"root). Do a simulated run with the -vn flags (sh -vn scriptname). Add extensive comments. Change": "abs-guide.txt"},{"the commands to echos.": "abs-guide.txt"},{"Exercise 2. Look at some of the more complex scripts in /etc/rc.d/init.d. Try to understand at least": "abs-guide.txt"},{"portions of them. Follow the above procedure to analyze them. For some additional insight, you might also": "abs-guide.txt"},{"examine the file sysvinitfiles in /usr/share/doc/initscripts-?.??, which is part of the": "abs-guide.txt"},{"\"initscripts\" documentation.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 17. System and Administrative Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"350": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fPart 5. Advanced Topics": "abs-guide.txt"},{"At this point, we are ready to delve into certain of the difficult and unusual aspects of scripting. Along the": "abs-guide.txt"},{"way, we will attempt to \"push the envelope\" in various ways and examine boundary conditions (what happens": "abs-guide.txt"},{"when we move into uncharted territory?).": "abs-guide.txt"},{"Table of Contents": "abs-guide.txt"},{"18. Regular Expressions": "abs-guide.txt"},{"18.1. A Brief Introduction to Regular Expressions": "abs-guide.txt"},{"18.2. Globbing": "abs-guide.txt"},{"19. Here Documents": "abs-guide.txt"},{"19.1. Here Strings": "abs-guide.txt"},{"20. I/O Redirection": "abs-guide.txt"},{"20.1. Using exec": "abs-guide.txt"},{"20.2. Redirecting Code Blocks": "abs-guide.txt"},{"20.3. Applications": "abs-guide.txt"},{"21. Subshells": "abs-guide.txt"},{"22. Restricted Shells": "abs-guide.txt"},{"23. Process Substitution": "abs-guide.txt"},{"24. Functions": "abs-guide.txt"},{"24.1. Complex Functions and Function Complexities": "abs-guide.txt"},{"24.2. Local Variables": "abs-guide.txt"},{"24.3. Recursion Without Local Variables": "abs-guide.txt"},{"25. Aliases": "abs-guide.txt"},{"26. List Constructs": "abs-guide.txt"},{"27. Arrays": "abs-guide.txt"},{"28. Indirect References": "abs-guide.txt"},{"29. /dev and /proc": "abs-guide.txt"},{"29.1. /dev": "abs-guide.txt"},{"29.2. /proc": "abs-guide.txt"},{"30. Network Programming": "abs-guide.txt"},{"31. Of Zeros and Nulls": "abs-guide.txt"},{"32. Debugging": "abs-guide.txt"},{"33. Options": "abs-guide.txt"},{"34. Gotchas": "abs-guide.txt"},{"35. Scripting With Style": "abs-guide.txt"},{"35.1. Unofficial Shell Scripting Stylesheet": "abs-guide.txt"},{"36. Miscellany": "abs-guide.txt"},{"36.1. Interactive and non-interactive shells and scripts": "abs-guide.txt"},{"36.2. Shell Wrappers": "abs-guide.txt"},{"36.3. Tests and Comparisons: Alternatives": "abs-guide.txt"},{"36.4. Recursion: a script calling itself": "abs-guide.txt"},{"36.5. \"Colorizing\" Scripts": "abs-guide.txt"},{"36.6. Optimizations": "abs-guide.txt"},{"36.7. Assorted Tips": "abs-guide.txt"},{"36.8. Security Issues": "abs-guide.txt"},{"36.9. Portability Issues": "abs-guide.txt"},{"36.10. Shell Scripting Under Windows": "abs-guide.txt"},{"37. Bash, versions 2, 3, and 4": "abs-guide.txt"},{"Part 5. Advanced Topics": "abs-guide.txt"},{"": "abs-guide.txt"},{"351": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"37.1. Bash, version 2": "abs-guide.txt"},{"37.2. Bash, version 3": "abs-guide.txt"},{"37.3. Bash, version 4": "abs-guide.txt"},{"": "abs-guide.txt"},{"Part 5. Advanced Topics": "abs-guide.txt"},{"": "abs-guide.txt"},{"352": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fChapter 18. Regular Expressions": "abs-guide.txt"},{". . . the intellectual activity associated with": "abs-guide.txt"},{"software development is largely one of gaining": "abs-guide.txt"},{"insight.": "abs-guide.txt"},{"--Stowe Boyd": "abs-guide.txt"},{"To fully utilize the power of shell scripting, you need to master Regular Expressions. Certain commands and": "abs-guide.txt"},{"utilities commonly used in scripts, such as grep, expr, sed and awk, interpret and use REs. As of version 3,": "abs-guide.txt"},{"Bash has acquired its own RE-match operator: =~.": "abs-guide.txt"},{"": "abs-guide.txt"},{"18.1. A Brief Introduction to Regular Expressions": "abs-guide.txt"},{"An expression is a string of characters. Those characters having an interpretation above and beyond their": "abs-guide.txt"},{"literal meaning are called metacharacters. A quote symbol, for example, may denote speech by a person,": "abs-guide.txt"},{"ditto, or a meta-meaning [98] for the symbols that follow. Regular Expressions are sets of characters and/or": "abs-guide.txt"},{"metacharacters that match (or specify) patterns.": "abs-guide.txt"},{"A Regular Expression contains one or more of the following:": "abs-guide.txt"},{"\u2022 A character set. These are the characters retaining their literal meaning. The simplest type of Regular": "abs-guide.txt"},{"Expression consists only of a character set, with no metacharacters.": "abs-guide.txt"},{"\u2022": "abs-guide.txt"},{"An anchor. These designate (anchor) the position in the line of text that the RE is to match. For": "abs-guide.txt"},{"example, ^, and $ are anchors.": "abs-guide.txt"},{"\u2022 Modifiers. These expand or narrow (modify) the range of text the RE is to match. Modifiers include": "abs-guide.txt"},{"the asterisk, brackets, and the backslash.": "abs-guide.txt"},{"The main uses for Regular Expressions (REs) are text searches and string manipulation. An RE matches a": "abs-guide.txt"},{"single character or a set of characters -- a string or a part of a string.": "abs-guide.txt"},{"\u2022 The asterisk -- * -- matches any number of repeats of the character string or RE preceding it,": "abs-guide.txt"},{"including zero instances.": "abs-guide.txt"},{"\"1133*\" matches 11 + one or more 3's: 113, 1133, 1133333, and so forth.": "abs-guide.txt"},{"\u2022 The dot -- . -- matches any one character, except a newline. [99]": "abs-guide.txt"},{"\"13.\" matches 13 + at least one of any character (including a space):": "abs-guide.txt"},{"1133, 11333, but not 13 (additional character missing).": "abs-guide.txt"},{"See Example 16-18 for a demonstration of dot single-character matching.": "abs-guide.txt"},{"\u2022 The caret -- ^ -- matches the beginning of a line, but sometimes, depending on context, negates the": "abs-guide.txt"},{"meaning of a set of characters in an RE.": "abs-guide.txt"},{"\u2022": "abs-guide.txt"},{"The dollar sign -- $ -- at the end of an RE matches the end of a line.": "abs-guide.txt"},{"\"XXX$\" matches XXX at the end of a line.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 18. Regular Expressions": "abs-guide.txt"},{"": "abs-guide.txt"},{"353": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"\"^$\" matches blank lines.": "abs-guide.txt"},{"\u2022": "abs-guide.txt"},{"Brackets -- [...] -- enclose a set of characters to match in a single RE.": "abs-guide.txt"},{"\"[xyz]\" matches any one of the characters x, y, or z.": "abs-guide.txt"},{"\"[c-n]\" matches any one of the characters in the range c to n.": "abs-guide.txt"},{"\"[B-Pk-y]\" matches any one of the characters in the ranges B to P and k to y.": "abs-guide.txt"},{"\"[a-z0-9]\" matches any single lowercase letter or any digit.": "abs-guide.txt"},{"\"[^b-d]\" matches any character except those in the range b to d. This is an instance of ^ negating or": "abs-guide.txt"},{"inverting the meaning of the following RE (taking on a role similar to ! in a different context).": "abs-guide.txt"},{"Combined sequences of bracketed characters match common word patterns. \"[Yy][Ee][Ss]\" matches": "abs-guide.txt"},{"yes, Yes, YES, yEs, and so forth. \"[0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9][0-9][0-9]\" matches any": "abs-guide.txt"},{"Social Security number.": "abs-guide.txt"},{"\u2022": "abs-guide.txt"},{"The backslash -- \\ -- escapes a special character, which means that character gets interpreted literally": "abs-guide.txt"},{"(and is therefore no longer special).": "abs-guide.txt"},{"A \"\\$\" reverts back to its literal meaning of \"$\", rather than its RE meaning of end-of-line. Likewise a": "abs-guide.txt"},{"\"\\\\\" has the literal meaning of \"\\\".": "abs-guide.txt"},{"\u2022": "abs-guide.txt"},{"Escaped \"angle brackets\" -- \\<...\\> -- mark word boundaries.": "abs-guide.txt"},{"The angle brackets must be escaped, since otherwise they have only their literal character meaning.": "abs-guide.txt"},{"\"\\<the\\>\" matches the word \"the,\" but not the words \"them,\" \"there,\" \"other,\" etc.": "abs-guide.txt"},{"bash$ cat textfile": "abs-guide.txt"},{"This is line 1, of which there is only one instance.": "abs-guide.txt"},{"This is the only instance of line 2.": "abs-guide.txt"},{"This is line 3, another line.": "abs-guide.txt"},{"This is line 4.": "abs-guide.txt"},{"": "abs-guide.txt"},{"bash$ grep 'the' textfile": "abs-guide.txt"},{"This is line 1, of which there is only one instance.": "abs-guide.txt"},{"This is the only instance of line 2.": "abs-guide.txt"},{"This is line 3, another line.": "abs-guide.txt"},{"": "abs-guide.txt"},{"bash$ grep '\\<the\\>' textfile": "abs-guide.txt"},{"This is the only instance of line 2.": "abs-guide.txt"},{"": "abs-guide.txt"},{"The only way to be certain that a particular RE works is to test it.": "abs-guide.txt"},{"TEST FILE: tstfile": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 18. Regular Expressions": "abs-guide.txt"},{"": "abs-guide.txt"},{"# No match.": "abs-guide.txt"},{"# No match.": "abs-guide.txt"},{"": "abs-guide.txt"},{"354": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"Run": "abs-guide.txt"},{"": "abs-guide.txt"},{"grep \"1133*\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"This": "abs-guide.txt"},{"This": "abs-guide.txt"},{"This": "abs-guide.txt"},{"This": "abs-guide.txt"},{"This": "abs-guide.txt"},{"This": "abs-guide.txt"},{"This": "abs-guide.txt"},{"This": "abs-guide.txt"},{"": "abs-guide.txt"},{"line": "abs-guide.txt"},{"line": "abs-guide.txt"},{"line": "abs-guide.txt"},{"line": "abs-guide.txt"},{"line": "abs-guide.txt"},{"line": "abs-guide.txt"},{"line": "abs-guide.txt"},{"line": "abs-guide.txt"},{"": "abs-guide.txt"},{"bash$": "abs-guide.txt"},{"Run": "abs-guide.txt"},{"This": "abs-guide.txt"},{"This": "abs-guide.txt"},{"This": "abs-guide.txt"},{"This": "abs-guide.txt"},{"": "abs-guide.txt"},{"contains": "abs-guide.txt"},{"contains": "abs-guide.txt"},{"contains": "abs-guide.txt"},{"contains": "abs-guide.txt"},{"contains": "abs-guide.txt"},{"contains": "abs-guide.txt"},{"contains": "abs-guide.txt"},{"contains": "abs-guide.txt"},{"": "abs-guide.txt"},{"grep": "abs-guide.txt"},{"grep": "abs-guide.txt"},{"line": "abs-guide.txt"},{"line": "abs-guide.txt"},{"line": "abs-guide.txt"},{"line": "abs-guide.txt"},{"": "abs-guide.txt"},{"on this file.": "abs-guide.txt"},{"": "abs-guide.txt"},{"the number": "abs-guide.txt"},{"the number": "abs-guide.txt"},{"the number": "abs-guide.txt"},{"the number": "abs-guide.txt"},{"the number": "abs-guide.txt"},{"the number": "abs-guide.txt"},{"the number": "abs-guide.txt"},{"no numbers": "abs-guide.txt"},{"": "abs-guide.txt"},{"113.": "abs-guide.txt"},{"13.": "abs-guide.txt"},{"133.": "abs-guide.txt"},{"1133.": "abs-guide.txt"},{"113312.": "abs-guide.txt"},{"1112.": "abs-guide.txt"},{"113312312.": "abs-guide.txt"},{"at all.": "abs-guide.txt"},{"": "abs-guide.txt"},{"\"1133*\" tstfile": "abs-guide.txt"},{"\"1133*\" on this file.": "abs-guide.txt"},{"contains the number 113.": "abs-guide.txt"},{"contains the number 1133.": "abs-guide.txt"},{"contains the number 113312.": "abs-guide.txt"},{"contains the number 113312312.": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Match.": "abs-guide.txt"},{"No match.": "abs-guide.txt"},{"No match.": "abs-guide.txt"},{"Match.": "abs-guide.txt"},{"No match.": "abs-guide.txt"},{"No match.": "abs-guide.txt"},{"Match.": "abs-guide.txt"},{"Match.": "abs-guide.txt"},{"No match.": "abs-guide.txt"},{"Match.": "abs-guide.txt"},{"No match.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Match.": "abs-guide.txt"},{"# Match.": "abs-guide.txt"},{"# Match.": "abs-guide.txt"},{"# Match.": "abs-guide.txt"},{"# Match.": "abs-guide.txt"},{"": "abs-guide.txt"},{"\u2022 Extended REs. Additional metacharacters added to the basic set. Used in egrep, awk, and Perl.": "abs-guide.txt"},{"\u2022": "abs-guide.txt"},{"The question mark -- ? -- matches zero or one of the previous RE. It is generally used for matching": "abs-guide.txt"},{"single characters.": "abs-guide.txt"},{"\u2022": "abs-guide.txt"},{"The plus -- + -- matches one or more of the previous RE. It serves a role similar to the *, but does not": "abs-guide.txt"},{"match zero occurrences.": "abs-guide.txt"},{"# GNU versions of sed and awk can use \"+\",": "abs-guide.txt"},{"# but it needs to be escaped.": "abs-guide.txt"},{"echo a111b | sed -ne '/a1\\+b/p'": "abs-guide.txt"},{"echo a111b | grep 'a1\\+b'": "abs-guide.txt"},{"echo a111b | gawk '/a1+b/'": "abs-guide.txt"},{"# All of above are equivalent.": "abs-guide.txt"},{"# Thanks, S.C.": "abs-guide.txt"},{"": "abs-guide.txt"},{"\u2022 Escaped \"curly brackets\" -- \\{ \\} -- indicate the number of occurrences of a preceding RE to match.": "abs-guide.txt"},{"It is necessary to escape the curly brackets since they have only their literal character meaning": "abs-guide.txt"},{"otherwise. This usage is technically not part of the basic RE set.": "abs-guide.txt"},{"\"[0-9]\\{5\\}\" matches exactly five digits (characters in the range of 0 to 9).": "abs-guide.txt"},{"Curly brackets are not available as an RE in the \"classic\" (non-POSIX compliant)": "abs-guide.txt"},{"version of awk. However, the GNU extended version of awk, gawk, has the": "abs-guide.txt"},{"--re-interval option that permits them (without being escaped).": "abs-guide.txt"},{"bash$ echo 2222 | gawk --re-interval '/2{3}/'": "abs-guide.txt"},{"2222": "abs-guide.txt"},{"": "abs-guide.txt"},{"Perl and some egrep versions do not require escaping the curly brackets.": "abs-guide.txt"},{"\u2022": "abs-guide.txt"},{"Parentheses -- ( ) -- enclose a group of REs. They are useful with the following \"|\" operator and in": "abs-guide.txt"},{"substring extraction using expr.": "abs-guide.txt"},{"Chapter 18. Regular Expressions": "abs-guide.txt"},{"": "abs-guide.txt"},{"355": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"\u2022 The -- | -- \"or\" RE operator matches any of a set of alternate characters.": "abs-guide.txt"},{"bash$ egrep 're(a|e)d' misc.txt": "abs-guide.txt"},{"People who read seem to be better informed than those who do not.": "abs-guide.txt"},{"The clarinet produces sound by the vibration of its reed.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Some versions of sed, ed, and ex support escaped versions of the extended Regular Expressions": "abs-guide.txt"},{"described above, as do the GNU utilities.": "abs-guide.txt"},{"\u2022 POSIX Character Classes. [:class:]": "abs-guide.txt"},{"This is an alternate method of specifying a range of characters to match.": "abs-guide.txt"},{"\u2022 [:alnum:] matches alphabetic or numeric characters. This is equivalent to A-Za-z0-9.": "abs-guide.txt"},{"\u2022 [:alpha:] matches alphabetic characters. This is equivalent to A-Za-z.": "abs-guide.txt"},{"\u2022 [:blank:] matches a space or a tab.": "abs-guide.txt"},{"\u2022 [:cntrl:] matches control characters.": "abs-guide.txt"},{"\u2022 [:digit:] matches (decimal) digits. This is equivalent to 0-9.": "abs-guide.txt"},{"\u2022 [:graph:] (graphic printable characters). Matches characters in the range of ASCII 33 - 126. This": "abs-guide.txt"},{"is the same as [:print:], below, but excluding the space character.": "abs-guide.txt"},{"\u2022 [:lower:] matches lowercase alphabetic characters. This is equivalent to a-z.": "abs-guide.txt"},{"\u2022 [:print:] (printable characters). Matches characters in the range of ASCII 32 - 126. This is the": "abs-guide.txt"},{"same as [:graph:], above, but adding the space character.": "abs-guide.txt"},{"\u2022 [:space:] matches whitespace characters (space and horizontal tab).": "abs-guide.txt"},{"\u2022 [:upper:] matches uppercase alphabetic characters. This is equivalent to A-Z.": "abs-guide.txt"},{"\u2022 [:xdigit:] matches hexadecimal digits. This is equivalent to 0-9A-Fa-f.": "abs-guide.txt"},{"POSIX character classes generally require quoting or double brackets ([[ ]]).": "abs-guide.txt"},{"bash$ grep [[:digit:]] test.file": "abs-guide.txt"},{"abc=723": "abs-guide.txt"},{"": "abs-guide.txt"},{"# ...": "abs-guide.txt"},{"if [[ $arow =~ [[:digit:]] ]]": "abs-guide.txt"},{"# Numerical input?": "abs-guide.txt"},{"then": "abs-guide.txt"},{"# POSIX char class": "abs-guide.txt"},{"if [[ $acol =~ [[:alpha:]] ]] # Number followed by a letter? Illegal!": "abs-guide.txt"},{"# ...": "abs-guide.txt"},{"# From ktour.sh example script.": "abs-guide.txt"},{"": "abs-guide.txt"},{"These character classes may even be used with globbing, to a limited extent.": "abs-guide.txt"},{"bash$ ls -l ?[[:digit:]][[:digit:]]?": "abs-guide.txt"},{"-rw-rw-r-1 bozo bozo": "abs-guide.txt"},{"0 Aug 21 14:47 a33b": "abs-guide.txt"},{"": "abs-guide.txt"},{"POSIX character classes are used in Example 16-21 and Example 16-22.": "abs-guide.txt"},{"Sed, awk, and Perl, used as filters in scripts, take REs as arguments when \"sifting\" or transforming files or I/O": "abs-guide.txt"},{"streams. See Example A-12 and Example A-16 for illustrations of this.": "abs-guide.txt"},{"The standard reference on this complex topic is Friedl's Mastering Regular Expressions. Sed & Awk, by": "abs-guide.txt"},{"Dougherty and Robbins, also gives a very lucid treatment of REs. See the Bibliography for more information": "abs-guide.txt"},{"on these books.": "abs-guide.txt"},{"Chapter 18. Regular Expressions": "abs-guide.txt"},{"": "abs-guide.txt"},{"356": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"": "abs-guide.txt"},{"18.2. Globbing": "abs-guide.txt"},{"Bash itself cannot recognize Regular Expressions. Inside scripts, it is commands and utilities -- such as sed": "abs-guide.txt"},{"and awk -- that interpret RE's.": "abs-guide.txt"},{"Bash does carry out filename expansion [100] -- a process known as globbing -- but this does not use the": "abs-guide.txt"},{"standard RE set. Instead, globbing recognizes and expands wild cards. Globbing interprets the standard wild": "abs-guide.txt"},{"card characters [101] -- * and ?, character lists in square brackets, and certain other special characters (such as": "abs-guide.txt"},{"^ for negating the sense of a match). There are important limitations on wild card characters in globbing,": "abs-guide.txt"},{"however. Strings containing * will not match filenames that start with a dot, as, for example, .bashrc. [102]": "abs-guide.txt"},{"Likewise, the ? has a different meaning in globbing than as part of an RE.": "abs-guide.txt"},{"bash$ ls -l": "abs-guide.txt"},{"total 2": "abs-guide.txt"},{"-rw-rw-r--rw-rw-r--rw-rw-r--rw-rw-r--rw-rw-r--": "abs-guide.txt"},{"": "abs-guide.txt"},{"1": "abs-guide.txt"},{"1": "abs-guide.txt"},{"1": "abs-guide.txt"},{"1": "abs-guide.txt"},{"1": "abs-guide.txt"},{"": "abs-guide.txt"},{"bozo": "abs-guide.txt"},{"bozo": "abs-guide.txt"},{"bozo": "abs-guide.txt"},{"bozo": "abs-guide.txt"},{"bozo": "abs-guide.txt"},{"": "abs-guide.txt"},{"bash$ ls -l t?.sh": "abs-guide.txt"},{"-rw-rw-r-1 bozo": "abs-guide.txt"},{"": "abs-guide.txt"},{"bozo": "abs-guide.txt"},{"bozo": "abs-guide.txt"},{"bozo": "abs-guide.txt"},{"bozo": "abs-guide.txt"},{"bozo": "abs-guide.txt"},{"": "abs-guide.txt"},{"bozo": "abs-guide.txt"},{"": "abs-guide.txt"},{"0": "abs-guide.txt"},{"0": "abs-guide.txt"},{"0": "abs-guide.txt"},{"466": "abs-guide.txt"},{"758": "abs-guide.txt"},{"": "abs-guide.txt"},{"Aug 6": "abs-guide.txt"},{"Aug 6": "abs-guide.txt"},{"Aug 6": "abs-guide.txt"},{"Aug 6": "abs-guide.txt"},{"Jul 30": "abs-guide.txt"},{"": "abs-guide.txt"},{"466 Aug": "abs-guide.txt"},{"": "abs-guide.txt"},{"18:42": "abs-guide.txt"},{"18:42": "abs-guide.txt"},{"18:42": "abs-guide.txt"},{"17:48": "abs-guide.txt"},{"09:02": "abs-guide.txt"},{"": "abs-guide.txt"},{"a.1": "abs-guide.txt"},{"b.1": "abs-guide.txt"},{"c.1": "abs-guide.txt"},{"t2.sh": "abs-guide.txt"},{"test1.txt": "abs-guide.txt"},{"": "abs-guide.txt"},{"6 17:48 t2.sh": "abs-guide.txt"},{"": "abs-guide.txt"},{"bash$ ls -l [ab]*": "abs-guide.txt"},{"-rw-rw-r-1 bozo bozo": "abs-guide.txt"},{"-rw-rw-r-1 bozo bozo": "abs-guide.txt"},{"": "abs-guide.txt"},{"0 Aug 6 18:42 a.1": "abs-guide.txt"},{"0 Aug 6 18:42 b.1": "abs-guide.txt"},{"": "abs-guide.txt"},{"bash$ ls -l [a-c]*": "abs-guide.txt"},{"-rw-rw-r-1 bozo bozo": "abs-guide.txt"},{"-rw-rw-r-1 bozo bozo": "abs-guide.txt"},{"-rw-rw-r-1 bozo bozo": "abs-guide.txt"},{"": "abs-guide.txt"},{"0 Aug 6 18:42 a.1": "abs-guide.txt"},{"0 Aug 6 18:42 b.1": "abs-guide.txt"},{"0 Aug 6 18:42 c.1": "abs-guide.txt"},{"": "abs-guide.txt"},{"bash$ ls -l [^ab]*": "abs-guide.txt"},{"-rw-rw-r-1 bozo bozo": "abs-guide.txt"},{"-rw-rw-r-1 bozo bozo": "abs-guide.txt"},{"-rw-rw-r-1 bozo bozo": "abs-guide.txt"},{"": "abs-guide.txt"},{"0 Aug 6 18:42 c.1": "abs-guide.txt"},{"466 Aug 6 17:48 t2.sh": "abs-guide.txt"},{"758 Jul 30 09:02 test1.txt": "abs-guide.txt"},{"": "abs-guide.txt"},{"bash$ ls -l {b*,c*,*est*}": "abs-guide.txt"},{"-rw-rw-r-1 bozo bozo": "abs-guide.txt"},{"-rw-rw-r-1 bozo bozo": "abs-guide.txt"},{"-rw-rw-r-1 bozo bozo": "abs-guide.txt"},{"": "abs-guide.txt"},{"0 Aug 6 18:42 b.1": "abs-guide.txt"},{"0 Aug 6 18:42 c.1": "abs-guide.txt"},{"758 Jul 30 09:02 test1.txt": "abs-guide.txt"},{"": "abs-guide.txt"},{"Bash performs filename expansion on unquoted command-line arguments. The echo command demonstrates": "abs-guide.txt"},{"this.": "abs-guide.txt"},{"bash$ echo *": "abs-guide.txt"},{"a.1 b.1 c.1 t2.sh test1.txt": "abs-guide.txt"},{"bash$ echo t*": "abs-guide.txt"},{"t2.sh test1.txt": "abs-guide.txt"},{"bash$ echo t?.sh": "abs-guide.txt"},{"t2.sh": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 18. Regular Expressions": "abs-guide.txt"},{"": "abs-guide.txt"},{"357": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"It is possible to modify the way Bash interprets special characters in globbing. A set -f command": "abs-guide.txt"},{"disables globbing, and the nocaseglob and nullglob options to shopt change globbing behavior.": "abs-guide.txt"},{"See also Example 11-5.": "abs-guide.txt"},{"Filenames with embedded whitespace can cause globbing to choke. David Wheeler shows how to avoid": "abs-guide.txt"},{"many such pitfalls.": "abs-guide.txt"},{"IFS=\"$(printf '\\n\\t')\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Remove space.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Correct glob use:": "abs-guide.txt"},{"# Always use for-loop, prefix glob, check if exists file.": "abs-guide.txt"},{"for file in ./* ; do": "abs-guide.txt"},{"# Use ./* ... NEVER bare *": "abs-guide.txt"},{"if [ -e \"$file\" ] ; then": "abs-guide.txt"},{"# Check whether file exists.": "abs-guide.txt"},{"COMMAND ... \"$file\" ...": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"done": "abs-guide.txt"},{"# This example taken from David Wheeler's site, with permission.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 18. Regular Expressions": "abs-guide.txt"},{"": "abs-guide.txt"},{"358": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fChapter 19. Here Documents": "abs-guide.txt"},{"Here and now, boys.": "abs-guide.txt"},{"--Aldous Huxley, Island": "abs-guide.txt"},{"A here document is a special-purpose code block. It uses a form of I/O redirection to feed a command list to": "abs-guide.txt"},{"an interactive program or a command, such as ftp, cat, or the ex text editor.": "abs-guide.txt"},{"COMMAND <<InputComesFromHERE": "abs-guide.txt"},{"...": "abs-guide.txt"},{"...": "abs-guide.txt"},{"...": "abs-guide.txt"},{"InputComesFromHERE": "abs-guide.txt"},{"": "abs-guide.txt"},{"A limit string delineates (frames) the command list. The special symbol << precedes the limit string. This has": "abs-guide.txt"},{"the effect of redirecting the output of a command block into the stdin of the program or command. It is": "abs-guide.txt"},{"similar to interactive-program < command-file, where command-file contains": "abs-guide.txt"},{"command #1": "abs-guide.txt"},{"command #2": "abs-guide.txt"},{"...": "abs-guide.txt"},{"": "abs-guide.txt"},{"The here document equivalent looks like this:": "abs-guide.txt"},{"interactive-program <<LimitString": "abs-guide.txt"},{"command #1": "abs-guide.txt"},{"command #2": "abs-guide.txt"},{"...": "abs-guide.txt"},{"LimitString": "abs-guide.txt"},{"": "abs-guide.txt"},{"Choose a limit string sufficiently unusual that it will not occur anywhere in the command list and confuse": "abs-guide.txt"},{"matters.": "abs-guide.txt"},{"Note that here documents may sometimes be used to good effect with non-interactive utilities and commands,": "abs-guide.txt"},{"such as, for example, wall.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 19-1. broadcast: Sends message to everyone logged in": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"wall <<zzz23EndOfMessagezzz23": "abs-guide.txt"},{"E-mail your noontime orders for pizza to the system administrator.": "abs-guide.txt"},{"(Add an extra dollar for anchovy or mushroom topping.)": "abs-guide.txt"},{"# Additional message text goes here.": "abs-guide.txt"},{"# Note: 'wall' prints comment lines.": "abs-guide.txt"},{"zzz23EndOfMessagezzz23": "abs-guide.txt"},{"# Could have been done more efficiently by": "abs-guide.txt"},{"#": "abs-guide.txt"},{"wall <message-file": "abs-guide.txt"},{"# However, embedding the message template in a script": "abs-guide.txt"},{"#+ is a quick-and-dirty one-off solution.": "abs-guide.txt"},{"exit": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 19. Here Documents": "abs-guide.txt"},{"": "abs-guide.txt"},{"359": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"Even such unlikely candidates as the vi text editor lend themselves to here documents.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 19-2. dummyfile: Creates a 2-line dummy file": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# Noninteractive use of 'vi' to edit a file.": "abs-guide.txt"},{"# Emulates 'sed'.": "abs-guide.txt"},{"E_BADARGS=85": "abs-guide.txt"},{"if [ -z \"$1\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Usage: `basename $0` filename\"": "abs-guide.txt"},{"exit $E_BADARGS": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"TARGETFILE=$1": "abs-guide.txt"},{"# Insert 2 lines in file, then save.": "abs-guide.txt"},{"#--------Begin here document-----------#": "abs-guide.txt"},{"vi $TARGETFILE <<x23LimitStringx23": "abs-guide.txt"},{"i": "abs-guide.txt"},{"This is line 1 of the example file.": "abs-guide.txt"},{"This is line 2 of the example file.": "abs-guide.txt"},{"^[": "abs-guide.txt"},{"ZZ": "abs-guide.txt"},{"x23LimitStringx23": "abs-guide.txt"},{"#----------End here document-----------#": "abs-guide.txt"},{"# Note that ^[ above is a literal escape": "abs-guide.txt"},{"#+ typed by Control-V <Esc>.": "abs-guide.txt"},{"# Bram Moolenaar points out that this may not work with 'vim'": "abs-guide.txt"},{"#+ because of possible problems with terminal interaction.": "abs-guide.txt"},{"exit": "abs-guide.txt"},{"": "abs-guide.txt"},{"The above script could just as effectively have been implemented with ex, rather than vi. Here documents": "abs-guide.txt"},{"containing a list of ex commands are common enough to form their own category, known as ex scripts.": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# Replace all instances of \"Smith\" with \"Jones\"": "abs-guide.txt"},{"#+ in files with a \".txt\" filename suffix.": "abs-guide.txt"},{"ORIGINAL=Smith": "abs-guide.txt"},{"REPLACEMENT=Jones": "abs-guide.txt"},{"for word in $(fgrep -l $ORIGINAL *.txt)": "abs-guide.txt"},{"do": "abs-guide.txt"},{"# ------------------------------------ex $word <<EOF": "abs-guide.txt"},{":%s/$ORIGINAL/$REPLACEMENT/g": "abs-guide.txt"},{":wq": "abs-guide.txt"},{"EOF": "abs-guide.txt"},{"# :%s is the \"ex\" substitution command.": "abs-guide.txt"},{"# :wq is write-and-quit.": "abs-guide.txt"},{"# ------------------------------------done": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 19. Here Documents": "abs-guide.txt"},{"": "abs-guide.txt"},{"360": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"Analogous to \"ex scripts\" are cat scripts.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 19-3. Multi-line message using cat": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# 'echo' is fine for printing single line messages,": "abs-guide.txt"},{"#+ but somewhat problematic for for message blocks.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"A 'cat' here document overcomes this limitation.": "abs-guide.txt"},{"cat <<End-of-message": "abs-guide.txt"},{"------------------------------------This is line 1 of the message.": "abs-guide.txt"},{"This is line 2 of the message.": "abs-guide.txt"},{"This is line 3 of the message.": "abs-guide.txt"},{"This is line 4 of the message.": "abs-guide.txt"},{"This is the last line of the message.": "abs-guide.txt"},{"------------------------------------End-of-message": "abs-guide.txt"},{"# Replacing line 7, above, with": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"cat > $Newfile <<End-of-message": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"^^^^^^^^^^": "abs-guide.txt"},{"#+ writes the output to the file $Newfile, rather than to stdout.": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"#-------------------------------------------# Code below disabled, due to \"exit 0\" above.": "abs-guide.txt"},{"# S.C. points out that the following also works.": "abs-guide.txt"},{"echo \"------------------------------------This is line 1 of the message.": "abs-guide.txt"},{"This is line 2 of the message.": "abs-guide.txt"},{"This is line 3 of the message.": "abs-guide.txt"},{"This is line 4 of the message.": "abs-guide.txt"},{"This is the last line of the message.": "abs-guide.txt"},{"-------------------------------------\"": "abs-guide.txt"},{"# However, text may not include double quotes unless they are escaped.": "abs-guide.txt"},{"": "abs-guide.txt"},{"The - option to mark a here document limit string (<<-LimitString) suppresses leading tabs (but not": "abs-guide.txt"},{"spaces) in the output. This may be useful in making a script more readable.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 19-4. Multi-line message, with tabs suppressed": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# Same as previous example, but...": "abs-guide.txt"},{"# The - option to a here document <<#+ suppresses leading tabs in the body of the document,": "abs-guide.txt"},{"#+ but *not* spaces.": "abs-guide.txt"},{"cat <<-ENDOFMESSAGE": "abs-guide.txt"},{"This is line 1 of the message.": "abs-guide.txt"},{"This is line 2 of the message.": "abs-guide.txt"},{"This is line 3 of the message.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 19. Here Documents": "abs-guide.txt"},{"": "abs-guide.txt"},{"361": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"This is line 4 of the message.": "abs-guide.txt"},{"This is the last line of the message.": "abs-guide.txt"},{"ENDOFMESSAGE": "abs-guide.txt"},{"# The output of the script will be flush left.": "abs-guide.txt"},{"# Leading tab in each line will not show.": "abs-guide.txt"},{"# Above 5 lines of \"message\" prefaced by a tab, not spaces.": "abs-guide.txt"},{"# Spaces not affected by": "abs-guide.txt"},{"<<- .": "abs-guide.txt"},{"# Note that this option has no effect on *embedded* tabs.": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"A here document supports parameter and command substitution. It is therefore possible to pass different": "abs-guide.txt"},{"parameters to the body of the here document, changing its output accordingly.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 19-5. Here document with replaceable parameters": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# Another 'cat' here document, using parameter substitution.": "abs-guide.txt"},{"# Try it with no command-line parameters,": "abs-guide.txt"},{"./scriptname": "abs-guide.txt"},{"# Try it with one command-line parameter,": "abs-guide.txt"},{"./scriptname Mortimer": "abs-guide.txt"},{"# Try it with one two-word quoted command-line parameter,": "abs-guide.txt"},{"#": "abs-guide.txt"},{"./scriptname \"Mortimer Jones\"": "abs-guide.txt"},{"CMDLINEPARAM=1": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Expect at least command-line parameter.": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [ $# -ge $CMDLINEPARAM ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"NAME=$1": "abs-guide.txt"},{"# If more than one command-line param,": "abs-guide.txt"},{"#+ then just take the first.": "abs-guide.txt"},{"else": "abs-guide.txt"},{"NAME=\"John Doe\" # Default, if no command-line parameter.": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"RESPONDENT=\"the author of this fine script\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"cat <<Endofmessage": "abs-guide.txt"},{"Hello, there, $NAME.": "abs-guide.txt"},{"Greetings to you, $NAME, from $RESPONDENT.": "abs-guide.txt"},{"# This comment shows up in the output (why?).": "abs-guide.txt"},{"Endofmessage": "abs-guide.txt"},{"# Note that the blank lines show up in the output.": "abs-guide.txt"},{"# So does the comment.": "abs-guide.txt"},{"exit": "abs-guide.txt"},{"": "abs-guide.txt"},{"This is a useful script containing a here document with parameter substitution.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 19-6. Upload a file pair to Sunsite incoming directory": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 19. Here Documents": "abs-guide.txt"},{"": "abs-guide.txt"},{"362": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# upload.sh": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Upload file pair (Filename.lsm, Filename.tar.gz)": "abs-guide.txt"},{"to incoming directory at Sunsite/UNC (ibiblio.org).": "abs-guide.txt"},{"Filename.tar.gz is the tarball itself.": "abs-guide.txt"},{"Filename.lsm is the descriptor file.": "abs-guide.txt"},{"Sunsite requires \"lsm\" file, otherwise will bounce contributions.": "abs-guide.txt"},{"": "abs-guide.txt"},{"E_ARGERROR=85": "abs-guide.txt"},{"if [ -z \"$1\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Usage: `basename $0` Filename-to-upload\"": "abs-guide.txt"},{"exit $E_ARGERROR": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"Filename=`basename $1`": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Strips pathname out of file name.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Server=\"ibiblio.org\"": "abs-guide.txt"},{"Directory=\"/incoming/Linux\"": "abs-guide.txt"},{"# These need not be hard-coded into script,": "abs-guide.txt"},{"#+ but may instead be changed to command-line argument.": "abs-guide.txt"},{"Password=\"your.e-mail.address\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Change above to suit.": "abs-guide.txt"},{"": "abs-guide.txt"},{"ftp -n $Server <<End-Of-Session": "abs-guide.txt"},{"# -n option disables auto-logon": "abs-guide.txt"},{"user anonymous \"$Password\"": "abs-guide.txt"},{"binary": "abs-guide.txt"},{"bell": "abs-guide.txt"},{"cd $Directory": "abs-guide.txt"},{"put \"$Filename.lsm\"": "abs-guide.txt"},{"put \"$Filename.tar.gz\"": "abs-guide.txt"},{"bye": "abs-guide.txt"},{"End-Of-Session": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"If this doesn't work, then try:": "abs-guide.txt"},{"quote user anonymous \"$Password\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Ring 'bell' after each file transfer.": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Quoting or escaping the \"limit string\" at the head of a here document disables parameter substitution within its": "abs-guide.txt"},{"body. The reason for this is that quoting/escaping the limit string effectively escapes the $, `, and \\ special": "abs-guide.txt"},{"characters, and causes them to be interpreted literally. (Thank you, Allen Halsey, for pointing this out.)": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 19-7. Parameter substitution turned off": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# A 'cat' here-document, but with parameter substitution disabled.": "abs-guide.txt"},{"NAME=\"John Doe\"": "abs-guide.txt"},{"RESPONDENT=\"the author of this fine script\"": "abs-guide.txt"},{"cat <<'Endofmessage'": "abs-guide.txt"},{"Hello, there, $NAME.": "abs-guide.txt"},{"Greetings to you, $NAME, from $RESPONDENT.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 19. Here Documents": "abs-guide.txt"},{"": "abs-guide.txt"},{"363": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"Endofmessage": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"No parameter substitution when the \"limit string\" is quoted or escaped.": "abs-guide.txt"},{"Either of the following at the head of the here document would have": "abs-guide.txt"},{"the same effect.": "abs-guide.txt"},{"cat <<\"Endofmessage\"": "abs-guide.txt"},{"cat <<\\Endofmessage": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"And, likewise:": "abs-guide.txt"},{"": "abs-guide.txt"},{"cat <<\"SpecialCharTest\"": "abs-guide.txt"},{"Directory listing would follow": "abs-guide.txt"},{"if limit string were not quoted.": "abs-guide.txt"},{"`ls -l`": "abs-guide.txt"},{"Arithmetic expansion would take place": "abs-guide.txt"},{"if limit string were not quoted.": "abs-guide.txt"},{"$((5 + 3))": "abs-guide.txt"},{"A a single backslash would echo": "abs-guide.txt"},{"if limit string were not quoted.": "abs-guide.txt"},{"\\\\": "abs-guide.txt"},{"SpecialCharTest": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit": "abs-guide.txt"},{"": "abs-guide.txt"},{"Disabling parameter substitution permits outputting literal text. Generating scripts or even program code is": "abs-guide.txt"},{"one use for this.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 19-8. A script that generates another script": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# generate-script.sh": "abs-guide.txt"},{"# Based on an idea by Albert Reiner.": "abs-guide.txt"},{"OUTFILE=generated.sh": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Name of the file to generate.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# ----------------------------------------------------------# 'Here document containing the body of the generated script.": "abs-guide.txt"},{"(": "abs-guide.txt"},{"cat <<'EOF'": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"echo \"This is a generated shell script.\"": "abs-guide.txt"},{"# Note that since we are inside a subshell,": "abs-guide.txt"},{"#+ we can't access variables in the \"outside\" script.": "abs-guide.txt"},{"echo \"Generated file will be named: $OUTFILE\"": "abs-guide.txt"},{"# Above line will not work as normally expected": "abs-guide.txt"},{"#+ because parameter expansion has been disabled.": "abs-guide.txt"},{"# Instead, the result is literal output.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 19. Here Documents": "abs-guide.txt"},{"": "abs-guide.txt"},{"364": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"a=7": "abs-guide.txt"},{"b=3": "abs-guide.txt"},{"let \"c = $a * $b\"": "abs-guide.txt"},{"echo \"c = $c\"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"EOF": "abs-guide.txt"},{") > $OUTFILE": "abs-guide.txt"},{"# ----------------------------------------------------------# Quoting the 'limit string' prevents variable expansion": "abs-guide.txt"},{"#+ within the body of the above 'here document.'": "abs-guide.txt"},{"# This permits outputting literal strings in the output file.": "abs-guide.txt"},{"if [ -f \"$OUTFILE\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"chmod 755 $OUTFILE": "abs-guide.txt"},{"# Make the generated file executable.": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo \"Problem in creating file: \\\"$OUTFILE\\\"\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# This method also works for generating": "abs-guide.txt"},{"#+ C programs, Perl programs, Python programs, Makefiles,": "abs-guide.txt"},{"#+ and the like.": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"It is possible to set a variable from the output of a here document. This is actually a devious form of command": "abs-guide.txt"},{"substitution.": "abs-guide.txt"},{"variable=$(cat <<SETVAR": "abs-guide.txt"},{"This variable": "abs-guide.txt"},{"runs over multiple lines.": "abs-guide.txt"},{"SETVAR": "abs-guide.txt"},{")": "abs-guide.txt"},{"echo \"$variable\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"A here document can supply input to a function in the same script.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 19-9. Here documents and functions": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# here-function.sh": "abs-guide.txt"},{"GetPersonalData ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"read firstname": "abs-guide.txt"},{"read lastname": "abs-guide.txt"},{"read address": "abs-guide.txt"},{"read city": "abs-guide.txt"},{"read state": "abs-guide.txt"},{"read zipcode": "abs-guide.txt"},{"} # This certainly appears to be an interactive function, but . . .": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 19. Here Documents": "abs-guide.txt"},{"": "abs-guide.txt"},{"365": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# Supply input to the above function.": "abs-guide.txt"},{"GetPersonalData <<RECORD001": "abs-guide.txt"},{"Bozo": "abs-guide.txt"},{"Bozeman": "abs-guide.txt"},{"2726 Nondescript Dr.": "abs-guide.txt"},{"Bozeman": "abs-guide.txt"},{"MT": "abs-guide.txt"},{"21226": "abs-guide.txt"},{"RECORD001": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"$firstname $lastname\"": "abs-guide.txt"},{"echo \"$address\"": "abs-guide.txt"},{"echo \"$city, $state $zipcode\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"It is possible to use : as a dummy command accepting output from a here document. This, in effect, creates an": "abs-guide.txt"},{"\"anonymous\" here document.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 19-10. \"Anonymous\" Here Document": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{": <<TESTVARIABLES": "abs-guide.txt"},{"${HOSTNAME?}${USER?}${MAIL?}": "abs-guide.txt"},{"TESTVARIABLES": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Print error message if one of the variables not set.": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit $?": "abs-guide.txt"},{"": "abs-guide.txt"},{"A variation of the above technique permits \"commenting out\" blocks of code.": "abs-guide.txt"},{"Example 19-11. Commenting out a block of code": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# commentblock.sh": "abs-guide.txt"},{": <<COMMENTBLOCK": "abs-guide.txt"},{"echo \"This line will not echo.\"": "abs-guide.txt"},{"This is a comment line missing the \"#\" prefix.": "abs-guide.txt"},{"This is another comment line missing the \"#\" prefix.": "abs-guide.txt"},{"&*@!!++=": "abs-guide.txt"},{"The above line will cause no error message,": "abs-guide.txt"},{"because the Bash interpreter will ignore it.": "abs-guide.txt"},{"COMMENTBLOCK": "abs-guide.txt"},{"echo \"Exit value of above \\\"COMMENTBLOCK\\\" is $?.\"": "abs-guide.txt"},{"# No error shown.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"# 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"# The above technique also comes in useful for commenting out": "abs-guide.txt"},{"#+ a block of working code for debugging purposes.": "abs-guide.txt"},{"# This saves having to put a \"#\" at the beginning of each line,": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 19. Here Documents": "abs-guide.txt"},{"": "abs-guide.txt"},{"366": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"#+ then having to go back and delete each \"#\" later.": "abs-guide.txt"},{"# Note that the use of of colon, above, is optional.": "abs-guide.txt"},{"echo \"Just before commented-out code block.\"": "abs-guide.txt"},{"# The lines of code between the double-dashed lines will not execute.": "abs-guide.txt"},{"# ===================================================================": "abs-guide.txt"},{": <<DEBUGXXX": "abs-guide.txt"},{"for file in *": "abs-guide.txt"},{"do": "abs-guide.txt"},{"cat \"$file\"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"DEBUGXXX": "abs-guide.txt"},{"# ===================================================================": "abs-guide.txt"},{"echo \"Just after commented-out code block.\"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"######################################################################": "abs-guide.txt"},{"# Note, however, that if a bracketed variable is contained within": "abs-guide.txt"},{"#+ the commented-out code block,": "abs-guide.txt"},{"#+ then this could cause problems.": "abs-guide.txt"},{"# for example:": "abs-guide.txt"},{"": "abs-guide.txt"},{"#/!/bin/bash": "abs-guide.txt"},{": <<COMMENTBLOCK": "abs-guide.txt"},{"echo \"This line will not echo.\"": "abs-guide.txt"},{"&*@!!++=": "abs-guide.txt"},{"${foo_bar_bazz?}": "abs-guide.txt"},{"$(rm -rf /tmp/foobar/)": "abs-guide.txt"},{"$(touch my_build_directory/cups/Makefile)": "abs-guide.txt"},{"COMMENTBLOCK": "abs-guide.txt"},{"": "abs-guide.txt"},{"$ sh commented-bad.sh": "abs-guide.txt"},{"commented-bad.sh: line 3: foo_bar_bazz: parameter null or not set": "abs-guide.txt"},{"# The remedy for this is to strong-quote the 'COMMENTBLOCK' in line 49, above.": "abs-guide.txt"},{": <<'COMMENTBLOCK'": "abs-guide.txt"},{"# Thank you, Kurt Pfeifle, for pointing this out.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Yet another twist of this nifty trick makes \"self-documenting\" scripts possible.": "abs-guide.txt"},{"Example 19-12. A self-documenting script": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# self-document.sh: self-documenting script": "abs-guide.txt"},{"# Modification of \"colm.sh\".": "abs-guide.txt"},{"DOC_REQUEST=70": "abs-guide.txt"},{"if [ \"$1\" = \"-h\" -o \"$1\" = \"--help\" ]": "abs-guide.txt"},{"# Request help.": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo; echo \"Usage: $0 [directory-name]\"; echo": "abs-guide.txt"},{"sed --silent -e '/DOCUMENTATIONXX$/,/^DOCUMENTATIONXX$/p' \"$0\" |": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 19. Here Documents": "abs-guide.txt"},{"": "abs-guide.txt"},{"367": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"sed -e '/DOCUMENTATIONXX$/d'; exit $DOC_REQUEST; fi": "abs-guide.txt"},{"": "abs-guide.txt"},{": <<DOCUMENTATIONXX": "abs-guide.txt"},{"List the statistics of a specified directory in tabular format.": "abs-guide.txt"},{"--------------------------------------------------------------The command-line parameter gives the directory to be listed.": "abs-guide.txt"},{"If no directory specified or directory specified cannot be read,": "abs-guide.txt"},{"then list the current working directory.": "abs-guide.txt"},{"DOCUMENTATIONXX": "abs-guide.txt"},{"if [ -z \"$1\" -o ! -r \"$1\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"directory=.": "abs-guide.txt"},{"else": "abs-guide.txt"},{"directory=\"$1\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"echo \"Listing of \"$directory\":\"; echo": "abs-guide.txt"},{"(printf \"PERMISSIONS LINKS OWNER GROUP SIZE MONTH DAY HH:MM PROG-NAME\\n\" \\": "abs-guide.txt"},{"; ls -l \"$directory\" | sed 1d) | column -t": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Using a cat script is an alternate way of accomplishing this.": "abs-guide.txt"},{"DOC_REQUEST=70": "abs-guide.txt"},{"if [ \"$1\" = \"-h\" -o \"$1\" = \"--help\" ]": "abs-guide.txt"},{"# Request help.": "abs-guide.txt"},{"then": "abs-guide.txt"},{"# Use a \"cat script\" . . .": "abs-guide.txt"},{"cat <<DOCUMENTATIONXX": "abs-guide.txt"},{"List the statistics of a specified directory in tabular format.": "abs-guide.txt"},{"--------------------------------------------------------------The command-line parameter gives the directory to be listed.": "abs-guide.txt"},{"If no directory specified or directory specified cannot be read,": "abs-guide.txt"},{"then list the current working directory.": "abs-guide.txt"},{"DOCUMENTATIONXX": "abs-guide.txt"},{"exit $DOC_REQUEST": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"See also Example A-28, Example A-40, Example A-41, and Example A-42 for more examples of": "abs-guide.txt"},{"self-documenting scripts.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Here documents create temporary files, but these files are deleted after opening and are not accessible to": "abs-guide.txt"},{"any other process.": "abs-guide.txt"},{"bash$ bash -c 'lsof -a -p $$ -d0' << EOF": "abs-guide.txt"},{"> EOF": "abs-guide.txt"},{"lsof": "abs-guide.txt"},{"1213 bozo": "abs-guide.txt"},{"0r": "abs-guide.txt"},{"REG": "abs-guide.txt"},{"3,5": "abs-guide.txt"},{"0 30386 /tmp/t1213-0-sh (deleted)": "abs-guide.txt"},{"": "abs-guide.txt"},{"Some utilities will not work inside a here document.": "abs-guide.txt"},{"The closing limit string, on the final line of a here document, must start in the first character position.": "abs-guide.txt"},{"There can be no leading whitespace. Trailing whitespace after the limit string likewise causes": "abs-guide.txt"},{"unexpected behavior. The whitespace prevents the limit string from being recognized. [103]": "abs-guide.txt"},{"Chapter 19. Here Documents": "abs-guide.txt"},{"": "abs-guide.txt"},{"368": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"echo \"----------------------------------------------------------------------\"": "abs-guide.txt"},{"cat <<LimitString": "abs-guide.txt"},{"echo \"This is line 1 of the message inside the here document.\"": "abs-guide.txt"},{"echo \"This is line 2 of the message inside the here document.\"": "abs-guide.txt"},{"echo \"This is the final line of the message inside the here document.\"": "abs-guide.txt"},{"LimitString": "abs-guide.txt"},{"#^^^^Indented limit string. Error! This script will not behave as expected.": "abs-guide.txt"},{"echo \"----------------------------------------------------------------------\"": "abs-guide.txt"},{"# These comments are outside the 'here document',": "abs-guide.txt"},{"#+ and should not echo.": "abs-guide.txt"},{"echo \"Outside the here document.\"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"echo \"This line had better not echo.\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Follows an 'exit' command.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Some people very cleverly use a single ! as a limit string. But, that's not necessarily a good idea.": "abs-guide.txt"},{"# This works.": "abs-guide.txt"},{"cat <<!": "abs-guide.txt"},{"Hello!": "abs-guide.txt"},{"! Three more exclamations !!!": "abs-guide.txt"},{"!": "abs-guide.txt"},{"": "abs-guide.txt"},{"# But . . .": "abs-guide.txt"},{"cat <<!": "abs-guide.txt"},{"Hello!": "abs-guide.txt"},{"Single exclamation point follows!": "abs-guide.txt"},{"!": "abs-guide.txt"},{"!": "abs-guide.txt"},{"# Crashes with an error message.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# However, the following will work.": "abs-guide.txt"},{"cat <<EOF": "abs-guide.txt"},{"Hello!": "abs-guide.txt"},{"Single exclamation point follows!": "abs-guide.txt"},{"!": "abs-guide.txt"},{"EOF": "abs-guide.txt"},{"# It's safer to use a multi-character limit string.": "abs-guide.txt"},{"": "abs-guide.txt"},{"For those tasks too complex for a here document, consider using the expect scripting language, which was": "abs-guide.txt"},{"specifically designed for feeding input into interactive programs.": "abs-guide.txt"},{"": "abs-guide.txt"},{"19.1. Here Strings": "abs-guide.txt"},{"": "abs-guide.txt"},{"A here": "abs-guide.txt"},{"string can be considered as a stripped-down form of a here": "abs-guide.txt"},{"document.": "abs-guide.txt"},{"Chapter 19. Here Documents": "abs-guide.txt"},{"": "abs-guide.txt"},{"369": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"It consists of nothing more than COMMAND <<< $WORD,": "abs-guide.txt"},{"where $WORD is expanded and fed to the stdin of COMMAND.": "abs-guide.txt"},{"": "abs-guide.txt"},{"As a simple example, consider this alternative to the echo-grep construction.": "abs-guide.txt"},{"# Instead of:": "abs-guide.txt"},{"if echo \"$VAR\" | grep -q txt": "abs-guide.txt"},{"# etc.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# if [[ $VAR = *txt* ]]": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Try:": "abs-guide.txt"},{"if grep -q \"txt\" <<< \"$VAR\"": "abs-guide.txt"},{"then": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^^^": "abs-guide.txt"},{"echo \"$VAR contains the substring sequence \\\"txt\\\"\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# Thank you, Sebastian Kaminski, for the suggestion.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Or, in combination with read:": "abs-guide.txt"},{"String=\"This is a string of words.\"": "abs-guide.txt"},{"read -r -a Words <<< \"$String\"": "abs-guide.txt"},{"# The -a option to \"read\"": "abs-guide.txt"},{"#+ assigns the resulting values to successive members of an array.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"\"First word in String is:": "abs-guide.txt"},{"\"Second word in String is:": "abs-guide.txt"},{"\"Third word in String is:": "abs-guide.txt"},{"\"Fourth word in String is:": "abs-guide.txt"},{"\"Fifth word in String is:": "abs-guide.txt"},{"\"Sixth word in String is:": "abs-guide.txt"},{"\"Seventh word in String is:": "abs-guide.txt"},{"": "abs-guide.txt"},{"${Words[0]}\"": "abs-guide.txt"},{"${Words[1]}\"": "abs-guide.txt"},{"${Words[2]}\"": "abs-guide.txt"},{"${Words[3]}\"": "abs-guide.txt"},{"${Words[4]}\"": "abs-guide.txt"},{"${Words[5]}\"": "abs-guide.txt"},{"${Words[6]}\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"This": "abs-guide.txt"},{"is": "abs-guide.txt"},{"a": "abs-guide.txt"},{"string": "abs-guide.txt"},{"of": "abs-guide.txt"},{"words.": "abs-guide.txt"},{"(null)": "abs-guide.txt"},{"Past end of $String.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Thank you, Francisco Lobo, for the suggestion.": "abs-guide.txt"},{"": "abs-guide.txt"},{"It is, of course, possible to feed the output of a here string into the stdin of a loop.": "abs-guide.txt"},{"# As Seamus points out . . .": "abs-guide.txt"},{"ArrayVar=( element0 element1 element2 {A..D} )": "abs-guide.txt"},{"while read element ; do": "abs-guide.txt"},{"echo \"$element\" 1>&2": "abs-guide.txt"},{"done <<< $(echo ${ArrayVar[*]})": "abs-guide.txt"},{"# element0 element1 element2 A B C D": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 19-13. Prepending a line to a file": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# prepend.sh: Add text at beginning of file.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Example contributed by Kenny Stauffer,": "abs-guide.txt"},{"#+ and slightly modified by document author.": "abs-guide.txt"},{"": "abs-guide.txt"},{"E_NOSUCHFILE=85": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 19. Here Documents": "abs-guide.txt"},{"": "abs-guide.txt"},{"370": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"read -p \"File: \" file": "abs-guide.txt"},{"# -p arg to 'read' displays prompt.": "abs-guide.txt"},{"if [ ! -e \"$file\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"# Bail out if no such file.": "abs-guide.txt"},{"echo \"File $file not found.\"": "abs-guide.txt"},{"exit $E_NOSUCHFILE": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"read -p \"Title: \" title": "abs-guide.txt"},{"cat - $file <<<$title > $file.new": "abs-guide.txt"},{"echo \"Modified file is $file.new\"": "abs-guide.txt"},{"exit": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Ends script execution.": "abs-guide.txt"},{"": "abs-guide.txt"},{"from 'man bash':": "abs-guide.txt"},{"Here Strings": "abs-guide.txt"},{"A variant of here documents, the format is:": "abs-guide.txt"},{"<<<word": "abs-guide.txt"},{"The word is expanded and supplied to the command on its standard input.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Of course, the following also works:": "abs-guide.txt"},{"sed -e '1i\\": "abs-guide.txt"},{"Title: ' $file": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 19-14. Parsing a mailbox": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# Script by Francisco Lobo,": "abs-guide.txt"},{"#+ and slightly modified and commented by ABS Guide author.": "abs-guide.txt"},{"# Used in ABS Guide with permission. (Thank you!)": "abs-guide.txt"},{"# This script will not run under Bash versions -lt 3.0.": "abs-guide.txt"},{"": "abs-guide.txt"},{"E_MISSING_ARG=87": "abs-guide.txt"},{"if [ -z \"$1\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Usage: $0 mailbox-file\"": "abs-guide.txt"},{"exit $E_MISSING_ARG": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"mbox_grep() # Parse mailbox file.": "abs-guide.txt"},{"{": "abs-guide.txt"},{"declare -i body=0 match=0": "abs-guide.txt"},{"declare -a date sender": "abs-guide.txt"},{"declare mail header value": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"while IFS= read -r mail": "abs-guide.txt"},{"^^^^": "abs-guide.txt"},{"Reset $IFS.": "abs-guide.txt"},{"Otherwise \"read\" will strip leading & trailing space from its input.": "abs-guide.txt"},{"do": "abs-guide.txt"},{"if [[ $mail =~ ^From": "abs-guide.txt"},{"then": "abs-guide.txt"},{"(( body = 0 ))": "abs-guide.txt"},{"(( match = 0 ))": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 19. Here Documents": "abs-guide.txt"},{"": "abs-guide.txt"},{"]]": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Match \"From\" field in message.": "abs-guide.txt"},{"# \"Zero out\" variables.": "abs-guide.txt"},{"": "abs-guide.txt"},{"371": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"unset date": "abs-guide.txt"},{"elif ((": "abs-guide.txt"},{"then": "abs-guide.txt"},{"((": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"body ))": "abs-guide.txt"},{"match ))": "abs-guide.txt"},{"echo \"$mail\"": "abs-guide.txt"},{"Uncomment above line if you want entire body": "abs-guide.txt"},{"of message to display.": "abs-guide.txt"},{"": "abs-guide.txt"},{"elif [[ $mail ]]; then": "abs-guide.txt"},{"IFS=: read -r header value <<< \"$mail\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^^^ \"here string\"": "abs-guide.txt"},{"case \"$header\" in": "abs-guide.txt"},{"[Ff][Rr][Oo][Mm] ) [[ $value =~ \"$2\" ]] && (( match++ )) ;;": "abs-guide.txt"},{"# Match \"From\" line.": "abs-guide.txt"},{"[Dd][Aa][Tt][Ee] ) read -r -a date <<< \"$value\" ;;": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^^^": "abs-guide.txt"},{"# Match \"Date\" line.": "abs-guide.txt"},{"[Rr][Ee][Cc][Ee][Ii][Vv][Ee][Dd] ) read -r -a sender <<< \"$value\" ;;": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^^^": "abs-guide.txt"},{"# Match IP Address (may be spoofed).": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"else": "abs-guide.txt"},{"(( body++ ))": "abs-guide.txt"},{"(( match )) &&": "abs-guide.txt"},{"echo \"MESSAGE ${date:+of: ${date[*]} }\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Entire $date array": "abs-guide.txt"},{"^": "abs-guide.txt"},{"echo \"IP address of sender: ${sender[1]}\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Second field of \"Received\" line": "abs-guide.txt"},{"^": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"done < \"$1\" # Redirect stdout of file into loop.": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"mbox_grep \"$1\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Send mailbox file to function.": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit $?": "abs-guide.txt"},{"# Exercises:": "abs-guide.txt"},{"# --------# 1) Break the single function, above, into multiple functions,": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"for the sake of readability.": "abs-guide.txt"},{"# 2) Add additional parsing to the script, checking for various keywords.": "abs-guide.txt"},{"": "abs-guide.txt"},{"$ mailbox_grep.sh scam_mail": "abs-guide.txt"},{"MESSAGE of Thu, 5 Jan 2006 08:00:56 -0500 (EST)": "abs-guide.txt"},{"IP address of sender: 196.3.62.4": "abs-guide.txt"},{"": "abs-guide.txt"},{"Exercise: Find other uses for here strings, such as, for example, feeding input to dc.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 19. Here Documents": "abs-guide.txt"},{"": "abs-guide.txt"},{"372": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fChapter 20. I/O Redirection": "abs-guide.txt"},{"There are always three default files [104] open, stdin (the keyboard), stdout (the screen), and stderr": "abs-guide.txt"},{"(error messages output to the screen). These, and any other open files, can be redirected. Redirection simply": "abs-guide.txt"},{"means capturing output from a file, command, program, script, or even code block within a script (see": "abs-guide.txt"},{"Example 3-1 and Example 3-2) and sending it as input to another file, command, program, or script.": "abs-guide.txt"},{"Each open file gets assigned a file descriptor. [105] The file descriptors for stdin, stdout, and stderr": "abs-guide.txt"},{"are 0, 1, and 2, respectively. For opening additional files, there remain descriptors 3 to 9. It is sometimes": "abs-guide.txt"},{"useful to assign one of these additional file descriptors to stdin, stdout, or stderr as a temporary": "abs-guide.txt"},{"duplicate link. [106] This simplifies restoration to normal after complex redirection and reshuffling (see": "abs-guide.txt"},{"Example 20-1).": "abs-guide.txt"},{"": "abs-guide.txt"},{"COMMAND_OUTPUT >": "abs-guide.txt"},{"# Redirect stdout to a file.": "abs-guide.txt"},{"# Creates the file if not present, otherwise overwrites it.": "abs-guide.txt"},{"ls -lR > dir-tree.list": "abs-guide.txt"},{"# Creates a file containing a listing of the directory tree.": "abs-guide.txt"},{": > filename": "abs-guide.txt"},{"# The > truncates file \"filename\" to zero length.": "abs-guide.txt"},{"# If file not present, creates zero-length file (same effect as 'touch').": "abs-guide.txt"},{"# The : serves as a dummy placeholder, producing no output.": "abs-guide.txt"},{"> filename": "abs-guide.txt"},{"# The > truncates file \"filename\" to zero length.": "abs-guide.txt"},{"# If file not present, creates zero-length file (same effect as 'touch').": "abs-guide.txt"},{"# (Same result as \": >\", above, but this does not work with some shells.)": "abs-guide.txt"},{"COMMAND_OUTPUT >>": "abs-guide.txt"},{"# Redirect stdout to a file.": "abs-guide.txt"},{"# Creates the file if not present, otherwise appends to it.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Single-line redirection commands (affect only the line they are on):": "abs-guide.txt"},{"# -------------------------------------------------------------------1>filename": "abs-guide.txt"},{"# Redirect stdout to file \"filename.\"": "abs-guide.txt"},{"1>>filename": "abs-guide.txt"},{"# Redirect and append stdout to file \"filename.\"": "abs-guide.txt"},{"2>filename": "abs-guide.txt"},{"# Redirect stderr to file \"filename.\"": "abs-guide.txt"},{"2>>filename": "abs-guide.txt"},{"# Redirect and append stderr to file \"filename.\"": "abs-guide.txt"},{"&>filename": "abs-guide.txt"},{"# Redirect both stdout and stderr to file \"filename.\"": "abs-guide.txt"},{"# This operator is now functional, as of Bash 4, final release.": "abs-guide.txt"},{"M>N": "abs-guide.txt"},{"# \"M\" is a file descriptor, which defaults to 1, if not explicitly set.": "abs-guide.txt"},{"# \"N\" is a filename.": "abs-guide.txt"},{"# File descriptor \"M\" is redirect to file \"N.\"": "abs-guide.txt"},{"M>&N": "abs-guide.txt"},{"# \"M\" is a file descriptor, which defaults to 1, if not set.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 20. I/O Redirection": "abs-guide.txt"},{"": "abs-guide.txt"},{"373": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# \"N\" is another file descriptor.": "abs-guide.txt"},{"#==============================================================================": "abs-guide.txt"},{"# Redirecting stdout, one line at a time.": "abs-guide.txt"},{"LOGFILE=script.log": "abs-guide.txt"},{"echo \"This statement is sent to the log file, \\\"$LOGFILE\\\".\" 1>$LOGFILE": "abs-guide.txt"},{"echo \"This statement is appended to \\\"$LOGFILE\\\".\" 1>>$LOGFILE": "abs-guide.txt"},{"echo \"This statement is also appended to \\\"$LOGFILE\\\".\" 1>>$LOGFILE": "abs-guide.txt"},{"echo \"This statement is echoed to stdout, and will not appear in \\\"$LOGFILE\\\".\"": "abs-guide.txt"},{"# These redirection commands automatically \"reset\" after each line.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Redirecting stderr, one line at a time.": "abs-guide.txt"},{"ERRORFILE=script.errors": "abs-guide.txt"},{"bad_command1 2>$ERRORFILE": "abs-guide.txt"},{"bad_command2 2>>$ERRORFILE": "abs-guide.txt"},{"bad_command3": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Error message sent to $ERRORFILE.": "abs-guide.txt"},{"# Error message appended to $ERRORFILE.": "abs-guide.txt"},{"# Error message echoed to stderr,": "abs-guide.txt"},{"#+ and does not appear in $ERRORFILE.": "abs-guide.txt"},{"# These redirection commands also automatically \"reset\" after each line.": "abs-guide.txt"},{"#=======================================================================": "abs-guide.txt"},{"2>&1": "abs-guide.txt"},{"# Redirects stderr to stdout.": "abs-guide.txt"},{"# Error messages get sent to same place as standard output.": "abs-guide.txt"},{">>filename 2>&1": "abs-guide.txt"},{"bad_command >>filename 2>&1": "abs-guide.txt"},{"# Appends both stdout and stderr to the file \"filename\" ...": "abs-guide.txt"},{"2>&1 | [command(s)]": "abs-guide.txt"},{"bad_command 2>&1 | awk '{print $5}'": "abs-guide.txt"},{"# found": "abs-guide.txt"},{"# Sends stderr through a pipe.": "abs-guide.txt"},{"# |& was added to Bash 4 as an abbreviation for 2>&1 |.": "abs-guide.txt"},{"i>&j": "abs-guide.txt"},{"# Redirects file descriptor i to j.": "abs-guide.txt"},{"# All output of file pointed to by i gets sent to file pointed to by j.": "abs-guide.txt"},{">&j": "abs-guide.txt"},{"# Redirects, by default, file descriptor 1 (stdout) to j.": "abs-guide.txt"},{"# All stdout gets sent to file pointed to by j.": "abs-guide.txt"},{"0< FILENAME": "abs-guide.txt"},{"< FILENAME": "abs-guide.txt"},{"# Accept input from a file.": "abs-guide.txt"},{"# Companion command to \">\", and often used in combination with it.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# grep search-word <filename": "abs-guide.txt"},{"": "abs-guide.txt"},{"[j]<>filename": "abs-guide.txt"},{"# Open file \"filename\" for reading and writing,": "abs-guide.txt"},{"#+ and assign file descriptor \"j\" to it.": "abs-guide.txt"},{"# If \"filename\" does not exist, create it.": "abs-guide.txt"},{"# If file descriptor \"j\" is not specified, default to fd 0, stdin.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# An application of this is writing at a specified place in a file.": "abs-guide.txt"},{"echo 1234567890 > File": "abs-guide.txt"},{"# Write string to \"File\".": "abs-guide.txt"},{"exec 3<> File": "abs-guide.txt"},{"# Open \"File\" and assign fd 3 to it.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 20. I/O Redirection": "abs-guide.txt"},{"": "abs-guide.txt"},{"374": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"read -n 4 <&3": "abs-guide.txt"},{"#": "abs-guide.txt"},{"echo -n . >&3": "abs-guide.txt"},{"#": "abs-guide.txt"},{"exec 3>&#": "abs-guide.txt"},{"cat File": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Random access, by golly.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Read only 4 characters.": "abs-guide.txt"},{"Write a decimal point there.": "abs-guide.txt"},{"Close fd 3.": "abs-guide.txt"},{"==> 1234.67890": "abs-guide.txt"},{"": "abs-guide.txt"},{"|": "abs-guide.txt"},{"# Pipe.": "abs-guide.txt"},{"# General purpose process and command chaining tool.": "abs-guide.txt"},{"# Similar to \">\", but more general in effect.": "abs-guide.txt"},{"# Useful for chaining commands, scripts, files, and programs together.": "abs-guide.txt"},{"cat *.txt | sort | uniq > result-file": "abs-guide.txt"},{"# Sorts the output of all the .txt files and deletes duplicate lines,": "abs-guide.txt"},{"# finally saves results to \"result-file\".": "abs-guide.txt"},{"": "abs-guide.txt"},{"Multiple instances of input and output redirection and/or pipes can be combined in a single command line.": "abs-guide.txt"},{"command < input-file > output-file": "abs-guide.txt"},{"# Or the equivalent:": "abs-guide.txt"},{"< input-file command > output-file": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Although this is non-standard.": "abs-guide.txt"},{"": "abs-guide.txt"},{"command1 | command2 | command3 > output-file": "abs-guide.txt"},{"": "abs-guide.txt"},{"See Example 16-31 and Example A-14.": "abs-guide.txt"},{"Multiple output streams may be redirected to one file.": "abs-guide.txt"},{"ls": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"-yz >> command.log 2>&1": "abs-guide.txt"},{"Capture result of illegal options \"yz\" in file \"command.log.\"": "abs-guide.txt"},{"Because stderr is redirected to the file,": "abs-guide.txt"},{"any error messages will also be there.": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"ls": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"Note, however, that the following does *not* give the same result.": "abs-guide.txt"},{"-yz 2>&1 >> command.log": "abs-guide.txt"},{"Outputs an error message, but does not write to file.": "abs-guide.txt"},{"More precisely, the command output (in this case, null)": "abs-guide.txt"},{"writes to the file, but the error message goes only to stdout.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# If redirecting both stdout and stderr,": "abs-guide.txt"},{"#+ the order of the commands makes a difference.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Closing File Descriptors": "abs-guide.txt"},{"n<&Close input file descriptor n.": "abs-guide.txt"},{"0<&-, <&Close stdin.": "abs-guide.txt"},{"n>&Close output file descriptor n.": "abs-guide.txt"},{"1>&-, >&Close stdout.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Child processes inherit open file descriptors. This is why pipes work. To prevent an fd from being inherited,": "abs-guide.txt"},{"close it.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 20. I/O Redirection": "abs-guide.txt"},{"": "abs-guide.txt"},{"375": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# Redirecting only stderr to a pipe.": "abs-guide.txt"},{"exec 3>&1": "abs-guide.txt"},{"ls -l 2>&1 >&3 3>&- | grep bad 3>&#": "abs-guide.txt"},{"^^^^": "abs-guide.txt"},{"^^^^": "abs-guide.txt"},{"exec 3>&-": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Save current \"value\" of stdout.": "abs-guide.txt"},{"# Close fd 3 for 'grep' (but not 'ls').": "abs-guide.txt"},{"# Now close it for the remainder of the script.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Thanks, S.C.": "abs-guide.txt"},{"": "abs-guide.txt"},{"For a more detailed introduction to I/O redirection see Appendix F.": "abs-guide.txt"},{"": "abs-guide.txt"},{"20.1. Using exec": "abs-guide.txt"},{"An exec <filename command redirects stdin to a file. From that point on, all stdin comes from that file,": "abs-guide.txt"},{"rather than its normal source (usually keyboard input). This provides a method of reading a file line by line": "abs-guide.txt"},{"and possibly parsing each line of input using sed and/or awk.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 20-1. Redirecting stdin using exec": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# Redirecting stdin using 'exec'.": "abs-guide.txt"},{"": "abs-guide.txt"},{"exec 6<&0": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Link file descriptor #6 with stdin.": "abs-guide.txt"},{"# Saves stdin.": "abs-guide.txt"},{"": "abs-guide.txt"},{"exec < data-file": "abs-guide.txt"},{"": "abs-guide.txt"},{"# stdin replaced by file \"data-file\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"read a1": "abs-guide.txt"},{"read a2": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Reads first line of file \"data-file\".": "abs-guide.txt"},{"# Reads second line of file \"data-file.\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"\"Following lines read from file.\"": "abs-guide.txt"},{"\"-------------------------------\"": "abs-guide.txt"},{"$a1": "abs-guide.txt"},{"$a2": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo; echo; echo": "abs-guide.txt"},{"exec 0<&6 6<&# Now restore stdin from fd #6, where it had been saved,": "abs-guide.txt"},{"#+ and close fd #6 ( 6<&- ) to free it for other processes to use.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# <&6 6<&also works.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"read": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"-n \"Enter data \"": "abs-guide.txt"},{"b1 # Now \"read\" functions as expected, reading from normal stdin.": "abs-guide.txt"},{"\"Input read from stdin.\"": "abs-guide.txt"},{"\"----------------------\"": "abs-guide.txt"},{"\"b1 = $b1\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Similarly, an exec >filename command redirects stdout to a designated file. This sends all command": "abs-guide.txt"},{"output that would normally go to stdout to that file.": "abs-guide.txt"},{"Chapter 20. I/O Redirection": "abs-guide.txt"},{"": "abs-guide.txt"},{"376": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"exec N > filename affects the entire script or current shell. Redirection in the PID of the script or shell": "abs-guide.txt"},{"from that point on has changed. However . . .": "abs-guide.txt"},{"N > filename affects only the newly-forked process, not the entire script or shell.": "abs-guide.txt"},{"Thank you, Ahmed Darwish, for pointing this out.": "abs-guide.txt"},{"Example 20-2. Redirecting stdout using exec": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# reassign-stdout.sh": "abs-guide.txt"},{"LOGFILE=logfile.txt": "abs-guide.txt"},{"exec 6>&1": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Link file descriptor #6 with stdout.": "abs-guide.txt"},{"# Saves stdout.": "abs-guide.txt"},{"": "abs-guide.txt"},{"exec > $LOGFILE": "abs-guide.txt"},{"": "abs-guide.txt"},{"# stdout replaced with file \"logfile.txt\".": "abs-guide.txt"},{"": "abs-guide.txt"},{"# ----------------------------------------------------------- #": "abs-guide.txt"},{"# All output from commands in this block sent to file $LOGFILE.": "abs-guide.txt"},{"echo -n \"Logfile: \"": "abs-guide.txt"},{"date": "abs-guide.txt"},{"echo \"-------------------------------------\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"Output of \\\"ls -al\\\" command\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"ls -al": "abs-guide.txt"},{"echo; echo": "abs-guide.txt"},{"echo \"Output of \\\"df\\\" command\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"df": "abs-guide.txt"},{"# ----------------------------------------------------------- #": "abs-guide.txt"},{"exec 1>&6 6>&-": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Restore stdout and close file descriptor #6.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"== stdout now restored to default == \"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"ls -al": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 20-3. Redirecting both stdin and stdout in the same script with exec": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# upperconv.sh": "abs-guide.txt"},{"# Converts a specified input file to uppercase.": "abs-guide.txt"},{"E_FILE_ACCESS=70": "abs-guide.txt"},{"E_WRONG_ARGS=71": "abs-guide.txt"},{"if [ ! -r \"$1\" ]": "abs-guide.txt"},{"# Is specified input file readable?": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Can't read from input file!\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 20. I/O Redirection": "abs-guide.txt"},{"": "abs-guide.txt"},{"377": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"echo \"Usage: $0 input-file output-file\"": "abs-guide.txt"},{"exit $E_FILE_ACCESS": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# Will exit with same error": "abs-guide.txt"},{"#+ even if input file ($1) not specified (why?).": "abs-guide.txt"},{"if [ -z \"$2\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Need to specify output file.\"": "abs-guide.txt"},{"echo \"Usage: $0 input-file output-file\"": "abs-guide.txt"},{"exit $E_WRONG_ARGS": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"exec 4<&0": "abs-guide.txt"},{"exec < $1": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Will read from input file.": "abs-guide.txt"},{"": "abs-guide.txt"},{"exec 7>&1": "abs-guide.txt"},{"exec > $2": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Will write to output file.": "abs-guide.txt"},{"# Assumes output file writable (add check?).": "abs-guide.txt"},{"": "abs-guide.txt"},{"# ----------------------------------------------cat - | tr a-z A-Z": "abs-guide.txt"},{"# Uppercase conversion.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^^^^^": "abs-guide.txt"},{"# Reads from stdin.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^^^^^^^^^^": "abs-guide.txt"},{"# Writes to stdout.": "abs-guide.txt"},{"# However, both stdin and stdout were redirected.": "abs-guide.txt"},{"# Note that the 'cat' can be omitted.": "abs-guide.txt"},{"# ----------------------------------------------exec 1>&7 7>&exec 0<&4 4<&-": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Restore stout.": "abs-guide.txt"},{"# Restore stdin.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# After restoration, the following line prints to stdout as expected.": "abs-guide.txt"},{"echo \"File \\\"$1\\\" written to \\\"$2\\\" as uppercase conversion.\"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"I/O redirection is a clever way of avoiding the dreaded inaccessible variables within a subshell problem.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 20-4. Avoiding a subshell": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# avoid-subshell.sh": "abs-guide.txt"},{"# Suggested by Matthew Walker.": "abs-guide.txt"},{"Lines=0": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"cat myfile.txt | while read line;": "abs-guide.txt"},{"do {": "abs-guide.txt"},{"echo $line": "abs-guide.txt"},{"(( Lines++ ));": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Incremented values of this variable": "abs-guide.txt"},{"#+ inaccessible outside loop.": "abs-guide.txt"},{"# Subshell problem.": "abs-guide.txt"},{"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo \"Number of lines read = $Lines\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# 0": "abs-guide.txt"},{"# Wrong!": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo \"------------------------\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 20. I/O Redirection": "abs-guide.txt"},{"": "abs-guide.txt"},{"378": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"": "abs-guide.txt"},{"exec 3<> myfile.txt": "abs-guide.txt"},{"while read line <&3": "abs-guide.txt"},{"do {": "abs-guide.txt"},{"echo \"$line\"": "abs-guide.txt"},{"(( Lines++ ));": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Incremented values of this variable": "abs-guide.txt"},{"#+ accessible outside loop.": "abs-guide.txt"},{"# No subshell, no problem.": "abs-guide.txt"},{"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"done": "abs-guide.txt"},{"exec 3>&echo \"Number of lines read = $Lines\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# 8": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"# Lines below not seen by script.": "abs-guide.txt"},{"$ cat myfile.txt": "abs-guide.txt"},{"Line": "abs-guide.txt"},{"Line": "abs-guide.txt"},{"Line": "abs-guide.txt"},{"Line": "abs-guide.txt"},{"Line": "abs-guide.txt"},{"Line": "abs-guide.txt"},{"Line": "abs-guide.txt"},{"Line": "abs-guide.txt"},{"": "abs-guide.txt"},{"1.": "abs-guide.txt"},{"2.": "abs-guide.txt"},{"3.": "abs-guide.txt"},{"4.": "abs-guide.txt"},{"5.": "abs-guide.txt"},{"6.": "abs-guide.txt"},{"7.": "abs-guide.txt"},{"8.": "abs-guide.txt"},{"": "abs-guide.txt"},{"20.2. Redirecting Code Blocks": "abs-guide.txt"},{"Blocks of code, such as while, until, and for loops, even if/then test blocks can also incorporate redirection of": "abs-guide.txt"},{"stdin. Even a function may use this form of redirection (see Example 24-11). The < operator at the end of": "abs-guide.txt"},{"the code block accomplishes this.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 20-5. Redirected while loop": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# redir2.sh": "abs-guide.txt"},{"if [ -z \"$1\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"Filename=names.data": "abs-guide.txt"},{"# Default, if no filename specified.": "abs-guide.txt"},{"else": "abs-guide.txt"},{"Filename=$1": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"#+ Filename=${1:-names.data}": "abs-guide.txt"},{"# can replace the above test (parameter substitution).": "abs-guide.txt"},{"count=0": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"while [ \"$name\" != Smith ]": "abs-guide.txt"},{"do": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 20. I/O Redirection": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Why is variable $name in quotes?": "abs-guide.txt"},{"": "abs-guide.txt"},{"379": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"read name": "abs-guide.txt"},{"echo $name": "abs-guide.txt"},{"let \"count += 1\"": "abs-guide.txt"},{"done <\"$Filename\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^^^^^^^^^^^^": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Reads from $Filename, rather than stdin.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Redirects stdin to file $Filename.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo; echo \"$count names read\"; echo": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Note that in some older shell scripting languages,": "abs-guide.txt"},{"the redirected loop would run as a subshell.": "abs-guide.txt"},{"Therefore, $count would return 0, the initialized value outside the loop.": "abs-guide.txt"},{"Bash and ksh avoid starting a subshell *whenever possible*,": "abs-guide.txt"},{"so that this script, for example, runs correctly.": "abs-guide.txt"},{"(Thanks to Heiner Steven for pointing this out.)": "abs-guide.txt"},{"": "abs-guide.txt"},{"# However . . .": "abs-guide.txt"},{"# Bash *can* sometimes start a subshell in a PIPED \"while-read\" loop,": "abs-guide.txt"},{"#+ as distinct from a REDIRECTED \"while\" loop.": "abs-guide.txt"},{"abc=hi": "abs-guide.txt"},{"echo -e \"1\\n2\\n3\" | while read l": "abs-guide.txt"},{"do abc=\"$l\"": "abs-guide.txt"},{"echo $abc": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo $abc": "abs-guide.txt"},{"# Thanks, Bruno de Oliveira Schneider, for demonstrating this": "abs-guide.txt"},{"#+ with the above snippet of code.": "abs-guide.txt"},{"# And, thanks, Brian Onn, for correcting an annotation error.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 20-6. Alternate form of redirected while loop": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# This is an alternate form of the preceding script.": "abs-guide.txt"},{"# Suggested by Heiner Steven": "abs-guide.txt"},{"#+ as a workaround in those situations when a redirect loop": "abs-guide.txt"},{"#+ runs as a subshell, and therefore variables inside the loop": "abs-guide.txt"},{"# +do not keep their values upon loop termination.": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [ -z \"$1\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"Filename=names.data": "abs-guide.txt"},{"else": "abs-guide.txt"},{"Filename=$1": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"exec 3<&0": "abs-guide.txt"},{"exec 0<\"$Filename\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Default, if no filename specified.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Save stdin to file descriptor 3.": "abs-guide.txt"},{"# Redirect standard input.": "abs-guide.txt"},{"": "abs-guide.txt"},{"count=0": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"while [ \"$name\" != Smith ]": "abs-guide.txt"},{"do": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 20. I/O Redirection": "abs-guide.txt"},{"": "abs-guide.txt"},{"380": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"read name": "abs-guide.txt"},{"echo $name": "abs-guide.txt"},{"let \"count += 1\"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Reads from redirected stdin ($Filename).": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Loop reads from file $Filename": "abs-guide.txt"},{"#+ because of line 20.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# The original version of this script terminated the \"while\" loop with": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"done <\"$Filename\"": "abs-guide.txt"},{"# Exercise:": "abs-guide.txt"},{"# Why is this unnecessary?": "abs-guide.txt"},{"": "abs-guide.txt"},{"exec 0<&3": "abs-guide.txt"},{"exec 3<&-": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Restore old stdin.": "abs-guide.txt"},{"# Close temporary fd 3.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo; echo \"$count names read\"; echo": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 20-7. Redirected until loop": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# Same as previous example, but with \"until\" loop.": "abs-guide.txt"},{"if [ -z \"$1\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"Filename=names.data": "abs-guide.txt"},{"else": "abs-guide.txt"},{"Filename=$1": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# while [ \"$name\" != Smith ]": "abs-guide.txt"},{"until [ \"$name\" = Smith ]": "abs-guide.txt"},{"do": "abs-guide.txt"},{"read name": "abs-guide.txt"},{"echo $name": "abs-guide.txt"},{"done <\"$Filename\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^^^^^^^^^^^^": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Default, if no filename specified.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Change": "abs-guide.txt"},{"": "abs-guide.txt"},{"!=": "abs-guide.txt"},{"": "abs-guide.txt"},{"to =.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Reads from $Filename, rather than stdin.": "abs-guide.txt"},{"# Redirects stdin to file $Filename.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Same results as with \"while\" loop in previous example.": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 20-8. Redirected for loop": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"if [ -z \"$1\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"Filename=names.data": "abs-guide.txt"},{"else": "abs-guide.txt"},{"Filename=$1": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Default, if no filename specified.": "abs-guide.txt"},{"": "abs-guide.txt"},{"line_count=`wc $Filename | awk '{ print $1 }'`": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Number of lines in target file.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Very contrived and kludgy, nevertheless shows that": "abs-guide.txt"},{"#+ it's possible to redirect stdin within a \"for\" loop...": "abs-guide.txt"},{"#+ if you're clever enough.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 20. I/O Redirection": "abs-guide.txt"},{"": "abs-guide.txt"},{"381": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# More concise is": "abs-guide.txt"},{"": "abs-guide.txt"},{"line_count=$(wc -l < \"$Filename\")": "abs-guide.txt"},{"": "abs-guide.txt"},{"for name in `seq $line_count`": "abs-guide.txt"},{"# while [ \"$name\" != Smith ]": "abs-guide.txt"},{"do": "abs-guide.txt"},{"read name": "abs-guide.txt"},{"echo $name": "abs-guide.txt"},{"if [ \"$name\" = Smith ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"break": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"done <\"$Filename\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^^^^^^^^^^^^": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Recall that \"seq\" prints sequence of numbers.": "abs-guide.txt"},{"-more complicated than a \"while\" loop": "abs-guide.txt"},{"-# Reads from $Filename, rather than stdin.": "abs-guide.txt"},{"# Need all this extra baggage here.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Redirects stdin to file $Filename.": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"We can modify the previous example to also redirect the output of the loop.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 20-9. Redirected for loop (both stdin and stdout redirected)": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"if [ -z \"$1\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"Filename=names.data": "abs-guide.txt"},{"else": "abs-guide.txt"},{"Filename=$1": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Default, if no filename specified.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Savefile=$Filename.new": "abs-guide.txt"},{"FinalName=Jonah": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Filename to save results in.": "abs-guide.txt"},{"# Name to terminate \"read\" on.": "abs-guide.txt"},{"": "abs-guide.txt"},{"line_count=`wc $Filename | awk '{ print $1 }'`": "abs-guide.txt"},{"": "abs-guide.txt"},{"for name in `seq $line_count`": "abs-guide.txt"},{"do": "abs-guide.txt"},{"read name": "abs-guide.txt"},{"echo \"$name\"": "abs-guide.txt"},{"if [ \"$name\" = \"$FinalName\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"break": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"done < \"$Filename\" > \"$Savefile\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^^^^^^^^^^^^^^^^^^^^^^^^^^^": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Number of lines in target file.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Redirects stdin to file $Filename,": "abs-guide.txt"},{"and saves it to backup file.": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 20-10. Redirected if/then test": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"if [ -z \"$1\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"Filename=names.data": "abs-guide.txt"},{"else": "abs-guide.txt"},{"Filename=$1": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Default, if no filename specified.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 20. I/O Redirection": "abs-guide.txt"},{"": "abs-guide.txt"},{"382": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"TRUE=1": "abs-guide.txt"},{"if [ \"$TRUE\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"read name": "abs-guide.txt"},{"echo $name": "abs-guide.txt"},{"fi <\"$Filename\"": "abs-guide.txt"},{"# ^^^^^^^^^^^^": "abs-guide.txt"},{"": "abs-guide.txt"},{"# if true": "abs-guide.txt"},{"": "abs-guide.txt"},{"and": "abs-guide.txt"},{"": "abs-guide.txt"},{"if :": "abs-guide.txt"},{"": "abs-guide.txt"},{"also work.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Reads only first line of file.": "abs-guide.txt"},{"# An \"if/then\" test has no way of iterating unless embedded in a loop.": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 20-11. Data file names.data for above examples": "abs-guide.txt"},{"Aristotle": "abs-guide.txt"},{"Arrhenius": "abs-guide.txt"},{"Belisarius": "abs-guide.txt"},{"Capablanca": "abs-guide.txt"},{"Dickens": "abs-guide.txt"},{"Euler": "abs-guide.txt"},{"Goethe": "abs-guide.txt"},{"Hegel": "abs-guide.txt"},{"Jonah": "abs-guide.txt"},{"Laplace": "abs-guide.txt"},{"Maroczy": "abs-guide.txt"},{"Purcell": "abs-guide.txt"},{"Schmidt": "abs-guide.txt"},{"Schopenhauer": "abs-guide.txt"},{"Semmelweiss": "abs-guide.txt"},{"Smith": "abs-guide.txt"},{"Steinmetz": "abs-guide.txt"},{"Tukhashevsky": "abs-guide.txt"},{"Turing": "abs-guide.txt"},{"Venn": "abs-guide.txt"},{"Warshawski": "abs-guide.txt"},{"Znosko-Borowski": "abs-guide.txt"},{"# This is a data file for": "abs-guide.txt"},{"#+ \"redir2.sh\", \"redir3.sh\", \"redir4.sh\", \"redir4a.sh\", \"redir5.sh\".": "abs-guide.txt"},{"": "abs-guide.txt"},{"Redirecting the stdout of a code block has the effect of saving its output to a file. See Example 3-2.": "abs-guide.txt"},{"Here documents are a special case of redirected code blocks. That being the case, it should be possible to feed": "abs-guide.txt"},{"the output of a here document into the stdin for a while loop.": "abs-guide.txt"},{"# This example by Albert Siersema": "abs-guide.txt"},{"# Used with permission (thanks!).": "abs-guide.txt"},{"function doesOutput()": "abs-guide.txt"},{"# Could be an external command too, of course.": "abs-guide.txt"},{"# Here we show you can use a function as well.": "abs-guide.txt"},{"{": "abs-guide.txt"},{"ls -al *.jpg | awk '{print $5,$9}'": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"nr=0": "abs-guide.txt"},{"totalSize=0": "abs-guide.txt"},{"": "abs-guide.txt"},{"# We want the while loop to be able to manipulate these and": "abs-guide.txt"},{"#+ to be able to see the changes after the 'while' finished.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 20. I/O Redirection": "abs-guide.txt"},{"": "abs-guide.txt"},{"383": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"while read fileSize fileName ; do": "abs-guide.txt"},{"echo \"$fileName is $fileSize bytes\"": "abs-guide.txt"},{"let nr++": "abs-guide.txt"},{"totalSize=$((totalSize+fileSize))": "abs-guide.txt"},{"# Or: \"let totalSize+=fileSize\"": "abs-guide.txt"},{"done<<EOF": "abs-guide.txt"},{"$(doesOutput)": "abs-guide.txt"},{"EOF": "abs-guide.txt"},{"echo \"$nr files totaling $totalSize bytes\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"20.3. Applications": "abs-guide.txt"},{"Clever use of I/O redirection permits parsing and stitching together snippets of command output (see Example": "abs-guide.txt"},{"15-7). This permits generating report and log files.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 20-12. Logging events": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# logevents.sh": "abs-guide.txt"},{"# Author: Stephane Chazelas.": "abs-guide.txt"},{"# Used in ABS Guide with permission.": "abs-guide.txt"},{"# Event logging to a file.": "abs-guide.txt"},{"# Must be run as root (for write access in /var/log).": "abs-guide.txt"},{"ROOT_UID=0": "abs-guide.txt"},{"E_NOTROOT=67": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Only users with $UID 0 have root privileges.": "abs-guide.txt"},{"# Non-root exit error.": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [ \"$UID\" -ne \"$ROOT_UID\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Must be root to run this script.\"": "abs-guide.txt"},{"exit $E_NOTROOT": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"FD_DEBUG1=3": "abs-guide.txt"},{"FD_DEBUG2=4": "abs-guide.txt"},{"FD_DEBUG3=5": "abs-guide.txt"},{"# === Uncomment one of the two lines below to activate script. ===": "abs-guide.txt"},{"# LOG_EVENTS=1": "abs-guide.txt"},{"# LOG_VARS=1": "abs-guide.txt"},{"": "abs-guide.txt"},{"log() # Writes time and date to log file.": "abs-guide.txt"},{"{": "abs-guide.txt"},{"echo \"$(date) $*\" >&7": "abs-guide.txt"},{"# This *appends* the date to the file.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^^^^^^^ command substitution": "abs-guide.txt"},{"# See below.": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"case $LOG_LEVEL in": "abs-guide.txt"},{"1) exec 3>&2": "abs-guide.txt"},{"2) exec 3>&2": "abs-guide.txt"},{"": "abs-guide.txt"},{"4> /dev/null 5> /dev/null;;": "abs-guide.txt"},{"4>&2": "abs-guide.txt"},{"5> /dev/null;;": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 20. I/O Redirection": "abs-guide.txt"},{"": "abs-guide.txt"},{"384": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"3) exec 3>&2": "abs-guide.txt"},{"4>&2": "abs-guide.txt"},{"5>&2;;": "abs-guide.txt"},{"*) exec 3> /dev/null 4> /dev/null 5> /dev/null;;": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"FD_LOGVARS=6": "abs-guide.txt"},{"if [[ $LOG_VARS ]]": "abs-guide.txt"},{"then exec 6>> /var/log/vars.log": "abs-guide.txt"},{"else exec 6> /dev/null": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Bury output.": "abs-guide.txt"},{"": "abs-guide.txt"},{"FD_LOGEVENTS=7": "abs-guide.txt"},{"if [[ $LOG_EVENTS ]]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"# exec 7 >(exec gawk '{print strftime(), $0}' >> /var/log/event.log)": "abs-guide.txt"},{"# Above line fails in versions of Bash more recent than 2.04. Why?": "abs-guide.txt"},{"exec 7>> /var/log/event.log": "abs-guide.txt"},{"# Append to \"event.log\".": "abs-guide.txt"},{"log": "abs-guide.txt"},{"# Write time and date.": "abs-guide.txt"},{"else exec 7> /dev/null": "abs-guide.txt"},{"# Bury output.": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"echo \"DEBUG3: beginning\" >&${FD_DEBUG3}": "abs-guide.txt"},{"ls -l >&5 2>&4": "abs-guide.txt"},{"": "abs-guide.txt"},{"# command1 >&5 2>&4": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo \"Done\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# command2": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo \"sending mail\" >&${FD_LOGEVENTS}": "abs-guide.txt"},{"# Writes \"sending mail\" to file descriptor #7.": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 20. I/O Redirection": "abs-guide.txt"},{"": "abs-guide.txt"},{"385": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fChapter 21. Subshells": "abs-guide.txt"},{"Running a shell script launches a new process, a subshell.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Definition: A subshell is a child process launched by a shell (or shell script).": "abs-guide.txt"},{"A subshell is a separate instance of the command processor -- the shell that gives you the prompt at the": "abs-guide.txt"},{"console or in an xterm window. Just as your commands are interpreted at the command-line prompt, similarly": "abs-guide.txt"},{"does a script batch-process a list of commands. Each shell script running is, in effect, a subprocess (child": "abs-guide.txt"},{"process) of the parent shell.": "abs-guide.txt"},{"A shell script can itself launch subprocesses. These subshells let the script do parallel processing, in effect": "abs-guide.txt"},{"executing multiple subtasks simultaneously.": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# subshell-test.sh": "abs-guide.txt"},{"(": "abs-guide.txt"},{"# Inside parentheses, and therefore a subshell . . .": "abs-guide.txt"},{"while [ 1 ]": "abs-guide.txt"},{"# Endless loop.": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo \"Subshell running . . .\"": "abs-guide.txt"},{"done": "abs-guide.txt"},{")": "abs-guide.txt"},{"# Script will run forever,": "abs-guide.txt"},{"#+ or at least until terminated by a Ctl-C.": "abs-guide.txt"},{"exit $?": "abs-guide.txt"},{"": "abs-guide.txt"},{"# End of script (but will never get here).": "abs-guide.txt"},{"": "abs-guide.txt"},{"Now, run the script:": "abs-guide.txt"},{"sh subshell-test.sh": "abs-guide.txt"},{"And, while the script is running, from a different xterm:": "abs-guide.txt"},{"ps -ef | grep subshell-test.sh": "abs-guide.txt"},{"UID": "abs-guide.txt"},{"500": "abs-guide.txt"},{"500": "abs-guide.txt"},{"": "abs-guide.txt"},{"PID": "abs-guide.txt"},{"2698": "abs-guide.txt"},{"2699": "abs-guide.txt"},{"": "abs-guide.txt"},{"PPID C STIME TTY": "abs-guide.txt"},{"2502 0 14:26 pts/4": "abs-guide.txt"},{"2698 21 14:26 pts/4": "abs-guide.txt"},{"": "abs-guide.txt"},{"TIME": "abs-guide.txt"},{"CMD": "abs-guide.txt"},{"00:00:00 sh subshell-test.sh": "abs-guide.txt"},{"00:00:24 sh subshell-test.sh": "abs-guide.txt"},{"": "abs-guide.txt"},{"^^^^": "abs-guide.txt"},{"Analysis:": "abs-guide.txt"},{"PID 2698, the script, launched PID 2699, the subshell.": "abs-guide.txt"},{"Note: The \"UID ...\" line would be filtered out by the \"grep\" command,": "abs-guide.txt"},{"but is shown here for illustrative purposes.": "abs-guide.txt"},{"": "abs-guide.txt"},{"In general, an external command in a script forks off a subprocess, [107] whereas a Bash builtin does not. For": "abs-guide.txt"},{"this reason, builtins execute more quickly and use fewer system resources than their external command": "abs-guide.txt"},{"equivalents.": "abs-guide.txt"},{"Command List within Parentheses": "abs-guide.txt"},{"Chapter 21. Subshells": "abs-guide.txt"},{"": "abs-guide.txt"},{"386": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"( command1; command2; command3; ... )": "abs-guide.txt"},{"A command list embedded between parentheses runs as a subshell.": "abs-guide.txt"},{"Variables in a subshell are not visible outside the block of code in the subshell. They are not accessible to the": "abs-guide.txt"},{"parent process, to the shell that launched the subshell. These are, in effect, variables local to the child process.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 21-1. Variable scope in a subshell": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# subshell.sh": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"We are outside the subshell.\"": "abs-guide.txt"},{"echo \"Subshell level OUTSIDE subshell = $BASH_SUBSHELL\"": "abs-guide.txt"},{"# Bash, version 3, adds the new": "abs-guide.txt"},{"$BASH_SUBSHELL variable.": "abs-guide.txt"},{"echo; echo": "abs-guide.txt"},{"outer_variable=Outer": "abs-guide.txt"},{"global_variable=": "abs-guide.txt"},{"# Define global variable for \"storage\" of": "abs-guide.txt"},{"#+ value of subshell variable.": "abs-guide.txt"},{"(": "abs-guide.txt"},{"echo \"We are inside the subshell.\"": "abs-guide.txt"},{"echo \"Subshell level INSIDE subshell = $BASH_SUBSHELL\"": "abs-guide.txt"},{"inner_variable=Inner": "abs-guide.txt"},{"echo \"From inside subshell, \\\"inner_variable\\\" = $inner_variable\"": "abs-guide.txt"},{"echo \"From inside subshell, \\\"outer\\\" = $outer_variable\"": "abs-guide.txt"},{"global_variable=\"$inner_variable\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Will this allow \"exporting\"": "abs-guide.txt"},{"#+ a subshell variable?": "abs-guide.txt"},{"": "abs-guide.txt"},{")": "abs-guide.txt"},{"echo; echo": "abs-guide.txt"},{"echo \"We are outside the subshell.\"": "abs-guide.txt"},{"echo \"Subshell level OUTSIDE subshell = $BASH_SUBSHELL\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"if [ -z \"$inner_variable\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"inner_variable undefined in main body of shell\"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo \"inner_variable defined in main body of shell\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"echo \"From main body of shell, \\\"inner_variable\\\" = $inner_variable\"": "abs-guide.txt"},{"# $inner_variable will show as blank (uninitialized)": "abs-guide.txt"},{"#+ because variables defined in a subshell are \"local variables\".": "abs-guide.txt"},{"# Is there a remedy for this?": "abs-guide.txt"},{"echo \"global_variable = \"$global_variable\"\" # Why doesn't this work?": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"# =======================================================================": "abs-guide.txt"},{"# Additionally ...": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 21. Subshells": "abs-guide.txt"},{"": "abs-guide.txt"},{"387": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"echo \"-----------------\"; echo": "abs-guide.txt"},{"var=41": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Global variable.": "abs-guide.txt"},{"": "abs-guide.txt"},{"( let \"var+=1\"; echo \"\\$var INSIDE subshell = $var\" )": "abs-guide.txt"},{"": "abs-guide.txt"},{"# 42": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo \"\\$var OUTSIDE subshell = $var\"": "abs-guide.txt"},{"# 41": "abs-guide.txt"},{"# Variable operations inside a subshell, even to a GLOBAL variable": "abs-guide.txt"},{"#+ do not affect the value of the variable outside the subshell!": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"Question:": "abs-guide.txt"},{"-------Once having exited a subshell,": "abs-guide.txt"},{"is there any way to reenter that very same subshell": "abs-guide.txt"},{"to modify or access the subshell variables?": "abs-guide.txt"},{"": "abs-guide.txt"},{"See also $BASHPID and Example 34-2.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Definition: The scope of a variable is the context in which it has meaning, in which it has a value that": "abs-guide.txt"},{"can be referenced. For example, the scope of a local variable lies only within the function, block of code, or": "abs-guide.txt"},{"subshell within which it is defined, while the scope of a global variable is the entire script in which it": "abs-guide.txt"},{"appears.": "abs-guide.txt"},{"While the $BASH_SUBSHELL internal variable indicates the nesting level of a subshell, the $SHLVL": "abs-guide.txt"},{"variable shows no change within a subshell.": "abs-guide.txt"},{"echo \" \\$BASH_SUBSHELL outside subshell": "abs-guide.txt"},{"= $BASH_SUBSHELL\"": "abs-guide.txt"},{"# 0": "abs-guide.txt"},{"( echo \" \\$BASH_SUBSHELL inside subshell": "abs-guide.txt"},{"= $BASH_SUBSHELL\" )": "abs-guide.txt"},{"# 1": "abs-guide.txt"},{"( ( echo \" \\$BASH_SUBSHELL inside nested subshell = $BASH_SUBSHELL\" ) ) # 2": "abs-guide.txt"},{"# ^ ^": "abs-guide.txt"},{"*** nested ***": "abs-guide.txt"},{"^ ^": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \" \\$SHLVL outside subshell = $SHLVL\"": "abs-guide.txt"},{"( echo \" \\$SHLVL inside subshell = $SHLVL\" )": "abs-guide.txt"},{"": "abs-guide.txt"},{"# 3": "abs-guide.txt"},{"# 3 (No change!)": "abs-guide.txt"},{"": "abs-guide.txt"},{"Directory changes made in a subshell do not carry over to the parent shell.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 21-2. List User Profiles": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# allprofs.sh: Print all user profiles.": "abs-guide.txt"},{"# This script written by Heiner Steven, and modified by the document author.": "abs-guide.txt"},{"FILE=.bashrc": "abs-guide.txt"},{"": "abs-guide.txt"},{"# File containing user profile,": "abs-guide.txt"},{"#+ was \".profile\" in original script.": "abs-guide.txt"},{"": "abs-guide.txt"},{"for home in `awk -F: '{print $6}' /etc/passwd`": "abs-guide.txt"},{"do": "abs-guide.txt"},{"[ -d \"$home\" ] || continue": "abs-guide.txt"},{"# If no home directory, go to next.": "abs-guide.txt"},{"[ -r \"$home\" ] || continue": "abs-guide.txt"},{"# If not readable, go to next.": "abs-guide.txt"},{"(cd $home; [ -e $FILE ] && less $FILE)": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 21. Subshells": "abs-guide.txt"},{"": "abs-guide.txt"},{"388": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"done": "abs-guide.txt"},{"# When script terminates, there is no need to 'cd' back to original directory,": "abs-guide.txt"},{"#+ because 'cd $home' takes place in a subshell.": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"A subshell may be used to set up a \"dedicated environment\" for a command group.": "abs-guide.txt"},{"COMMAND1": "abs-guide.txt"},{"COMMAND2": "abs-guide.txt"},{"COMMAND3": "abs-guide.txt"},{"(": "abs-guide.txt"},{"IFS=:": "abs-guide.txt"},{"PATH=/bin": "abs-guide.txt"},{"unset TERMINFO": "abs-guide.txt"},{"set -C": "abs-guide.txt"},{"shift 5": "abs-guide.txt"},{"COMMAND4": "abs-guide.txt"},{"COMMAND5": "abs-guide.txt"},{"exit 3 # Only exits the subshell!": "abs-guide.txt"},{")": "abs-guide.txt"},{"# The parent shell has not been affected, and the environment is preserved.": "abs-guide.txt"},{"COMMAND6": "abs-guide.txt"},{"COMMAND7": "abs-guide.txt"},{"": "abs-guide.txt"},{"As seen here, the exit command only terminates the subshell in which it is running, not the parent shell or": "abs-guide.txt"},{"script.": "abs-guide.txt"},{"One application of such a \"dedicated environment\" is testing whether a variable is defined.": "abs-guide.txt"},{"if (set -u; : $variable) 2> /dev/null": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Variable is set.\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# Variable has been set in current script,": "abs-guide.txt"},{"#+ or is an an internal Bash variable,": "abs-guide.txt"},{"#+ or is present in environment (has been exported).": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Could also be written [[ ${variable-x} != x || ${variable-y} != y ]]": "abs-guide.txt"},{"or": "abs-guide.txt"},{"[[ ${variable-x} != x$variable ]]": "abs-guide.txt"},{"or": "abs-guide.txt"},{"[[ ${variable+x} = x ]]": "abs-guide.txt"},{"or": "abs-guide.txt"},{"[[ ${variable-x} != x ]]": "abs-guide.txt"},{"": "abs-guide.txt"},{"Another application is checking for a lock file:": "abs-guide.txt"},{"if (set -C; : > lock_file) 2> /dev/null": "abs-guide.txt"},{"then": "abs-guide.txt"},{":": "abs-guide.txt"},{"# lock_file didn't exist: no user running the script": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo \"Another user is already running that script.\"": "abs-guide.txt"},{"exit 65": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# Code snippet by St\u00e9phane Chazelas,": "abs-guide.txt"},{"#+ with modifications by Paulo Marcel Coelho Aragao.": "abs-guide.txt"},{"": "abs-guide.txt"},{"+": "abs-guide.txt"},{"Processes may execute in parallel within different subshells. This permits breaking a complex task into": "abs-guide.txt"},{"subcomponents processed concurrently.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 21. Subshells": "abs-guide.txt"},{"": "abs-guide.txt"},{"389": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"Example 21-3. Running parallel processes in subshells": "abs-guide.txt"},{"(cat list1 list2 list3 | sort | uniq > list123) &": "abs-guide.txt"},{"(cat list4 list5 list6 | sort | uniq > list456) &": "abs-guide.txt"},{"# Merges and sorts both sets of lists simultaneously.": "abs-guide.txt"},{"# Running in background ensures parallel execution.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Same effect as": "abs-guide.txt"},{"#": "abs-guide.txt"},{"cat list1 list2 list3 | sort | uniq > list123 &": "abs-guide.txt"},{"#": "abs-guide.txt"},{"cat list4 list5 list6 | sort | uniq > list456 &": "abs-guide.txt"},{"wait": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Don't execute the next command until subshells finish.": "abs-guide.txt"},{"": "abs-guide.txt"},{"diff list123 list456": "abs-guide.txt"},{"": "abs-guide.txt"},{"Redirecting I/O to a subshell uses the \"|\" pipe operator, as in ls -al | (command).": "abs-guide.txt"},{"A code block between curly brackets does not launch a subshell.": "abs-guide.txt"},{"{ command1; command2; command3; . . . commandN; }": "abs-guide.txt"},{"var1=23": "abs-guide.txt"},{"echo \"$var1\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# 23": "abs-guide.txt"},{"": "abs-guide.txt"},{"{ var1=76; }": "abs-guide.txt"},{"echo \"$var1\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# 76": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 21. Subshells": "abs-guide.txt"},{"": "abs-guide.txt"},{"390": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fChapter 22. Restricted Shells": "abs-guide.txt"},{"Disabled commands in restricted shells": "abs-guide.txt"},{". Running a script or portion of a script in restricted mode disables certain commands that would": "abs-guide.txt"},{"otherwise be available. This is a security measure intended to limit the privileges of the script user and": "abs-guide.txt"},{"to minimize possible damage from running the script.": "abs-guide.txt"},{"The following commands and actions are disabled:": "abs-guide.txt"},{"\u2022 Using cd to change the working directory.": "abs-guide.txt"},{"\u2022 Changing the values of the $PATH, $SHELL, $BASH_ENV, or $ENV environmental variables.": "abs-guide.txt"},{"\u2022 Reading or changing the $SHELLOPTS, shell environmental options.": "abs-guide.txt"},{"\u2022 Output redirection.": "abs-guide.txt"},{"\u2022 Invoking commands containing one or more /'s.": "abs-guide.txt"},{"\u2022 Invoking exec to substitute a different process for the shell.": "abs-guide.txt"},{"\u2022 Various other commands that would enable monkeying with or attempting to subvert the script for an": "abs-guide.txt"},{"unintended purpose.": "abs-guide.txt"},{"\u2022 Getting out of restricted mode within the script.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 22-1. Running a script in restricted mode": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# Starting the script with \"#!/bin/bash -r\"": "abs-guide.txt"},{"#+ runs entire script in restricted mode.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"Changing directory.\"": "abs-guide.txt"},{"cd /usr/local": "abs-guide.txt"},{"echo \"Now in `pwd`\"": "abs-guide.txt"},{"echo \"Coming back home.\"": "abs-guide.txt"},{"cd": "abs-guide.txt"},{"echo \"Now in `pwd`\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"# Everything up to here in normal, unrestricted mode.": "abs-guide.txt"},{"set -r": "abs-guide.txt"},{"# set --restricted": "abs-guide.txt"},{"has same effect.": "abs-guide.txt"},{"echo \"==> Now in restricted mode. <==\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"Attempting directory change in restricted mode.\"": "abs-guide.txt"},{"cd ..": "abs-guide.txt"},{"echo \"Still in `pwd`\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"\\$SHELL = $SHELL\"": "abs-guide.txt"},{"echo \"Attempting to change shell in restricted mode.\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 22. Restricted Shells": "abs-guide.txt"},{"": "abs-guide.txt"},{"391": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"SHELL=\"/bin/ash\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"\\$SHELL= $SHELL\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"Attempting to redirect output in restricted mode.\"": "abs-guide.txt"},{"ls -l /usr/bin > bin.files": "abs-guide.txt"},{"ls -l bin.files": "abs-guide.txt"},{"# Try to list attempted file creation effort.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 22. Restricted Shells": "abs-guide.txt"},{"": "abs-guide.txt"},{"392": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fChapter 23. Process Substitution": "abs-guide.txt"},{"Piping the stdout of a command into the stdin of another is a powerful technique. But, what if you need": "abs-guide.txt"},{"to pipe the stdout of multiple commands? This is where process substitution comes in.": "abs-guide.txt"},{"Process substitution feeds the output of a process (or processes) into the stdin of another process.": "abs-guide.txt"},{"Template": "abs-guide.txt"},{"Command list enclosed within parentheses": "abs-guide.txt"},{">(command_list)": "abs-guide.txt"},{"<(command_list)": "abs-guide.txt"},{"Process substitution uses /dev/fd/<n> files to send the results of the process(es) within": "abs-guide.txt"},{"parentheses to another process. [108]": "abs-guide.txt"},{"There is no space between the the \"<\" or \">\" and the parentheses. Space there would": "abs-guide.txt"},{"give an error message.": "abs-guide.txt"},{"bash$ echo >(true)": "abs-guide.txt"},{"/dev/fd/63": "abs-guide.txt"},{"bash$ echo <(true)": "abs-guide.txt"},{"/dev/fd/63": "abs-guide.txt"},{"bash$ echo >(true) <(true)": "abs-guide.txt"},{"/dev/fd/63 /dev/fd/62": "abs-guide.txt"},{"": "abs-guide.txt"},{"bash$ wc <(cat /usr/share/dict/linux.words)": "abs-guide.txt"},{"483523 483523 4992010 /dev/fd/63": "abs-guide.txt"},{"bash$ grep script /usr/share/dict/linux.words | wc": "abs-guide.txt"},{"262": "abs-guide.txt"},{"262": "abs-guide.txt"},{"3601": "abs-guide.txt"},{"bash$ wc <(grep script /usr/share/dict/linux.words)": "abs-guide.txt"},{"262": "abs-guide.txt"},{"262": "abs-guide.txt"},{"3601 /dev/fd/63": "abs-guide.txt"},{"": "abs-guide.txt"},{"Bash creates a pipe with two file descriptors, --fIn and fOut--. The stdin of true connects to": "abs-guide.txt"},{"fOut (dup2(fOut, 0)), then Bash passes a /dev/fd/fIn argument to echo. On systems lacking": "abs-guide.txt"},{"/dev/fd/<n> files, Bash may use temporary files. (Thanks, S.C.)": "abs-guide.txt"},{"Process substitution can compare the output of two different commands, or even the output of different": "abs-guide.txt"},{"options to the same command.": "abs-guide.txt"},{"bash$ comm <(ls -l) <(ls -al)": "abs-guide.txt"},{"total 12": "abs-guide.txt"},{"-rw-rw-r-1 bozo bozo": "abs-guide.txt"},{"78 Mar 10 12:58 File0": "abs-guide.txt"},{"-rw-rw-r-1 bozo bozo": "abs-guide.txt"},{"42 Mar 10 12:58 File2": "abs-guide.txt"},{"-rw-rw-r-1 bozo bozo": "abs-guide.txt"},{"103 Mar 10 12:58 t2.sh": "abs-guide.txt"},{"total 20": "abs-guide.txt"},{"drwxrwxrwx": "abs-guide.txt"},{"2 bozo bozo": "abs-guide.txt"},{"4096 Mar 10 18:10 .": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 23. Process Substitution": "abs-guide.txt"},{"": "abs-guide.txt"},{"393": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"drwx------rw-rw-r--rw-rw-r--rw-rw-r--": "abs-guide.txt"},{"": "abs-guide.txt"},{"72": "abs-guide.txt"},{"1": "abs-guide.txt"},{"1": "abs-guide.txt"},{"1": "abs-guide.txt"},{"": "abs-guide.txt"},{"bozo": "abs-guide.txt"},{"bozo": "abs-guide.txt"},{"bozo": "abs-guide.txt"},{"bozo": "abs-guide.txt"},{"": "abs-guide.txt"},{"bozo": "abs-guide.txt"},{"bozo": "abs-guide.txt"},{"bozo": "abs-guide.txt"},{"bozo": "abs-guide.txt"},{"": "abs-guide.txt"},{"4096": "abs-guide.txt"},{"78": "abs-guide.txt"},{"42": "abs-guide.txt"},{"103": "abs-guide.txt"},{"": "abs-guide.txt"},{"Mar": "abs-guide.txt"},{"Mar": "abs-guide.txt"},{"Mar": "abs-guide.txt"},{"Mar": "abs-guide.txt"},{"": "abs-guide.txt"},{"10": "abs-guide.txt"},{"10": "abs-guide.txt"},{"10": "abs-guide.txt"},{"10": "abs-guide.txt"},{"": "abs-guide.txt"},{"17:58": "abs-guide.txt"},{"12:58": "abs-guide.txt"},{"12:58": "abs-guide.txt"},{"12:58": "abs-guide.txt"},{"": "abs-guide.txt"},{"..": "abs-guide.txt"},{"File0": "abs-guide.txt"},{"File2": "abs-guide.txt"},{"t2.sh": "abs-guide.txt"},{"": "abs-guide.txt"},{"Process substitution can compare the contents of two directories -- to see which filenames are in one, but not": "abs-guide.txt"},{"the other.": "abs-guide.txt"},{"diff <(ls $first_directory) <(ls $second_directory)": "abs-guide.txt"},{"": "abs-guide.txt"},{"Some other usages and uses of process substitution:": "abs-guide.txt"},{"": "abs-guide.txt"},{"read -a list < <( od -Ad -w24 -t u2 /dev/urandom )": "abs-guide.txt"},{"# Read a list of random numbers from /dev/urandom,": "abs-guide.txt"},{"#+ process with \"od\"": "abs-guide.txt"},{"#+ and feed into stdin of \"read\" . . .": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"From \"insertion-sort.bash\" example script.": "abs-guide.txt"},{"Courtesy of JuanJo Ciarlante.": "abs-guide.txt"},{"": "abs-guide.txt"},{"PORT=6881": "abs-guide.txt"},{"": "abs-guide.txt"},{"# bittorrent": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Scan the port to make sure nothing nefarious is going on.": "abs-guide.txt"},{"netcat -l $PORT | tee>(md5sum ->mydata-orig.md5) |": "abs-guide.txt"},{"gzip | tee>(md5sum - | sed 's/-$/mydata.lz2/'>mydata-gz.md5)>mydata.gz": "abs-guide.txt"},{"# Check the decompression:": "abs-guide.txt"},{"gzip -d<mydata.gz | md5sum -c mydata-orig.md5)": "abs-guide.txt"},{"# The MD5sum of the original checks stdin and detects compression issues.": "abs-guide.txt"},{"# Bill Davidsen contributed this example": "abs-guide.txt"},{"#+ (with light edits by the ABS Guide author).": "abs-guide.txt"},{"cat <(ls -l)": "abs-guide.txt"},{"# Same as": "abs-guide.txt"},{"": "abs-guide.txt"},{"ls -l | cat": "abs-guide.txt"},{"": "abs-guide.txt"},{"sort -k 9 <(ls -l /bin) <(ls -l /usr/bin) <(ls -l /usr/X11R6/bin)": "abs-guide.txt"},{"# Lists all the files in the 3 main 'bin' directories, and sorts by filename.": "abs-guide.txt"},{"# Note that three (count 'em) distinct commands are fed to 'sort'.": "abs-guide.txt"},{"": "abs-guide.txt"},{"diff <(command1) <(command2)": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Gives difference in command output.": "abs-guide.txt"},{"": "abs-guide.txt"},{"tar cf >(bzip2 -c > file.tar.bz2) $directory_name": "abs-guide.txt"},{"# Calls \"tar cf /dev/fd/?? $directory_name\", and \"bzip2 -c > file.tar.bz2\".": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Because of the /dev/fd/<n> system feature,": "abs-guide.txt"},{"# the pipe between both commands does not need to be named.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# This can be emulated.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"bzip2 -c < pipe > file.tar.bz2&": "abs-guide.txt"},{"tar cf pipe $directory_name": "abs-guide.txt"},{"rm pipe": "abs-guide.txt"},{"#": "abs-guide.txt"},{"or": "abs-guide.txt"},{"exec 3>&1": "abs-guide.txt"},{"tar cf /dev/fd/4 $directory_name 4>&1 >&3 3>&- | bzip2 -c > file.tar.bz2 3>&exec 3>&-": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 23. Process Substitution": "abs-guide.txt"},{"": "abs-guide.txt"},{"394": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# Thanks, St\u00e9phane Chazelas": "abs-guide.txt"},{"": "abs-guide.txt"},{"Here is a method of circumventing the problem of an echo piped to a while-read loop running in a subshell.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 23-1. Code block redirection without forking": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# wr-ps.bash: while-read loop with process substitution.": "abs-guide.txt"},{"# This example contributed by Tomas Pospisek.": "abs-guide.txt"},{"# (Heavily edited by the ABS Guide author.)": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"random input\" | while read i": "abs-guide.txt"},{"do": "abs-guide.txt"},{"global=3D\": Not available outside the loop.\"": "abs-guide.txt"},{"# ... because it runs in a subshell.": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo \"\\$global (from outside the subprocess) = $global\"": "abs-guide.txt"},{"# $global (from outside the subprocess) =": "abs-guide.txt"},{"echo; echo \"--\"; echo": "abs-guide.txt"},{"while read i": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo $i": "abs-guide.txt"},{"global=3D\": Available outside the loop.\"": "abs-guide.txt"},{"# ... because it does NOT run in a subshell.": "abs-guide.txt"},{"done < <( echo \"random input\" )": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^ ^": "abs-guide.txt"},{"echo \"\\$global (using process substitution) = $global\"": "abs-guide.txt"},{"# Random input": "abs-guide.txt"},{"# $global (using process substitution) = 3D: Available outside the loop.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo; echo \"##########\"; echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"# And likewise . . .": "abs-guide.txt"},{"declare -a inloop": "abs-guide.txt"},{"index=0": "abs-guide.txt"},{"cat $0 | while read line": "abs-guide.txt"},{"do": "abs-guide.txt"},{"inloop[$index]=\"$line\"": "abs-guide.txt"},{"((index++))": "abs-guide.txt"},{"# It runs in a subshell, so ...": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo \"OUTPUT = \"": "abs-guide.txt"},{"echo ${inloop[*]}": "abs-guide.txt"},{"# ... nothing echoes.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo; echo \"--\"; echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"declare -a outloop": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 23. Process Substitution": "abs-guide.txt"},{"": "abs-guide.txt"},{"395": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"index=0": "abs-guide.txt"},{"while read line": "abs-guide.txt"},{"do": "abs-guide.txt"},{"outloop[$index]=\"$line\"": "abs-guide.txt"},{"((index++))": "abs-guide.txt"},{"# It does NOT run in a subshell, so ...": "abs-guide.txt"},{"done < <( cat $0 )": "abs-guide.txt"},{"echo \"OUTPUT = \"": "abs-guide.txt"},{"echo ${outloop[*]}": "abs-guide.txt"},{"# ... the entire script echoes.": "abs-guide.txt"},{"exit $?": "abs-guide.txt"},{"": "abs-guide.txt"},{"This is a similar example.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 23-2. Redirecting the output of process substitution into a loop.": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# psub.bash": "abs-guide.txt"},{"# As inspired by Diego Molina (thanks!).": "abs-guide.txt"},{"declare -a array0": "abs-guide.txt"},{"while read": "abs-guide.txt"},{"do": "abs-guide.txt"},{"array0[${#array0[@]}]=\"$REPLY\"": "abs-guide.txt"},{"done < <( sed -e 's/bash/CRASH-BANG!/' $0 | grep bin | awk '{print $1}' )": "abs-guide.txt"},{"# Sets the default 'read' variable, $REPLY, by process substitution,": "abs-guide.txt"},{"#+ then copies it into an array.": "abs-guide.txt"},{"echo \"${array0[@]}\"": "abs-guide.txt"},{"exit $?": "abs-guide.txt"},{"# ====================================== #": "abs-guide.txt"},{"bash psub.bash": "abs-guide.txt"},{"#!/bin/CRASH-BANG! done #!/bin/CRASH-BANG!": "abs-guide.txt"},{"": "abs-guide.txt"},{"A reader sent in the following interesting example of process substitution.": "abs-guide.txt"},{"# Script fragment taken from SuSE distribution:": "abs-guide.txt"},{"# --------------------------------------------------------------#": "abs-guide.txt"},{"while read des what mask iface; do": "abs-guide.txt"},{"# Some commands ...": "abs-guide.txt"},{"done < <(route -n)": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^ ^ First < is redirection, second is process substitution.": "abs-guide.txt"},{"# To test it, let's make it do something.": "abs-guide.txt"},{"while read des what mask iface; do": "abs-guide.txt"},{"echo $des $what $mask $iface": "abs-guide.txt"},{"done < <(route -n)": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Output:": "abs-guide.txt"},{"Kernel IP routing table": "abs-guide.txt"},{"Destination Gateway Genmask Flags Metric Ref Use Iface": "abs-guide.txt"},{"127.0.0.0 0.0.0.0 255.0.0.0 U 0 0 0 lo": "abs-guide.txt"},{"--------------------------------------------------------------#": "abs-guide.txt"},{"As St\u00e9phane Chazelas points out,": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 23. Process Substitution": "abs-guide.txt"},{"": "abs-guide.txt"},{"396": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"#+ an easier-to-understand equivalent is:": "abs-guide.txt"},{"route -n |": "abs-guide.txt"},{"while read des what mask iface; do": "abs-guide.txt"},{"# Variables set from output of pipe.": "abs-guide.txt"},{"echo $des $what $mask $iface": "abs-guide.txt"},{"done # This yields the same output as above.": "abs-guide.txt"},{"# However, as Ulrich Gayer points out . . .": "abs-guide.txt"},{"#+ this simplified equivalent uses a subshell for the while loop,": "abs-guide.txt"},{"#+ and therefore the variables disappear when the pipe terminates.": "abs-guide.txt"},{"# --------------------------------------------------------------#": "abs-guide.txt"},{"# However, Filip Moritz comments that there is a subtle difference": "abs-guide.txt"},{"#+ between the above two examples, as the following shows.": "abs-guide.txt"},{"(": "abs-guide.txt"},{"route -n | while read x; do ((y++)); done": "abs-guide.txt"},{"echo $y # $y is still unset": "abs-guide.txt"},{"while read x; do ((y++)); done < <(route -n)": "abs-guide.txt"},{"echo $y # $y has the number of lines of output of route -n": "abs-guide.txt"},{")": "abs-guide.txt"},{"More generally spoken": "abs-guide.txt"},{"(": "abs-guide.txt"},{": | x=x": "abs-guide.txt"},{"# seems to start a subshell like": "abs-guide.txt"},{": | ( x=x )": "abs-guide.txt"},{"# while": "abs-guide.txt"},{"x=x < <(:)": "abs-guide.txt"},{"# does not": "abs-guide.txt"},{")": "abs-guide.txt"},{"# This is useful, when parsing csv and the like.": "abs-guide.txt"},{"# That is, in effect, what the original SuSE code fragment does.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 23. Process Substitution": "abs-guide.txt"},{"": "abs-guide.txt"},{"397": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fChapter 24. Functions": "abs-guide.txt"},{"Like \"real\" programming languages, Bash has functions, though in a somewhat limited implementation. A": "abs-guide.txt"},{"function is a subroutine, a code block that implements a set of operations, a \"black box\" that performs a": "abs-guide.txt"},{"specified task. Wherever there is repetitive code, when a task repeats with only slight variations in procedure,": "abs-guide.txt"},{"then consider using a function.": "abs-guide.txt"},{"function function_name {": "abs-guide.txt"},{"command...": "abs-guide.txt"},{"}": "abs-guide.txt"},{"or": "abs-guide.txt"},{"function_name () {": "abs-guide.txt"},{"command...": "abs-guide.txt"},{"}": "abs-guide.txt"},{"This second form will cheer the hearts of C programmers (and is more portable).": "abs-guide.txt"},{"As in C, the function's opening bracket may optionally appear on the second line.": "abs-guide.txt"},{"function_name ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"command...": "abs-guide.txt"},{"}": "abs-guide.txt"},{"A function may be \"compacted\" into a single line.": "abs-guide.txt"},{"fun () { echo \"This is a function\"; echo; }": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^": "abs-guide.txt"},{"^": "abs-guide.txt"},{"": "abs-guide.txt"},{"In this case, however, a semicolon must follow the final command in the function.": "abs-guide.txt"},{"fun () { echo \"This is a function\"; echo } # Error!": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^": "abs-guide.txt"},{"fun2 () { echo \"Even a single-command function? Yes!\"; }": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^": "abs-guide.txt"},{"": "abs-guide.txt"},{"Functions are called, triggered, simply by invoking their names. A function call is equivalent to a command.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 24-1. Simple functions": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# ex59.sh: Exercising functions (simple).": "abs-guide.txt"},{"JUST_A_SECOND=1": "abs-guide.txt"},{"funky ()": "abs-guide.txt"},{"{ # This is about as simple as functions get.": "abs-guide.txt"},{"echo \"This is a funky function.\"": "abs-guide.txt"},{"echo \"Now exiting funky function.\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 24. Functions": "abs-guide.txt"},{"": "abs-guide.txt"},{"398": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"} # Function declaration must precede call.": "abs-guide.txt"},{"": "abs-guide.txt"},{"fun ()": "abs-guide.txt"},{"{ # A somewhat more complex function.": "abs-guide.txt"},{"i=0": "abs-guide.txt"},{"REPEATS=30": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"And now the fun really begins.\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"sleep $JUST_A_SECOND": "abs-guide.txt"},{"# Hey, wait a second!": "abs-guide.txt"},{"while [ $i -lt $REPEATS ]": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo \"----------FUNCTIONS---------->\"": "abs-guide.txt"},{"echo \"<------------ARE-------------\"": "abs-guide.txt"},{"echo \"<------------FUN------------>\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"let \"i+=1\"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"}": "abs-guide.txt"},{"# Now, call the functions.": "abs-guide.txt"},{"funky": "abs-guide.txt"},{"fun": "abs-guide.txt"},{"exit $?": "abs-guide.txt"},{"": "abs-guide.txt"},{"The function definition must precede the first call to it. There is no method of \"declaring\" the function, as, for": "abs-guide.txt"},{"example, in C.": "abs-guide.txt"},{"f1": "abs-guide.txt"},{"# Will give an error message, since function \"f1\" not yet defined.": "abs-guide.txt"},{"declare -f f1": "abs-guide.txt"},{"f1": "abs-guide.txt"},{"": "abs-guide.txt"},{"# This doesn't help either.": "abs-guide.txt"},{"# Still an error message.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# However...": "abs-guide.txt"},{"": "abs-guide.txt"},{"f1 ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"echo \"Calling function \\\"f2\\\" from within function \\\"f1\\\".\"": "abs-guide.txt"},{"f2": "abs-guide.txt"},{"}": "abs-guide.txt"},{"f2 ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"echo \"Function \\\"f2\\\".\"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"f1": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Function \"f2\" is not actually called until this point,": "abs-guide.txt"},{"#+ although it is referenced before its definition.": "abs-guide.txt"},{"# This is permissible.": "abs-guide.txt"},{"# Thanks, S.C.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Functions may not be empty!": "abs-guide.txt"},{"Chapter 24. Functions": "abs-guide.txt"},{"": "abs-guide.txt"},{"399": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# empty-function.sh": "abs-guide.txt"},{"empty ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"}": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Will not exit here!": "abs-guide.txt"},{"": "abs-guide.txt"},{"# $ sh empty-function.sh": "abs-guide.txt"},{"# empty-function.sh: line 6: syntax error near unexpected token `}'": "abs-guide.txt"},{"# empty-function.sh: line 6: `}'": "abs-guide.txt"},{"# $ echo $?": "abs-guide.txt"},{"# 2": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Note that a function containing only comments is empty.": "abs-guide.txt"},{"func ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"# Comment 1.": "abs-guide.txt"},{"# Comment 2.": "abs-guide.txt"},{"# This is still an empty function.": "abs-guide.txt"},{"# Thank you, Mark Bova, for pointing this out.": "abs-guide.txt"},{"}": "abs-guide.txt"},{"# Results in same error message as above.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# However ...": "abs-guide.txt"},{"not_quite_empty ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"illegal_command": "abs-guide.txt"},{"} # A script containing this function will *not* bomb": "abs-guide.txt"},{"#+ as long as the function is not called.": "abs-guide.txt"},{"not_empty ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{":": "abs-guide.txt"},{"} # Contains a : (null command), and this is okay.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Thank you, Dominick Geyer and Thiemo Kellner.": "abs-guide.txt"},{"": "abs-guide.txt"},{"It is even possible to nest a function within another function, although this is not very useful.": "abs-guide.txt"},{"f1 ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"f2 () # nested": "abs-guide.txt"},{"{": "abs-guide.txt"},{"echo \"Function \\\"f2\\\", inside \\\"f1\\\".\"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"}": "abs-guide.txt"},{"f2": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Gives an error message.": "abs-guide.txt"},{"Even a preceding \"declare -f f2\" wouldn't help.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 24. Functions": "abs-guide.txt"},{"": "abs-guide.txt"},{"400": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"f1": "abs-guide.txt"},{"f2": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Does nothing, since calling \"f1\" does not automatically call \"f2\".": "abs-guide.txt"},{"# Now, it's all right to call \"f2\",": "abs-guide.txt"},{"#+ since its definition has been made visible by calling \"f1\".": "abs-guide.txt"},{"# Thanks, S.C.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Function declarations can appear in unlikely places, even where a command would otherwise go.": "abs-guide.txt"},{"ls -l | foo() { echo \"foo\"; }": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Permissible, but useless.": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [ \"$USER\" = bozo ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"bozo_greet ()": "abs-guide.txt"},{"# Function definition embedded in an if/then construct.": "abs-guide.txt"},{"{": "abs-guide.txt"},{"echo \"Hello, Bozo.\"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"bozo_greet": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Works only for Bozo, and other users get an error.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Something like this might be useful in some contexts.": "abs-guide.txt"},{"NO_EXIT=1": "abs-guide.txt"},{"# Will enable function definition below.": "abs-guide.txt"},{"[[ $NO_EXIT -eq 1 ]] && exit() { true; }": "abs-guide.txt"},{"# Function definition in an \"and-list\".": "abs-guide.txt"},{"# If $NO_EXIT is 1, declares \"exit ()\".": "abs-guide.txt"},{"# This disables the \"exit\" builtin by aliasing it to \"true\".": "abs-guide.txt"},{"exit": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Invokes \"exit ()\" function, not \"exit\" builtin.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Or, similarly:": "abs-guide.txt"},{"filename=file1": "abs-guide.txt"},{"[ -f \"$filename\" ] &&": "abs-guide.txt"},{"foo () { rm -f \"$filename\"; echo \"File \"$filename\" deleted.\"; } ||": "abs-guide.txt"},{"foo () { echo \"File \"$filename\" not found.\"; touch bar; }": "abs-guide.txt"},{"foo": "abs-guide.txt"},{"# Thanks, S.C. and Christopher Head": "abs-guide.txt"},{"": "abs-guide.txt"},{"Function names can take strange forms.": "abs-guide.txt"},{"_(){ for i in {1..10}; do echo -n \"$FUNCNAME\"; done; echo; }": "abs-guide.txt"},{"# ^^^": "abs-guide.txt"},{"No space between function name and parentheses.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"This doesn't always work. Why not?": "abs-guide.txt"},{"# Now, let's invoke the function.": "abs-guide.txt"},{"_": "abs-guide.txt"},{"# __________": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^^^^^^^^^^": "abs-guide.txt"},{"10 underscores (10 x function name)!": "abs-guide.txt"},{"# A \"naked\" underscore is an acceptable function name.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# In fact, a colon is likewise an acceptable function name.": "abs-guide.txt"},{":(){ echo \":\"; }; :": "abs-guide.txt"},{"# Of what use is this?": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 24. Functions": "abs-guide.txt"},{"": "abs-guide.txt"},{"401": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# It's a devious way to obfuscate the code in a script.": "abs-guide.txt"},{"": "abs-guide.txt"},{"See also Example A-56": "abs-guide.txt"},{"What happens when different versions of the same function appear in a script?": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"As Yan Chen points out,": "abs-guide.txt"},{"when a function is defined multiple times,": "abs-guide.txt"},{"the final version is what is invoked.": "abs-guide.txt"},{"This is not, however, particularly useful.": "abs-guide.txt"},{"": "abs-guide.txt"},{"func ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"echo \"First version of func ().\"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"func ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"echo \"Second version of func ().\"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"func": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Second version of func ().": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit $?": "abs-guide.txt"},{"# It is even possible to use functions to override": "abs-guide.txt"},{"#+ or preempt system commands.": "abs-guide.txt"},{"# Of course, this is *not* advisable.": "abs-guide.txt"},{"": "abs-guide.txt"},{"24.1. Complex Functions and Function Complexities": "abs-guide.txt"},{"Functions may process arguments passed to them and return an exit status to the script for further processing.": "abs-guide.txt"},{"function_name $arg1 $arg2": "abs-guide.txt"},{"": "abs-guide.txt"},{"The function refers to the passed arguments by position (as if they were positional parameters), that is, $1,": "abs-guide.txt"},{"$2, and so forth.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 24-2. Function Taking Parameters": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# Functions and parameters": "abs-guide.txt"},{"DEFAULT=default": "abs-guide.txt"},{"func2 () {": "abs-guide.txt"},{"if [ -z \"$1\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"-Parameter #1 is zero length.-\"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo \"-Parameter #1 is \\\"$1\\\".-\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"variable=${1-$DEFAULT}": "abs-guide.txt"},{"echo \"variable = $variable\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 24. Functions": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Default param value.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Is parameter #1 zero length?": "abs-guide.txt"},{"# Or no parameter passed.": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"What does": "abs-guide.txt"},{"parameter substitution show?": "abs-guide.txt"},{"--------------------------It distinguishes between": "abs-guide.txt"},{"": "abs-guide.txt"},{"402": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"#+ no param and a null param.": "abs-guide.txt"},{"if [ \"$2\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"-Parameter #2 is \\\"$2\\\".-\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"return 0": "abs-guide.txt"},{"}": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"Nothing passed.\"": "abs-guide.txt"},{"func2": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Called with no params": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo \"Zero-length parameter passed.\"": "abs-guide.txt"},{"func2 \"\"": "abs-guide.txt"},{"# Called with zero-length param": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"Null parameter passed.\"": "abs-guide.txt"},{"func2 \"$uninitialized_param\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Called with uninitialized param": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo \"One parameter passed.\"": "abs-guide.txt"},{"func2 first": "abs-guide.txt"},{"# Called with one param": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"Two parameters passed.\"": "abs-guide.txt"},{"func2 first second": "abs-guide.txt"},{"# Called with two params": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"\\\"\\\" \\\"second\\\" passed.\"": "abs-guide.txt"},{"func2 \"\" second": "abs-guide.txt"},{"# Called with zero-length first parameter": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"# and ASCII string as a second one.": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"The shift command works on arguments passed to functions (see Example 36-18).": "abs-guide.txt"},{"But, what about command-line arguments passed to the script? Does a function see them? Well, let's clear up": "abs-guide.txt"},{"the confusion.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 24-3. Functions and command-line args passed to the script": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# func-cmdlinearg.sh": "abs-guide.txt"},{"# Call this script with a command-line argument,": "abs-guide.txt"},{"#+ something like $0 arg1.": "abs-guide.txt"},{"": "abs-guide.txt"},{"func ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"echo \"$1\"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Echoes first arg passed to the function.": "abs-guide.txt"},{"# Does a command-line arg qualify?": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo \"First call to function: no arg passed.\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 24. Functions": "abs-guide.txt"},{"": "abs-guide.txt"},{"403": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"echo \"See if command-line arg is seen.\"": "abs-guide.txt"},{"func": "abs-guide.txt"},{"# No! Command-line arg not seen.": "abs-guide.txt"},{"echo \"============================================================\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"Second call to function: command-line arg passed explicitly.\"": "abs-guide.txt"},{"func $1": "abs-guide.txt"},{"# Now it's seen!": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"In contrast to certain other programming languages, shell scripts normally pass only value parameters to": "abs-guide.txt"},{"functions. Variable names (which are actually pointers), if passed as parameters to functions, will be treated": "abs-guide.txt"},{"as string literals. Functions interpret their arguments literally.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Indirect variable references (see Example 37-2) provide a clumsy sort of mechanism for passing variable": "abs-guide.txt"},{"pointers to functions.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 24-4. Passing an indirect reference to a function": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# ind-func.sh: Passing an indirect reference to a function.": "abs-guide.txt"},{"echo_var ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"echo \"$1\"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"message=Hello": "abs-guide.txt"},{"Hello=Goodbye": "abs-guide.txt"},{"echo_var \"$message\"": "abs-guide.txt"},{"# Hello": "abs-guide.txt"},{"# Now, let's pass an indirect reference to the function.": "abs-guide.txt"},{"echo_var \"${!message}\"": "abs-guide.txt"},{"# Goodbye": "abs-guide.txt"},{"echo \"-------------\"": "abs-guide.txt"},{"# What happens if we change the contents of \"hello\" variable?": "abs-guide.txt"},{"Hello=\"Hello, again!\"": "abs-guide.txt"},{"echo_var \"$message\"": "abs-guide.txt"},{"# Hello": "abs-guide.txt"},{"echo_var \"${!message}\"": "abs-guide.txt"},{"# Hello, again!": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"The next logical question is whether parameters can be dereferenced after being passed to a function.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 24-5. Dereferencing a parameter passed to a function": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# dereference.sh": "abs-guide.txt"},{"# Dereferencing parameter passed to a function.": "abs-guide.txt"},{"# Script by Bruce W. Clare.": "abs-guide.txt"},{"dereference ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"y=\\$\"$1\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Name of variable (not value!).": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 24. Functions": "abs-guide.txt"},{"": "abs-guide.txt"},{"404": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"echo $y": "abs-guide.txt"},{"": "abs-guide.txt"},{"# $Junk": "abs-guide.txt"},{"": "abs-guide.txt"},{"x=`eval \"expr \\\"$y\\\" \"`": "abs-guide.txt"},{"echo $1=$x": "abs-guide.txt"},{"eval \"$1=\\\"Some Different Text \\\"\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Assign new value.": "abs-guide.txt"},{"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"Junk=\"Some Text\"": "abs-guide.txt"},{"echo $Junk \"before\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Some Text before": "abs-guide.txt"},{"": "abs-guide.txt"},{"dereference Junk": "abs-guide.txt"},{"echo $Junk \"after\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Some Different Text after": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 24-6. Again, dereferencing a parameter passed to a function": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# ref-params.sh: Dereferencing a parameter passed to a function.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"(Complex Example)": "abs-guide.txt"},{"ITERATIONS=3": "abs-guide.txt"},{"icount=1": "abs-guide.txt"},{"": "abs-guide.txt"},{"# How many times to get input.": "abs-guide.txt"},{"": "abs-guide.txt"},{"my_read () {": "abs-guide.txt"},{"# Called with my_read varname,": "abs-guide.txt"},{"#+ outputs the previous value between brackets as the default value,": "abs-guide.txt"},{"#+ then asks for a new value.": "abs-guide.txt"},{"local local_var": "abs-guide.txt"},{"echo -n \"Enter a value \"": "abs-guide.txt"},{"eval 'echo -n \"[$'$1'] \"'": "abs-guide.txt"},{"# eval echo -n \"[\\$$1] \"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Previous value.": "abs-guide.txt"},{"# Easier to understand,": "abs-guide.txt"},{"#+ but loses trailing space in user prompt.": "abs-guide.txt"},{"": "abs-guide.txt"},{"read local_var": "abs-guide.txt"},{"[ -n \"$local_var\" ] && eval $1=\\$local_var": "abs-guide.txt"},{"# \"And-list\": if \"local_var\" then set \"$1\" to its value.": "abs-guide.txt"},{"}": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"while [ \"$icount\" -le \"$ITERATIONS\" ]": "abs-guide.txt"},{"do": "abs-guide.txt"},{"my_read var": "abs-guide.txt"},{"echo \"Entry #$icount = $var\"": "abs-guide.txt"},{"let \"icount += 1\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"done": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Thanks to Stephane Chazelas for providing this instructive example.": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Exit and Return": "abs-guide.txt"},{"exit status": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 24. Functions": "abs-guide.txt"},{"": "abs-guide.txt"},{"405": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"Functions return a value, called an exit status. This is analogous to the exit status returned by a": "abs-guide.txt"},{"command. The exit status may be explicitly specified by a return statement, otherwise it is the exit": "abs-guide.txt"},{"status of the last command in the function (0 if successful, and a non-zero error code if not). This exit": "abs-guide.txt"},{"status may be used in the script by referencing it as $?. This mechanism effectively permits script": "abs-guide.txt"},{"functions to have a \"return value\" similar to C functions.": "abs-guide.txt"},{"return": "abs-guide.txt"},{"Terminates a function. A return command [109] optionally takes an integer argument, which is": "abs-guide.txt"},{"returned to the calling script as the \"exit status\" of the function, and this exit status is assigned to the": "abs-guide.txt"},{"variable $?.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 24-7. Maximum of two numbers": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# max.sh: Maximum of two integers.": "abs-guide.txt"},{"E_PARAM_ERR=250": "abs-guide.txt"},{"# If less than 2 params passed to function.": "abs-guide.txt"},{"EQUAL=251": "abs-guide.txt"},{"# Return value if both params equal.": "abs-guide.txt"},{"# Error values out of range of any": "abs-guide.txt"},{"#+ params that might be fed to the function.": "abs-guide.txt"},{"max2 ()": "abs-guide.txt"},{"# Returns larger of two numbers.": "abs-guide.txt"},{"{": "abs-guide.txt"},{"# Note: numbers compared must be less than 250.": "abs-guide.txt"},{"if [ -z \"$2\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"return $E_PARAM_ERR": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"if [ \"$1\" -eq \"$2\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"return $EQUAL": "abs-guide.txt"},{"else": "abs-guide.txt"},{"if [ \"$1\" -gt \"$2\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"return $1": "abs-guide.txt"},{"else": "abs-guide.txt"},{"return $2": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"}": "abs-guide.txt"},{"max2 33 34": "abs-guide.txt"},{"return_val=$?": "abs-guide.txt"},{"if [ \"$return_val\" -eq $E_PARAM_ERR ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Need to pass two parameters to the function.\"": "abs-guide.txt"},{"elif [ \"$return_val\" -eq $EQUAL ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"The two numbers are equal.\"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo \"The larger of the two numbers is $return_val.\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Exercise (easy):": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 24. Functions": "abs-guide.txt"},{"": "abs-guide.txt"},{"406": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# --------------# Convert this to an interactive script,": "abs-guide.txt"},{"#+ that is, have the script ask for input (two numbers).": "abs-guide.txt"},{"": "abs-guide.txt"},{"For a function to return a string or array, use a dedicated variable.": "abs-guide.txt"},{"count_lines_in_etc_passwd()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"[[ -r /etc/passwd ]] && REPLY=$(echo $(wc -l < /etc/passwd))": "abs-guide.txt"},{"# If /etc/passwd is readable, set REPLY to line count.": "abs-guide.txt"},{"# Returns both a parameter value and status information.": "abs-guide.txt"},{"# The 'echo' seems unnecessary, but . . .": "abs-guide.txt"},{"#+ it removes excess whitespace from the output.": "abs-guide.txt"},{"}": "abs-guide.txt"},{"if count_lines_in_etc_passwd": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"There are $REPLY lines in /etc/passwd.\"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo \"Cannot count lines in /etc/passwd.\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# Thanks, S.C.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 24-8. Converting numbers to Roman numerals": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# Arabic number to Roman numeral conversion": "abs-guide.txt"},{"# Range: 0 - 200": "abs-guide.txt"},{"# It's crude, but it works.": "abs-guide.txt"},{"# Extending the range and otherwise improving the script is left as an exercise.": "abs-guide.txt"},{"# Usage: roman number-to-convert": "abs-guide.txt"},{"LIMIT=200": "abs-guide.txt"},{"E_ARG_ERR=65": "abs-guide.txt"},{"E_OUT_OF_RANGE=66": "abs-guide.txt"},{"if [ -z \"$1\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Usage: `basename $0` number-to-convert\"": "abs-guide.txt"},{"exit $E_ARG_ERR": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"num=$1": "abs-guide.txt"},{"if [ \"$num\" -gt $LIMIT ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Out of range!\"": "abs-guide.txt"},{"exit $E_OUT_OF_RANGE": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"to_roman ()": "abs-guide.txt"},{"# Must declare function before first call to it.": "abs-guide.txt"},{"{": "abs-guide.txt"},{"number=$1": "abs-guide.txt"},{"factor=$2": "abs-guide.txt"},{"rchar=$3": "abs-guide.txt"},{"let \"remainder = number - factor\"": "abs-guide.txt"},{"while [ \"$remainder\" -ge 0 ]": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 24. Functions": "abs-guide.txt"},{"": "abs-guide.txt"},{"407": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo -n $rchar": "abs-guide.txt"},{"let \"number -= factor\"": "abs-guide.txt"},{"let \"remainder = number - factor\"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"return $number": "abs-guide.txt"},{"# Exercises:": "abs-guide.txt"},{"# --------# 1) Explain how this function works.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Hint: division by successive subtraction.": "abs-guide.txt"},{"# 2) Extend to range of the function.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Hint: use \"echo\" and command-substitution capture.": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"to_roman $num 100 C": "abs-guide.txt"},{"num=$?": "abs-guide.txt"},{"to_roman $num 90 LXXXX": "abs-guide.txt"},{"num=$?": "abs-guide.txt"},{"to_roman $num 50 L": "abs-guide.txt"},{"num=$?": "abs-guide.txt"},{"to_roman $num 40 XL": "abs-guide.txt"},{"num=$?": "abs-guide.txt"},{"to_roman $num 10 X": "abs-guide.txt"},{"num=$?": "abs-guide.txt"},{"to_roman $num 9 IX": "abs-guide.txt"},{"num=$?": "abs-guide.txt"},{"to_roman $num 5 V": "abs-guide.txt"},{"num=$?": "abs-guide.txt"},{"to_roman $num 4 IV": "abs-guide.txt"},{"num=$?": "abs-guide.txt"},{"to_roman $num 1 I": "abs-guide.txt"},{"# Successive calls to conversion function!": "abs-guide.txt"},{"# Is this really necessary??? Can it be simplified?": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"exit": "abs-guide.txt"},{"": "abs-guide.txt"},{"See also Example 11-29.": "abs-guide.txt"},{"The largest positive integer a function can return is 255. The return command is closely": "abs-guide.txt"},{"tied to the concept of exit status, which accounts for this particular limitation. Fortunately,": "abs-guide.txt"},{"there are various workarounds for those situations requiring a large integer return value": "abs-guide.txt"},{"from a function.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 24-9. Testing large return values in a function": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# return-test.sh": "abs-guide.txt"},{"# The largest positive value a function can return is 255.": "abs-guide.txt"},{"return_test ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"return $1": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 24. Functions": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Returns whatever passed to it.": "abs-guide.txt"},{"": "abs-guide.txt"},{"408": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"return_test 27": "abs-guide.txt"},{"echo $?": "abs-guide.txt"},{"": "abs-guide.txt"},{"# o.k.": "abs-guide.txt"},{"# Returns 27.": "abs-guide.txt"},{"": "abs-guide.txt"},{"return_test 255": "abs-guide.txt"},{"echo $?": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Still o.k.": "abs-guide.txt"},{"# Returns 255.": "abs-guide.txt"},{"": "abs-guide.txt"},{"return_test 257": "abs-guide.txt"},{"echo $?": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Error!": "abs-guide.txt"},{"# Returns 1 (return code for miscellaneous error).": "abs-guide.txt"},{"": "abs-guide.txt"},{"# =========================================================": "abs-guide.txt"},{"return_test -151896": "abs-guide.txt"},{"# Do large negative numbers work?": "abs-guide.txt"},{"echo $?": "abs-guide.txt"},{"# Will this return -151896?": "abs-guide.txt"},{"# No! It returns 168.": "abs-guide.txt"},{"# Version of Bash before 2.05b permitted": "abs-guide.txt"},{"#+ large negative integer return values.": "abs-guide.txt"},{"# It happened to be a useful feature.": "abs-guide.txt"},{"# Newer versions of Bash unfortunately plug this loophole.": "abs-guide.txt"},{"# This may break older scripts.": "abs-guide.txt"},{"# Caution!": "abs-guide.txt"},{"# =========================================================": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"A workaround for obtaining large integer \"return values\" is to simply assign the \"return": "abs-guide.txt"},{"value\" to a global variable.": "abs-guide.txt"},{"Return_Val=": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Global variable to hold oversize return value of function.": "abs-guide.txt"},{"": "abs-guide.txt"},{"alt_return_test ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"fvar=$1": "abs-guide.txt"},{"Return_Val=$fvar": "abs-guide.txt"},{"return": "abs-guide.txt"},{"# Returns 0 (success).": "abs-guide.txt"},{"}": "abs-guide.txt"},{"alt_return_test 1": "abs-guide.txt"},{"echo $?": "abs-guide.txt"},{"echo \"return value = $Return_Val\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# 0": "abs-guide.txt"},{"# 1": "abs-guide.txt"},{"": "abs-guide.txt"},{"alt_return_test 256": "abs-guide.txt"},{"echo \"return value = $Return_Val\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# 256": "abs-guide.txt"},{"": "abs-guide.txt"},{"alt_return_test 257": "abs-guide.txt"},{"echo \"return value = $Return_Val\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# 257": "abs-guide.txt"},{"": "abs-guide.txt"},{"alt_return_test 25701": "abs-guide.txt"},{"echo \"return value = $Return_Val\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"#25701": "abs-guide.txt"},{"": "abs-guide.txt"},{"A more elegant method is to have the function echo its \"return value to stdout,\" and then": "abs-guide.txt"},{"capture it by command substitution. See the discussion of this in Section 36.7.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 24-10. Comparing two large integers": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# max2.sh: Maximum of two LARGE integers.": "abs-guide.txt"},{"# This is the previous \"max.sh\" example,": "abs-guide.txt"},{"#+ modified to permit comparing large integers.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 24. Functions": "abs-guide.txt"},{"": "abs-guide.txt"},{"409": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"EQUAL=0": "abs-guide.txt"},{"E_PARAM_ERR=-99999": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^^^^^^": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Return value if both params equal.": "abs-guide.txt"},{"# Not enough params passed to function.": "abs-guide.txt"},{"Out of range of any params that might be passed.": "abs-guide.txt"},{"": "abs-guide.txt"},{"max2 ()": "abs-guide.txt"},{"# \"Returns\" larger of two numbers.": "abs-guide.txt"},{"{": "abs-guide.txt"},{"if [ -z \"$2\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo $E_PARAM_ERR": "abs-guide.txt"},{"return": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"if [ \"$1\" -eq \"$2\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo $EQUAL": "abs-guide.txt"},{"return": "abs-guide.txt"},{"else": "abs-guide.txt"},{"if [ \"$1\" -gt \"$2\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"retval=$1": "abs-guide.txt"},{"else": "abs-guide.txt"},{"retval=$2": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"echo $retval": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Echoes (to stdout), rather than returning value.": "abs-guide.txt"},{"# Why?": "abs-guide.txt"},{"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"return_val=$(max2 33001 33997)": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^^^^": "abs-guide.txt"},{"Function name": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^^^^^ ^^^^^ Params passed": "abs-guide.txt"},{"# This is actually a form of command substitution:": "abs-guide.txt"},{"#+ treating a function as if it were a command,": "abs-guide.txt"},{"#+ and assigning the stdout of the function to the variable \"return_val.\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# ========================= OUTPUT ========================": "abs-guide.txt"},{"if [ \"$return_val\" -eq \"$E_PARAM_ERR\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Error in parameters passed to comparison function!\"": "abs-guide.txt"},{"elif [ \"$return_val\" -eq \"$EQUAL\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"The two numbers are equal.\"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo \"The larger of the two numbers is $return_val.\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# =========================================================": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Exercises:": "abs-guide.txt"},{"--------1) Find a more elegant way of testing": "abs-guide.txt"},{"the parameters passed to the function.": "abs-guide.txt"},{"2) Simplify the if/then structure at \"OUTPUT.\"": "abs-guide.txt"},{"3) Rewrite the script to take input from command-line parameters.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Here is another example of capturing a function \"return value.\" Understanding it requires": "abs-guide.txt"},{"some knowledge of awk.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 24. Functions": "abs-guide.txt"},{"": "abs-guide.txt"},{"410": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"month_length () # Takes month number as an argument.": "abs-guide.txt"},{"{": "abs-guide.txt"},{"# Returns number of days in month.": "abs-guide.txt"},{"monthD=\"31 28 31 30 31 30 31 31 30 31 30 31\" # Declare as local?": "abs-guide.txt"},{"echo \"$monthD\" | awk '{ print $'\"${1}\"' }'": "abs-guide.txt"},{"# Tricky.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^^^^^^^^^": "abs-guide.txt"},{"# Parameter passed to function ($1 -- month number), then to awk.": "abs-guide.txt"},{"# Awk sees this as \"print $1 . . . print $12\" (depending on month number)": "abs-guide.txt"},{"# Template for passing a parameter to embedded awk script:": "abs-guide.txt"},{"#": "abs-guide.txt"},{"$'\"${script_parameter}\"'": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Here's a slightly simpler awk construct:": "abs-guide.txt"},{"echo $monthD | awk -v month=$1 '{print $(month)}'": "abs-guide.txt"},{"Uses the -v awk option, which assigns a variable value": "abs-guide.txt"},{"prior to execution of the awk program block.": "abs-guide.txt"},{"Thank you, Rich.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Needs error checking for correct parameter range (1-12)": "abs-guide.txt"},{"#+ and for February in leap year.": "abs-guide.txt"},{"}": "abs-guide.txt"},{"# ---------------------------------------------# Usage example:": "abs-guide.txt"},{"month=4": "abs-guide.txt"},{"# April, for example (4th month).": "abs-guide.txt"},{"days_in=$(month_length $month)": "abs-guide.txt"},{"echo $days_in # 30": "abs-guide.txt"},{"# ----------------------------------------------": "abs-guide.txt"},{"": "abs-guide.txt"},{"See also Example A-7 and Example A-37.": "abs-guide.txt"},{"Exercise: Using what we have just learned, extend the previous Roman numerals": "abs-guide.txt"},{"example to accept arbitrarily large input.": "abs-guide.txt"},{"Redirection": "abs-guide.txt"},{"Redirecting the stdin of a function": "abs-guide.txt"},{"A function is essentially a code block, which means its stdin can be redirected (as in Example 3-1).": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 24-11. Real name from username": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# realname.sh": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# From username, gets \"real name\" from /etc/passwd.": "abs-guide.txt"},{"": "abs-guide.txt"},{"ARGCOUNT=1": "abs-guide.txt"},{"E_WRONGARGS=85": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Expect one arg.": "abs-guide.txt"},{"": "abs-guide.txt"},{"file=/etc/passwd": "abs-guide.txt"},{"pattern=$1": "abs-guide.txt"},{"if [ $# -ne \"$ARGCOUNT\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Usage: `basename $0` USERNAME\"": "abs-guide.txt"},{"exit $E_WRONGARGS": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"file_excerpt ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 24. Functions": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Scan file for pattern,": "abs-guide.txt"},{"#+ then print relevant portion of line.": "abs-guide.txt"},{"": "abs-guide.txt"},{"411": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"while read line # \"while\" does not necessarily need [ condition ]": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo \"$line\" | grep $1 | awk -F\":\" '{ print $5 }'": "abs-guide.txt"},{"# Have awk use \":\" delimiter.": "abs-guide.txt"},{"done": "abs-guide.txt"},{"} <$file # Redirect into function's stdin.": "abs-guide.txt"},{"file_excerpt $pattern": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Yes, this entire script could be reduced to": "abs-guide.txt"},{"grep PATTERN /etc/passwd | awk -F\":\" '{ print $5 }'": "abs-guide.txt"},{"or": "abs-guide.txt"},{"awk -F: '/PATTERN/ {print $5}'": "abs-guide.txt"},{"or": "abs-guide.txt"},{"awk -F: '($1 == \"username\") { print $5 }' # real name from username": "abs-guide.txt"},{"However, it might not be as instructive.": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"There is an alternate, and perhaps less confusing method of redirecting a function's stdin. This": "abs-guide.txt"},{"involves redirecting the stdin to an embedded bracketed code block within the function.": "abs-guide.txt"},{"# Instead of:": "abs-guide.txt"},{"Function ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"...": "abs-guide.txt"},{"} < file": "abs-guide.txt"},{"# Try this:": "abs-guide.txt"},{"Function ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"{": "abs-guide.txt"},{"...": "abs-guide.txt"},{"} < file": "abs-guide.txt"},{"}": "abs-guide.txt"},{"# Similarly,": "abs-guide.txt"},{"Function () # This works.": "abs-guide.txt"},{"{": "abs-guide.txt"},{"{": "abs-guide.txt"},{"echo $*": "abs-guide.txt"},{"} | tr a b": "abs-guide.txt"},{"}": "abs-guide.txt"},{"Function ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"echo $*": "abs-guide.txt"},{"} | tr a b": "abs-guide.txt"},{"": "abs-guide.txt"},{"# This doesn't work.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# A nested code block is mandatory here.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Thanks, S.C.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Emmanuel Rouat's sample bashrc file contains some instructive examples of": "abs-guide.txt"},{"functions.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 24. Functions": "abs-guide.txt"},{"": "abs-guide.txt"},{"412": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"": "abs-guide.txt"},{"24.2. Local Variables": "abs-guide.txt"},{"What makes a variable local?": "abs-guide.txt"},{"local variables": "abs-guide.txt"},{"A variable declared as local is one that is visible only within the block of code in which it appears. It": "abs-guide.txt"},{"has local scope. In a function, a local variable has meaning only within that function block. [110]": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 24-12. Local variable visibility": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# ex62.sh: Global and local variables inside a function.": "abs-guide.txt"},{"func ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"local loc_var=23": "abs-guide.txt"},{"# Declared as local variable.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"# Uses the 'local' builtin.": "abs-guide.txt"},{"echo \"\\\"loc_var\\\" in function = $loc_var\"": "abs-guide.txt"},{"global_var=999": "abs-guide.txt"},{"# Not declared as local.": "abs-guide.txt"},{"# Therefore, defaults to global.": "abs-guide.txt"},{"echo \"\\\"global_var\\\" in function = $global_var\"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"func": "abs-guide.txt"},{"# Now, to see if local variable \"loc_var\" exists outside the function.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"\\\"loc_var\\\" outside function = $loc_var\"": "abs-guide.txt"},{"# $loc_var outside function =": "abs-guide.txt"},{"# No, $loc_var not visible globally.": "abs-guide.txt"},{"echo \"\\\"global_var\\\" outside function = $global_var\"": "abs-guide.txt"},{"# $global_var outside function = 999": "abs-guide.txt"},{"# $global_var is visible globally.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"# In contrast to C, a Bash variable declared inside a function": "abs-guide.txt"},{"#+ is local ONLY if declared as such.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Before a function is called, all variables declared within the function are invisible outside the": "abs-guide.txt"},{"body of the function, not just those explicitly declared as local.": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"func ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"global_var=37": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Visible only within the function block": "abs-guide.txt"},{"#+ before the function has been called.": "abs-guide.txt"},{"# END OF FUNCTION": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo \"global_var = $global_var\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# global_var =": "abs-guide.txt"},{"# Function \"func\" has not yet been called,": "abs-guide.txt"},{"#+ so $global_var is not visible here.": "abs-guide.txt"},{"": "abs-guide.txt"},{"func": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 24. Functions": "abs-guide.txt"},{"": "abs-guide.txt"},{"413": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"echo \"global_var = $global_var\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# global_var = 37": "abs-guide.txt"},{"# Has been set by function call.": "abs-guide.txt"},{"": "abs-guide.txt"},{"As Evgeniy Ivanov points out, when declaring and setting a local variable in a single": "abs-guide.txt"},{"command, apparently the order of operations is to first set the variable, and only": "abs-guide.txt"},{"afterwards restrict it to local scope. This is reflected in the return value.": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"echo \"==OUTSIDE Function (global)==\"": "abs-guide.txt"},{"t=$(exit 1)": "abs-guide.txt"},{"echo $?": "abs-guide.txt"},{"# 1": "abs-guide.txt"},{"# As expected.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"function0 ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"echo \"==INSIDE Function==\"": "abs-guide.txt"},{"echo \"Global\"": "abs-guide.txt"},{"t0=$(exit 1)": "abs-guide.txt"},{"echo $?": "abs-guide.txt"},{"# 1": "abs-guide.txt"},{"# As expected.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"Local declared & assigned in same command.\"": "abs-guide.txt"},{"local t1=$(exit 1)": "abs-guide.txt"},{"echo $?": "abs-guide.txt"},{"# 0": "abs-guide.txt"},{"# Unexpected!": "abs-guide.txt"},{"# Apparently, the variable assignment takes place before": "abs-guide.txt"},{"#+ the local declaration.": "abs-guide.txt"},{"#+ The return value is for the latter.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"Local declared, then assigned (separate commands).\"": "abs-guide.txt"},{"local t2": "abs-guide.txt"},{"t2=$(exit 1)": "abs-guide.txt"},{"echo $?": "abs-guide.txt"},{"# 1": "abs-guide.txt"},{"# As expected.": "abs-guide.txt"},{"}": "abs-guide.txt"},{"function0": "abs-guide.txt"},{"": "abs-guide.txt"},{"24.2.1. Local variables and recursion.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Recursion is an interesting and sometimes useful form of self-reference. Herbert Mayer defines it as \". . .": "abs-guide.txt"},{"expressing an algorithm by using a simpler version of that same algorithm . . .\"": "abs-guide.txt"},{"Consider a definition defined in terms of itself, [111] an expression implicit in its own expression, [112] a": "abs-guide.txt"},{"snake swallowing its own tail, [113] or . . . a function that calls itself. [114]": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 24. Functions": "abs-guide.txt"},{"": "abs-guide.txt"},{"414": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"Example 24-13. Demonstration of a simple recursive function": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# recursion-demo.sh": "abs-guide.txt"},{"# Demonstration of recursion.": "abs-guide.txt"},{"RECURSIONS=9": "abs-guide.txt"},{"r_count=0": "abs-guide.txt"},{"": "abs-guide.txt"},{"# How many times to recurse.": "abs-guide.txt"},{"# Must be global. Why?": "abs-guide.txt"},{"": "abs-guide.txt"},{"recurse ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"var=\"$1\"": "abs-guide.txt"},{"while [ \"$var\" -ge 0 ]": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo \"Recursion count = \"$r_count\" +-+ \\$var = \"$var\"\"": "abs-guide.txt"},{"(( var-- )); (( r_count++ ))": "abs-guide.txt"},{"recurse \"$var\" # Function calls itself (recurses)": "abs-guide.txt"},{"done": "abs-guide.txt"},{"#+ until what condition is met?": "abs-guide.txt"},{"}": "abs-guide.txt"},{"recurse $RECURSIONS": "abs-guide.txt"},{"exit $?": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 24-14. Another simple demonstration": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# recursion-def.sh": "abs-guide.txt"},{"# A script that defines \"recursion\" in a rather graphic way.": "abs-guide.txt"},{"RECURSIONS=10": "abs-guide.txt"},{"r_count=0": "abs-guide.txt"},{"sp=\" \"": "abs-guide.txt"},{"define_recursion ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"((r_count++))": "abs-guide.txt"},{"sp=\"$sp\"\" \"": "abs-guide.txt"},{"echo -n \"$sp\"": "abs-guide.txt"},{"echo \"\\\"The act of recurring ... \\\"\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Per 1913 Webster's dictionary.": "abs-guide.txt"},{"": "abs-guide.txt"},{"while [ $r_count -le $RECURSIONS ]": "abs-guide.txt"},{"do": "abs-guide.txt"},{"define_recursion": "abs-guide.txt"},{"done": "abs-guide.txt"},{"}": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"Recursion: \"": "abs-guide.txt"},{"define_recursion": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"exit $?": "abs-guide.txt"},{"": "abs-guide.txt"},{"Local variables are a useful tool for writing recursive code, but this practice generally involves a great deal of": "abs-guide.txt"},{"computational overhead and is definitely not recommended in a shell script. [115]": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 24. Functions": "abs-guide.txt"},{"": "abs-guide.txt"},{"415": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"Example 24-15. Recursion, using a local variable": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"factorial": "abs-guide.txt"},{"---------": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Does bash permit recursion?": "abs-guide.txt"},{"# Well, yes, but...": "abs-guide.txt"},{"# It's so slow that you gotta have rocks in your head to try it.": "abs-guide.txt"},{"": "abs-guide.txt"},{"MAX_ARG=5": "abs-guide.txt"},{"E_WRONG_ARGS=85": "abs-guide.txt"},{"E_RANGE_ERR=86": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [ -z \"$1\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Usage: `basename $0` number\"": "abs-guide.txt"},{"exit $E_WRONG_ARGS": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"if [ \"$1\" -gt $MAX_ARG ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Out of range ($MAX_ARG is maximum).\"": "abs-guide.txt"},{"# Let's get real now.": "abs-guide.txt"},{"# If you want greater range than this,": "abs-guide.txt"},{"#+ rewrite it in a Real Programming Language.": "abs-guide.txt"},{"exit $E_RANGE_ERR": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"fact ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"local number=$1": "abs-guide.txt"},{"# Variable \"number\" must be declared as local,": "abs-guide.txt"},{"#+ otherwise this doesn't work.": "abs-guide.txt"},{"if [ \"$number\" -eq 0 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"factorial=1": "abs-guide.txt"},{"# Factorial of 0 = 1.": "abs-guide.txt"},{"else": "abs-guide.txt"},{"let \"decrnum = number - 1\"": "abs-guide.txt"},{"fact $decrnum # Recursive function call (the function calls itself).": "abs-guide.txt"},{"let \"factorial = $number * $?\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"return $factorial": "abs-guide.txt"},{"}": "abs-guide.txt"},{"fact $1": "abs-guide.txt"},{"echo \"Factorial of $1 is $?.\"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Also see Example A-15 for an example of recursion in a script. Be aware that recursion is resource-intensive": "abs-guide.txt"},{"and executes slowly, and is therefore generally not appropriate in a script.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 24. Functions": "abs-guide.txt"},{"": "abs-guide.txt"},{"416": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"": "abs-guide.txt"},{"24.3. Recursion Without Local Variables": "abs-guide.txt"},{"A function may recursively call itself even without use of local variables.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 24-16. The Fibonacci Sequence": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# fibo.sh : Fibonacci sequence (recursive)": "abs-guide.txt"},{"# Author: M. Cooper": "abs-guide.txt"},{"# License: GPL3": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"----------algorithm-------------Fibo(0) = 0": "abs-guide.txt"},{"Fibo(1) = 1": "abs-guide.txt"},{"else": "abs-guide.txt"},{"Fibo(j) = Fibo(j-1) + Fibo(j-2)": "abs-guide.txt"},{"---------------------------------": "abs-guide.txt"},{"": "abs-guide.txt"},{"MAXTERM=15": "abs-guide.txt"},{"MINIDX=2": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Number of terms (+1) to generate.": "abs-guide.txt"},{"# If idx is less than 2, then Fibo(idx) = idx.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Fibonacci ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"idx=$1": "abs-guide.txt"},{"# Doesn't need to be local. Why not?": "abs-guide.txt"},{"if [ \"$idx\" -lt \"$MINIDX\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"$idx\" # First two terms are 0 1 ... see above.": "abs-guide.txt"},{"else": "abs-guide.txt"},{"(( --idx )) # j-1": "abs-guide.txt"},{"term1=$( Fibonacci $idx )": "abs-guide.txt"},{"# Fibo(j-1)": "abs-guide.txt"},{"(( --idx )) # j-2": "abs-guide.txt"},{"term2=$( Fibonacci $idx )": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Fibo(j-2)": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo $(( term1 + term2 ))": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# An ugly, ugly kludge.": "abs-guide.txt"},{"# The more elegant implementation of recursive fibo in C": "abs-guide.txt"},{"#+ is a straightforward translation of the algorithm in lines 7 - 10.": "abs-guide.txt"},{"}": "abs-guide.txt"},{"for i in $(seq 0 $MAXTERM)": "abs-guide.txt"},{"do # Calculate $MAXTERM+1 terms.": "abs-guide.txt"},{"FIBO=$(Fibonacci $i)": "abs-guide.txt"},{"echo -n \"$FIBO \"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"# 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610": "abs-guide.txt"},{"# Takes a while, doesn't it? Recursion in a script is slow.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 24-17. The Towers of Hanoi": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 24. Functions": "abs-guide.txt"},{"": "abs-guide.txt"},{"417": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"#! /bin/bash": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# The Towers Of Hanoi": "abs-guide.txt"},{"# Bash script": "abs-guide.txt"},{"# Copyright (C) 2000 Amit Singh. All Rights Reserved.": "abs-guide.txt"},{"# http://hanoi.kernelthread.com": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Tested under Bash version 2.05b.0(13)-release.": "abs-guide.txt"},{"# Also works under Bash version 3.x.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Used in \"Advanced Bash Scripting Guide\"": "abs-guide.txt"},{"#+ with permission of script author.": "abs-guide.txt"},{"# Slightly modified and commented by ABS author.": "abs-guide.txt"},{"#=================================================================#": "abs-guide.txt"},{"# The Tower of Hanoi is a mathematical puzzle attributed to": "abs-guide.txt"},{"#+ Edouard Lucas, a nineteenth-century French mathematician.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# There are three vertical posts set in a base.": "abs-guide.txt"},{"# The first post has a set of annular rings stacked on it.": "abs-guide.txt"},{"# These rings are disks with a hole drilled out of the center,": "abs-guide.txt"},{"#+ so they can slip over the posts and rest flat.": "abs-guide.txt"},{"# The rings have different diameters, and they stack in ascending": "abs-guide.txt"},{"#+ order, according to size.": "abs-guide.txt"},{"# The smallest ring is on top, and the largest on the bottom.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# The task is to transfer the stack of rings": "abs-guide.txt"},{"#+ to one of the other posts.": "abs-guide.txt"},{"# You can move only one ring at a time to another post.": "abs-guide.txt"},{"# You are permitted to move rings back to the original post.": "abs-guide.txt"},{"# You may place a smaller ring atop a larger one,": "abs-guide.txt"},{"#+ but *not* vice versa.": "abs-guide.txt"},{"# Again, it is forbidden to place a larger ring atop a smaller one.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# For a small number of rings, only a few moves are required.": "abs-guide.txt"},{"#+ For each additional ring,": "abs-guide.txt"},{"#+ the required number of moves approximately doubles,": "abs-guide.txt"},{"#+ and the \"strategy\" becomes increasingly complicated.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# For more information, see http://hanoi.kernelthread.com": "abs-guide.txt"},{"#+ or pp. 186-92 of _The Armchair Universe_ by A.K. Dewdney.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"...": "abs-guide.txt"},{"...": "abs-guide.txt"},{"...": "abs-guide.txt"},{"#": "abs-guide.txt"},{"| |": "abs-guide.txt"},{"| |": "abs-guide.txt"},{"| |": "abs-guide.txt"},{"#": "abs-guide.txt"},{"_|_|_": "abs-guide.txt"},{"| |": "abs-guide.txt"},{"| |": "abs-guide.txt"},{"#": "abs-guide.txt"},{"|_____|": "abs-guide.txt"},{"| |": "abs-guide.txt"},{"| |": "abs-guide.txt"},{"#": "abs-guide.txt"},{"|_______|": "abs-guide.txt"},{"| |": "abs-guide.txt"},{"| |": "abs-guide.txt"},{"#": "abs-guide.txt"},{"|_________|": "abs-guide.txt"},{"| |": "abs-guide.txt"},{"| |": "abs-guide.txt"},{"#": "abs-guide.txt"},{"|___________|": "abs-guide.txt"},{"| |": "abs-guide.txt"},{"| |": "abs-guide.txt"},{"#": "abs-guide.txt"},{"|": "abs-guide.txt"},{"|": "abs-guide.txt"},{"| |": "abs-guide.txt"},{"| |": "abs-guide.txt"},{"# .--------------------------------------------------------------.": "abs-guide.txt"},{"# |**************************************************************|": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#1": "abs-guide.txt"},{"#2": "abs-guide.txt"},{"#3": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#=================================================================#": "abs-guide.txt"},{"": "abs-guide.txt"},{"E_NOPARAM=66 # No parameter passed to script.": "abs-guide.txt"},{"E_BADPARAM=67 # Illegal number of disks passed to script.": "abs-guide.txt"},{"Moves=": "abs-guide.txt"},{"# Global variable holding number of moves.": "abs-guide.txt"},{"# Modification to original script.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 24. Functions": "abs-guide.txt"},{"": "abs-guide.txt"},{"418": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"dohanoi() {": "abs-guide.txt"},{"# Recursive function.": "abs-guide.txt"},{"case $1 in": "abs-guide.txt"},{"0)": "abs-guide.txt"},{";;": "abs-guide.txt"},{"*)": "abs-guide.txt"},{"dohanoi \"$(($1-1))\" $2 $4 $3": "abs-guide.txt"},{"echo move $2 \"-->\" $3": "abs-guide.txt"},{"((Moves++))": "abs-guide.txt"},{"# Modification to original script.": "abs-guide.txt"},{"dohanoi \"$(($1-1))\" $4 $3 $2": "abs-guide.txt"},{";;": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"}": "abs-guide.txt"},{"case $# in": "abs-guide.txt"},{"1) case $(($1>0)) in": "abs-guide.txt"},{"# Must have at least one disk.": "abs-guide.txt"},{"1) # Nested case statement.": "abs-guide.txt"},{"dohanoi $1 1 3 2": "abs-guide.txt"},{"echo \"Total moves = $Moves\"": "abs-guide.txt"},{"# 2^n - 1, where n = # of disks.": "abs-guide.txt"},{"exit 0;": "abs-guide.txt"},{";;": "abs-guide.txt"},{"*)": "abs-guide.txt"},{"echo \"$0: illegal value for number of disks\";": "abs-guide.txt"},{"exit $E_BADPARAM;": "abs-guide.txt"},{";;": "abs-guide.txt"},{"esac": "abs-guide.txt"},{";;": "abs-guide.txt"},{"*)": "abs-guide.txt"},{"echo \"usage: $0 N\"": "abs-guide.txt"},{"echo \"": "abs-guide.txt"},{"Where \\\"N\\\" is the number of disks.\"": "abs-guide.txt"},{"exit $E_NOPARAM;": "abs-guide.txt"},{";;": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Exercises:": "abs-guide.txt"},{"--------1) Would commands beyond this point ever be executed?": "abs-guide.txt"},{"Why not? (Easy)": "abs-guide.txt"},{"2) Explain the workings of the workings of the \"dohanoi\" function.": "abs-guide.txt"},{"(Difficult -- see the Dewdney reference, above.)": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 24. Functions": "abs-guide.txt"},{"": "abs-guide.txt"},{"419": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fChapter 25. Aliases": "abs-guide.txt"},{"A Bash alias is essentially nothing more than a keyboard shortcut, an abbreviation, a means of avoiding": "abs-guide.txt"},{"typing a long command sequence. If, for example, we include alias lm=\"ls -l | more\" in the ~/.bashrc": "abs-guide.txt"},{"file, then each lm [116] typed at the command-line will automatically be replaced by a ls -l | more. This can": "abs-guide.txt"},{"save a great deal of typing at the command-line and avoid having to remember complex combinations of": "abs-guide.txt"},{"commands and options. Setting alias rm=\"rm -i\" (interactive mode delete) may save a good deal of grief,": "abs-guide.txt"},{"since it can prevent inadvertently deleting important files.": "abs-guide.txt"},{"In a script, aliases have very limited usefulness. It would be nice if aliases could assume some of the": "abs-guide.txt"},{"functionality of the C preprocessor, such as macro expansion, but unfortunately Bash does not expand": "abs-guide.txt"},{"arguments within the alias body. [117] Moreover, a script fails to expand an alias itself within \"compound": "abs-guide.txt"},{"constructs,\" such as if/then statements, loops, and functions. An added limitation is that an alias will not": "abs-guide.txt"},{"expand recursively. Almost invariably, whatever we would like an alias to do could be accomplished much": "abs-guide.txt"},{"more effectively with a function.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 25-1. Aliases within a script": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# alias.sh": "abs-guide.txt"},{"shopt -s expand_aliases": "abs-guide.txt"},{"# Must set this option, else script will not expand aliases.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# First, some fun.": "abs-guide.txt"},{"alias Jesse_James='echo \"\\\"Alias Jesse James\\\" was a 1959 comedy starring Bob Hope.\"'": "abs-guide.txt"},{"Jesse_James": "abs-guide.txt"},{"echo; echo; echo;": "abs-guide.txt"},{"alias ll=\"ls -l\"": "abs-guide.txt"},{"# May use either single (') or double (\") quotes to define an alias.": "abs-guide.txt"},{"echo \"Trying aliased \\\"ll\\\":\"": "abs-guide.txt"},{"ll /usr/X11R6/bin/mk*": "abs-guide.txt"},{"#* Alias works.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"directory=/usr/X11R6/bin/": "abs-guide.txt"},{"prefix=mk* # See if wild card causes problems.": "abs-guide.txt"},{"echo \"Variables \\\"directory\\\" + \\\"prefix\\\" = $directory$prefix\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"alias lll=\"ls -l $directory$prefix\"": "abs-guide.txt"},{"echo \"Trying aliased \\\"lll\\\":\"": "abs-guide.txt"},{"lll": "abs-guide.txt"},{"# Long listing of all files in /usr/X11R6/bin stating with mk.": "abs-guide.txt"},{"# An alias can handle concatenated variables -- including wild card -- o.k.": "abs-guide.txt"},{"": "abs-guide.txt"},{"TRUE=1": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 25. Aliases": "abs-guide.txt"},{"": "abs-guide.txt"},{"420": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"if [ TRUE ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"alias rr=\"ls -l\"": "abs-guide.txt"},{"echo \"Trying aliased \\\"rr\\\" within if/then statement:\"": "abs-guide.txt"},{"rr /usr/X11R6/bin/mk*": "abs-guide.txt"},{"#* Error message results!": "abs-guide.txt"},{"# Aliases not expanded within compound statements.": "abs-guide.txt"},{"echo \"However, previously expanded alias still recognized:\"": "abs-guide.txt"},{"ll /usr/X11R6/bin/mk*": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"count=0": "abs-guide.txt"},{"while [ $count -lt 3 ]": "abs-guide.txt"},{"do": "abs-guide.txt"},{"alias rrr=\"ls -l\"": "abs-guide.txt"},{"echo \"Trying aliased \\\"rrr\\\" within \\\"while\\\" loop:\"": "abs-guide.txt"},{"rrr /usr/X11R6/bin/mk*": "abs-guide.txt"},{"#* Alias will not expand here either.": "abs-guide.txt"},{"# alias.sh: line 57: rrr: command not found": "abs-guide.txt"},{"let count+=1": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo; echo": "abs-guide.txt"},{"alias xyz='cat $0'": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Script lists itself.": "abs-guide.txt"},{"# Note strong quotes.": "abs-guide.txt"},{"": "abs-guide.txt"},{"xyz": "abs-guide.txt"},{"# This seems to work,": "abs-guide.txt"},{"#+ although the Bash documentation suggests that it shouldn't.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# However, as Steve Jacobson points out,": "abs-guide.txt"},{"#+ the \"$0\" parameter expands immediately upon declaration of the alias.": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"The unalias command removes a previously set alias.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 25-2. unalias: Setting and unsetting an alias": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# unalias.sh": "abs-guide.txt"},{"shopt -s expand_aliases": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Enables alias expansion.": "abs-guide.txt"},{"": "abs-guide.txt"},{"alias llm='ls -al | more'": "abs-guide.txt"},{"llm": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"unalias llm": "abs-guide.txt"},{"# Unset alias.": "abs-guide.txt"},{"llm": "abs-guide.txt"},{"# Error message results, since 'llm' no longer recognized.": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"bash$ ./unalias.sh": "abs-guide.txt"},{"total 6": "abs-guide.txt"},{"drwxrwxr-x": "abs-guide.txt"},{"2 bozo": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 25. Aliases": "abs-guide.txt"},{"": "abs-guide.txt"},{"bozo": "abs-guide.txt"},{"": "abs-guide.txt"},{"3072 Feb": "abs-guide.txt"},{"": "abs-guide.txt"},{"6 14:04 .": "abs-guide.txt"},{"": "abs-guide.txt"},{"421": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"drwxr-xr-x": "abs-guide.txt"},{"-rwxr-xr-x": "abs-guide.txt"},{"": "abs-guide.txt"},{"40 bozo": "abs-guide.txt"},{"1 bozo": "abs-guide.txt"},{"": "abs-guide.txt"},{"bozo": "abs-guide.txt"},{"bozo": "abs-guide.txt"},{"": "abs-guide.txt"},{"2048 Feb": "abs-guide.txt"},{"199 Feb": "abs-guide.txt"},{"": "abs-guide.txt"},{"6 14:04 ..": "abs-guide.txt"},{"6 14:04 unalias.sh": "abs-guide.txt"},{"": "abs-guide.txt"},{"./unalias.sh: llm: command not found": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 25. Aliases": "abs-guide.txt"},{"": "abs-guide.txt"},{"422": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fChapter 26. List Constructs": "abs-guide.txt"},{"The and list and or list constructs provide a means of processing a number of commands consecutively. These": "abs-guide.txt"},{"can effectively replace complex nested if/then or even case statements.": "abs-guide.txt"},{"Chaining together commands": "abs-guide.txt"},{"and list": "abs-guide.txt"},{"command-1 && command-2 && command-3 && ... command-n": "abs-guide.txt"},{"": "abs-guide.txt"},{"Each command executes in turn, provided that the previous command has given a return value of": "abs-guide.txt"},{"true (zero). At the first false (non-zero) return, the command chain terminates (the first command": "abs-guide.txt"},{"returning false is the last one to execute).": "abs-guide.txt"},{"An interesting use of a two-condition and list from an early version of YongYe's Tetris game script:": "abs-guide.txt"},{"equation()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"": "abs-guide.txt"},{"# core algorithm used for doubling and halving the coordinates": "abs-guide.txt"},{"[[ ${cdx} ]] && ((y=cy+(ccy-cdy)${2}2))": "abs-guide.txt"},{"eval ${1}+=\\\"${x} ${y} \\\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 26-1. Using an and list to test for command-line arguments": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# and list": "abs-guide.txt"},{"if [ ! -z \"$1\" ] && echo \"Argument #1 = $1\" && [ ! -z \"$2\" ] && \\": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^^": "abs-guide.txt"},{"^^": "abs-guide.txt"},{"^^": "abs-guide.txt"},{"echo \"Argument #2 = $2\"": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"At least 2 arguments passed to script.\"": "abs-guide.txt"},{"# All the chained commands return true.": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo \"Fewer than 2 arguments passed to script.\"": "abs-guide.txt"},{"# At least one of the chained commands returns false.": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# Note that \"if [ ! -z $1 ]\" works, but its alleged equivalent,": "abs-guide.txt"},{"#": "abs-guide.txt"},{"\"if [ -n $1 ]\" does not.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"However, quoting fixes this.": "abs-guide.txt"},{"# if \"[ -n \"$1\" ]\" works.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^ ^": "abs-guide.txt"},{"Careful!": "abs-guide.txt"},{"# It is always best to QUOTE the variables being tested.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# This": "abs-guide.txt"},{"if [ !": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"if [ !": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"accomplishes the same thing, using \"pure\" if/then statements.": "abs-guide.txt"},{"-z \"$1\" ]": "abs-guide.txt"},{"\"Argument #1 = $1\"": "abs-guide.txt"},{"-z \"$2\" ]": "abs-guide.txt"},{"\"Argument #2 = $2\"": "abs-guide.txt"},{"\"At least 2 arguments passed to script.\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 26. List Constructs": "abs-guide.txt"},{"": "abs-guide.txt"},{"423": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo \"Fewer than 2 arguments passed to script.\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# It's longer and more ponderous than using an \"and list\".": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit $?": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 26-2. Another command-line arg test using an and list": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"ARGS=1": "abs-guide.txt"},{"E_BADARGS=85": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Number of arguments expected.": "abs-guide.txt"},{"# Exit value if incorrect number of args passed.": "abs-guide.txt"},{"": "abs-guide.txt"},{"test $# -ne $ARGS && \\": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^^^^^^^^^^^^ condition #1": "abs-guide.txt"},{"echo \"Usage: `basename $0` $ARGS argument(s)\" && exit $E_BADARGS": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^^": "abs-guide.txt"},{"# If condition #1 tests true (wrong number of args passed to script),": "abs-guide.txt"},{"#+ then the rest of the line executes, and script terminates.": "abs-guide.txt"},{"# Line below executes only if the above test fails.": "abs-guide.txt"},{"echo \"Correct number of arguments passed to this script.\"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"# To check exit value, do a \"echo $?\" after script termination.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Of course, an and list can also set variables to a default value.": "abs-guide.txt"},{"arg1=$@ && [ -z \"$arg1\" ] && arg1=DEFAULT": "abs-guide.txt"},{"# Set $arg1 to command-line arguments, if any.": "abs-guide.txt"},{"# But . . . set to DEFAULT if not specified on command-line.": "abs-guide.txt"},{"": "abs-guide.txt"},{"or list": "abs-guide.txt"},{"command-1 || command-2 || command-3 || ... command-n": "abs-guide.txt"},{"": "abs-guide.txt"},{"Each command executes in turn for as long as the previous command returns false. At the first true": "abs-guide.txt"},{"return, the command chain terminates (the first command returning true is the last one to execute).": "abs-guide.txt"},{"This is obviously the inverse of the \"and list\".": "abs-guide.txt"},{"Example 26-3. Using or lists in combination with an and list": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"delete.sh, a not-so-cunning file deletion utility.": "abs-guide.txt"},{"Usage: delete filename": "abs-guide.txt"},{"": "abs-guide.txt"},{"E_BADARGS=85": "abs-guide.txt"},{"if [ -z \"$1\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Usage: `basename $0` filename\"": "abs-guide.txt"},{"exit $E_BADARGS # No arg? Bail out.": "abs-guide.txt"},{"else": "abs-guide.txt"},{"file=$1": "abs-guide.txt"},{"# Set filename.": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 26. List Constructs": "abs-guide.txt"},{"": "abs-guide.txt"},{"424": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"": "abs-guide.txt"},{"[ ! -f \"$file\" ] && echo \"File \\\"$file\\\" not found. \\": "abs-guide.txt"},{"Cowardly refusing to delete a nonexistent file.\"": "abs-guide.txt"},{"# AND LIST, to give error message if file not present.": "abs-guide.txt"},{"# Note echo message continuing on to a second line after an escape.": "abs-guide.txt"},{"[ ! -f \"$file\" ] || (rm -f $file; echo \"File \\\"$file\\\" deleted.\")": "abs-guide.txt"},{"# OR LIST, to delete file if present.": "abs-guide.txt"},{"# Note logic inversion above.": "abs-guide.txt"},{"# AND LIST executes on true, OR LIST on false.": "abs-guide.txt"},{"exit $?": "abs-guide.txt"},{"": "abs-guide.txt"},{"If the first command in an or list returns true, it will execute.": "abs-guide.txt"},{"# ==>": "abs-guide.txt"},{"#+==>": "abs-guide.txt"},{"#+==>": "abs-guide.txt"},{"# ==>": "abs-guide.txt"},{"": "abs-guide.txt"},{"The following snippets from the /etc/rc.d/init.d/single": "abs-guide.txt"},{"script by Miquel van Smoorenburg": "abs-guide.txt"},{"illustrate use of \"and\" and \"or\" lists.": "abs-guide.txt"},{"\"Arrowed\" comments added by document author.": "abs-guide.txt"},{"": "abs-guide.txt"},{"[ -x /usr/bin/clear ] && /usr/bin/clear": "abs-guide.txt"},{"# ==> If /usr/bin/clear exists, then invoke it.": "abs-guide.txt"},{"# ==> Checking for the existence of a command before calling it": "abs-guide.txt"},{"#+==> avoids error messages and other awkward consequences.": "abs-guide.txt"},{"# ==> . . .": "abs-guide.txt"},{"# If they want to run something in single user mode, might as well run it...": "abs-guide.txt"},{"for i in /etc/rc1.d/S[0-9][0-9]* ; do": "abs-guide.txt"},{"# Check if the script is there.": "abs-guide.txt"},{"[ -x \"$i\" ] || continue": "abs-guide.txt"},{"# ==> If corresponding file in $PWD *not* found,": "abs-guide.txt"},{"#+==> then \"continue\" by jumping to the top of the loop.": "abs-guide.txt"},{"# Reject backup files and files generated by rpm.": "abs-guide.txt"},{"case \"$1\" in": "abs-guide.txt"},{"*.rpmsave|*.rpmorig|*.rpmnew|*~|*.orig)": "abs-guide.txt"},{"continue;;": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"[ \"$i\" = \"/etc/rc1.d/S00single\" ] && continue": "abs-guide.txt"},{"# ==> Set script name, but don't execute it yet.": "abs-guide.txt"},{"$i start": "abs-guide.txt"},{"done": "abs-guide.txt"},{"# ==> . . .": "abs-guide.txt"},{"": "abs-guide.txt"},{"The exit status of an and list or an or list is the exit status of the last command executed.": "abs-guide.txt"},{"Clever combinations of and and or lists are possible, but the logic may easily become convoluted and require": "abs-guide.txt"},{"close attention to operator precedence rules, and possibly extensive debugging.": "abs-guide.txt"},{"false && true || echo false": "abs-guide.txt"},{"# Same result as": "abs-guide.txt"},{"( false && true ) || echo false": "abs-guide.txt"},{"# But NOT": "abs-guide.txt"},{"false && ( true || echo false )": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 26. List Constructs": "abs-guide.txt"},{"": "abs-guide.txt"},{"# false": "abs-guide.txt"},{"": "abs-guide.txt"},{"# false": "abs-guide.txt"},{"# (nothing echoed)": "abs-guide.txt"},{"": "abs-guide.txt"},{"425": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Note left-to-right grouping and evaluation of statements.": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"It's usually best to avoid such complexities.": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Thanks, S.C.": "abs-guide.txt"},{"": "abs-guide.txt"},{"See Example A-7 and Example 7-4 for illustrations of using and / or list constructs to test variables.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 26. List Constructs": "abs-guide.txt"},{"": "abs-guide.txt"},{"426": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fChapter 27. Arrays": "abs-guide.txt"},{"Newer versions of Bash support one-dimensional arrays. Array elements may be initialized with the": "abs-guide.txt"},{"variable[xx] notation. Alternatively, a script may introduce the entire array by an explicit declare -a": "abs-guide.txt"},{"variable statement. To dereference (retrieve the contents of) an array element, use curly bracket notation,": "abs-guide.txt"},{"that is, ${element[xx]}.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 27-1. Simple array usage": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"": "abs-guide.txt"},{"area[11]=23": "abs-guide.txt"},{"area[13]=37": "abs-guide.txt"},{"area[51]=UFOs": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Array members need not be consecutive or contiguous.": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"Some members of the array can be left uninitialized.": "abs-guide.txt"},{"Gaps in the array are okay.": "abs-guide.txt"},{"In fact, arrays with sparse data (\"sparse arrays\")": "abs-guide.txt"},{"are useful in spreadsheet-processing software.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo -n \"area[11] = \"": "abs-guide.txt"},{"echo ${area[11]}": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"{curly brackets} needed.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo -n \"area[13] = \"": "abs-guide.txt"},{"echo ${area[13]}": "abs-guide.txt"},{"echo \"Contents of area[51] are ${area[51]}.\"": "abs-guide.txt"},{"# Contents of uninitialized array variable print blank (null variable).": "abs-guide.txt"},{"echo -n \"area[43] = \"": "abs-guide.txt"},{"echo ${area[43]}": "abs-guide.txt"},{"echo \"(area[43] unassigned)\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"# Sum of two array variables assigned to third": "abs-guide.txt"},{"area[5]=`expr ${area[11]} + ${area[13]}`": "abs-guide.txt"},{"echo \"area[5] = area[11] + area[13]\"": "abs-guide.txt"},{"echo -n \"area[5] = \"": "abs-guide.txt"},{"echo ${area[5]}": "abs-guide.txt"},{"area[6]=`expr ${area[11]} + ${area[51]}`": "abs-guide.txt"},{"echo \"area[6] = area[11] + area[51]\"": "abs-guide.txt"},{"echo -n \"area[6] = \"": "abs-guide.txt"},{"echo ${area[6]}": "abs-guide.txt"},{"# This fails because adding an integer to a string is not permitted.": "abs-guide.txt"},{"echo; echo; echo": "abs-guide.txt"},{"# ----------------------------------------------------------------# Another array, \"area2\".": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 27. Arrays": "abs-guide.txt"},{"": "abs-guide.txt"},{"427": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# Another way of assigning array variables...": "abs-guide.txt"},{"# array_name=( XXX YYY ZZZ ... )": "abs-guide.txt"},{"area2=( zero one two three four )": "abs-guide.txt"},{"echo -n \"area2[0] = \"": "abs-guide.txt"},{"echo ${area2[0]}": "abs-guide.txt"},{"# Aha, zero-based indexing (first element of array is [0], not [1]).": "abs-guide.txt"},{"echo -n \"area2[1] = \"": "abs-guide.txt"},{"echo ${area2[1]}": "abs-guide.txt"},{"# [1] is second element of array.": "abs-guide.txt"},{"# ----------------------------------------------------------------echo; echo; echo": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"----------------------------------------------Yet another array, \"area3\".": "abs-guide.txt"},{"Yet another way of assigning array variables...": "abs-guide.txt"},{"array_name=([xx]=XXX [yy]=YYY ...)": "abs-guide.txt"},{"": "abs-guide.txt"},{"area3=([17]=seventeen [24]=twenty-four)": "abs-guide.txt"},{"echo -n \"area3[17] = \"": "abs-guide.txt"},{"echo ${area3[17]}": "abs-guide.txt"},{"echo -n \"area3[24] = \"": "abs-guide.txt"},{"echo ${area3[24]}": "abs-guide.txt"},{"# ----------------------------------------------exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"As we have seen, a convenient way of initializing an entire array is the array=( element1 element2": "abs-guide.txt"},{"... elementN ) notation.": "abs-guide.txt"},{"base64_charset=( {A..Z} {a..z} {0..9} + / = )": "abs-guide.txt"},{"# Using extended brace expansion": "abs-guide.txt"},{"#+ to initialize the elements of the array.": "abs-guide.txt"},{"# Excerpted from vladz's \"base64.sh\" script": "abs-guide.txt"},{"#+ in the \"Contributed Scripts\" appendix.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Bash permits array operations on variables, even if the variables are not explicitly declared as arrays.": "abs-guide.txt"},{"string=abcABC123ABCabc": "abs-guide.txt"},{"echo ${string[@]}": "abs-guide.txt"},{"echo ${string[*]}": "abs-guide.txt"},{"echo ${string[0]}": "abs-guide.txt"},{"echo ${string[1]}": "abs-guide.txt"},{"echo ${#string[@]}": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"abcABC123ABCabc": "abs-guide.txt"},{"abcABC123ABCabc": "abs-guide.txt"},{"abcABC123ABCabc": "abs-guide.txt"},{"No output!": "abs-guide.txt"},{"Why?": "abs-guide.txt"},{"1": "abs-guide.txt"},{"One element in the array.": "abs-guide.txt"},{"The string itself.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Thank you, Michael Zick, for pointing this out.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Once again this demonstrates that Bash variables are untyped.": "abs-guide.txt"},{"Example 27-2. Formatting a poem": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 27. Arrays": "abs-guide.txt"},{"": "abs-guide.txt"},{"428": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# poem.sh: Pretty-prints one of the ABS Guide author's favorite poems.": "abs-guide.txt"},{"# Lines of the poem (single stanza).": "abs-guide.txt"},{"Line[1]=\"I do not know which to prefer,\"": "abs-guide.txt"},{"Line[2]=\"The beauty of inflections\"": "abs-guide.txt"},{"Line[3]=\"Or the beauty of innuendoes,\"": "abs-guide.txt"},{"Line[4]=\"The blackbird whistling\"": "abs-guide.txt"},{"Line[5]=\"Or just after.\"": "abs-guide.txt"},{"# Note that quoting permits embedding whitespace.": "abs-guide.txt"},{"# Attribution.": "abs-guide.txt"},{"Attrib[1]=\" Wallace Stevens\"": "abs-guide.txt"},{"Attrib[2]=\"\\\"Thirteen Ways of Looking at a Blackbird\\\"\"": "abs-guide.txt"},{"# This poem is in the Public Domain (copyright expired).": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"tput bold": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Bold print.": "abs-guide.txt"},{"": "abs-guide.txt"},{"for index in 1 2 3 4 5": "abs-guide.txt"},{"# Five lines.": "abs-guide.txt"},{"do": "abs-guide.txt"},{"printf \"": "abs-guide.txt"},{"%s\\n\" \"${Line[index]}\"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"for index in 1 2": "abs-guide.txt"},{"do": "abs-guide.txt"},{"printf \"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"tput sgr0": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Two attribution lines.": "abs-guide.txt"},{"%s\\n\" \"${Attrib[index]}\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Reset terminal.": "abs-guide.txt"},{"# See 'tput' docs.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"# Exercise:": "abs-guide.txt"},{"# -------# Modify this script to pretty-print a poem from a text data file.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Array variables have a syntax all their own, and even standard Bash commands and operators have special": "abs-guide.txt"},{"options adapted for array use.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 27-3. Various array operations": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# array-ops.sh: More fun with arrays.": "abs-guide.txt"},{"": "abs-guide.txt"},{"array=( zero one two three four five )": "abs-guide.txt"},{"# Element 0": "abs-guide.txt"},{"1": "abs-guide.txt"},{"2": "abs-guide.txt"},{"3": "abs-guide.txt"},{"4": "abs-guide.txt"},{"5": "abs-guide.txt"},{"echo ${array[0]}": "abs-guide.txt"},{"echo ${array:0}": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo ${array:1}": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 27. Arrays": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"zero": "abs-guide.txt"},{"zero": "abs-guide.txt"},{"Parameter expansion of first element,": "abs-guide.txt"},{"starting at position # 0 (1st character).": "abs-guide.txt"},{"ero": "abs-guide.txt"},{"Parameter expansion of first element,": "abs-guide.txt"},{"": "abs-guide.txt"},{"429": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"#+ starting at position # 1 (2nd character).": "abs-guide.txt"},{"echo \"--------------\"": "abs-guide.txt"},{"echo ${#array[0]}": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"4": "abs-guide.txt"},{"Length of first element of array.": "abs-guide.txt"},{"4": "abs-guide.txt"},{"Length of first element of array.": "abs-guide.txt"},{"(Alternate notation)": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo ${#array[1]}": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"3": "abs-guide.txt"},{"Length of second element of array.": "abs-guide.txt"},{"Arrays in Bash have zero-based indexing.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo ${#array[*]}": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"6": "abs-guide.txt"},{"Number of elements in array.": "abs-guide.txt"},{"6": "abs-guide.txt"},{"Number of elements in array.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo ${#array}": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo ${#array[@]}": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo \"--------------\"": "abs-guide.txt"},{"array2=( [0]=\"first element\" [1]=\"second element\" [3]=\"fourth element\" )": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^": "abs-guide.txt"},{"^": "abs-guide.txt"},{"^": "abs-guide.txt"},{"^": "abs-guide.txt"},{"^": "abs-guide.txt"},{"^": "abs-guide.txt"},{"^": "abs-guide.txt"},{"^": "abs-guide.txt"},{"^": "abs-guide.txt"},{"# Quoting permits embedding whitespace within individual array elements.": "abs-guide.txt"},{"echo ${array2[0]}": "abs-guide.txt"},{"echo ${array2[1]}": "abs-guide.txt"},{"echo ${array2[2]}": "abs-guide.txt"},{"echo ${array2[3]}": "abs-guide.txt"},{"echo ${#array2[0]}": "abs-guide.txt"},{"echo ${#array2[*]}": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"first element": "abs-guide.txt"},{"second element": "abs-guide.txt"},{"Skipped in initialization, and therefore null.": "abs-guide.txt"},{"fourth element": "abs-guide.txt"},{"13": "abs-guide.txt"},{"(length of first element)": "abs-guide.txt"},{"3": "abs-guide.txt"},{"(number of elements in array)": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit": "abs-guide.txt"},{"": "abs-guide.txt"},{"Many of the standard string operations work on arrays.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 27-4. String operations on arrays": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# array-strops.sh: String operations on arrays.": "abs-guide.txt"},{"# Script by Michael Zick.": "abs-guide.txt"},{"# Used in ABS Guide with permission.": "abs-guide.txt"},{"# Fixups: 05 May 08, 04 Aug 08.": "abs-guide.txt"},{"# In general, any string operation using the ${name ... } notation": "abs-guide.txt"},{"#+ can be applied to all string elements in an array,": "abs-guide.txt"},{"#+ with the ${name[@] ... } or ${name[*] ...} notation.": "abs-guide.txt"},{"": "abs-guide.txt"},{"arrayZ=( one two three four five five )": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"# Trailing Substring Extraction": "abs-guide.txt"},{"echo ${arrayZ[@]:0}": "abs-guide.txt"},{"# one two three four five five": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^": "abs-guide.txt"},{"All elements.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 27. Arrays": "abs-guide.txt"},{"": "abs-guide.txt"},{"430": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"echo ${arrayZ[@]:1}": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^": "abs-guide.txt"},{"": "abs-guide.txt"},{"# two three four five five": "abs-guide.txt"},{"All elements following element[0].": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo ${arrayZ[@]:1:2}": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^": "abs-guide.txt"},{"": "abs-guide.txt"},{"# two three": "abs-guide.txt"},{"Only the two elements after element[0].": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo \"---------\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Substring Removal": "abs-guide.txt"},{"# Removes shortest match from front of string(s).": "abs-guide.txt"},{"echo ${arrayZ[@]#f*r}": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^": "abs-guide.txt"},{"": "abs-guide.txt"},{"# one two three five five": "abs-guide.txt"},{"# Applied to all elements of the array.": "abs-guide.txt"},{"# Matches \"four\" and removes it.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Longest match from front of string(s)": "abs-guide.txt"},{"echo ${arrayZ[@]##t*e} # one two four five five": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^^": "abs-guide.txt"},{"# Applied to all elements of the array.": "abs-guide.txt"},{"# Matches \"three\" and removes it.": "abs-guide.txt"},{"# Shortest match from back of string(s)": "abs-guide.txt"},{"echo ${arrayZ[@]%h*e}": "abs-guide.txt"},{"# one two t four five five": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^": "abs-guide.txt"},{"# Applied to all elements of the array.": "abs-guide.txt"},{"# Matches \"hree\" and removes it.": "abs-guide.txt"},{"# Longest match from back": "abs-guide.txt"},{"echo ${arrayZ[@]%%t*e} #": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^^": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"of string(s)": "abs-guide.txt"},{"one two four five five": "abs-guide.txt"},{"Applied to all elements of the array.": "abs-guide.txt"},{"Matches \"three\" and removes it.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo \"----------------------\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Substring Replacement": "abs-guide.txt"},{"# Replace first occurrence of substring with replacement.": "abs-guide.txt"},{"echo ${arrayZ[@]/fiv/XYZ}": "abs-guide.txt"},{"# one two three four XYZe XYZe": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^": "abs-guide.txt"},{"# Applied to all elements of the array.": "abs-guide.txt"},{"# Replace all occurrences of substring.": "abs-guide.txt"},{"echo ${arrayZ[@]//iv/YY}": "abs-guide.txt"},{"# one two three four fYYe fYYe": "abs-guide.txt"},{"# Applied to all elements of the array.": "abs-guide.txt"},{"# Delete all occurrences of substring.": "abs-guide.txt"},{"# Not specifing a replacement defaults to 'delete' ...": "abs-guide.txt"},{"echo ${arrayZ[@]//fi/}": "abs-guide.txt"},{"# one two three four ve ve": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^^": "abs-guide.txt"},{"# Applied to all elements of the array.": "abs-guide.txt"},{"# Replace front-end occurrences of substring.": "abs-guide.txt"},{"echo ${arrayZ[@]/#fi/XY}": "abs-guide.txt"},{"# one two three four XYve XYve": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^": "abs-guide.txt"},{"# Applied to all elements of the array.": "abs-guide.txt"},{"# Replace back-end occurrences of substring.": "abs-guide.txt"},{"echo ${arrayZ[@]/%ve/ZZ}": "abs-guide.txt"},{"# one two three four fiZZ fiZZ": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^": "abs-guide.txt"},{"# Applied to all elements of the array.": "abs-guide.txt"},{"echo ${arrayZ[@]/%o/XX}": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^": "abs-guide.txt"},{"": "abs-guide.txt"},{"# one twXX three four five five": "abs-guide.txt"},{"# Why?": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo \"-----------------------------\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 27. Arrays": "abs-guide.txt"},{"": "abs-guide.txt"},{"431": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"": "abs-guide.txt"},{"replacement() {": "abs-guide.txt"},{"echo -n \"!!!\"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"echo ${arrayZ[@]/%e/$(replacement)}": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^ ^^^^^^^^^^^^^^": "abs-guide.txt"},{"# on!!! two thre!!! four fiv!!! fiv!!!": "abs-guide.txt"},{"# The stdout of replacement() is the replacement string.": "abs-guide.txt"},{"# Q.E.D: The replacement action is, in effect, an 'assignment.'": "abs-guide.txt"},{"echo \"------------------------------------\"": "abs-guide.txt"},{"# Accessing the \"for-each\":": "abs-guide.txt"},{"echo ${arrayZ[@]//*/$(replacement optional_arguments)}": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^^ ^^^^^^^^^^^^^": "abs-guide.txt"},{"# !!! !!! !!! !!! !!! !!!": "abs-guide.txt"},{"# Now, if Bash would only pass the matched string": "abs-guide.txt"},{"#+ to the function being called . . .": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"# Before reaching for a Big Hammer -- Perl, Python, or all the rest -# recall:": "abs-guide.txt"},{"#": "abs-guide.txt"},{"$( ... ) is command substitution.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"A function runs as a sub-process.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"A function writes its output (if echo-ed) to stdout.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Assignment, in conjunction with \"echo\" and command substitution,": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"can read a function's stdout.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"The name[@] notation specifies (the equivalent of) a \"for-each\"": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"operation.": "abs-guide.txt"},{"# Bash is more powerful than you think!": "abs-guide.txt"},{"": "abs-guide.txt"},{"Command substitution can construct the individual elements of an array.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 27-5. Loading the contents of a script into an array": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# script-array.sh: Loads this script into an array.": "abs-guide.txt"},{"# Inspired by an e-mail from Chris Martin (thanks!).": "abs-guide.txt"},{"script_contents=( $(cat \"$0\") )": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Stores contents of this script ($0)": "abs-guide.txt"},{"#+ in an array.": "abs-guide.txt"},{"": "abs-guide.txt"},{"for element in $(seq 0 $((${#script_contents[@]} - 1)))": "abs-guide.txt"},{"do": "abs-guide.txt"},{"# ${#script_contents[@]}": "abs-guide.txt"},{"#+ gives number of elements in the array.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Question:": "abs-guide.txt"},{"# Why is seq 0 necessary?": "abs-guide.txt"},{"# Try changing it to seq 1.": "abs-guide.txt"},{"echo -n \"${script_contents[$element]}\"": "abs-guide.txt"},{"# List each field of this script on a single line.": "abs-guide.txt"},{"# echo -n \"${script_contents[element]}\" also works because of ${ ... }.": "abs-guide.txt"},{"echo -n \" -- \"": "abs-guide.txt"},{"# Use \" -- \" as a field separator.": "abs-guide.txt"},{"done": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 27. Arrays": "abs-guide.txt"},{"": "abs-guide.txt"},{"432": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"# Exercise:": "abs-guide.txt"},{"# -------# Modify this script so it lists itself": "abs-guide.txt"},{"#+ in its original format,": "abs-guide.txt"},{"#+ complete with whitespace, line breaks, etc.": "abs-guide.txt"},{"": "abs-guide.txt"},{"In an array context, some Bash builtins have a slightly altered meaning. For example, unset deletes array": "abs-guide.txt"},{"elements, or even an entire array.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 27-6. Some special properties of arrays": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"declare -a colors": "abs-guide.txt"},{"# All subsequent commands in this script will treat": "abs-guide.txt"},{"#+ the variable \"colors\" as an array.": "abs-guide.txt"},{"echo \"Enter your favorite colors (separated from each other by a space).\"": "abs-guide.txt"},{"read -a colors": "abs-guide.txt"},{"# Enter at least 3 colors to demonstrate features below.": "abs-guide.txt"},{"# Special option to 'read' command,": "abs-guide.txt"},{"#+ allowing assignment of elements in an array.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"element_count=${#colors[@]}": "abs-guide.txt"},{"# Special syntax to extract number of elements in array.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"element_count=${#colors[*]} works also.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# The \"@\" variable allows word splitting within quotes": "abs-guide.txt"},{"#+ (extracts variables separated by whitespace).": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# This corresponds to the behavior of \"$@\" and \"$*\"": "abs-guide.txt"},{"#+ in positional parameters.": "abs-guide.txt"},{"index=0": "abs-guide.txt"},{"while [ \"$index\" -lt \"$element_count\" ]": "abs-guide.txt"},{"do": "abs-guide.txt"},{"# List all the elements in the array.": "abs-guide.txt"},{"echo ${colors[$index]}": "abs-guide.txt"},{"#": "abs-guide.txt"},{"${colors[index]} also works because it's within ${ ... } brackets.": "abs-guide.txt"},{"let \"index = $index + 1\"": "abs-guide.txt"},{"# Or:": "abs-guide.txt"},{"#": "abs-guide.txt"},{"((index++))": "abs-guide.txt"},{"done": "abs-guide.txt"},{"# Each array element listed on a separate line.": "abs-guide.txt"},{"# If this is not desired, use echo -n \"${colors[$index]} \"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Doing it with a \"for\" loop instead:": "abs-guide.txt"},{"#": "abs-guide.txt"},{"for i in \"${colors[@]}\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"do": "abs-guide.txt"},{"#": "abs-guide.txt"},{"echo \"$i\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"done": "abs-guide.txt"},{"# (Thanks, S.C.)": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 27. Arrays": "abs-guide.txt"},{"": "abs-guide.txt"},{"433": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"# Again, list all the elements in the array, but using a more elegant method.": "abs-guide.txt"},{"echo ${colors[@]}": "abs-guide.txt"},{"# echo ${colors[*]} also works.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"# The \"unset\" command deletes elements of an array, or entire array.": "abs-guide.txt"},{"unset colors[1]": "abs-guide.txt"},{"# Remove 2nd element of array.": "abs-guide.txt"},{"# Same effect as": "abs-guide.txt"},{"colors[1]=": "abs-guide.txt"},{"echo ${colors[@]}": "abs-guide.txt"},{"# List array again, missing 2nd element.": "abs-guide.txt"},{"unset colors": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Delete entire array.": "abs-guide.txt"},{"# unset colors[*] and": "abs-guide.txt"},{"#+ unset colors[@] also work.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo; echo -n \"Colors gone.\"": "abs-guide.txt"},{"echo ${colors[@]}": "abs-guide.txt"},{"# List array again, now empty.": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"As seen in the previous example, either ${array_name[@]} or ${array_name[*]} refers to all the elements": "abs-guide.txt"},{"of the array. Similarly, to get a count of the number of elements in an array, use either ${#array_name[@]}": "abs-guide.txt"},{"or ${#array_name[*]}. ${#array_name} is the length (number of characters) of ${array_name[0]}, the first": "abs-guide.txt"},{"element of the array.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 27-7. Of empty arrays and empty elements": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# empty-array.sh": "abs-guide.txt"},{"# Thanks to Stephane Chazelas for the original example,": "abs-guide.txt"},{"#+ and to Michael Zick and Omair Eshkenazi, for extending it.": "abs-guide.txt"},{"# And to Nathan Coulter for clarifications and corrections.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# An empty array is not the same as an array with empty elements.": "abs-guide.txt"},{"array0=( first second third )": "abs-guide.txt"},{"array1=( '' )": "abs-guide.txt"},{"# \"array1\" consists of one empty element.": "abs-guide.txt"},{"array2=( )": "abs-guide.txt"},{"# No elements . . . \"array2\" is empty.": "abs-guide.txt"},{"array3=(": "abs-guide.txt"},{")": "abs-guide.txt"},{"# What about this array?": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"ListArray()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"Elements in array0: ${array0[@]}\"": "abs-guide.txt"},{"echo \"Elements in array1: ${array1[@]}\"": "abs-guide.txt"},{"echo \"Elements in array2: ${array2[@]}\"": "abs-guide.txt"},{"echo \"Elements in array3: ${array3[@]}\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"Length of first element in array0 = ${#array0}\"": "abs-guide.txt"},{"echo \"Length of first element in array1 = ${#array1}\"": "abs-guide.txt"},{"echo \"Length of first element in array2 = ${#array2}\"": "abs-guide.txt"},{"echo \"Length of first element in array3 = ${#array3}\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"Number of elements in array0 = ${#array0[*]}\" # 3": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 27. Arrays": "abs-guide.txt"},{"": "abs-guide.txt"},{"434": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"echo \"Number of elements in array1 = ${#array1[*]}\"": "abs-guide.txt"},{"echo \"Number of elements in array2 = ${#array2[*]}\"": "abs-guide.txt"},{"echo \"Number of elements in array3 = ${#array3[*]}\"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"# 1": "abs-guide.txt"},{"# 0": "abs-guide.txt"},{"# 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"(Surprise!)": "abs-guide.txt"},{"": "abs-guide.txt"},{"# ===================================================================": "abs-guide.txt"},{"ListArray": "abs-guide.txt"},{"# Try extending those arrays.": "abs-guide.txt"},{"# Adding": "abs-guide.txt"},{"array0=(": "abs-guide.txt"},{"array1=(": "abs-guide.txt"},{"array2=(": "abs-guide.txt"},{"array3=(": "abs-guide.txt"},{"": "abs-guide.txt"},{"an element to an array.": "abs-guide.txt"},{"\"${array0[@]}\" \"new1\" )": "abs-guide.txt"},{"\"${array1[@]}\" \"new1\" )": "abs-guide.txt"},{"\"${array2[@]}\" \"new1\" )": "abs-guide.txt"},{"\"${array3[@]}\" \"new1\" )": "abs-guide.txt"},{"": "abs-guide.txt"},{"ListArray": "abs-guide.txt"},{"# or": "abs-guide.txt"},{"array0[${#array0[*]}]=\"new2\"": "abs-guide.txt"},{"array1[${#array1[*]}]=\"new2\"": "abs-guide.txt"},{"array2[${#array2[*]}]=\"new2\"": "abs-guide.txt"},{"array3[${#array3[*]}]=\"new2\"": "abs-guide.txt"},{"ListArray": "abs-guide.txt"},{"# When extended as above, arrays are 'stacks' ...": "abs-guide.txt"},{"# Above is the 'push' ...": "abs-guide.txt"},{"# The stack 'height' is:": "abs-guide.txt"},{"height=${#array2[@]}": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"Stack height for array2 = $height\"": "abs-guide.txt"},{"# The 'pop' is:": "abs-guide.txt"},{"unset array2[${#array2[@]}-1]": "abs-guide.txt"},{"# Arrays are zero-based,": "abs-guide.txt"},{"height=${#array2[@]}": "abs-guide.txt"},{"#+ which means first element has index 0.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"POP\"": "abs-guide.txt"},{"echo \"New stack height for array2 = $height\"": "abs-guide.txt"},{"ListArray": "abs-guide.txt"},{"# List only 2nd and 3rd elements of array0.": "abs-guide.txt"},{"from=1": "abs-guide.txt"},{"# Zero-based numbering.": "abs-guide.txt"},{"to=2": "abs-guide.txt"},{"array3=( ${array0[@]:1:2} )": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"Elements in array3: ${array3[@]}\"": "abs-guide.txt"},{"# Works like a string (array of characters).": "abs-guide.txt"},{"# Try some other \"string\" forms.": "abs-guide.txt"},{"# Replacement:": "abs-guide.txt"},{"array4=( ${array0[@]/second/2nd} )": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"Elements in array4: ${array4[@]}\"": "abs-guide.txt"},{"# Replace all matching wildcarded string.": "abs-guide.txt"},{"array5=( ${array0[@]//new?/old} )": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"Elements in array5: ${array5[@]}\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 27. Arrays": "abs-guide.txt"},{"": "abs-guide.txt"},{"435": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# Just when you are getting the feel for this . . .": "abs-guide.txt"},{"array6=( ${array0[@]#*new} )": "abs-guide.txt"},{"echo # This one might surprise you.": "abs-guide.txt"},{"echo \"Elements in array6: ${array6[@]}\"": "abs-guide.txt"},{"array7=( ${array0[@]#new1} )": "abs-guide.txt"},{"echo # After array6 this should not be a surprise.": "abs-guide.txt"},{"echo \"Elements in array7: ${array7[@]}\"": "abs-guide.txt"},{"# Which looks a lot like . . .": "abs-guide.txt"},{"array8=( ${array0[@]/new1/} )": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"Elements in array8: ${array8[@]}\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"So what can one say about this?": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"The string operations are performed on": "abs-guide.txt"},{"each of the elements in var[@] in succession.": "abs-guide.txt"},{"Therefore : Bash supports string vector operations.": "abs-guide.txt"},{"If the result is a zero length string,": "abs-guide.txt"},{"that element disappears in the resulting assignment.": "abs-guide.txt"},{"However, if the expansion is in quotes, the null elements remain.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Michael Zick:": "abs-guide.txt"},{"Question, are those strings hard or soft quotes?": "abs-guide.txt"},{"# Nathan Coulter: There is no such thing as \"soft quotes.\"": "abs-guide.txt"},{"#!": "abs-guide.txt"},{"What's really happening is that": "abs-guide.txt"},{"#!+": "abs-guide.txt"},{"the pattern matching happens after": "abs-guide.txt"},{"#!+": "abs-guide.txt"},{"all the other expansions of [word]": "abs-guide.txt"},{"#!+": "abs-guide.txt"},{"in cases like ${parameter#word}.": "abs-guide.txt"},{"": "abs-guide.txt"},{"zap='new*'": "abs-guide.txt"},{"array9=( ${array0[@]/$zap/} )": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"Number of elements in array9: ${#array9[@]}\"": "abs-guide.txt"},{"array9=( \"${array0[@]/$zap/}\" )": "abs-guide.txt"},{"echo \"Elements in array9: ${array9[@]}\"": "abs-guide.txt"},{"# This time the null elements remain.": "abs-guide.txt"},{"echo \"Number of elements in array9: ${#array9[@]}\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Just when you thought you were still in Kansas . . .": "abs-guide.txt"},{"array10=( ${array0[@]#$zap} )": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"Elements in array10: ${array10[@]}\"": "abs-guide.txt"},{"# But, the asterisk in zap won't be interpreted if quoted.": "abs-guide.txt"},{"array10=( ${array0[@]#\"$zap\"} )": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"Elements in array10: ${array10[@]}\"": "abs-guide.txt"},{"# Well, maybe we _are_ still in Kansas . . .": "abs-guide.txt"},{"# (Revisions to above code block by Nathan Coulter.)": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Compare array7 with array10.": "abs-guide.txt"},{"Compare array8 with array9.": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Reiterating: No such thing as soft quotes!": "abs-guide.txt"},{"Nathan Coulter explains:": "abs-guide.txt"},{"Pattern matching of 'word' in ${parameter#word} is done after": "abs-guide.txt"},{"parameter expansion and *before* quote removal.": "abs-guide.txt"},{"In the normal case, pattern matching is done *after* quote removal.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 27. Arrays": "abs-guide.txt"},{"": "abs-guide.txt"},{"436": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"exit": "abs-guide.txt"},{"": "abs-guide.txt"},{"The relationship of ${array_name[@]} and ${array_name[*]} is analogous to that between $@ and $*. This": "abs-guide.txt"},{"powerful array notation has a number of uses.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Copying an array.": "abs-guide.txt"},{"array2=( \"${array1[@]}\" )": "abs-guide.txt"},{"# or": "abs-guide.txt"},{"array2=\"${array1[@]}\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# However, this fails with \"sparse\" arrays,": "abs-guide.txt"},{"#+ arrays with holes (missing elements) in them,": "abs-guide.txt"},{"#+ as Jochen DeSmet points out.": "abs-guide.txt"},{"# -----------------------------------------array1[0]=0": "abs-guide.txt"},{"# array1[1] not assigned": "abs-guide.txt"},{"array1[2]=2": "abs-guide.txt"},{"array2=( \"${array1[@]}\" )": "abs-guide.txt"},{"# Copy it?": "abs-guide.txt"},{"echo ${array2[0]}": "abs-guide.txt"},{"# 0": "abs-guide.txt"},{"echo ${array2[2]}": "abs-guide.txt"},{"# (null), should be 2": "abs-guide.txt"},{"# ------------------------------------------": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Adding an element to an array.": "abs-guide.txt"},{"array=( \"${array[@]}\" \"new element\" )": "abs-guide.txt"},{"# or": "abs-guide.txt"},{"array[${#array[*]}]=\"new element\"": "abs-guide.txt"},{"# Thanks, S.C.": "abs-guide.txt"},{"": "abs-guide.txt"},{"The array=( element1 element2 ... elementN ) initialization operation, with the help of command": "abs-guide.txt"},{"substitution, makes it possible to load the contents of a text file into an array.": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"filename=sample_file": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"cat sample_file": "abs-guide.txt"},{"1 a b c": "abs-guide.txt"},{"2 d e fg": "abs-guide.txt"},{"": "abs-guide.txt"},{"declare -a array1": "abs-guide.txt"},{"array1=( `cat \"$filename\"`)": "abs-guide.txt"},{"# Loads contents": "abs-guide.txt"},{"#": "abs-guide.txt"},{"List file to stdout": "abs-guide.txt"},{"#+ of $filename into array1.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# array1=( `cat \"$filename\" | tr '\\n' ' '`)": "abs-guide.txt"},{"#": "abs-guide.txt"},{"change linefeeds in file to spaces.": "abs-guide.txt"},{"# Not necessary because Bash does word splitting,": "abs-guide.txt"},{"#+ changing linefeeds to spaces.": "abs-guide.txt"},{"echo ${array1[@]}": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 27. Arrays": "abs-guide.txt"},{"": "abs-guide.txt"},{"# List the array.": "abs-guide.txt"},{"1 a b c 2 d e fg": "abs-guide.txt"},{"": "abs-guide.txt"},{"437": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# Each whitespace-separated \"word\" in the file": "abs-guide.txt"},{"#+ has been assigned to an element of the array.": "abs-guide.txt"},{"element_count=${#array1[*]}": "abs-guide.txt"},{"echo $element_count": "abs-guide.txt"},{"": "abs-guide.txt"},{"# 8": "abs-guide.txt"},{"": "abs-guide.txt"},{"Clever scripting makes it possible to add array operations.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 27-8. Initializing arrays": "abs-guide.txt"},{"#! /bin/bash": "abs-guide.txt"},{"# array-assign.bash": "abs-guide.txt"},{"# Array operations are Bash-specific,": "abs-guide.txt"},{"#+ hence the \".bash\" in the script name.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Copyright (c) Michael S. Zick, 2003, All rights reserved.": "abs-guide.txt"},{"License: Unrestricted reuse in any form, for any purpose.": "abs-guide.txt"},{"Version: $ID$": "abs-guide.txt"},{"Clarification and additional comments by William Park.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Based on an example provided by Stephane Chazelas": "abs-guide.txt"},{"#+ which appeared in an earlier version of the": "abs-guide.txt"},{"#+ Advanced Bash Scripting Guide.": "abs-guide.txt"},{"# Output format of the 'times' command:": "abs-guide.txt"},{"# User CPU <space> System CPU": "abs-guide.txt"},{"# User CPU of dead children <space> System CPU of dead children": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"Bash has two versions of assigning all elements of an array": "abs-guide.txt"},{"to a new array variable.": "abs-guide.txt"},{"Both drop 'null reference' elements": "abs-guide.txt"},{"in Bash versions 2.04 and later.": "abs-guide.txt"},{"An additional array assignment that maintains the relationship of": "abs-guide.txt"},{"[subscript]=value for arrays may be added to newer versions.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Constructs a large array using an internal command,": "abs-guide.txt"},{"#+ but anything creating an array of several thousand elements": "abs-guide.txt"},{"#+ will do just fine.": "abs-guide.txt"},{"declare -a bigOne=( /dev/* ) # All the files in /dev . . .": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo 'Conditions: Unquoted, default IFS, All-Elements-Of'": "abs-guide.txt"},{"echo \"Number of elements in array is ${#bigOne[@]}\"": "abs-guide.txt"},{"# set -vx": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo '- - testing: =( ${array[@]} ) - -'": "abs-guide.txt"},{"times": "abs-guide.txt"},{"declare -a bigTwo=( ${bigOne[@]} )": "abs-guide.txt"},{"# Note parens:": "abs-guide.txt"},{"^": "abs-guide.txt"},{"^": "abs-guide.txt"},{"times": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 27. Arrays": "abs-guide.txt"},{"": "abs-guide.txt"},{"438": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"echo '- - testing: =${array[@]} - -'": "abs-guide.txt"},{"times": "abs-guide.txt"},{"declare -a bigThree=${bigOne[@]}": "abs-guide.txt"},{"# No parentheses this time.": "abs-guide.txt"},{"times": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Comparing the numbers shows that the second form, pointed out": "abs-guide.txt"},{"by Stephane Chazelas, is faster.": "abs-guide.txt"},{"As William Park explains:": "abs-guide.txt"},{"The bigTwo array assigned element by element (because of parentheses),": "abs-guide.txt"},{"whereas bigThree assigned as a single string.": "abs-guide.txt"},{"So, in essence, you have:": "abs-guide.txt"},{"bigTwo=( [0]=\"...\" [1]=\"...\" [2]=\"...\" ... )": "abs-guide.txt"},{"bigThree=( [0]=\"... ... ...\" )": "abs-guide.txt"},{"Verify this by:": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo ${bigTwo[0]}": "abs-guide.txt"},{"echo ${bigThree[0]}": "abs-guide.txt"},{"": "abs-guide.txt"},{"# I will continue to use the first form in my example descriptions": "abs-guide.txt"},{"#+ because I think it is a better illustration of what is happening.": "abs-guide.txt"},{"# The reusable portions of my examples will actual contain": "abs-guide.txt"},{"#+ the second form where appropriate because of the speedup.": "abs-guide.txt"},{"# MSZ: Sorry about that earlier oversight folks.": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Note:": "abs-guide.txt"},{"---The \"declare -a\" statements in lines 32": "abs-guide.txt"},{"are not strictly necessary, since it is": "abs-guide.txt"},{"in the Array=( ... ) assignment form.": "abs-guide.txt"},{"However, eliminating these declarations": "abs-guide.txt"},{"the execution of the following sections": "abs-guide.txt"},{"Try it, and see.": "abs-guide.txt"},{"": "abs-guide.txt"},{"and 44": "abs-guide.txt"},{"implicit": "abs-guide.txt"},{"slows down": "abs-guide.txt"},{"of the script.": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Adding a superfluous declare -a statement to an array declaration may speed up execution of subsequent": "abs-guide.txt"},{"operations on the array.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 27-9. Copying and concatenating arrays": "abs-guide.txt"},{"#! /bin/bash": "abs-guide.txt"},{"# CopyArray.sh": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# This script written by Michael Zick.": "abs-guide.txt"},{"# Used here with permission.": "abs-guide.txt"},{"# How-To \"Pass by Name & Return by Name\"": "abs-guide.txt"},{"#+ or \"Building your own assignment statement\".": "abs-guide.txt"},{"": "abs-guide.txt"},{"CpArray_Mac() {": "abs-guide.txt"},{"# Assignment Command Statement Builder": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 27. Arrays": "abs-guide.txt"},{"": "abs-guide.txt"},{"439": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"-n": "abs-guide.txt"},{"-n": "abs-guide.txt"},{"-n": "abs-guide.txt"},{"-n": "abs-guide.txt"},{"-n": "abs-guide.txt"},{"": "abs-guide.txt"},{"'eval '": "abs-guide.txt"},{"\"$2\"": "abs-guide.txt"},{"'=( ${'": "abs-guide.txt"},{"\"$1\"": "abs-guide.txt"},{"'[@]} )'": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Destination name": "abs-guide.txt"},{"# Source name": "abs-guide.txt"},{"": "abs-guide.txt"},{"# That could all be a single command.": "abs-guide.txt"},{"# Matter of style only.": "abs-guide.txt"},{"}": "abs-guide.txt"},{"declare -f CopyArray": "abs-guide.txt"},{"CopyArray=CpArray_Mac": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Function \"Pointer\"": "abs-guide.txt"},{"# Statement Builder": "abs-guide.txt"},{"": "abs-guide.txt"},{"Hype()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"# Hype the array named $1.": "abs-guide.txt"},{"# (Splice it together with array containing \"Really Rocks\".)": "abs-guide.txt"},{"# Return in array named $2.": "abs-guide.txt"},{"local -a TMP": "abs-guide.txt"},{"local -a hype=( Really Rocks )": "abs-guide.txt"},{"$($CopyArray $1 TMP)": "abs-guide.txt"},{"TMP=( ${TMP[@]} ${hype[@]} )": "abs-guide.txt"},{"$($CopyArray TMP $2)": "abs-guide.txt"},{"}": "abs-guide.txt"},{"declare -a before=( Advanced Bash Scripting )": "abs-guide.txt"},{"declare -a after": "abs-guide.txt"},{"echo \"Array Before = ${before[@]}\"": "abs-guide.txt"},{"Hype before after": "abs-guide.txt"},{"echo \"Array After = ${after[@]}\"": "abs-guide.txt"},{"# Too much hype?": "abs-guide.txt"},{"echo \"What ${after[@]:3:2}?\"": "abs-guide.txt"},{"declare -a modest=( ${after[@]:2:1} ${after[@]:3:2} )": "abs-guide.txt"},{"#": "abs-guide.txt"},{"---- substring extraction ---echo \"Array Modest = ${modest[@]}\"": "abs-guide.txt"},{"# What happened to 'before' ?": "abs-guide.txt"},{"echo \"Array Before = ${before[@]}\"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 27-10. More on concatenating arrays": "abs-guide.txt"},{"#! /bin/bash": "abs-guide.txt"},{"# array-append.bash": "abs-guide.txt"},{"# Copyright (c) Michael S. Zick, 2003, All rights reserved.": "abs-guide.txt"},{"# License: Unrestricted reuse in any form, for any purpose.": "abs-guide.txt"},{"# Version: $ID$": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 27. Arrays": "abs-guide.txt"},{"": "abs-guide.txt"},{"440": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# Slightly modified in formatting by M.C.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Array operations are Bash-specific.": "abs-guide.txt"},{"# Legacy UNIX /bin/sh lacks equivalents.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Pipe the output of this script to 'more'": "abs-guide.txt"},{"#+ so it doesn't scroll off the terminal.": "abs-guide.txt"},{"# Or, redirect output to a file.": "abs-guide.txt"},{"": "abs-guide.txt"},{"declare -a array1=( zero1 one1 two1 )": "abs-guide.txt"},{"# Subscript packed.": "abs-guide.txt"},{"declare -a array2=( [0]=zero2 [2]=two2 [3]=three2 )": "abs-guide.txt"},{"# Subscript sparse -- [1] is not defined.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo '- Confirm that the array is really subscript sparse. -'": "abs-guide.txt"},{"echo \"Number of elements: 4\"": "abs-guide.txt"},{"# Hard-coded for illustration.": "abs-guide.txt"},{"for (( i = 0 ; i < 4 ; i++ ))": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo \"Element [$i]: ${array2[$i]}\"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"# See also the more general code example in basics-reviewed.bash.": "abs-guide.txt"},{"": "abs-guide.txt"},{"declare -a dest": "abs-guide.txt"},{"# Combine (append) two arrays into a third array.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo 'Conditions: Unquoted, default IFS, All-Elements-Of operator'": "abs-guide.txt"},{"echo '- Undefined elements not present, subscripts not maintained. -'": "abs-guide.txt"},{"# # The undefined elements do not exist; they are not being dropped.": "abs-guide.txt"},{"dest=( ${array1[@]} ${array2[@]} )": "abs-guide.txt"},{"# dest=${array1[@]}${array2[@]}": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Strange results, possibly a bug.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Now, list the result.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo '- - Testing Array Append - -'": "abs-guide.txt"},{"cnt=${#dest[@]}": "abs-guide.txt"},{"echo \"Number of elements: $cnt\"": "abs-guide.txt"},{"for (( i = 0 ; i < cnt ; i++ ))": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo \"Element [$i]: ${dest[$i]}\"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"# Assign an array to a single array element (twice).": "abs-guide.txt"},{"dest[0]=${array1[@]}": "abs-guide.txt"},{"dest[1]=${array2[@]}": "abs-guide.txt"},{"# List the result.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo '- - Testing modified array - -'": "abs-guide.txt"},{"cnt=${#dest[@]}": "abs-guide.txt"},{"echo \"Number of elements: $cnt\"": "abs-guide.txt"},{"for (( i = 0 ; i < cnt ; i++ ))": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo \"Element [$i]: ${dest[$i]}\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 27. Arrays": "abs-guide.txt"},{"": "abs-guide.txt"},{"441": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"done": "abs-guide.txt"},{"# Examine the modified second element.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo '- - Reassign and list second element - -'": "abs-guide.txt"},{"declare -a subArray=${dest[1]}": "abs-guide.txt"},{"cnt=${#subArray[@]}": "abs-guide.txt"},{"echo \"Number of elements: $cnt\"": "abs-guide.txt"},{"for (( i = 0 ; i < cnt ; i++ ))": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo \"Element [$i]: ${subArray[$i]}\"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"The assignment of an entire array to a": "abs-guide.txt"},{"of another array using the '=${ ... }'": "abs-guide.txt"},{"has converted the array being assigned": "abs-guide.txt"},{"with the elements separated by a space": "abs-guide.txt"},{"": "abs-guide.txt"},{"single element": "abs-guide.txt"},{"array assignment": "abs-guide.txt"},{"into a string,": "abs-guide.txt"},{"(the first character of IFS).": "abs-guide.txt"},{"": "abs-guide.txt"},{"# If the original elements didn't contain whitespace . . .": "abs-guide.txt"},{"# If the original array isn't subscript sparse . . .": "abs-guide.txt"},{"# Then we could get the original array structure back again.": "abs-guide.txt"},{"# Restore from the modified second element.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo '- - Listing restored element - -'": "abs-guide.txt"},{"declare -a subArray=( ${dest[1]} )": "abs-guide.txt"},{"cnt=${#subArray[@]}": "abs-guide.txt"},{"echo \"Number of elements: $cnt\"": "abs-guide.txt"},{"for (( i = 0 ; i < cnt ; i++ ))": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo \"Element [$i]: ${subArray[$i]}\"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo '- - Do not depend on this behavior. - -'": "abs-guide.txt"},{"echo '- - This behavior is subject to change - -'": "abs-guide.txt"},{"echo '- - in versions of Bash newer than version 2.05b - -'": "abs-guide.txt"},{"# MSZ: Sorry about any earlier confusion folks.": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"-Arrays permit deploying old familiar algorithms as shell scripts. Whether this is necessarily a good idea is left": "abs-guide.txt"},{"for the reader to decide.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 27-11. The Bubble Sort": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# bubble.sh: Bubble sort, of sorts.": "abs-guide.txt"},{"# Recall the algorithm for a bubble sort. In this particular version...": "abs-guide.txt"},{"# With each successive pass through the array to be sorted,": "abs-guide.txt"},{"#+ compare two adjacent elements, and swap them if out of order.": "abs-guide.txt"},{"# At the end of the first pass, the \"heaviest\" element has sunk to bottom.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 27. Arrays": "abs-guide.txt"},{"": "abs-guide.txt"},{"442": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"At the end of the second pass, the next \"heaviest\" one has sunk next to bottom.": "abs-guide.txt"},{"And so forth.": "abs-guide.txt"},{"This means that each successive pass needs to traverse less of the array.": "abs-guide.txt"},{"You will therefore notice a speeding up in the printing of the later passes.": "abs-guide.txt"},{"": "abs-guide.txt"},{"exchange()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"# Swaps two members of the array.": "abs-guide.txt"},{"local temp=${Countries[$1]} # Temporary storage": "abs-guide.txt"},{"#+ for element getting swapped out.": "abs-guide.txt"},{"Countries[$1]=${Countries[$2]}": "abs-guide.txt"},{"Countries[$2]=$temp": "abs-guide.txt"},{"return": "abs-guide.txt"},{"}": "abs-guide.txt"},{"declare -a Countries": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Declare array,": "abs-guide.txt"},{"#+ optional here since it's initialized below.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Is it permissable to split an array variable over multiple lines": "abs-guide.txt"},{"#+ using an escape (\\)?": "abs-guide.txt"},{"# Yes.": "abs-guide.txt"},{"Countries=(Netherlands Ukraine Zaire Turkey Russia Yemen Syria \\": "abs-guide.txt"},{"Brazil Argentina Nicaragua Japan Mexico Venezuela Greece England \\": "abs-guide.txt"},{"Israel Peru Canada Oman Denmark Wales France Kenya \\": "abs-guide.txt"},{"Xanadu Qatar Liechtenstein Hungary)": "abs-guide.txt"},{"# \"Xanadu\" is the mythical place where, according to Coleridge,": "abs-guide.txt"},{"#+ Kubla Khan did a pleasure dome decree.": "abs-guide.txt"},{"": "abs-guide.txt"},{"clear": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Clear the screen to start with.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo \"0: ${Countries[*]}\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# List entire array at pass 0.": "abs-guide.txt"},{"": "abs-guide.txt"},{"number_of_elements=${#Countries[@]}": "abs-guide.txt"},{"let \"comparisons = $number_of_elements - 1\"": "abs-guide.txt"},{"count=1 # Pass number.": "abs-guide.txt"},{"while [ \"$comparisons\" -gt 0 ]": "abs-guide.txt"},{"do": "abs-guide.txt"},{"index=0": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Beginning of outer loop": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Reset index to start of array after each pass.": "abs-guide.txt"},{"": "abs-guide.txt"},{"while [ \"$index\" -lt \"$comparisons\" ] # Beginning of inner loop": "abs-guide.txt"},{"do": "abs-guide.txt"},{"if [ ${Countries[$index]} \\> ${Countries[`expr $index + 1`]} ]": "abs-guide.txt"},{"# If out of order...": "abs-guide.txt"},{"# Recalling that \\> is ASCII comparison operator": "abs-guide.txt"},{"#+ within single brackets.": "abs-guide.txt"},{"# if [[ ${Countries[$index]} > ${Countries[`expr $index + 1`]} ]]": "abs-guide.txt"},{"#+ also works.": "abs-guide.txt"},{"then": "abs-guide.txt"},{"exchange $index `expr $index + 1` # Swap.": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"let \"index += 1\" # Or,": "abs-guide.txt"},{"index+=1": "abs-guide.txt"},{"on Bash, ver. 3.1 or newer.": "abs-guide.txt"},{"done # End of inner loop": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 27. Arrays": "abs-guide.txt"},{"": "abs-guide.txt"},{"443": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# ---------------------------------------------------------------------# Paulo Marcel Coelho Aragao suggests for-loops as a simpler altenative.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# for (( last = $number_of_elements - 1 ; last > 0 ; last-- ))": "abs-guide.txt"},{"##": "abs-guide.txt"},{"Fix by C.Y. Hunt": "abs-guide.txt"},{"^": "abs-guide.txt"},{"(Thanks!)": "abs-guide.txt"},{"# do": "abs-guide.txt"},{"#": "abs-guide.txt"},{"for (( i = 0 ; i < last ; i++ ))": "abs-guide.txt"},{"#": "abs-guide.txt"},{"do": "abs-guide.txt"},{"#": "abs-guide.txt"},{"[[ \"${Countries[$i]}\" > \"${Countries[$((i+1))]}\" ]] \\": "abs-guide.txt"},{"#": "abs-guide.txt"},{"&& exchange $i $((i+1))": "abs-guide.txt"},{"#": "abs-guide.txt"},{"done": "abs-guide.txt"},{"# done": "abs-guide.txt"},{"# ----------------------------------------------------------------------": "abs-guide.txt"},{"": "abs-guide.txt"},{"let \"comparisons -= 1\" # Since \"heaviest\" element bubbles to bottom,": "abs-guide.txt"},{"#+ we need do one less comparison each pass.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"$count: ${Countries[@]}\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"let \"count += 1\"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Print resultant array at end of each pass.": "abs-guide.txt"},{"# Increment pass count.": "abs-guide.txt"},{"# End of outer loop": "abs-guide.txt"},{"# All done.": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"--": "abs-guide.txt"},{"": "abs-guide.txt"},{"Is it possible to nest arrays within arrays?": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# \"Nested\" array.": "abs-guide.txt"},{"# Michael Zick provided this example,": "abs-guide.txt"},{"#+ with corrections and clarifications by William Park.": "abs-guide.txt"},{"AnArray=( $(ls --inode --ignore-backups --almost-all \\": "abs-guide.txt"},{"--directory --full-time --color=none --time=status \\": "abs-guide.txt"},{"--sort=time -l ${PWD} ) ) # Commands and options.": "abs-guide.txt"},{"# Spaces are significant . . . and don't quote anything in the above.": "abs-guide.txt"},{"SubArray=( ${AnArray[@]:11:1} ${AnArray[@]:6:5} )": "abs-guide.txt"},{"# This array has six elements:": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"SubArray=( [0]=${AnArray[11]} [1]=${AnArray[6]} [2]=${AnArray[7]}": "abs-guide.txt"},{"#": "abs-guide.txt"},{"[3]=${AnArray[8]} [4]=${AnArray[9]} [5]=${AnArray[10]} )": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Arrays in Bash are (circularly) linked lists": "abs-guide.txt"},{"#+ of type string (char *).": "abs-guide.txt"},{"# So, this isn't actually a nested array,": "abs-guide.txt"},{"#+ but it's functionally similar.": "abs-guide.txt"},{"echo \"Current directory and date of last status change:\"": "abs-guide.txt"},{"echo \"${SubArray[@]}\"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"--": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 27. Arrays": "abs-guide.txt"},{"": "abs-guide.txt"},{"444": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"Embedded arrays in combination with indirect references create some fascinating possibilities": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 27-12. Embedded arrays and indirect references": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# embedded-arrays.sh": "abs-guide.txt"},{"# Embedded arrays and indirect references.": "abs-guide.txt"},{"# This script by Dennis Leeuw.": "abs-guide.txt"},{"# Used with permission.": "abs-guide.txt"},{"# Modified by document author.": "abs-guide.txt"},{"": "abs-guide.txt"},{"ARRAY1=(": "abs-guide.txt"},{"VAR1_1=value11": "abs-guide.txt"},{"VAR1_2=value12": "abs-guide.txt"},{"VAR1_3=value13": "abs-guide.txt"},{")": "abs-guide.txt"},{"ARRAY2=(": "abs-guide.txt"},{"VARIABLE=\"test\"": "abs-guide.txt"},{"STRING=\"VAR1=value1 VAR2=value2 VAR3=value3\"": "abs-guide.txt"},{"ARRAY21=${ARRAY1[*]}": "abs-guide.txt"},{")": "abs-guide.txt"},{"# Embed ARRAY1 within this second array.": "abs-guide.txt"},{"function print () {": "abs-guide.txt"},{"OLD_IFS=\"$IFS\"": "abs-guide.txt"},{"IFS=$'\\n'": "abs-guide.txt"},{"": "abs-guide.txt"},{"# To print each array element": "abs-guide.txt"},{"#+ on a separate line.": "abs-guide.txt"},{"TEST1=\"ARRAY2[*]\"": "abs-guide.txt"},{"local ${!TEST1} # See what happens if you delete this line.": "abs-guide.txt"},{"# Indirect reference.": "abs-guide.txt"},{"# This makes the components of $TEST1": "abs-guide.txt"},{"#+ accessible to this function.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Let's see what we've got so far.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"\\$TEST1 = $TEST1\"": "abs-guide.txt"},{"# Just the name of the variable.": "abs-guide.txt"},{"echo; echo": "abs-guide.txt"},{"echo \"{\\$TEST1} = ${!TEST1}\" # Contents of the variable.": "abs-guide.txt"},{"# That's what an indirect": "abs-guide.txt"},{"#+ reference does.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"-------------------------------------------\"; echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Print variable": "abs-guide.txt"},{"echo \"Variable VARIABLE: $VARIABLE\"": "abs-guide.txt"},{"# Print a string element": "abs-guide.txt"},{"IFS=\"$OLD_IFS\"": "abs-guide.txt"},{"TEST2=\"STRING[*]\"": "abs-guide.txt"},{"local ${!TEST2}": "abs-guide.txt"},{"# Indirect reference (as above).": "abs-guide.txt"},{"echo \"String element VAR2: $VAR2 from STRING\"": "abs-guide.txt"},{"# Print an array element": "abs-guide.txt"},{"TEST2=\"ARRAY21[*]\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 27. Arrays": "abs-guide.txt"},{"": "abs-guide.txt"},{"445": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"local ${!TEST2}": "abs-guide.txt"},{"# Indirect reference (as above).": "abs-guide.txt"},{"echo \"Array element VAR1_1: $VAR1_1 from ARRAY21\"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"print": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"#": "abs-guide.txt"},{"As the author of the script notes,": "abs-guide.txt"},{"#+ \"you can easily expand it to create named-hashes in bash.\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"(Difficult) exercise for the reader: implement this.": "abs-guide.txt"},{"": "abs-guide.txt"},{"--": "abs-guide.txt"},{"": "abs-guide.txt"},{"Arrays enable implementing a shell script version of the Sieve of Eratosthenes. Of course, a resource-intensive": "abs-guide.txt"},{"application of this nature should really be written in a compiled language, such as C. It runs excruciatingly": "abs-guide.txt"},{"slowly as a script.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 27-13. The Sieve of Eratosthenes": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# sieve.sh (ex68.sh)": "abs-guide.txt"},{"# Sieve of Eratosthenes": "abs-guide.txt"},{"# Ancient algorithm for finding prime numbers.": "abs-guide.txt"},{"# This runs a couple of orders of magnitude slower": "abs-guide.txt"},{"#+ than the equivalent program written in C.": "abs-guide.txt"},{"LOWER_LIMIT=1": "abs-guide.txt"},{"# Starting with 1.": "abs-guide.txt"},{"UPPER_LIMIT=1000": "abs-guide.txt"},{"# Up to 1000.": "abs-guide.txt"},{"# (You may set this higher . . . if you have time on your hands.)": "abs-guide.txt"},{"PRIME=1": "abs-guide.txt"},{"NON_PRIME=0": "abs-guide.txt"},{"let SPLIT=UPPER_LIMIT/2": "abs-guide.txt"},{"# Optimization:": "abs-guide.txt"},{"# Need to test numbers only halfway to upper limit. Why?": "abs-guide.txt"},{"": "abs-guide.txt"},{"declare -a Primes": "abs-guide.txt"},{"# Primes[] is an array.": "abs-guide.txt"},{"": "abs-guide.txt"},{"initialize ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"# Initialize the array.": "abs-guide.txt"},{"i=$LOWER_LIMIT": "abs-guide.txt"},{"until [ \"$i\" -gt \"$UPPER_LIMIT\" ]": "abs-guide.txt"},{"do": "abs-guide.txt"},{"Primes[i]=$PRIME": "abs-guide.txt"},{"let \"i += 1\"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"# Assume all array members guilty (prime)": "abs-guide.txt"},{"#+ until proven innocent.": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 27. Arrays": "abs-guide.txt"},{"": "abs-guide.txt"},{"446": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"print_primes ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"# Print out the members of the Primes[] array tagged as prime.": "abs-guide.txt"},{"i=$LOWER_LIMIT": "abs-guide.txt"},{"until [ \"$i\" -gt \"$UPPER_LIMIT\" ]": "abs-guide.txt"},{"do": "abs-guide.txt"},{"if [ \"${Primes[i]}\" -eq \"$PRIME\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"printf \"%8d\" $i": "abs-guide.txt"},{"# 8 spaces per number gives nice, even columns.": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"let \"i += 1\"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"}": "abs-guide.txt"},{"sift () # Sift out the non-primes.": "abs-guide.txt"},{"{": "abs-guide.txt"},{"let i=$LOWER_LIMIT+1": "abs-guide.txt"},{"# Let's start with 2.": "abs-guide.txt"},{"until [ \"$i\" -gt \"$UPPER_LIMIT\" ]": "abs-guide.txt"},{"do": "abs-guide.txt"},{"if [ \"${Primes[i]}\" -eq \"$PRIME\" ]": "abs-guide.txt"},{"# Don't bother sieving numbers already sieved (tagged as non-prime).": "abs-guide.txt"},{"then": "abs-guide.txt"},{"t=$i": "abs-guide.txt"},{"while [ \"$t\" -le \"$UPPER_LIMIT\" ]": "abs-guide.txt"},{"do": "abs-guide.txt"},{"let \"t += $i \"": "abs-guide.txt"},{"Primes[t]=$NON_PRIME": "abs-guide.txt"},{"# Tag as non-prime all multiples.": "abs-guide.txt"},{"done": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"let \"i += 1\"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"# ==============================================": "abs-guide.txt"},{"# main ()": "abs-guide.txt"},{"# Invoke the functions sequentially.": "abs-guide.txt"},{"initialize": "abs-guide.txt"},{"sift": "abs-guide.txt"},{"print_primes": "abs-guide.txt"},{"# This is what they call structured programming.": "abs-guide.txt"},{"# ==============================================": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 27. Arrays": "abs-guide.txt"},{"": "abs-guide.txt"},{"447": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"# -------------------------------------------------------- #": "abs-guide.txt"},{"# Code below line will not execute, because of 'exit.'": "abs-guide.txt"},{"# This improved version of the Sieve, by Stephane Chazelas,": "abs-guide.txt"},{"#+ executes somewhat faster.": "abs-guide.txt"},{"# Must invoke with command-line argument (limit of primes).": "abs-guide.txt"},{"UPPER_LIMIT=$1": "abs-guide.txt"},{"let SPLIT=UPPER_LIMIT/2": "abs-guide.txt"},{"": "abs-guide.txt"},{"# From command-line.": "abs-guide.txt"},{"# Halfway to max number.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Primes=( '' $(seq $UPPER_LIMIT) )": "abs-guide.txt"},{"i=1": "abs-guide.txt"},{"until (( ( i += 1 ) > SPLIT )) # Need check only halfway.": "abs-guide.txt"},{"do": "abs-guide.txt"},{"if [[ -n ${Primes[i]} ]]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"t=$i": "abs-guide.txt"},{"until (( ( t += i ) > UPPER_LIMIT ))": "abs-guide.txt"},{"do": "abs-guide.txt"},{"Primes[t]=": "abs-guide.txt"},{"done": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo ${Primes[*]}": "abs-guide.txt"},{"exit $?": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 27-14. The Sieve of Eratosthenes, Optimized": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# Optimized Sieve of Eratosthenes": "abs-guide.txt"},{"# Script by Jared Martin, with very minor changes by ABS Guide author.": "abs-guide.txt"},{"# Used in ABS Guide with permission (thanks!).": "abs-guide.txt"},{"# Based on script in Advanced Bash Scripting Guide.": "abs-guide.txt"},{"# http://tldp.org/LDP/abs/html/arrays.html#PRIMES0 (ex68.sh).": "abs-guide.txt"},{"# http://www.cs.hmc.edu/~oneill/papers/Sieve-JFP.pdf (reference)": "abs-guide.txt"},{"# Check results against http://primes.utm.edu/lists/small/1000.txt": "abs-guide.txt"},{"# Necessary but not sufficient would be, e.g.,": "abs-guide.txt"},{"#": "abs-guide.txt"},{"(($(sieve 7919 | wc -w) == 1000)) && echo \"7919 is the 1000th prime\"": "abs-guide.txt"},{"UPPER_LIMIT=${1:?\"Need an upper limit of primes to search.\"}": "abs-guide.txt"},{"Primes=( '' $(seq ${UPPER_LIMIT}) )": "abs-guide.txt"},{"typeset -i i t": "abs-guide.txt"},{"Primes[i=1]='' # 1 is not a prime.": "abs-guide.txt"},{"until (( ( i += 1 ) > (${UPPER_LIMIT}/i) )) # Need check only ith-way.": "abs-guide.txt"},{"do": "abs-guide.txt"},{"# Why?": "abs-guide.txt"},{"if ((${Primes[t=i*(i-1), i]}))": "abs-guide.txt"},{"# Obscure, but instructive, use of arithmetic expansion in subscript.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 27. Arrays": "abs-guide.txt"},{"": "abs-guide.txt"},{"448": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"then": "abs-guide.txt"},{"until (( ( t += i ) > ${UPPER_LIMIT} ))": "abs-guide.txt"},{"do Primes[t]=; done": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"done": "abs-guide.txt"},{"# echo ${Primes[*]}": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"# Change to original script for pretty-printing (80-col. display).": "abs-guide.txt"},{"printf \"%8d\" ${Primes[*]}": "abs-guide.txt"},{"echo; echo": "abs-guide.txt"},{"exit $?": "abs-guide.txt"},{"": "abs-guide.txt"},{"Compare these array-based prime number generators with alternatives that do not use arrays, Example A-15,": "abs-guide.txt"},{"and Example 16-46.": "abs-guide.txt"},{"-Arrays lend themselves, to some extent, to emulating data structures for which Bash has no native support.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 27-15. Emulating a push-down stack": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# stack.sh: push-down stack simulation": "abs-guide.txt"},{"# Similar to the CPU stack, a push-down stack stores data items": "abs-guide.txt"},{"#+ sequentially, but releases them in reverse order, last-in first-out.": "abs-guide.txt"},{"": "abs-guide.txt"},{"BP=100": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Base Pointer of stack array.": "abs-guide.txt"},{"Begin at element 100.": "abs-guide.txt"},{"": "abs-guide.txt"},{"SP=$BP": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Stack Pointer.": "abs-guide.txt"},{"Initialize it to \"base\" (bottom) of stack.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Data=": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Contents of stack location.": "abs-guide.txt"},{"# Must use global variable,": "abs-guide.txt"},{"#+ because of limitation on function return range.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# 100": "abs-guide.txt"},{"# 99": "abs-guide.txt"},{"# 98": "abs-guide.txt"},{"# ...": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Base pointer": "abs-guide.txt"},{"First data item": "abs-guide.txt"},{"Second data item": "abs-guide.txt"},{"More data": "abs-guide.txt"},{"Last data item": "abs-guide.txt"},{"": "abs-guide.txt"},{"<-- Base Pointer": "abs-guide.txt"},{"": "abs-guide.txt"},{"<-- Stack pointer": "abs-guide.txt"},{"": "abs-guide.txt"},{"declare -a stack": "abs-guide.txt"},{"": "abs-guide.txt"},{"push()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"if [ -z \"$1\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"return": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Push item on stack.": "abs-guide.txt"},{"": "abs-guide.txt"},{"let \"SP -= 1\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Bump stack pointer.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 27. Arrays": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Nothing to push?": "abs-guide.txt"},{"": "abs-guide.txt"},{"449": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"stack[$SP]=$1": "abs-guide.txt"},{"return": "abs-guide.txt"},{"}": "abs-guide.txt"},{"pop()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"Data=": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Pop item off stack.": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [ \"$SP\" -eq \"$BP\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"return": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Stack empty?": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Empty out data item.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Data=${stack[$SP]}": "abs-guide.txt"},{"let \"SP += 1\"": "abs-guide.txt"},{"return": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"# This also keeps SP from getting past 100,": "abs-guide.txt"},{"#+ i.e., prevents a runaway stack.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Bump stack pointer.": "abs-guide.txt"},{"": "abs-guide.txt"},{"status_report()": "abs-guide.txt"},{"# Find out what's happening.": "abs-guide.txt"},{"{": "abs-guide.txt"},{"echo \"-------------------------------------\"": "abs-guide.txt"},{"echo \"REPORT\"": "abs-guide.txt"},{"echo \"Stack Pointer = $SP\"": "abs-guide.txt"},{"echo \"Just popped \\\"\"$Data\"\\\" off the stack.\"": "abs-guide.txt"},{"echo \"-------------------------------------\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"# =======================================================": "abs-guide.txt"},{"# Now, for some fun.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"# See if you can pop anything off empty stack.": "abs-guide.txt"},{"pop": "abs-guide.txt"},{"status_report": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"push garbage": "abs-guide.txt"},{"pop": "abs-guide.txt"},{"status_report": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Garbage in, garbage out.": "abs-guide.txt"},{"": "abs-guide.txt"},{"value1=23;": "abs-guide.txt"},{"value2=skidoo;": "abs-guide.txt"},{"value3=LAST;": "abs-guide.txt"},{"": "abs-guide.txt"},{"push $value1": "abs-guide.txt"},{"push $value2": "abs-guide.txt"},{"push $value3": "abs-guide.txt"},{"": "abs-guide.txt"},{"pop": "abs-guide.txt"},{"status_report": "abs-guide.txt"},{"pop": "abs-guide.txt"},{"status_report": "abs-guide.txt"},{"pop": "abs-guide.txt"},{"status_report": "abs-guide.txt"},{"": "abs-guide.txt"},{"# LAST": "abs-guide.txt"},{"# skidoo": "abs-guide.txt"},{"# 23": "abs-guide.txt"},{"# Last-in, first-out!": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Notice how the stack pointer decrements with each push,": "abs-guide.txt"},{"#+ and increments with each pop.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 27. Arrays": "abs-guide.txt"},{"": "abs-guide.txt"},{"450": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"# =======================================================": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Exercises:": "abs-guide.txt"},{"# --------# 1) Modify the \"push()\" function to permit pushing": "abs-guide.txt"},{"#": "abs-guide.txt"},{"+ multiple element on the stack with a single function call.": "abs-guide.txt"},{"# 2) Modify the \"pop()\" function to permit popping": "abs-guide.txt"},{"#": "abs-guide.txt"},{"+ multiple element from the stack with a single function call.": "abs-guide.txt"},{"# 3)": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"+": "abs-guide.txt"},{"": "abs-guide.txt"},{"Add error checking to the critical functions.": "abs-guide.txt"},{"That is, return an error code, depending on": "abs-guide.txt"},{"successful or unsuccessful completion of the operation,": "abs-guide.txt"},{"and take appropriate action.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# 4) Using this script as a starting point,": "abs-guide.txt"},{"#": "abs-guide.txt"},{"+ write a stack-based 4-function calculator.": "abs-guide.txt"},{"": "abs-guide.txt"},{"-Fancy manipulation of array \"subscripts\" may require intermediate variables. For projects involving this,": "abs-guide.txt"},{"again consider using a more powerful programming language, such as Perl or C.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 27-16. Complex array application: Exploring a weird mathematical series": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# Douglas Hofstadter's notorious \"Q-series\":": "abs-guide.txt"},{"# Q(1) = Q(2) = 1": "abs-guide.txt"},{"# Q(n) = Q(n - Q(n-1)) + Q(n - Q(n-2)), for n>2": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"This is a \"chaotic\" integer series with strange": "abs-guide.txt"},{"and unpredictable behavior.": "abs-guide.txt"},{"The first 20 terms of the series are:": "abs-guide.txt"},{"1 1 2 3 3 4 5 5 6 6 6 8 8 8 10 9 10 11 11 12": "abs-guide.txt"},{"": "abs-guide.txt"},{"# See Hofstadter's book, _Goedel, Escher, Bach: An Eternal Golden Braid_,": "abs-guide.txt"},{"#+ p. 137, ff.": "abs-guide.txt"},{"": "abs-guide.txt"},{"LIMIT=100": "abs-guide.txt"},{"LINEWIDTH=20": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Number of terms to calculate.": "abs-guide.txt"},{"# Number of terms printed per line.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Q[1]=1": "abs-guide.txt"},{"Q[2]=1": "abs-guide.txt"},{"": "abs-guide.txt"},{"# First two terms of series are 1.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"Q-series [$LIMIT terms]:\"": "abs-guide.txt"},{"echo -n \"${Q[1]} \"": "abs-guide.txt"},{"# Output first two terms.": "abs-guide.txt"},{"echo -n \"${Q[2]} \"": "abs-guide.txt"},{"for ((n=3; n <= $LIMIT; n++)) # C-like loop expression.": "abs-guide.txt"},{"do": "abs-guide.txt"},{"# Q[n] = Q[n - Q[n-1]] + Q[n - Q[n-2]] for n>2": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Need to break the expression into intermediate terms,": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"since Bash doesn't handle complex array arithmetic very well.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 27. Arrays": "abs-guide.txt"},{"": "abs-guide.txt"},{"451": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"let \"n1 = $n - 1\"": "abs-guide.txt"},{"let \"n2 = $n - 2\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# n-1": "abs-guide.txt"},{"# n-2": "abs-guide.txt"},{"": "abs-guide.txt"},{"t0=`expr $n - ${Q[n1]}`": "abs-guide.txt"},{"t1=`expr $n - ${Q[n2]}`": "abs-guide.txt"},{"": "abs-guide.txt"},{"# n - Q[n-1]": "abs-guide.txt"},{"# n - Q[n-2]": "abs-guide.txt"},{"": "abs-guide.txt"},{"T0=${Q[t0]}": "abs-guide.txt"},{"T1=${Q[t1]}": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Q[n - Q[n-1]]": "abs-guide.txt"},{"# Q[n - Q[n-2]]": "abs-guide.txt"},{"": "abs-guide.txt"},{"Q[n]=`expr $T0 + $T1`": "abs-guide.txt"},{"echo -n \"${Q[n]} \"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Q[n - Q[n-1]] + Q[n - Q[n-2]]": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [ `expr $n % $LINEWIDTH` -eq 0 ]": "abs-guide.txt"},{"# Format output.": "abs-guide.txt"},{"then": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^ modulo": "abs-guide.txt"},{"echo # Break lines into neat chunks.": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"This is an iterative implementation of the Q-series.": "abs-guide.txt"},{"The more intuitive recursive implementation is left as an exercise.": "abs-guide.txt"},{"Warning: calculating this series recursively takes a VERY long time": "abs-guide.txt"},{"via a script. C/C++ would be orders of magnitude faster.": "abs-guide.txt"},{"": "abs-guide.txt"},{"--": "abs-guide.txt"},{"": "abs-guide.txt"},{"Bash supports only one-dimensional arrays, though a little trickery permits simulating multi-dimensional": "abs-guide.txt"},{"ones.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 27-17. Simulating a two-dimensional array, then tilting it": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# twodim.sh: Simulating a two-dimensional array.": "abs-guide.txt"},{"# A one-dimensional array consists of a single row.": "abs-guide.txt"},{"# A two-dimensional array stores rows sequentially.": "abs-guide.txt"},{"Rows=5": "abs-guide.txt"},{"Columns=5": "abs-guide.txt"},{"# 5 X 5 Array.": "abs-guide.txt"},{"declare -a alpha": "abs-guide.txt"},{"": "abs-guide.txt"},{"# char alpha [Rows] [Columns];": "abs-guide.txt"},{"# Unnecessary declaration. Why?": "abs-guide.txt"},{"": "abs-guide.txt"},{"load_alpha ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"local rc=0": "abs-guide.txt"},{"local index": "abs-guide.txt"},{"for i in A B C D E F G H I J K L M N O P Q R S T U V W X Y": "abs-guide.txt"},{"do": "abs-guide.txt"},{"# Use different symbols if you like.": "abs-guide.txt"},{"local row=`expr $rc / $Columns`": "abs-guide.txt"},{"local column=`expr $rc % $Rows`": "abs-guide.txt"},{"let \"index = $row * $Rows + $column\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 27. Arrays": "abs-guide.txt"},{"": "abs-guide.txt"},{"452": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"alpha[$index]=$i": "abs-guide.txt"},{"# alpha[$row][$column]": "abs-guide.txt"},{"let \"rc += 1\"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"# Simpler would be": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"declare -a alpha=( A B C D E F G H I J K L M N O P Q R S T U V W X Y )": "abs-guide.txt"},{"#+ but this somehow lacks the \"flavor\" of a two-dimensional array.": "abs-guide.txt"},{"}": "abs-guide.txt"},{"print_alpha ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"local row=0": "abs-guide.txt"},{"local index": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"while [ \"$row\" -lt \"$Rows\" ]": "abs-guide.txt"},{"do": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Print out in \"row major\" order:": "abs-guide.txt"},{"#+ columns vary,": "abs-guide.txt"},{"#+ while row (outer loop) remains the same.": "abs-guide.txt"},{"": "abs-guide.txt"},{"local column=0": "abs-guide.txt"},{"echo -n \"": "abs-guide.txt"},{"": "abs-guide.txt"},{"\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Lines up \"square\" array with rotated one.": "abs-guide.txt"},{"": "abs-guide.txt"},{"while [ \"$column\" -lt \"$Columns\" ]": "abs-guide.txt"},{"do": "abs-guide.txt"},{"let \"index = $row * $Rows + $column\"": "abs-guide.txt"},{"echo -n \"${alpha[index]} \" # alpha[$row][$column]": "abs-guide.txt"},{"let \"column += 1\"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"let \"row += 1\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"done": "abs-guide.txt"},{"# The simpler equivalent is": "abs-guide.txt"},{"#": "abs-guide.txt"},{"echo ${alpha[*]} | xargs -n $Columns": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"}": "abs-guide.txt"},{"filter ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"echo -n \"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Filter out negative array indices.": "abs-guide.txt"},{"": "abs-guide.txt"},{"\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Provides the tilt.": "abs-guide.txt"},{"# Explain how.": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [[ \"$1\" -ge 0 && \"$1\" -lt \"$Rows\" && \"$2\" -ge 0 && \"$2\" -lt \"$Columns\" ]]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"let \"index = $1 * $Rows + $2\"": "abs-guide.txt"},{"# Now, print it rotated.": "abs-guide.txt"},{"echo -n \" ${alpha[index]}\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"alpha[$row][$column]": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"rotate ()": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Rotate the array 45 degrees --": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 27. Arrays": "abs-guide.txt"},{"": "abs-guide.txt"},{"453": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"{": "abs-guide.txt"},{"#+ \"balance\" it on its lower lefthand corner.": "abs-guide.txt"},{"local row": "abs-guide.txt"},{"local column": "abs-guide.txt"},{"for (( row = Rows; row > -Rows; row-- ))": "abs-guide.txt"},{"do": "abs-guide.txt"},{"# Step through the array backwards. Why?": "abs-guide.txt"},{"for (( column = 0; column < Columns; column++ ))": "abs-guide.txt"},{"do": "abs-guide.txt"},{"if [ \"$row\"": "abs-guide.txt"},{"then": "abs-guide.txt"},{"let \"t1 =": "abs-guide.txt"},{"let \"t2 =": "abs-guide.txt"},{"else": "abs-guide.txt"},{"let \"t1 =": "abs-guide.txt"},{"let \"t2 =": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"-ge 0 ]": "abs-guide.txt"},{"$column - $row\"": "abs-guide.txt"},{"$column\"": "abs-guide.txt"},{"$column\"": "abs-guide.txt"},{"$column + $row\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"filter $t1 $t2": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Filter out negative array indices.": "abs-guide.txt"},{"# What happens if you don't do this?": "abs-guide.txt"},{"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo; echo": "abs-guide.txt"},{"done": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"Array rotation inspired by examples (pp. 143-146) in": "abs-guide.txt"},{"\"Advanced C Programming on the IBM PC,\" by Herbert Mayer": "abs-guide.txt"},{"(see bibliography).": "abs-guide.txt"},{"This just goes to show that much of what can be done in C": "abs-guide.txt"},{"can also be done in shell scripting.": "abs-guide.txt"},{"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"#--------------- Now, let the show begin. ------------#": "abs-guide.txt"},{"load_alpha": "abs-guide.txt"},{"# Load the array.": "abs-guide.txt"},{"print_alpha": "abs-guide.txt"},{"# Print it out.": "abs-guide.txt"},{"rotate": "abs-guide.txt"},{"# Rotate it 45 degrees counterclockwise.": "abs-guide.txt"},{"#-----------------------------------------------------#": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"# This is a rather contrived, not to mention inelegant simulation.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Exercises:": "abs-guide.txt"},{"--------1) Rewrite the array loading and printing functions": "abs-guide.txt"},{"in a more intuitive and less kludgy fashion.": "abs-guide.txt"},{"2)": "abs-guide.txt"},{"": "abs-guide.txt"},{"Figure out how the array rotation functions work.": "abs-guide.txt"},{"Hint: think about the implications of backwards-indexing an array.": "abs-guide.txt"},{"": "abs-guide.txt"},{"3)": "abs-guide.txt"},{"": "abs-guide.txt"},{"Rewrite this script to handle a non-square array,": "abs-guide.txt"},{"such as a 6 X 4 one.": "abs-guide.txt"},{"Try to minimize \"distortion\" when the array is rotated.": "abs-guide.txt"},{"": "abs-guide.txt"},{"A two-dimensional array is essentially equivalent to a one-dimensional one, but with additional addressing": "abs-guide.txt"},{"modes for referencing and manipulating the individual elements by row and column position.": "abs-guide.txt"},{"For an even more elaborate example of simulating a two-dimensional array, see Example A-10.": "abs-guide.txt"},{"Chapter 27. Arrays": "abs-guide.txt"},{"": "abs-guide.txt"},{"454": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"-For more interesting scripts using arrays, see:": "abs-guide.txt"},{"\u2022 Example 12-3": "abs-guide.txt"},{"\u2022 Example 16-46": "abs-guide.txt"},{"\u2022 Example A-22": "abs-guide.txt"},{"\u2022 Example A-44": "abs-guide.txt"},{"\u2022 Example A-41": "abs-guide.txt"},{"\u2022 Example A-42": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 27. Arrays": "abs-guide.txt"},{"": "abs-guide.txt"},{"455": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fChapter 28. Indirect References": "abs-guide.txt"},{"We have seen that referencing a variable, $var, fetches its value. But, what about the value of a value? What": "abs-guide.txt"},{"about $$var?": "abs-guide.txt"},{"The actual notation is \\$$var, usually preceded by an eval (and sometimes an echo). This is called an": "abs-guide.txt"},{"indirect reference.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 28-1. Indirect Variable References": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# ind-ref.sh: Indirect variable referencing.": "abs-guide.txt"},{"# Accessing the contents of the contents of a variable.": "abs-guide.txt"},{"# First, let's fool around a little.": "abs-guide.txt"},{"var=23": "abs-guide.txt"},{"echo \"\\$var": "abs-guide.txt"},{"= $var\"": "abs-guide.txt"},{"# $var": "abs-guide.txt"},{"= 23": "abs-guide.txt"},{"# So far, everything as expected. But ...": "abs-guide.txt"},{"echo \"\\$\\$var = $$var\"": "abs-guide.txt"},{"# $$var = 4570var": "abs-guide.txt"},{"# Not useful ...": "abs-guide.txt"},{"# \\$\\$ expanded to PID of the script": "abs-guide.txt"},{"# -- refer to the entry on the $$ variable -#+ and \"var\" is echoed as plain text.": "abs-guide.txt"},{"# (Thank you, Jakob Bohm, for pointing this out.)": "abs-guide.txt"},{"echo \"\\\\\\$\\$var = \\$$var\"": "abs-guide.txt"},{"# \\$$var = $23": "abs-guide.txt"},{"# As expected. The first $ is escaped and pasted on to": "abs-guide.txt"},{"#+ the value of var ($var = 23 ).": "abs-guide.txt"},{"# Meaningful, but still not useful.": "abs-guide.txt"},{"# Now, let's start over and do it the right way.": "abs-guide.txt"},{"# ============================================== #": "abs-guide.txt"},{"": "abs-guide.txt"},{"a=letter_of_alphabet": "abs-guide.txt"},{"letter_of_alphabet=z": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Variable \"a\" holds the name of another variable.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"# Direct reference.": "abs-guide.txt"},{"echo \"a = $a\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# a = letter_of_alphabet": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Indirect reference.": "abs-guide.txt"},{"eval a=\\$$a": "abs-guide.txt"},{"# ^^^": "abs-guide.txt"},{"Forcing an eval(uation), and ...": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^": "abs-guide.txt"},{"Escaping the first $ ...": "abs-guide.txt"},{"# -----------------------------------------------------------------------# The 'eval' forces an update of $a, sets it to the updated value of \\$$a.": "abs-guide.txt"},{"# So, we see why 'eval' so often shows up in indirect reference notation.": "abs-guide.txt"},{"# -----------------------------------------------------------------------echo \"Now a = $a\"": "abs-guide.txt"},{"# Now a = z": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 28. Indirect References": "abs-guide.txt"},{"": "abs-guide.txt"},{"456": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Now, let's try changing the second-order reference.": "abs-guide.txt"},{"t=table_cell_3": "abs-guide.txt"},{"table_cell_3=24": "abs-guide.txt"},{"echo \"\\\"table_cell_3\\\" = $table_cell_3\"": "abs-guide.txt"},{"# \"table_cell_3\" = 24": "abs-guide.txt"},{"echo -n \"dereferenced \\\"t\\\" = \"; eval echo \\$$t": "abs-guide.txt"},{"# dereferenced \"t\" = 24": "abs-guide.txt"},{"# In this simple case, the following also works (why?).": "abs-guide.txt"},{"#": "abs-guide.txt"},{"eval t=\\$$t; echo \"\\\"t\\\" = $t\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"t=table_cell_3": "abs-guide.txt"},{"NEW_VAL=387": "abs-guide.txt"},{"table_cell_3=$NEW_VAL": "abs-guide.txt"},{"echo \"Changing value of \\\"table_cell_3\\\" to $NEW_VAL.\"": "abs-guide.txt"},{"echo \"\\\"table_cell_3\\\" now $table_cell_3\"": "abs-guide.txt"},{"echo -n \"dereferenced \\\"t\\\" now \"; eval echo \\$$t": "abs-guide.txt"},{"# \"eval\" takes the two arguments \"echo\" and \"\\$$t\" (set equal to $table_cell_3)": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"# (Thanks, Stephane Chazelas, for clearing up the above behavior.)": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"A more straightforward method is the ${!t} notation, discussed in the": "abs-guide.txt"},{"#+ \"Bash, version 2\" section.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"See also ex78.sh.": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Indirect referencing in Bash is a multi-step process. First, take the name of a variable: varname. Then,": "abs-guide.txt"},{"reference it: $varname. Then, reference the reference: $$varname. Then, escape the first $:": "abs-guide.txt"},{"\\$$varname. Finally, force a reevaluation of the expression and assign it: eval newvar=\\$$varname.": "abs-guide.txt"},{"Of what practical use is indirect referencing of variables? It gives Bash a little of the functionality of pointers": "abs-guide.txt"},{"in C, for instance, in table lookup. And, it also has some other very interesting applications. . . .": "abs-guide.txt"},{"Nils Radtke shows how to build \"dynamic\" variable names and evaluate their contents. This can be useful": "abs-guide.txt"},{"when sourcing configuration files.": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"": "abs-guide.txt"},{"# --------------------------------------------# This could be \"sourced\" from a separate file.": "abs-guide.txt"},{"isdnMyProviderRemoteNet=172.16.0.100": "abs-guide.txt"},{"isdnYourProviderRemoteNet=10.0.0.10": "abs-guide.txt"},{"isdnOnlineService=\"MyProvider\"": "abs-guide.txt"},{"# ---------------------------------------------": "abs-guide.txt"},{"": "abs-guide.txt"},{"remoteNet=$(eval \"echo \\$$(echo isdn${isdnOnlineService}RemoteNet)\")": "abs-guide.txt"},{"remoteNet=$(eval \"echo \\$$(echo isdnMyProviderRemoteNet)\")": "abs-guide.txt"},{"remoteNet=$(eval \"echo \\$isdnMyProviderRemoteNet\")": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 28. Indirect References": "abs-guide.txt"},{"": "abs-guide.txt"},{"457": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"remoteNet=$(eval \"echo $isdnMyProviderRemoteNet\")": "abs-guide.txt"},{"echo \"$remoteNet\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# 172.16.0.100": "abs-guide.txt"},{"": "abs-guide.txt"},{"# ================================================================": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"And, it gets even better.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Consider the following snippet given a variable named getSparc,": "abs-guide.txt"},{"#+ but no such variable getIa64:": "abs-guide.txt"},{"chkMirrorArchs () {": "abs-guide.txt"},{"arch=\"$1\";": "abs-guide.txt"},{"if [ \"$(eval \"echo \\${$(echo get$(echo -ne $arch |": "abs-guide.txt"},{"sed 's/^\\(.\\).*/\\1/g' | tr 'a-z' 'A-Z'; echo $arch |": "abs-guide.txt"},{"sed 's/^.\\(.*\\)/\\1/g')):-false}\")\" = true ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"return 0;": "abs-guide.txt"},{"else": "abs-guide.txt"},{"return 1;": "abs-guide.txt"},{"fi;": "abs-guide.txt"},{"}": "abs-guide.txt"},{"getSparc=\"true\"": "abs-guide.txt"},{"unset getIa64": "abs-guide.txt"},{"chkMirrorArchs sparc": "abs-guide.txt"},{"echo $?": "abs-guide.txt"},{"# 0": "abs-guide.txt"},{"# True": "abs-guide.txt"},{"chkMirrorArchs Ia64": "abs-guide.txt"},{"echo $?": "abs-guide.txt"},{"# 1": "abs-guide.txt"},{"# False": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Notes:": "abs-guide.txt"},{"----Even the to-be-substituted variable name part is built explicitly.": "abs-guide.txt"},{"The parameters to the chkMirrorArchs calls are all lower case.": "abs-guide.txt"},{"The variable name is composed of two parts: \"get\" and \"Sparc\" . . .": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 28-2. Passing an indirect reference to awk": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# Another version of the \"column totaler\" script": "abs-guide.txt"},{"#+ that adds up a specified column (of numbers) in the target file.": "abs-guide.txt"},{"# This one uses indirect references.": "abs-guide.txt"},{"ARGS=2": "abs-guide.txt"},{"E_WRONGARGS=85": "abs-guide.txt"},{"if [ $# -ne \"$ARGS\" ] # Check for proper number of command-line args.": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Usage: `basename $0` filename column-number\"": "abs-guide.txt"},{"exit $E_WRONGARGS": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"filename=$1": "abs-guide.txt"},{"column_number=$2": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Name of file to operate on.": "abs-guide.txt"},{"# Which column to total up.": "abs-guide.txt"},{"": "abs-guide.txt"},{"#===== Same as original script, up to this point =====#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 28. Indirect References": "abs-guide.txt"},{"": "abs-guide.txt"},{"458": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# A multi-line awk script is invoked by": "abs-guide.txt"},{"#": "abs-guide.txt"},{"awk \"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"...": "abs-guide.txt"},{"#": "abs-guide.txt"},{"...": "abs-guide.txt"},{"#": "abs-guide.txt"},{"...": "abs-guide.txt"},{"#": "abs-guide.txt"},{"\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Begin awk script.": "abs-guide.txt"},{"# ------------------------------------------------awk \"": "abs-guide.txt"},{"{ total += \\$${column_number} # Indirect reference": "abs-guide.txt"},{"}": "abs-guide.txt"},{"END {": "abs-guide.txt"},{"print total": "abs-guide.txt"},{"}": "abs-guide.txt"},{"\" \"$filename\"": "abs-guide.txt"},{"# Note that awk doesn't need an eval preceding \\$$.": "abs-guide.txt"},{"# ------------------------------------------------# End awk script.": "abs-guide.txt"},{"# Indirect variable reference avoids the hassles": "abs-guide.txt"},{"#+ of referencing a shell variable within the embedded awk script.": "abs-guide.txt"},{"# Thanks, Stephane Chazelas.": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit $?": "abs-guide.txt"},{"": "abs-guide.txt"},{"This method of indirect referencing is a bit tricky. If the second order variable changes its value,": "abs-guide.txt"},{"then the first order variable must be properly dereferenced (as in the above example).": "abs-guide.txt"},{"Fortunately, the ${!variable} notation introduced with version 2 of Bash (see Example": "abs-guide.txt"},{"37-2 and Example A-22) makes indirect referencing more intuitive.": "abs-guide.txt"},{"Bash does not support pointer arithmetic, and this severely limits the usefulness of indirect referencing. In": "abs-guide.txt"},{"fact, indirect referencing in a scripting language is, at best, something of an afterthought.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 28. Indirect References": "abs-guide.txt"},{"": "abs-guide.txt"},{"459": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fChapter 29. /dev and /proc": "abs-guide.txt"},{"A Linux or UNIX filesystem typically has the /dev and /proc special-purpose directories.": "abs-guide.txt"},{"": "abs-guide.txt"},{"29.1. /dev": "abs-guide.txt"},{"The /dev directory contains entries for the physical devices that may or may not be present in the hardware.": "abs-guide.txt"},{"[118] Appropriately enough, these are called device files. As an example, the hard drive partitions containing": "abs-guide.txt"},{"the mounted filesystem(s) have entries in /dev, as df shows.": "abs-guide.txt"},{"bash$ df": "abs-guide.txt"},{"Filesystem": "abs-guide.txt"},{"Mounted on": "abs-guide.txt"},{"/dev/hda6": "abs-guide.txt"},{"/dev/hda1": "abs-guide.txt"},{"/dev/hda8": "abs-guide.txt"},{"/dev/hda5": "abs-guide.txt"},{"": "abs-guide.txt"},{"1k-blocks": "abs-guide.txt"},{"495876": "abs-guide.txt"},{"50755": "abs-guide.txt"},{"367013": "abs-guide.txt"},{"1714416": "abs-guide.txt"},{"": "abs-guide.txt"},{"Used Available Use%": "abs-guide.txt"},{"222748": "abs-guide.txt"},{"3887": "abs-guide.txt"},{"13262": "abs-guide.txt"},{"1123624": "abs-guide.txt"},{"": "abs-guide.txt"},{"247527": "abs-guide.txt"},{"44248": "abs-guide.txt"},{"334803": "abs-guide.txt"},{"503704": "abs-guide.txt"},{"": "abs-guide.txt"},{"48%": "abs-guide.txt"},{"9%": "abs-guide.txt"},{"4%": "abs-guide.txt"},{"70%": "abs-guide.txt"},{"": "abs-guide.txt"},{"/": "abs-guide.txt"},{"/boot": "abs-guide.txt"},{"/home": "abs-guide.txt"},{"/usr": "abs-guide.txt"},{"": "abs-guide.txt"},{"Among other things, the /dev directory contains loopback devices, such as /dev/loop0. A loopback": "abs-guide.txt"},{"device is a gimmick that allows an ordinary file to be accessed as if it were a block device. [119] This permits": "abs-guide.txt"},{"mounting an entire filesystem within a single large file. See Example 17-8 and Example 17-7.": "abs-guide.txt"},{"A few of the pseudo-devices in /dev have other specialized uses, such as /dev/null, /dev/zero,": "abs-guide.txt"},{"/dev/urandom, /dev/sda1 (hard drive partition), /dev/udp (User Datagram Packet port), and": "abs-guide.txt"},{"/dev/tcp.": "abs-guide.txt"},{"For instance:": "abs-guide.txt"},{"To manually mount a USB flash drive, append the following line to /etc/fstab. [120]": "abs-guide.txt"},{"/dev/sda1": "abs-guide.txt"},{"": "abs-guide.txt"},{"/mnt/flashdrive": "abs-guide.txt"},{"": "abs-guide.txt"},{"auto": "abs-guide.txt"},{"": "abs-guide.txt"},{"noauto,user,noatime": "abs-guide.txt"},{"": "abs-guide.txt"},{"0 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"(See also Example A-23.)": "abs-guide.txt"},{"Checking whether a disk is in the CD-burner (soft-linked to /dev/hdc):": "abs-guide.txt"},{"head -1 /dev/hdc": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"head: cannot open '/dev/hdc' for reading: No medium found": "abs-guide.txt"},{"(No disc in the drive.)": "abs-guide.txt"},{"": "abs-guide.txt"},{"# head: error reading '/dev/hdc': Input/output error": "abs-guide.txt"},{"# (There is a disk in the drive, but it can't be read;": "abs-guide.txt"},{"#+ possibly it's an unrecorded CDR blank.)": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"Stream of characters and assorted gibberish": "abs-guide.txt"},{"(There is a pre-recorded disk in the drive,": "abs-guide.txt"},{"and this is raw output -- a stream of ASCII and binary data.)": "abs-guide.txt"},{"Here we see the wisdom of using 'head' to limit the output": "abs-guide.txt"},{"to manageable proportions, rather than 'cat' or something similar.": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Now, it's just a matter of checking/parsing the output and taking": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 29. /dev and /proc": "abs-guide.txt"},{"": "abs-guide.txt"},{"460": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"#+ appropriate action.": "abs-guide.txt"},{"": "abs-guide.txt"},{"When executing a command on a /dev/tcp/$host/$port pseudo-device file, Bash opens a TCP": "abs-guide.txt"},{"connection to the associated socket.": "abs-guide.txt"},{"": "abs-guide.txt"},{"A socket is a communications node associated with a specific I/O port. (This is analogous to a hardware": "abs-guide.txt"},{"socket, or receptacle, for a connecting cable.) It permits data transfer between hardware devices on the same": "abs-guide.txt"},{"machine, between machines on the same network, between machines across different networks, and, of": "abs-guide.txt"},{"course, between machines at different locations on the Internet.": "abs-guide.txt"},{"The following examples assume an active Internet connection.": "abs-guide.txt"},{"Getting the time from nist.gov:": "abs-guide.txt"},{"bash$ cat </dev/tcp/time.nist.gov/13": "abs-guide.txt"},{"53082 04-03-18 04:26:54 68 0 0 502.3 UTC(NIST) *": "abs-guide.txt"},{"": "abs-guide.txt"},{"[Mark contributed this example.]": "abs-guide.txt"},{"Generalizing the above into a script:": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# This script must run with root permissions.": "abs-guide.txt"},{"URL=\"time.nist.gov/13\"": "abs-guide.txt"},{"Time=$(cat </dev/tcp/\"$URL\")": "abs-guide.txt"},{"UTC=$(echo \"$Time\" | awk '{print$3}')": "abs-guide.txt"},{"# Third field is UTC (GMT) time.": "abs-guide.txt"},{"# Exercise: modify this for different time zones.": "abs-guide.txt"},{"echo \"UTC Time = \"$UTC\"\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"Downloading a URL:": "abs-guide.txt"},{"bash$ exec 5<>/dev/tcp/www.net.cn/80": "abs-guide.txt"},{"bash$ echo -e \"GET / HTTP/1.0\\n\" >&5": "abs-guide.txt"},{"bash$ cat <&5": "abs-guide.txt"},{"": "abs-guide.txt"},{"[Thanks, Mark and Mihai Maties.]": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 29-1. Using /dev/tcp for troubleshooting": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# dev-tcp.sh: /dev/tcp redirection to check Internet connection.": "abs-guide.txt"},{"# Script by Troy Engel.": "abs-guide.txt"},{"# Used with permission.": "abs-guide.txt"},{"TCP_HOST=news-15.net": "abs-guide.txt"},{"TCP_PORT=80": "abs-guide.txt"},{"": "abs-guide.txt"},{"# A known spam-friendly ISP.": "abs-guide.txt"},{"# Port 80 is http.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Try to connect. (Somewhat similar to a 'ping' . . .)": "abs-guide.txt"},{"echo \"HEAD / HTTP/1.0\" >/dev/tcp/${TCP_HOST}/${TCP_PORT}": "abs-guide.txt"},{"MYEXIT=$?": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 29. /dev and /proc": "abs-guide.txt"},{"": "abs-guide.txt"},{"461": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{": <<EXPLANATION": "abs-guide.txt"},{"If bash was compiled with --enable-net-redirections, it has the capability of": "abs-guide.txt"},{"using a special character device for both TCP and UDP redirections. These": "abs-guide.txt"},{"redirections are used identically as STDIN/STDOUT/STDERR. The device entries": "abs-guide.txt"},{"are 30,36 for /dev/tcp:": "abs-guide.txt"},{"mknod /dev/tcp c 30 36": "abs-guide.txt"},{">From the bash reference:": "abs-guide.txt"},{"/dev/tcp/host/port": "abs-guide.txt"},{"If host is a valid hostname or Internet address, and port is an integer": "abs-guide.txt"},{"port number or service name, Bash attempts to open a TCP connection to the": "abs-guide.txt"},{"corresponding socket.": "abs-guide.txt"},{"EXPLANATION": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [ \"X$MYEXIT\" = \"X0\" ]; then": "abs-guide.txt"},{"echo \"Connection successful. Exit code: $MYEXIT\"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo \"Connection unsuccessful. Exit code: $MYEXIT\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"exit $MYEXIT": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 29-2. Playing music": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# music.sh": "abs-guide.txt"},{"# Music without external files": "abs-guide.txt"},{"# Author: Antonio Macchi": "abs-guide.txt"},{"# Used in ABS Guide with permission.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# /dev/dsp default = 8000 frames per second, 8 bits per frame (1 byte),": "abs-guide.txt"},{"#+ 1 channel (mono)": "abs-guide.txt"},{"duration=2000": "abs-guide.txt"},{"volume=$'\\xc0'": "abs-guide.txt"},{"mute=$'\\x80'": "abs-guide.txt"},{"": "abs-guide.txt"},{"# If 8000 bytes = 1 second, then 2000 = 1/4 second.": "abs-guide.txt"},{"# Max volume = \\xff (or \\x00).": "abs-guide.txt"},{"# No volume = \\x80 (the middle).": "abs-guide.txt"},{"": "abs-guide.txt"},{"function mknote () # $1=Note Hz in bytes (e.g. A = 440Hz ::": "abs-guide.txt"},{"{": "abs-guide.txt"},{"#+ 8000 fps / 440 = 16 :: A = 16 bytes per second)": "abs-guide.txt"},{"for t in `seq 0 $duration`": "abs-guide.txt"},{"do": "abs-guide.txt"},{"test $(( $t % $1 )) = 0 && echo -n $volume || echo -n $mute": "abs-guide.txt"},{"done": "abs-guide.txt"},{"}": "abs-guide.txt"},{"e=`mknote 49`": "abs-guide.txt"},{"g=`mknote 41`": "abs-guide.txt"},{"a=`mknote 36`": "abs-guide.txt"},{"b=`mknote 32`": "abs-guide.txt"},{"c=`mknote 30`": "abs-guide.txt"},{"cis=`mknote 29`": "abs-guide.txt"},{"d=`mknote 27`": "abs-guide.txt"},{"e2=`mknote 24`": "abs-guide.txt"},{"n=`mknote 32767`": "abs-guide.txt"},{"# European notation.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 29. /dev and /proc": "abs-guide.txt"},{"": "abs-guide.txt"},{"462": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"echo -n \"$g$e2$d$c$d$c$a$g$n$g$e$n$g$e2$d$c$c$b$c$cis$n$cis$d \\": "abs-guide.txt"},{"$n$g$e2$d$c$d$c$a$g$n$g$e$n$g$a$d$c$b$a$b$c\" > /dev/dsp": "abs-guide.txt"},{"# dsp = Digital Signal Processor": "abs-guide.txt"},{"exit": "abs-guide.txt"},{"": "abs-guide.txt"},{"# A \"bonny\" example of an elegant shell script!": "abs-guide.txt"},{"": "abs-guide.txt"},{"29.2. /proc": "abs-guide.txt"},{"The /proc directory is actually a pseudo-filesystem. The files in /proc mirror currently running system and": "abs-guide.txt"},{"kernel processes and contain information and statistics about them.": "abs-guide.txt"},{"bash$ cat /proc/devices": "abs-guide.txt"},{"Character devices:": "abs-guide.txt"},{"1 mem": "abs-guide.txt"},{"2 pty": "abs-guide.txt"},{"3 ttyp": "abs-guide.txt"},{"4 ttyS": "abs-guide.txt"},{"5 cua": "abs-guide.txt"},{"7 vcs": "abs-guide.txt"},{"10 misc": "abs-guide.txt"},{"14 sound": "abs-guide.txt"},{"29 fb": "abs-guide.txt"},{"36 netlink": "abs-guide.txt"},{"128 ptm": "abs-guide.txt"},{"136 pts": "abs-guide.txt"},{"162 raw": "abs-guide.txt"},{"254 pcmcia": "abs-guide.txt"},{"Block devices:": "abs-guide.txt"},{"1 ramdisk": "abs-guide.txt"},{"2 fd": "abs-guide.txt"},{"3 ide0": "abs-guide.txt"},{"9 md": "abs-guide.txt"},{"": "abs-guide.txt"},{"bash$ cat /proc/interrupts": "abs-guide.txt"},{"CPU0": "abs-guide.txt"},{"0:": "abs-guide.txt"},{"84505": "abs-guide.txt"},{"XT-PIC": "abs-guide.txt"},{"1:": "abs-guide.txt"},{"3375": "abs-guide.txt"},{"XT-PIC": "abs-guide.txt"},{"2:": "abs-guide.txt"},{"0": "abs-guide.txt"},{"XT-PIC": "abs-guide.txt"},{"5:": "abs-guide.txt"},{"1": "abs-guide.txt"},{"XT-PIC": "abs-guide.txt"},{"8:": "abs-guide.txt"},{"1": "abs-guide.txt"},{"XT-PIC": "abs-guide.txt"},{"12:": "abs-guide.txt"},{"4231": "abs-guide.txt"},{"XT-PIC": "abs-guide.txt"},{"14:": "abs-guide.txt"},{"109373": "abs-guide.txt"},{"XT-PIC": "abs-guide.txt"},{"NMI:": "abs-guide.txt"},{"0": "abs-guide.txt"},{"ERR:": "abs-guide.txt"},{"0": "abs-guide.txt"},{"": "abs-guide.txt"},{"bash$ cat /proc/partitions": "abs-guide.txt"},{"major minor #blocks name": "abs-guide.txt"},{"3": "abs-guide.txt"},{"3": "abs-guide.txt"},{"3": "abs-guide.txt"},{"3": "abs-guide.txt"},{"...": "abs-guide.txt"},{"": "abs-guide.txt"},{"0": "abs-guide.txt"},{"1": "abs-guide.txt"},{"2": "abs-guide.txt"},{"4": "abs-guide.txt"},{"": "abs-guide.txt"},{"3007872": "abs-guide.txt"},{"52416": "abs-guide.txt"},{"1": "abs-guide.txt"},{"165280": "abs-guide.txt"},{"": "abs-guide.txt"},{"timer": "abs-guide.txt"},{"keyboard": "abs-guide.txt"},{"cascade": "abs-guide.txt"},{"soundblaster": "abs-guide.txt"},{"rtc": "abs-guide.txt"},{"PS/2 Mouse": "abs-guide.txt"},{"ide0": "abs-guide.txt"},{"": "abs-guide.txt"},{"rio rmerge rsect ruse wio wmerge wsect wuse running use aveq": "abs-guide.txt"},{"": "abs-guide.txt"},{"hda 4472 22260 114520 94240 3551 18703 50384 549710 0 111550 644030": "abs-guide.txt"},{"hda1 27 395 844 960 4 2 14 180 0 800 1140": "abs-guide.txt"},{"hda2 0 0 0 0 0 0 0 0 0 0 0": "abs-guide.txt"},{"hda4 10 0 20 210 0 0 0 0 0 210 210": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 29. /dev and /proc": "abs-guide.txt"},{"": "abs-guide.txt"},{"463": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"": "abs-guide.txt"},{"bash$ cat /proc/loadavg": "abs-guide.txt"},{"0.13 0.42 0.27 2/44 1119": "abs-guide.txt"},{"": "abs-guide.txt"},{"bash$ cat /proc/apm": "abs-guide.txt"},{"1.16 1.2 0x03 0x01 0xff 0x80 -1% -1 ?": "abs-guide.txt"},{"": "abs-guide.txt"},{"bash$ cat /proc/acpi/battery/BAT0/info": "abs-guide.txt"},{"present:": "abs-guide.txt"},{"yes": "abs-guide.txt"},{"design capacity:": "abs-guide.txt"},{"43200 mWh": "abs-guide.txt"},{"last full capacity:": "abs-guide.txt"},{"36640 mWh": "abs-guide.txt"},{"battery technology:": "abs-guide.txt"},{"rechargeable": "abs-guide.txt"},{"design voltage:": "abs-guide.txt"},{"10800 mV": "abs-guide.txt"},{"design capacity warning: 1832 mWh": "abs-guide.txt"},{"design capacity low:": "abs-guide.txt"},{"200 mWh": "abs-guide.txt"},{"capacity granularity 1: 1 mWh": "abs-guide.txt"},{"capacity granularity 2: 1 mWh": "abs-guide.txt"},{"model number:": "abs-guide.txt"},{"IBM-02K6897": "abs-guide.txt"},{"serial number:": "abs-guide.txt"},{"1133": "abs-guide.txt"},{"battery type:": "abs-guide.txt"},{"LION": "abs-guide.txt"},{"OEM info:": "abs-guide.txt"},{"Panasonic": "abs-guide.txt"},{"": "abs-guide.txt"},{"bash$ fgrep Mem /proc/meminfo": "abs-guide.txt"},{"MemTotal:": "abs-guide.txt"},{"515216 kB": "abs-guide.txt"},{"MemFree:": "abs-guide.txt"},{"266248 kB": "abs-guide.txt"},{"": "abs-guide.txt"},{"Shell scripts may extract data from certain of the files in /proc. [121]": "abs-guide.txt"},{"FS=iso": "abs-guide.txt"},{"": "abs-guide.txt"},{"# ISO filesystem support in kernel?": "abs-guide.txt"},{"": "abs-guide.txt"},{"grep $FS /proc/filesystems": "abs-guide.txt"},{"": "abs-guide.txt"},{"# iso9660": "abs-guide.txt"},{"": "abs-guide.txt"},{"kernel_version=$( awk '{ print $3 }' /proc/version )": "abs-guide.txt"},{"CPU=$( awk '/model name/ {print $5}' < /proc/cpuinfo )": "abs-guide.txt"},{"if [ \"$CPU\" = \"Pentium(R)\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"run_some_commands": "abs-guide.txt"},{"...": "abs-guide.txt"},{"else": "abs-guide.txt"},{"run_other_commands": "abs-guide.txt"},{"...": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"cpu_speed=$( fgrep \"cpu MHz\" /proc/cpuinfo | awk '{print $4}' )": "abs-guide.txt"},{"# Current operating speed (in MHz) of the cpu on your machine.": "abs-guide.txt"},{"# On a laptop this may vary, depending on use of battery": "abs-guide.txt"},{"#+ or AC power.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 29. /dev and /proc": "abs-guide.txt"},{"": "abs-guide.txt"},{"464": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# get-commandline.sh": "abs-guide.txt"},{"# Get the command-line parameters of a process.": "abs-guide.txt"},{"OPTION=cmdline": "abs-guide.txt"},{"# Identify PID.": "abs-guide.txt"},{"pid=$( echo $(pidof \"$1\") | awk '{ print $1 }' )": "abs-guide.txt"},{"# Get only first": "abs-guide.txt"},{"^^^^^^^^^^^^^^^^^^ of multiple instances.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"Process ID of (first instance of) \"$1\" = $pid\"": "abs-guide.txt"},{"echo -n \"Command-line arguments: \"": "abs-guide.txt"},{"cat /proc/\"$pid\"/\"$OPTION\" | xargs -0 echo": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Formats output:": "abs-guide.txt"},{"^^^^^^^^^^^^^^^": "abs-guide.txt"},{"#": "abs-guide.txt"},{"(Thanks, Han Holl, for the fixup!)": "abs-guide.txt"},{"echo; echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"# For example:": "abs-guide.txt"},{"# sh get-commandline.sh xterm": "abs-guide.txt"},{"": "abs-guide.txt"},{"+": "abs-guide.txt"},{"devfile=\"/proc/bus/usb/devices\"": "abs-guide.txt"},{"text=\"Spd\"": "abs-guide.txt"},{"USB1=\"Spd=12\"": "abs-guide.txt"},{"USB2=\"Spd=480\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"bus_speed=$(fgrep -m 1 \"$text\" $devfile | awk '{print $9}')": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^^^^ Stop after first match.": "abs-guide.txt"},{"if [ \"$bus_speed\" = \"$USB1\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"USB 1.1 port found.\"": "abs-guide.txt"},{"# Do something appropriate for USB 1.1.": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"It is even possible to control certain peripherals with commands sent to the /proc directory.": "abs-guide.txt"},{"root# echo on > /proc/acpi/ibm/light": "abs-guide.txt"},{"": "abs-guide.txt"},{"This turns on the Thinklight in certain models of IBM/Lenovo Thinkpads. (May not work on all Linux": "abs-guide.txt"},{"distros.)": "abs-guide.txt"},{"Of course, caution is advised when writing to /proc.": "abs-guide.txt"},{"The /proc directory contains subdirectories with unusual numerical names. Every one of these names maps": "abs-guide.txt"},{"to the process ID of a currently running process. Within each of these subdirectories, there are a number of": "abs-guide.txt"},{"files that hold useful information about the corresponding process. The stat and status files keep running": "abs-guide.txt"},{"statistics on the process, the cmdline file holds the command-line arguments the process was invoked with,": "abs-guide.txt"},{"and the exe file is a symbolic link to the complete path name of the invoking process. There are a few more": "abs-guide.txt"},{"such files, but these seem to be the most interesting from a scripting standpoint.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 29-3. Finding the process associated with a PID": "abs-guide.txt"},{"Chapter 29. /dev and /proc": "abs-guide.txt"},{"": "abs-guide.txt"},{"465": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# pid-identifier.sh:": "abs-guide.txt"},{"# Gives complete path name to process associated with pid.": "abs-guide.txt"},{"ARGNO=1 # Number of arguments the script expects.": "abs-guide.txt"},{"E_WRONGARGS=65": "abs-guide.txt"},{"E_BADPID=66": "abs-guide.txt"},{"E_NOSUCHPROCESS=67": "abs-guide.txt"},{"E_NOPERMISSION=68": "abs-guide.txt"},{"PROCFILE=exe": "abs-guide.txt"},{"if [ $# -ne $ARGNO ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Usage: `basename $0` PID-number\" >&2": "abs-guide.txt"},{"exit $E_WRONGARGS": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Error message >stderr.": "abs-guide.txt"},{"": "abs-guide.txt"},{"pidno=$( ps ax | grep $1 | awk '{ print $1 }' | grep $1 )": "abs-guide.txt"},{"# Checks for pid in \"ps\" listing, field #1.": "abs-guide.txt"},{"# Then makes sure it is the actual process, not the process invoked by this script.": "abs-guide.txt"},{"# The last \"grep $1\" filters out this possibility.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"pidno=$( ps ax | awk '{ print $1 }' | grep $1 )": "abs-guide.txt"},{"#": "abs-guide.txt"},{"also works, as Teemu Huovila, points out.": "abs-guide.txt"},{"if [ -z \"$pidno\" ] # If, after all the filtering, the result is a zero-length string,": "abs-guide.txt"},{"then": "abs-guide.txt"},{"#+ no running process corresponds to the pid given.": "abs-guide.txt"},{"echo \"No such process running.\"": "abs-guide.txt"},{"exit $E_NOSUCHPROCESS": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# Alternatively:": "abs-guide.txt"},{"#": "abs-guide.txt"},{"if ! ps $1 > /dev/null 2>&1": "abs-guide.txt"},{"#": "abs-guide.txt"},{"then": "abs-guide.txt"},{"# no running process corresponds to the pid given.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"echo \"No such process running.\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"exit $E_NOSUCHPROCESS": "abs-guide.txt"},{"#": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# To simplify the entire process, use \"pidof\".": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [ !": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"exit": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"-r \"/proc/$1/$PROCFILE\" ]": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Check for read permission.": "abs-guide.txt"},{"": "abs-guide.txt"},{"\"Process $1 running, but...\"": "abs-guide.txt"},{"\"Can't get read permission on /proc/$1/$PROCFILE.\"": "abs-guide.txt"},{"$E_NOPERMISSION # Ordinary user can't access some files in /proc.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# The last two tests may be replaced by:": "abs-guide.txt"},{"#": "abs-guide.txt"},{"if ! kill -0 $1 > /dev/null 2>&1 # '0' is not a signal, but": "abs-guide.txt"},{"# this will test whether it is possible": "abs-guide.txt"},{"# to send a signal to the process.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"then echo \"PID doesn't exist or you're not its owner\" >&2": "abs-guide.txt"},{"#": "abs-guide.txt"},{"exit $E_BADPID": "abs-guide.txt"},{"#": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"exe_file=$( ls -l /proc/$1 | grep \"exe\" | awk '{ print $11 }' )": "abs-guide.txt"},{"# Or": "abs-guide.txt"},{"exe_file=$( ls -l /proc/$1/exe | awk '{print $11}' )": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# /proc/pid-number/exe is a symbolic link": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 29. /dev and /proc": "abs-guide.txt"},{"": "abs-guide.txt"},{"466": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"#+ to the complete path name of the invoking process.": "abs-guide.txt"},{"if [ -e \"$exe_file\" ] # If /proc/pid-number/exe exists,": "abs-guide.txt"},{"then": "abs-guide.txt"},{"#+ then the corresponding process exists.": "abs-guide.txt"},{"echo \"Process #$1 invoked by $exe_file.\"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo \"No such process running.\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"# This elaborate script can *almost* be replaced by": "abs-guide.txt"},{"#": "abs-guide.txt"},{"ps ax | grep $1 | awk '{ print $5 }'": "abs-guide.txt"},{"# However, this will not work...": "abs-guide.txt"},{"#+ because the fifth field of 'ps' is argv[0] of the process,": "abs-guide.txt"},{"#+ not the executable file path.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# However, either of the following would work.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"find /proc/$1/exe -printf '%l\\n'": "abs-guide.txt"},{"#": "abs-guide.txt"},{"lsof -aFn -p $1 -d txt | sed -ne 's/^n//p'": "abs-guide.txt"},{"# Additional commentary by Stephane Chazelas.": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 29-4. On-line connect status": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# connect-stat.sh": "abs-guide.txt"},{"# Note that this script may need modification": "abs-guide.txt"},{"#+ to work with a wireless connection.": "abs-guide.txt"},{"PROCNAME=pppd": "abs-guide.txt"},{"PROCFILENAME=status": "abs-guide.txt"},{"NOTCONNECTED=85": "abs-guide.txt"},{"INTERVAL=2": "abs-guide.txt"},{"": "abs-guide.txt"},{"# ppp daemon": "abs-guide.txt"},{"# Where to look.": "abs-guide.txt"},{"# Update every 2 seconds.": "abs-guide.txt"},{"": "abs-guide.txt"},{"pidno=$( ps ax | grep -v \"ps ax\" | grep -v grep | grep $PROCNAME |": "abs-guide.txt"},{"awk '{ print $1 }' )": "abs-guide.txt"},{"# Finding the process number of 'pppd', the 'ppp daemon'.": "abs-guide.txt"},{"# Have to filter out the process lines generated by the search itself.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# However, as Oleg Philon points out,": "abs-guide.txt"},{"#+ this could have been considerably simplified by using \"pidof\".": "abs-guide.txt"},{"# pidno=$( pidof $PROCNAME )": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Moral of the story:": "abs-guide.txt"},{"#+ When a command sequence gets too complex, look for a shortcut.": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [ -z \"$pidno\" ]": "abs-guide.txt"},{"# If no pid, then process is not running.": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Not connected.\"": "abs-guide.txt"},{"# exit $NOTCONNECTED": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo \"Connected.\"; echo": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"while [ true ]": "abs-guide.txt"},{"do": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Endless loop, script can be improved here.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 29. /dev and /proc": "abs-guide.txt"},{"": "abs-guide.txt"},{"467": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"if [ ! -e \"/proc/$pidno/$PROCFILENAME\" ]": "abs-guide.txt"},{"# While process running, then \"status\" file exists.": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Disconnected.\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"exit $NOTCONNECTED": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"netstat -s | grep \"packets received\" # Get some connect statistics.": "abs-guide.txt"},{"netstat -s | grep \"packets delivered\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"sleep $INTERVAL": "abs-guide.txt"},{"echo; echo": "abs-guide.txt"},{"done": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"# As it stands, this script must be terminated with a Control-C.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Exercises:": "abs-guide.txt"},{"--------Improve the script so it exits on a \"q\" keystroke.": "abs-guide.txt"},{"Make the script more user-friendly in other ways.": "abs-guide.txt"},{"Fix the script to work with wireless/DSL connections.": "abs-guide.txt"},{"": "abs-guide.txt"},{"In general, it is dangerous to write to the files in /proc, as this can corrupt the filesystem or crash the": "abs-guide.txt"},{"machine.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 29. /dev and /proc": "abs-guide.txt"},{"": "abs-guide.txt"},{"468": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fChapter 30. Network Programming": "abs-guide.txt"},{"The Net's a cross between an elephant and a": "abs-guide.txt"},{"white elephant sale: it never forgets, and it's": "abs-guide.txt"},{"always crap.": "abs-guide.txt"},{"--Nemo": "abs-guide.txt"},{"A Linux system has quite a number of tools for accessing, manipulating, and troubleshooting network": "abs-guide.txt"},{"connections. We can incorporate some of these tools into scripts -- scripts that expand our knowledge of": "abs-guide.txt"},{"networking, useful scripts that can facilitate the administration of a network.": "abs-guide.txt"},{"Here is a simple CGI script that demonstrates connecting to a remote server.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 30-1. Print the server environment": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# test-cgi.sh": "abs-guide.txt"},{"# by Michael Zick": "abs-guide.txt"},{"# Used with permission": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"May have to change the location for your site.": "abs-guide.txt"},{"(At the ISP's servers, Bash may not be in the usual place.)": "abs-guide.txt"},{"Other places: /usr/bin or /usr/local/bin": "abs-guide.txt"},{"Might even try it without any path in sha-bang.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Disable filename globbing.": "abs-guide.txt"},{"set -f": "abs-guide.txt"},{"# Header tells browser what to expect.": "abs-guide.txt"},{"echo Content-type: text/plain": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo CGI/1.0 test script report:": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo environment settings:": "abs-guide.txt"},{"set": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo whereis bash?": "abs-guide.txt"},{"whereis bash": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo who are we?": "abs-guide.txt"},{"echo ${BASH_VERSINFO[*]}": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo argc is $#. argv is \"$*\".": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"# CGI/1.0 expected environment variables.": "abs-guide.txt"},{"echo SERVER_SOFTWARE = $SERVER_SOFTWARE": "abs-guide.txt"},{"echo SERVER_NAME = $SERVER_NAME": "abs-guide.txt"},{"echo GATEWAY_INTERFACE = $GATEWAY_INTERFACE": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 30. Network Programming": "abs-guide.txt"},{"": "abs-guide.txt"},{"469": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"SERVER_PROTOCOL = $SERVER_PROTOCOL": "abs-guide.txt"},{"SERVER_PORT = $SERVER_PORT": "abs-guide.txt"},{"REQUEST_METHOD = $REQUEST_METHOD": "abs-guide.txt"},{"HTTP_ACCEPT = \"$HTTP_ACCEPT\"": "abs-guide.txt"},{"PATH_INFO = \"$PATH_INFO\"": "abs-guide.txt"},{"PATH_TRANSLATED = \"$PATH_TRANSLATED\"": "abs-guide.txt"},{"SCRIPT_NAME = \"$SCRIPT_NAME\"": "abs-guide.txt"},{"QUERY_STRING = \"$QUERY_STRING\"": "abs-guide.txt"},{"REMOTE_HOST = $REMOTE_HOST": "abs-guide.txt"},{"REMOTE_ADDR = $REMOTE_ADDR": "abs-guide.txt"},{"REMOTE_USER = $REMOTE_USER": "abs-guide.txt"},{"AUTH_TYPE = $AUTH_TYPE": "abs-guide.txt"},{"CONTENT_TYPE = $CONTENT_TYPE": "abs-guide.txt"},{"CONTENT_LENGTH = $CONTENT_LENGTH": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"# Here document to give short instructions.": "abs-guide.txt"},{":<<-'_test_CGI_'": "abs-guide.txt"},{"1) Drop this in your http://domain.name/cgi-bin directory.": "abs-guide.txt"},{"2) Then, open http://domain.name/cgi-bin/test-cgi.sh.": "abs-guide.txt"},{"_test_CGI_": "abs-guide.txt"},{"": "abs-guide.txt"},{"For security purposes, it may be helpful to identify the IP addresses a computer is accessing.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 30-2. IP addresses": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# ip-addresses.sh": "abs-guide.txt"},{"# List the IP addresses your computer is connected to.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"Inspired by Greg Bledsoe's ddos.sh script,": "abs-guide.txt"},{"Linux Journal, 09 March 2011.": "abs-guide.txt"},{"URL:": "abs-guide.txt"},{"http://www.linuxjournal.com/content/back-dead-simple-bash-complex-ddos": "abs-guide.txt"},{"Greg licensed his script under the GPL2,": "abs-guide.txt"},{"and as a derivative, this script is likewise GPL2.": "abs-guide.txt"},{"": "abs-guide.txt"},{"connection_type=TCP": "abs-guide.txt"},{"# Also try UDP.": "abs-guide.txt"},{"field=2": "abs-guide.txt"},{"# Which field of the output we're interested in.": "abs-guide.txt"},{"no_match=LISTEN": "abs-guide.txt"},{"# Filter out records containing this. Why?": "abs-guide.txt"},{"lsof_args=-ni": "abs-guide.txt"},{"# -i lists Internet-associated files.": "abs-guide.txt"},{"# -n preserves numerical IP addresses.": "abs-guide.txt"},{"# What happens without the -n option? Try it.": "abs-guide.txt"},{"router=\"[0-9][0-9][0-9][0-9][0-9]->\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Delete the router info.": "abs-guide.txt"},{"lsof \"$lsof_args\" | grep $connection_type | grep -v \"$no_match\" |": "abs-guide.txt"},{"awk '{print $9}' | cut -d : -f $field | sort | uniq |": "abs-guide.txt"},{"sed s/\"^$router\"//": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Bledsoe's script assigns the output of a filtered IP list,": "abs-guide.txt"},{"(similar to lines 19-22, above) to a variable.": "abs-guide.txt"},{"He checks for multiple connections to a single IP address,": "abs-guide.txt"},{"then uses:": "abs-guide.txt"},{"iptables -I INPUT -s $ip -p tcp -j REJECT --reject-with tcp-reset": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 30. Network Programming": "abs-guide.txt"},{"": "abs-guide.txt"},{"470": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"... within a 60-second delay loop to bounce packets from DDOS attacks.": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"Exercise:": "abs-guide.txt"},{"-------Use the 'iptables' command to extend this script": "abs-guide.txt"},{"to reject connection attempts from well-known spammer IP domains.": "abs-guide.txt"},{"": "abs-guide.txt"},{"More examples of network programming:": "abs-guide.txt"},{"1. Getting the time from nist.gov": "abs-guide.txt"},{"2. Downloading a URL": "abs-guide.txt"},{"3. A GRE tunnel": "abs-guide.txt"},{"4. Checking if an Internet server is up": "abs-guide.txt"},{"5. Example 16-41": "abs-guide.txt"},{"6. Example A-28": "abs-guide.txt"},{"7. Example A-29": "abs-guide.txt"},{"8. Example 29-1": "abs-guide.txt"},{"See also the networking commands in the System and Administrative Commands chapter and the": "abs-guide.txt"},{"communications commands in the External Filters, Programs and Commands chapter.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 30. Network Programming": "abs-guide.txt"},{"": "abs-guide.txt"},{"471": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fChapter 31. Of Zeros and Nulls": "abs-guide.txt"},{"Faultily faultless, icily regular, splendidly null": "abs-guide.txt"},{"Dead perfection; no more.": "abs-guide.txt"},{"--Alfred Lord Tennyson": "abs-guide.txt"},{"/dev/zero ... /dev/null": "abs-guide.txt"},{"Uses of /dev/null": "abs-guide.txt"},{"Think of /dev/null as a black hole. It is essentially the equivalent of a write-only file. Everything": "abs-guide.txt"},{"written to it disappears. Attempts to read or output from it result in nothing. All the same,": "abs-guide.txt"},{"/dev/null can be quite useful from both the command-line and in scripts.": "abs-guide.txt"},{"Suppressing stdout.": "abs-guide.txt"},{"cat $filename >/dev/null": "abs-guide.txt"},{"# Contents of the file will not list to stdout.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Suppressing stderr (from Example 16-3).": "abs-guide.txt"},{"rm $badname 2>/dev/null": "abs-guide.txt"},{"#": "abs-guide.txt"},{"So error messages [stderr] deep-sixed.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Suppressing output from both stdout and stderr.": "abs-guide.txt"},{"cat $filename 2>/dev/null >/dev/null": "abs-guide.txt"},{"# If \"$filename\" does not exist, there will be no error message output.": "abs-guide.txt"},{"# If \"$filename\" does exist, the contents of the file will not list to stdout.": "abs-guide.txt"},{"# Therefore, no output at all will result from the above line of code.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# This can be useful in situations where the return code from a command": "abs-guide.txt"},{"#+ needs to be tested, but no output is desired.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# cat $filename &>/dev/null": "abs-guide.txt"},{"#": "abs-guide.txt"},{"also works, as Baris Cicek points out.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Deleting contents of a file, but preserving the file itself, with all attendant permissions (from Example": "abs-guide.txt"},{"2-1 and Example 2-3):": "abs-guide.txt"},{"cat /dev/null > /var/log/messages": "abs-guide.txt"},{"# : > /var/log/messages": "abs-guide.txt"},{"has same effect, but does not spawn a new process.": "abs-guide.txt"},{"cat /dev/null > /var/log/wtmp": "abs-guide.txt"},{"": "abs-guide.txt"},{"Automatically emptying the contents of a logfile (especially good for dealing with those nasty": "abs-guide.txt"},{"\"cookies\" sent by commercial Web sites):": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 31-1. Hiding the cookie jar": "abs-guide.txt"},{"# Obsolete Netscape browser.": "abs-guide.txt"},{"# Same principle applies to newer browsers.": "abs-guide.txt"},{"if [ -f ~/.netscape/cookies ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 31. Of Zeros and Nulls": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Remove, if exists.": "abs-guide.txt"},{"": "abs-guide.txt"},{"472": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"rm -f ~/.netscape/cookies": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"ln -s /dev/null ~/.netscape/cookies": "abs-guide.txt"},{"# All cookies now get sent to a black hole, rather than saved to disk.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Uses of /dev/zero": "abs-guide.txt"},{"Like /dev/null, /dev/zero is a pseudo-device file, but it actually produces a stream of nulls": "abs-guide.txt"},{"(binary zeros, not the ASCII kind). Output written to /dev/zero disappears, and it is fairly difficult": "abs-guide.txt"},{"to actually read the nulls emitted there, though it can be done with od or a hex editor. The chief use of": "abs-guide.txt"},{"/dev/zero is creating an initialized dummy file of predetermined length intended as a temporary": "abs-guide.txt"},{"swap file.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 31-2. Setting up a swapfile using /dev/zero": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# Creating a swap file.": "abs-guide.txt"},{"# A swap file provides a temporary storage cache": "abs-guide.txt"},{"#+ which helps speed up certain filesystem operations.": "abs-guide.txt"},{"ROOT_UID=0": "abs-guide.txt"},{"E_WRONG_USER=85": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Root has $UID 0.": "abs-guide.txt"},{"# Not root?": "abs-guide.txt"},{"": "abs-guide.txt"},{"FILE=/swap": "abs-guide.txt"},{"BLOCKSIZE=1024": "abs-guide.txt"},{"MINBLOCKS=40": "abs-guide.txt"},{"SUCCESS=0": "abs-guide.txt"},{"": "abs-guide.txt"},{"# This script must be run as root.": "abs-guide.txt"},{"if [ \"$UID\" -ne \"$ROOT_UID\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo; echo \"You must be root to run this script.\"; echo": "abs-guide.txt"},{"exit $E_WRONG_USER": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"blocks=${1:-$MINBLOCKS}": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Set to default of 40 blocks,": "abs-guide.txt"},{"#+ if nothing specified on command-line.": "abs-guide.txt"},{"This is the equivalent of the command block below.": "abs-guide.txt"},{"-------------------------------------------------if [ -n \"$1\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"blocks=$1": "abs-guide.txt"},{"else": "abs-guide.txt"},{"blocks=$MINBLOCKS": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"--------------------------------------------------": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [ \"$blocks\" -lt $MINBLOCKS ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"blocks=$MINBLOCKS": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Must be at least 40 blocks long.": "abs-guide.txt"},{"": "abs-guide.txt"},{"######################################################################": "abs-guide.txt"},{"echo \"Creating swap file of size $blocks blocks (KB).\"": "abs-guide.txt"},{"dd if=/dev/zero of=$FILE bs=$BLOCKSIZE count=$blocks # Zero out file.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 31. Of Zeros and Nulls": "abs-guide.txt"},{"": "abs-guide.txt"},{"473": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"mkswap $FILE $blocks": "abs-guide.txt"},{"# Designate it a swap file.": "abs-guide.txt"},{"swapon $FILE": "abs-guide.txt"},{"# Activate swap file.": "abs-guide.txt"},{"retcode=$?": "abs-guide.txt"},{"# Everything worked?": "abs-guide.txt"},{"# Note that if one or more of these commands fails,": "abs-guide.txt"},{"#+ then it could cause nasty problems.": "abs-guide.txt"},{"######################################################################": "abs-guide.txt"},{"# Exercise:": "abs-guide.txt"},{"# Rewrite the above block of code so that if it does not execute": "abs-guide.txt"},{"#+ successfully, then:": "abs-guide.txt"},{"#": "abs-guide.txt"},{"1) an error message is echoed to stderr,": "abs-guide.txt"},{"#": "abs-guide.txt"},{"2) all temporary files are cleaned up, and": "abs-guide.txt"},{"#": "abs-guide.txt"},{"3) the script exits in an orderly fashion with an": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"appropriate error code.": "abs-guide.txt"},{"echo \"Swap file created and activated.\"": "abs-guide.txt"},{"exit $retcode": "abs-guide.txt"},{"": "abs-guide.txt"},{"Another application of /dev/zero is to \"zero out\" a file of a designated size for a special purpose,": "abs-guide.txt"},{"such as mounting a filesystem on a loopback device (see Example 17-8) or \"securely\" deleting a file": "abs-guide.txt"},{"(see Example 16-61).": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 31-3. Creating a ramdisk": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# ramdisk.sh": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"A \"ramdisk\" is a segment of system RAM memory": "abs-guide.txt"},{"which acts as if it were a filesystem.": "abs-guide.txt"},{"Its advantage is very fast access (read/write time).": "abs-guide.txt"},{"Disadvantages: volatility, loss of data on reboot or powerdown,": "abs-guide.txt"},{"less RAM available to system.": "abs-guide.txt"},{"Of what use is a ramdisk?": "abs-guide.txt"},{"Keeping a large dataset, such as a table or dictionary on ramdisk,": "abs-guide.txt"},{"speeds up data lookup, since memory access is much faster than disk access.": "abs-guide.txt"},{"": "abs-guide.txt"},{"E_NON_ROOT_USER=70": "abs-guide.txt"},{"ROOTUSER_NAME=root": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Must run as root.": "abs-guide.txt"},{"": "abs-guide.txt"},{"MOUNTPT=/mnt/ramdisk": "abs-guide.txt"},{"SIZE=2000": "abs-guide.txt"},{"BLOCKSIZE=1024": "abs-guide.txt"},{"DEVICE=/dev/ram0": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Create with mkdir /mnt/ramdisk.": "abs-guide.txt"},{"2K blocks (change as appropriate)": "abs-guide.txt"},{"1K (1024 byte) block size": "abs-guide.txt"},{"First ram device": "abs-guide.txt"},{"": "abs-guide.txt"},{"username=`id -nu`": "abs-guide.txt"},{"if [ \"$username\" != \"$ROOTUSER_NAME\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Must be root to run \\\"`basename $0`\\\".\"": "abs-guide.txt"},{"exit $E_NON_ROOT_USER": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"if [ ! -d \"$MOUNTPT\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"mkdir $MOUNTPT": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Test whether mount point already there,": "abs-guide.txt"},{"#+ so no error if this script is run": "abs-guide.txt"},{"#+ multiple times.": "abs-guide.txt"},{"": "abs-guide.txt"},{"##############################################################################": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 31. Of Zeros and Nulls": "abs-guide.txt"},{"": "abs-guide.txt"},{"474": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"dd if=/dev/zero of=$DEVICE count=$SIZE bs=$BLOCKSIZE": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Zero out RAM device.": "abs-guide.txt"},{"# Why is this necessary?": "abs-guide.txt"},{"mke2fs $DEVICE": "abs-guide.txt"},{"# Create an ext2 filesystem on it.": "abs-guide.txt"},{"mount $DEVICE $MOUNTPT": "abs-guide.txt"},{"# Mount it.": "abs-guide.txt"},{"chmod 777 $MOUNTPT": "abs-guide.txt"},{"# Enables ordinary user to access ramdisk.": "abs-guide.txt"},{"# However, must be root to unmount it.": "abs-guide.txt"},{"##############################################################################": "abs-guide.txt"},{"# Need to test whether above commands succeed. Could cause problems otherwise.": "abs-guide.txt"},{"# Exercise: modify this script to make it safer.": "abs-guide.txt"},{"echo \"\\\"$MOUNTPT\\\" now available for use.\"": "abs-guide.txt"},{"# The ramdisk is now accessible for storing files, even by an ordinary user.": "abs-guide.txt"},{"# Caution, the ramdisk is volatile, and its contents will disappear": "abs-guide.txt"},{"#+ on reboot or power loss.": "abs-guide.txt"},{"# Copy anything you want saved to a regular directory.": "abs-guide.txt"},{"# After reboot, run this script to again set up ramdisk.": "abs-guide.txt"},{"# Remounting /mnt/ramdisk without the other steps will not work.": "abs-guide.txt"},{"# Suitably modified, this script can by invoked in /etc/rc.d/rc.local,": "abs-guide.txt"},{"#+ to set up ramdisk automatically at bootup.": "abs-guide.txt"},{"# That may be appropriate on, for example, a database server.": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"In addition to all the above, /dev/zero is needed by ELF (Executable and Linking Format)": "abs-guide.txt"},{"UNIX/Linux binaries.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 31. Of Zeros and Nulls": "abs-guide.txt"},{"": "abs-guide.txt"},{"475": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fChapter 32. Debugging": "abs-guide.txt"},{"Debugging is twice as hard as writing the code in": "abs-guide.txt"},{"the first place. Therefore, if you write the code as": "abs-guide.txt"},{"cleverly as possible, you are, by definition, not": "abs-guide.txt"},{"smart enough to debug it.": "abs-guide.txt"},{"--Brian Kernighan": "abs-guide.txt"},{"The Bash shell contains no built-in debugger, and only bare-bones debugging-specific commands and": "abs-guide.txt"},{"constructs. Syntax errors or outright typos in the script generate cryptic error messages that are often of no": "abs-guide.txt"},{"help in debugging a non-functional script.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 32-1. A buggy script": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# ex74.sh": "abs-guide.txt"},{"# This is a buggy script.": "abs-guide.txt"},{"# Where, oh where is the error?": "abs-guide.txt"},{"a=37": "abs-guide.txt"},{"if [$a -gt 27 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo $a": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"exit $?": "abs-guide.txt"},{"": "abs-guide.txt"},{"# 0! Why?": "abs-guide.txt"},{"": "abs-guide.txt"},{"Output from script:": "abs-guide.txt"},{"./ex74.sh: [37: command not found": "abs-guide.txt"},{"": "abs-guide.txt"},{"What's wrong with the above script? Hint: after the if.": "abs-guide.txt"},{"Example 32-2. Missing keyword": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# missing-keyword.sh": "abs-guide.txt"},{"# What error message will this script generate? And why?": "abs-guide.txt"},{"for a in 1 2 3": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo \"$a\"": "abs-guide.txt"},{"# done": "abs-guide.txt"},{"# Required keyword 'done' commented out in line 8.": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Will not exit here!": "abs-guide.txt"},{"": "abs-guide.txt"},{"# === #": "abs-guide.txt"},{"# From command line, after script terminates:": "abs-guide.txt"},{"echo $?": "abs-guide.txt"},{"# 2": "abs-guide.txt"},{"": "abs-guide.txt"},{"Output from script:": "abs-guide.txt"},{"missing-keyword.sh: line 10: syntax error: unexpected end of file": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 32. Debugging": "abs-guide.txt"},{"": "abs-guide.txt"},{"476": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"Note that the error message does not necessarily reference the line in which the error occurs, but the line": "abs-guide.txt"},{"where the Bash interpreter finally becomes aware of the error.": "abs-guide.txt"},{"Error messages may disregard comment lines in a script when reporting the line number of a syntax error.": "abs-guide.txt"},{"What if the script executes, but does not work as expected? This is the all too familiar logic error.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 32-3. test24: another buggy script": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"This script is supposed to delete all filenames in current directory": "abs-guide.txt"},{"containing embedded spaces.": "abs-guide.txt"},{"It doesn't work.": "abs-guide.txt"},{"Why not?": "abs-guide.txt"},{"": "abs-guide.txt"},{"badname=`ls | grep ' '`": "abs-guide.txt"},{"# Try this:": "abs-guide.txt"},{"# echo \"$badname\"": "abs-guide.txt"},{"rm \"$badname\"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Try to find out what's wrong with Example 32-3 by uncommenting the echo \"$badname\" line. Echo": "abs-guide.txt"},{"statements are useful for seeing whether what you expect is actually what you get.": "abs-guide.txt"},{"In this particular case, rm \"$badname\" will not give the desired results because $badname should not be": "abs-guide.txt"},{"quoted. Placing it in quotes ensures that rm has only one argument (it will match only one filename). A partial": "abs-guide.txt"},{"fix is to remove to quotes from $badname and to reset $IFS to contain only a newline, IFS=$'\\n'.": "abs-guide.txt"},{"However, there are simpler ways of going about it.": "abs-guide.txt"},{"# Correct methods of deleting filenames containing spaces.": "abs-guide.txt"},{"rm *\\ *": "abs-guide.txt"},{"rm *\" \"*": "abs-guide.txt"},{"rm *' '*": "abs-guide.txt"},{"# Thank you. S.C.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Summarizing the symptoms of a buggy script,": "abs-guide.txt"},{"1. It bombs with a \"syntax error\" message, or": "abs-guide.txt"},{"2. It runs, but does not work as expected (logic error).": "abs-guide.txt"},{"3. It runs, works as expected, but has nasty side effects (logic bomb).": "abs-guide.txt"},{"": "abs-guide.txt"},{"Tools for debugging non-working scripts include": "abs-guide.txt"},{"1. Inserting echo statements at critical points in the script to trace the variables, and otherwise give a": "abs-guide.txt"},{"snapshot of what is going on.": "abs-guide.txt"},{"Even better is an echo that echoes only when debug is on.": "abs-guide.txt"},{"### debecho (debug-echo), by Stefano Falsetto ###": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 32. Debugging": "abs-guide.txt"},{"": "abs-guide.txt"},{"477": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"### Will echo passed parameters only if DEBUG is set to a value. ###": "abs-guide.txt"},{"debecho () {": "abs-guide.txt"},{"if [ ! -z \"$DEBUG\" ]; then": "abs-guide.txt"},{"echo \"$1\" >&2": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^^^ to stderr": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"}": "abs-guide.txt"},{"DEBUG=on": "abs-guide.txt"},{"Whatever=whatnot": "abs-guide.txt"},{"debecho $Whatever": "abs-guide.txt"},{"": "abs-guide.txt"},{"# whatnot": "abs-guide.txt"},{"": "abs-guide.txt"},{"DEBUG=": "abs-guide.txt"},{"Whatever=notwhat": "abs-guide.txt"},{"debecho $Whatever": "abs-guide.txt"},{"": "abs-guide.txt"},{"# (Will not echo.)": "abs-guide.txt"},{"": "abs-guide.txt"},{"2. Using the tee filter to check processes or data flows at critical points.": "abs-guide.txt"},{"3. Setting option flags -n -v -x": "abs-guide.txt"},{"sh -n scriptname checks for syntax errors without actually running the script. This is the": "abs-guide.txt"},{"equivalent of inserting set -n or set -o noexec into the script. Note that certain types of": "abs-guide.txt"},{"syntax errors can slip past this check.": "abs-guide.txt"},{"sh -v scriptname echoes each command before executing it. This is the equivalent of inserting": "abs-guide.txt"},{"set -v or set -o verbose in the script.": "abs-guide.txt"},{"The -n and -v flags work well together. sh -nv scriptname gives a verbose syntax check.": "abs-guide.txt"},{"sh -x scriptname echoes the result each command, but in an abbreviated manner. This is the": "abs-guide.txt"},{"equivalent of inserting set -x or set -o xtrace in the script.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Inserting set -u or set -o nounset in the script runs it, but gives an unbound variable error": "abs-guide.txt"},{"message and aborts the script.": "abs-guide.txt"},{"set -u": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Or": "abs-guide.txt"},{"": "abs-guide.txt"},{"set -o nounset": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Setting a variable to null will not trigger the error/abort.": "abs-guide.txt"},{"# unset_var=": "abs-guide.txt"},{"echo $unset_var": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Unset (and undeclared) variable.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo \"Should not echo!\"": "abs-guide.txt"},{"# sh t2.sh": "abs-guide.txt"},{"# t2.sh: line 6: unset_var: unbound variable": "abs-guide.txt"},{"": "abs-guide.txt"},{"4. Using an \"assert\" function to test a variable or condition at critical points in a script. (This is an idea": "abs-guide.txt"},{"borrowed from C.)": "abs-guide.txt"},{"Example 32-4. Testing a condition with an assert": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# assert.sh": "abs-guide.txt"},{"#######################################################################": "abs-guide.txt"},{"assert ()": "abs-guide.txt"},{"# If condition false,": "abs-guide.txt"},{"{": "abs-guide.txt"},{"#+ exit from script": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 32. Debugging": "abs-guide.txt"},{"": "abs-guide.txt"},{"478": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"#+ with appropriate error message.": "abs-guide.txt"},{"E_PARAM_ERR=98": "abs-guide.txt"},{"E_ASSERT_FAILED=99": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [ -z \"$2\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"return $E_PARAM_ERR": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Not enough parameters passed": "abs-guide.txt"},{"#+ to assert() function.": "abs-guide.txt"},{"# No damage done.": "abs-guide.txt"},{"": "abs-guide.txt"},{"lineno=$2": "abs-guide.txt"},{"if [ ! $1 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Assertion failed: \\\"$1\\\"\"": "abs-guide.txt"},{"echo \"File \\\"$0\\\", line $lineno\"": "abs-guide.txt"},{"# Give name of file and line number.": "abs-guide.txt"},{"exit $E_ASSERT_FAILED": "abs-guide.txt"},{"# else": "abs-guide.txt"},{"#": "abs-guide.txt"},{"return": "abs-guide.txt"},{"#": "abs-guide.txt"},{"and continue executing the script.": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"} # Insert a similar assert() function into a script you need to debug.": "abs-guide.txt"},{"#######################################################################": "abs-guide.txt"},{"": "abs-guide.txt"},{"a=5": "abs-guide.txt"},{"b=4": "abs-guide.txt"},{"condition=\"$a -lt $b\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Error message and exit from script.": "abs-guide.txt"},{"# Try setting \"condition\" to something else": "abs-guide.txt"},{"#+ and see what happens.": "abs-guide.txt"},{"": "abs-guide.txt"},{"assert \"$condition\" $LINENO": "abs-guide.txt"},{"# The remainder of the script executes only if the \"assert\" does not fail.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Some commands.": "abs-guide.txt"},{"# Some more commands . . .": "abs-guide.txt"},{"echo \"This statement echoes only if the \\\"assert\\\" does not fail.\"": "abs-guide.txt"},{"# . . .": "abs-guide.txt"},{"# More commands . . .": "abs-guide.txt"},{"exit $?": "abs-guide.txt"},{"": "abs-guide.txt"},{"5. Using the $LINENO variable and the caller builtin.": "abs-guide.txt"},{"6. Trapping at exit.": "abs-guide.txt"},{"The exit command in a script triggers a signal 0, terminating the process, that is, the script itself. [122]": "abs-guide.txt"},{"It is often useful to trap the exit, forcing a \"printout\" of variables, for example. The trap must be the": "abs-guide.txt"},{"first command in the script.": "abs-guide.txt"},{"Trapping signals": "abs-guide.txt"},{"trap": "abs-guide.txt"},{"Specifies an action on receipt of a signal; also useful for debugging.": "abs-guide.txt"},{"": "abs-guide.txt"},{"A signal is a message sent to a process, either by the kernel or another process, telling it to take": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 32. Debugging": "abs-guide.txt"},{"": "abs-guide.txt"},{"479": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"some specified action (usually to terminate). For example, hitting a Control-C sends a user interrupt,": "abs-guide.txt"},{"an INT signal, to a running program.": "abs-guide.txt"},{"A simple instance:": "abs-guide.txt"},{"trap '' 2": "abs-guide.txt"},{"# Ignore interrupt 2 (Control-C), with no action specified.": "abs-guide.txt"},{"trap 'echo \"Control-C disabled.\"' 2": "abs-guide.txt"},{"# Message when Control-C pressed.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 32-5. Trapping at exit": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# Hunting variables with a trap.": "abs-guide.txt"},{"trap 'echo Variable Listing --- a = $a b = $b' EXIT": "abs-guide.txt"},{"# EXIT is the name of the signal generated upon exit from a script.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# The command specified by the \"trap\" doesn't execute until": "abs-guide.txt"},{"#+ the appropriate signal is sent.": "abs-guide.txt"},{"echo \"This prints before the \\\"trap\\\" --\"": "abs-guide.txt"},{"echo \"even though the script sees the \\\"trap\\\" first.\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"a=39": "abs-guide.txt"},{"b=36": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"# Note that commenting out the 'exit' command makes no difference,": "abs-guide.txt"},{"#+ since the script exits in any case after running out of commands.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 32-6. Cleaning up after Control-C": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# logon.sh: A quick 'n dirty script to check whether you are on-line yet.": "abs-guide.txt"},{"umask 177": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Make sure temp files are not world readable.": "abs-guide.txt"},{"": "abs-guide.txt"},{"TRUE=1": "abs-guide.txt"},{"LOGFILE=/var/log/messages": "abs-guide.txt"},{"# Note that $LOGFILE must be readable": "abs-guide.txt"},{"#+ (as root, chmod 644 /var/log/messages).": "abs-guide.txt"},{"TEMPFILE=temp.$$": "abs-guide.txt"},{"# Create a \"unique\" temp file name, using process id of the script.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Using 'mktemp' is an alternative.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"For example:": "abs-guide.txt"},{"#": "abs-guide.txt"},{"TEMPFILE=`mktemp temp.XXXXXX`": "abs-guide.txt"},{"KEYWORD=address": "abs-guide.txt"},{"# At logon, the line \"remote IP address xxx.xxx.xxx.xxx\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"appended to /var/log/messages.": "abs-guide.txt"},{"ONLINE=22": "abs-guide.txt"},{"USER_INTERRUPT=13": "abs-guide.txt"},{"CHECK_LINES=100": "abs-guide.txt"},{"# How many lines in log file to check.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 32. Debugging": "abs-guide.txt"},{"": "abs-guide.txt"},{"480": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"trap 'rm -f $TEMPFILE; exit $USER_INTERRUPT' TERM INT": "abs-guide.txt"},{"# Cleans up the temp file if script interrupted by control-c.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"while [ $TRUE ] #Endless loop.": "abs-guide.txt"},{"do": "abs-guide.txt"},{"tail -n $CHECK_LINES $LOGFILE> $TEMPFILE": "abs-guide.txt"},{"# Saves last 100 lines of system log file as temp file.": "abs-guide.txt"},{"# Necessary, since newer kernels generate many log messages at log on.": "abs-guide.txt"},{"search=`grep $KEYWORD $TEMPFILE`": "abs-guide.txt"},{"# Checks for presence of the \"IP address\" phrase,": "abs-guide.txt"},{"#+ indicating a successful logon.": "abs-guide.txt"},{"if [ ! -z \"$search\" ] #": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"On-line\"": "abs-guide.txt"},{"rm -f $TEMPFILE": "abs-guide.txt"},{"#": "abs-guide.txt"},{"exit $ONLINE": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo -n \".\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"Quotes necessary because of possible spaces.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Clean up temp file.": "abs-guide.txt"},{"": "abs-guide.txt"},{"The -n option to echo suppresses newline,": "abs-guide.txt"},{"so you get continuous rows of dots.": "abs-guide.txt"},{"": "abs-guide.txt"},{"sleep 1": "abs-guide.txt"},{"done": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Note: if you change the KEYWORD variable to \"Exit\",": "abs-guide.txt"},{"#+ this script can be used while on-line": "abs-guide.txt"},{"#+ to check for an unexpected logoff.": "abs-guide.txt"},{"# Exercise: Change the script, per the above note,": "abs-guide.txt"},{"#": "abs-guide.txt"},{"and prettify it.": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Nick Drage suggests an alternate method:": "abs-guide.txt"},{"while true": "abs-guide.txt"},{"do ifconfig ppp0 | grep UP 1> /dev/null && echo \"connected\" && exit 0": "abs-guide.txt"},{"echo -n \".\"": "abs-guide.txt"},{"# Prints dots (.....) until connected.": "abs-guide.txt"},{"sleep 2": "abs-guide.txt"},{"done": "abs-guide.txt"},{"# Problem: Hitting Control-C to terminate this process may be insufficient.": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"(Dots may keep on echoing.)": "abs-guide.txt"},{"# Exercise: Fix this.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Stephane Chazelas has yet another alternative:": "abs-guide.txt"},{"CHECK_INTERVAL=1": "abs-guide.txt"},{"while ! tail -n 1 \"$LOGFILE\" | grep -q \"$KEYWORD\"": "abs-guide.txt"},{"do echo -n .": "abs-guide.txt"},{"sleep $CHECK_INTERVAL": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo \"On-line\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 32. Debugging": "abs-guide.txt"},{"": "abs-guide.txt"},{"481": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# Exercise: Discuss the relative strengths and weaknesses": "abs-guide.txt"},{"#": "abs-guide.txt"},{"of each of these various approaches.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 32-7. A Simple Implementation of a Progress Bar": "abs-guide.txt"},{"#! /bin/bash": "abs-guide.txt"},{"# progress-bar2.sh": "abs-guide.txt"},{"# Author: Graham Ewart (with reformatting by ABS Guide author).": "abs-guide.txt"},{"# Used in ABS Guide with permission (thanks!).": "abs-guide.txt"},{"# Invoke this script with bash. It doesn't work with sh.": "abs-guide.txt"},{"interval=1": "abs-guide.txt"},{"long_interval=10": "abs-guide.txt"},{"{": "abs-guide.txt"},{"trap \"exit\" SIGUSR1": "abs-guide.txt"},{"sleep $interval; sleep $interval": "abs-guide.txt"},{"while true": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo -n '.'": "abs-guide.txt"},{"# Use dots.": "abs-guide.txt"},{"sleep $interval": "abs-guide.txt"},{"done; } &": "abs-guide.txt"},{"# Start a progress bar as a background process.": "abs-guide.txt"},{"pid=$!": "abs-guide.txt"},{"trap \"echo !; kill -USR1 $pid; wait $pid\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"EXIT": "abs-guide.txt"},{"": "abs-guide.txt"},{"# To handle ^C.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo -n 'Long-running process '": "abs-guide.txt"},{"sleep $long_interval": "abs-guide.txt"},{"echo ' Finished!'": "abs-guide.txt"},{"kill -USR1 $pid": "abs-guide.txt"},{"wait $pid": "abs-guide.txt"},{"trap EXIT": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Stop the progress bar.": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit $?": "abs-guide.txt"},{"": "abs-guide.txt"},{"The DEBUG argument to trap causes a specified action to execute after every command in a script. This": "abs-guide.txt"},{"permits tracing variables, for example.": "abs-guide.txt"},{"Example 32-8. Tracing a variable": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"trap 'echo \"VARIABLE-TRACE> \\$variable = \\\"$variable\\\"\"' DEBUG": "abs-guide.txt"},{"# Echoes the value of $variable after every command.": "abs-guide.txt"},{"variable=29; line=$LINENO": "abs-guide.txt"},{"echo \"": "abs-guide.txt"},{"": "abs-guide.txt"},{"Just initialized \\$variable to $variable in line number $line.\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"let \"variable *= 3\"; line=$LINENO": "abs-guide.txt"},{"echo \" Just multiplied \\$variable by 3 in line number $line.\"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"# The \"trap 'command1 . . . command2 . . .' DEBUG\" construct is": "abs-guide.txt"},{"#+ more appropriate in the context of a complex script,": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 32. Debugging": "abs-guide.txt"},{"": "abs-guide.txt"},{"482": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"#+ where inserting multiple \"echo $variable\" statements might be": "abs-guide.txt"},{"#+ awkward and time-consuming.": "abs-guide.txt"},{"# Thanks, Stephane Chazelas for the pointer.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Output of script:": "abs-guide.txt"},{"VARIABLE-TRACE> $variable = \"\"": "abs-guide.txt"},{"VARIABLE-TRACE> $variable = \"29\"": "abs-guide.txt"},{"Just initialized $variable to 29.": "abs-guide.txt"},{"VARIABLE-TRACE> $variable = \"29\"": "abs-guide.txt"},{"VARIABLE-TRACE> $variable = \"87\"": "abs-guide.txt"},{"Just multiplied $variable by 3.": "abs-guide.txt"},{"VARIABLE-TRACE> $variable = \"87\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"Of course, the trap command has other uses aside from debugging, such as disabling certain keystrokes": "abs-guide.txt"},{"within a script (see Example A-43).": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 32-9. Running multiple processes (on an SMP box)": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# parent.sh": "abs-guide.txt"},{"# Running multiple processes on an SMP box.": "abs-guide.txt"},{"# Author: Tedman Eng": "abs-guide.txt"},{"# This is the first of two scripts,": "abs-guide.txt"},{"#+ both of which must be present in the current working directory.": "abs-guide.txt"},{"": "abs-guide.txt"},{"LIMIT=$1": "abs-guide.txt"},{"# Total number of process to start": "abs-guide.txt"},{"NUMPROC=4": "abs-guide.txt"},{"# Number of concurrent threads (forks?)": "abs-guide.txt"},{"PROCID=1": "abs-guide.txt"},{"# Starting Process ID": "abs-guide.txt"},{"echo \"My PID is $$\"": "abs-guide.txt"},{"function start_thread() {": "abs-guide.txt"},{"if [ $PROCID -le $LIMIT ] ; then": "abs-guide.txt"},{"./child.sh $PROCID&": "abs-guide.txt"},{"let \"PROCID++\"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo \"Limit reached.\"": "abs-guide.txt"},{"wait": "abs-guide.txt"},{"exit": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"}": "abs-guide.txt"},{"while [ \"$NUMPROC\" -gt 0 ]; do": "abs-guide.txt"},{"start_thread;": "abs-guide.txt"},{"let \"NUMPROC--\"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"": "abs-guide.txt"},{"while true": "abs-guide.txt"},{"do": "abs-guide.txt"},{"trap \"start_thread\" SIGRTMIN": "abs-guide.txt"},{"done": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 32. Debugging": "abs-guide.txt"},{"": "abs-guide.txt"},{"483": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"# ======== Second script follows ========": "abs-guide.txt"},{"": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# child.sh": "abs-guide.txt"},{"# Running multiple processes on an SMP box.": "abs-guide.txt"},{"# This script is called by parent.sh.": "abs-guide.txt"},{"# Author: Tedman Eng": "abs-guide.txt"},{"temp=$RANDOM": "abs-guide.txt"},{"index=$1": "abs-guide.txt"},{"shift": "abs-guide.txt"},{"let \"temp %= 5\"": "abs-guide.txt"},{"let \"temp += 4\"": "abs-guide.txt"},{"echo \"Starting $index Time:$temp\" \"$@\"": "abs-guide.txt"},{"sleep ${temp}": "abs-guide.txt"},{"echo \"Ending $index\"": "abs-guide.txt"},{"kill -s SIGRTMIN $PPID": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"# ======================= SCRIPT AUTHOR'S NOTES ======================= #": "abs-guide.txt"},{"# It's not completely bug free.": "abs-guide.txt"},{"# I ran it with limit = 500 and after the first few hundred iterations,": "abs-guide.txt"},{"#+ one of the concurrent threads disappeared!": "abs-guide.txt"},{"# Not sure if this is collisions from trap signals or something else.": "abs-guide.txt"},{"# Once the trap is received, there's a brief moment while executing the": "abs-guide.txt"},{"#+ trap handler but before the next trap is set. During this time, it may": "abs-guide.txt"},{"#+ be possible to miss a trap signal, thus miss spawning a child process.": "abs-guide.txt"},{"# No doubt someone may spot the bug and will be writing": "abs-guide.txt"},{"#+ . . . in the future.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# ===================================================================== #": "abs-guide.txt"},{"": "abs-guide.txt"},{"# ----------------------------------------------------------------------#": "abs-guide.txt"},{"": "abs-guide.txt"},{"#################################################################": "abs-guide.txt"},{"# The following is the original script written by Vernia Damiano.": "abs-guide.txt"},{"# Unfortunately, it doesn't work properly.": "abs-guide.txt"},{"#################################################################": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# Must call script with at least one integer parameter": "abs-guide.txt"},{"#+ (number of concurrent processes).": "abs-guide.txt"},{"# All other parameters are passed through to the processes started.": "abs-guide.txt"},{"": "abs-guide.txt"},{"INDICE=8": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Total number of process to start": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 32. Debugging": "abs-guide.txt"},{"": "abs-guide.txt"},{"484": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"TEMPO=5": "abs-guide.txt"},{"E_BADARGS=65": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Maximum sleep time per process": "abs-guide.txt"},{"# No arg(s) passed to script.": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [ $# -eq 0 ] # Check for at least one argument passed to script.": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Usage: `basename $0` number_of_processes [passed params]\"": "abs-guide.txt"},{"exit $E_BADARGS": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"NUMPROC=$1": "abs-guide.txt"},{"shift": "abs-guide.txt"},{"PARAMETRI=( \"$@\" )": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Number of concurrent process": "abs-guide.txt"},{"# Parameters of each process": "abs-guide.txt"},{"": "abs-guide.txt"},{"function avvia() {": "abs-guide.txt"},{"local temp": "abs-guide.txt"},{"local index": "abs-guide.txt"},{"temp=$RANDOM": "abs-guide.txt"},{"index=$1": "abs-guide.txt"},{"shift": "abs-guide.txt"},{"let \"temp %= $TEMPO\"": "abs-guide.txt"},{"let \"temp += 1\"": "abs-guide.txt"},{"echo \"Starting $index Time:$temp\" \"$@\"": "abs-guide.txt"},{"sleep ${temp}": "abs-guide.txt"},{"echo \"Ending $index\"": "abs-guide.txt"},{"kill -s SIGRTMIN $$": "abs-guide.txt"},{"}": "abs-guide.txt"},{"function parti() {": "abs-guide.txt"},{"if [ $INDICE -gt 0 ] ; then": "abs-guide.txt"},{"avvia $INDICE \"${PARAMETRI[@]}\" &": "abs-guide.txt"},{"let \"INDICE--\"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"trap : SIGRTMIN": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"}": "abs-guide.txt"},{"trap parti SIGRTMIN": "abs-guide.txt"},{"while [ \"$NUMPROC\" -gt 0 ]; do": "abs-guide.txt"},{"parti;": "abs-guide.txt"},{"let \"NUMPROC--\"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"wait": "abs-guide.txt"},{"trap - SIGRTMIN": "abs-guide.txt"},{"exit $?": "abs-guide.txt"},{": <<SCRIPT_AUTHOR_COMMENTS": "abs-guide.txt"},{"I had the need to run a program, with specified options, on a number of": "abs-guide.txt"},{"different files, using a SMP machine. So I thought [I'd] keep running": "abs-guide.txt"},{"a specified number of processes and start a new one each time . . . one": "abs-guide.txt"},{"of these terminates.": "abs-guide.txt"},{"The \"wait\" instruction does not help, since it waits for a given process": "abs-guide.txt"},{"or *all* process started in background. So I wrote [this] bash script": "abs-guide.txt"},{"that can do the job, using the \"trap\" instruction.": "abs-guide.txt"},{"--Vernia Damiano": "abs-guide.txt"},{"SCRIPT_AUTHOR_COMMENTS": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 32. Debugging": "abs-guide.txt"},{"": "abs-guide.txt"},{"485": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"trap '' SIGNAL (two adjacent apostrophes) disables SIGNAL for the remainder of the script. trap": "abs-guide.txt"},{"SIGNAL restores the functioning of SIGNAL once more. This is useful to protect a critical portion of a": "abs-guide.txt"},{"script from an undesirable interrupt.": "abs-guide.txt"},{"trap '' 2": "abs-guide.txt"},{"command": "abs-guide.txt"},{"command": "abs-guide.txt"},{"command": "abs-guide.txt"},{"trap 2": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Signal 2 is Control-C, now disabled.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Reenables Control-C": "abs-guide.txt"},{"": "abs-guide.txt"},{"Version 3 of Bash adds the following internal variables for use by the debugger.": "abs-guide.txt"},{"1. $BASH_ARGC": "abs-guide.txt"},{"Number of command-line arguments passed to script, similar to $#.": "abs-guide.txt"},{"2. $BASH_ARGV": "abs-guide.txt"},{"Final command-line parameter passed to script, equivalent ${!#}.": "abs-guide.txt"},{"3. $BASH_COMMAND": "abs-guide.txt"},{"Command currently executing.": "abs-guide.txt"},{"4. $BASH_EXECUTION_STRING": "abs-guide.txt"},{"The option string following the -c option to Bash.": "abs-guide.txt"},{"5. $BASH_LINENO": "abs-guide.txt"},{"In a function, indicates the line number of the function call.": "abs-guide.txt"},{"6. $BASH_REMATCH": "abs-guide.txt"},{"Array variable associated with =~ conditional regex matching.": "abs-guide.txt"},{"7.": "abs-guide.txt"},{"$BASH_SOURCE": "abs-guide.txt"},{"This is the name of the script, usually the same as $0.": "abs-guide.txt"},{"8. $BASH_SUBSHELL": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 32. Debugging": "abs-guide.txt"},{"": "abs-guide.txt"},{"486": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fChapter 33. Options": "abs-guide.txt"},{"Options are settings that change shell and/or script behavior.": "abs-guide.txt"},{"The set command enables options within a script. At the point in the script where you want the options to take": "abs-guide.txt"},{"effect, use set -o option-name or, in short form, set -option-abbrev. These two forms are equivalent.": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"set -o verbose": "abs-guide.txt"},{"# Echoes all commands before executing.": "abs-guide.txt"},{"": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"set -v": "abs-guide.txt"},{"# Exact same effect as above.": "abs-guide.txt"},{"": "abs-guide.txt"},{"To disable an option within a script, use set +o option-name or set +option-abbrev.": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"set -o verbose": "abs-guide.txt"},{"# Command echoing on.": "abs-guide.txt"},{"command": "abs-guide.txt"},{"...": "abs-guide.txt"},{"command": "abs-guide.txt"},{"set +o verbose": "abs-guide.txt"},{"# Command echoing off.": "abs-guide.txt"},{"command": "abs-guide.txt"},{"# Not echoed.": "abs-guide.txt"},{"": "abs-guide.txt"},{"set -v": "abs-guide.txt"},{"# Command echoing on.": "abs-guide.txt"},{"command": "abs-guide.txt"},{"...": "abs-guide.txt"},{"command": "abs-guide.txt"},{"set +v": "abs-guide.txt"},{"# Command echoing off.": "abs-guide.txt"},{"command": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"An alternate method of enabling options in a script is to specify them immediately following the #! script": "abs-guide.txt"},{"header.": "abs-guide.txt"},{"#!/bin/bash -x": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Body of script follows.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 33. Options": "abs-guide.txt"},{"": "abs-guide.txt"},{"487": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"It is also possible to enable script options from the command line. Some options that will not work with set": "abs-guide.txt"},{"are available this way. Among these are -i, force script to run interactive.": "abs-guide.txt"},{"bash -v script-name": "abs-guide.txt"},{"bash -o verbose script-name": "abs-guide.txt"},{"The following is a listing of some useful options. They may be specified in either abbreviated form (preceded": "abs-guide.txt"},{"by a single dash) or by complete name (preceded by a double dash or by -o).": "abs-guide.txt"},{"": "abs-guide.txt"},{"Table 33-1. Bash options": "abs-guide.txt"},{"Abbreviation": "abs-guide.txt"},{"-B": "abs-guide.txt"},{"": "abs-guide.txt"},{"-C": "abs-guide.txt"},{"-D": "abs-guide.txt"},{"": "abs-guide.txt"},{"Name": "abs-guide.txt"},{"brace": "abs-guide.txt"},{"expansion": "abs-guide.txt"},{"brace": "abs-guide.txt"},{"expansion": "abs-guide.txt"},{"noclobber": "abs-guide.txt"},{"(none)": "abs-guide.txt"},{"": "abs-guide.txt"},{"-a": "abs-guide.txt"},{"-b": "abs-guide.txt"},{"": "abs-guide.txt"},{"allexport": "abs-guide.txt"},{"notify": "abs-guide.txt"},{"": "abs-guide.txt"},{"-c ...": "abs-guide.txt"},{"checkjobs": "abs-guide.txt"},{"": "abs-guide.txt"},{"(none)": "abs-guide.txt"},{"": "abs-guide.txt"},{"-e": "abs-guide.txt"},{"": "abs-guide.txt"},{"errexit": "abs-guide.txt"},{"": "abs-guide.txt"},{"-f": "abs-guide.txt"},{"globstar": "abs-guide.txt"},{"": "abs-guide.txt"},{"noglob": "abs-guide.txt"},{"globbing": "abs-guide.txt"},{"star-match": "abs-guide.txt"},{"interactive": "abs-guide.txt"},{"noexec": "abs-guide.txt"},{"(none)": "abs-guide.txt"},{"": "abs-guide.txt"},{"+B": "abs-guide.txt"},{"": "abs-guide.txt"},{"-i": "abs-guide.txt"},{"-n": "abs-guide.txt"},{"-o": "abs-guide.txt"},{"Option-Name": "abs-guide.txt"},{"-o posix": "abs-guide.txt"},{"": "abs-guide.txt"},{"POSIX": "abs-guide.txt"},{"": "abs-guide.txt"},{"-o pipefail": "abs-guide.txt"},{"": "abs-guide.txt"},{"pipe failure": "abs-guide.txt"},{"": "abs-guide.txt"},{"-p": "abs-guide.txt"},{"-r": "abs-guide.txt"},{"-s": "abs-guide.txt"},{"-t": "abs-guide.txt"},{"": "abs-guide.txt"},{"privileged": "abs-guide.txt"},{"restricted": "abs-guide.txt"},{"stdin": "abs-guide.txt"},{"(none)": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 33. Options": "abs-guide.txt"},{"": "abs-guide.txt"},{"Effect": "abs-guide.txt"},{"Enable brace expansion (default setting = on)": "abs-guide.txt"},{"Disable brace expansion": "abs-guide.txt"},{"Prevent overwriting of files by redirection (may be overridden by >|)": "abs-guide.txt"},{"List double-quoted strings prefixed by $, but do not execute commands in": "abs-guide.txt"},{"script": "abs-guide.txt"},{"Export all defined variables": "abs-guide.txt"},{"Notify when jobs running in background terminate (not of much use in a": "abs-guide.txt"},{"script)": "abs-guide.txt"},{"Read commands from ...": "abs-guide.txt"},{"Informs user of any open jobs upon shell exit. Introduced in version 4 of": "abs-guide.txt"},{"Bash, and still \"experimental.\" Usage: shopt -s checkjobs (Caution: may": "abs-guide.txt"},{"hang!)": "abs-guide.txt"},{"Abort script at first error, when a command exits with non-zero status": "abs-guide.txt"},{"(except in until or while loops, if-tests, list constructs)": "abs-guide.txt"},{"Filename expansion (globbing) disabled": "abs-guide.txt"},{"Enables the ** globbing operator (version 4+ of Bash). Usage: shopt -s": "abs-guide.txt"},{"globstar": "abs-guide.txt"},{"Script runs in interactive mode": "abs-guide.txt"},{"Read commands in script, but do not execute them (syntax check)": "abs-guide.txt"},{"Invoke the Option-Name option": "abs-guide.txt"},{"Change the behavior of Bash, or invoked script, to conform to POSIX": "abs-guide.txt"},{"standard.": "abs-guide.txt"},{"Causes a pipeline to return the exit status of the last command in the pipe": "abs-guide.txt"},{"that returned a non-zero return value.": "abs-guide.txt"},{"Script runs as \"suid\" (caution!)": "abs-guide.txt"},{"Script runs in restricted mode (see Chapter 22).": "abs-guide.txt"},{"Read commands from stdin": "abs-guide.txt"},{"Exit after first command": "abs-guide.txt"},{"488": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"-u": "abs-guide.txt"},{"": "abs-guide.txt"},{"nounset": "abs-guide.txt"},{"": "abs-guide.txt"},{"-v": "abs-guide.txt"},{"-x": "abs-guide.txt"},{"--": "abs-guide.txt"},{"": "abs-guide.txt"},{"verbose": "abs-guide.txt"},{"xtrace": "abs-guide.txt"},{"(none)": "abs-guide.txt"},{"(none)": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 33. Options": "abs-guide.txt"},{"": "abs-guide.txt"},{"Attempt to use undefined variable outputs error message, and forces an": "abs-guide.txt"},{"exit": "abs-guide.txt"},{"Print each command to stdout before executing it": "abs-guide.txt"},{"Similar to -v, but expands commands": "abs-guide.txt"},{"End of options flag. All other arguments are positional parameters.": "abs-guide.txt"},{"Unset positional parameters. If arguments given (-- arg1 arg2),": "abs-guide.txt"},{"positional parameters set to arguments.": "abs-guide.txt"},{"": "abs-guide.txt"},{"489": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fChapter 34. Gotchas": "abs-guide.txt"},{"Turandot: Gli enigmi sono tre, la morte una!": "abs-guide.txt"},{"Caleph: No, no! Gli enigmi sono tre, una la vita!": "abs-guide.txt"},{"--Puccini": "abs-guide.txt"},{"Here are some (non-recommended!) scripting practices that will bring excitement into an otherwise dull life.": "abs-guide.txt"},{"\u2022": "abs-guide.txt"},{"Assigning reserved words or characters to variable names.": "abs-guide.txt"},{"case=value0": "abs-guide.txt"},{"# Causes problems.": "abs-guide.txt"},{"23skidoo=value1": "abs-guide.txt"},{"# Also problems.": "abs-guide.txt"},{"# Variable names starting with a digit are reserved by the shell.": "abs-guide.txt"},{"# Try _23skidoo=value1. Starting variables with an underscore is okay.": "abs-guide.txt"},{"# However . . .": "abs-guide.txt"},{"_=25": "abs-guide.txt"},{"echo $_": "abs-guide.txt"},{"# But . . .": "abs-guide.txt"},{"": "abs-guide.txt"},{"using just an underscore will not work.": "abs-guide.txt"},{"# $_ is a special variable set to last arg of last command.": "abs-guide.txt"},{"_ is a valid function name!": "abs-guide.txt"},{"": "abs-guide.txt"},{"xyz((!*=value2": "abs-guide.txt"},{"# Causes severe problems.": "abs-guide.txt"},{"# As of version 3 of Bash, periods are not allowed within variable names.": "abs-guide.txt"},{"": "abs-guide.txt"},{"\u2022 Using a hyphen or other reserved characters in a variable name (or function name).": "abs-guide.txt"},{"var-1=23": "abs-guide.txt"},{"# Use 'var_1' instead.": "abs-guide.txt"},{"function-whatever ()": "abs-guide.txt"},{"# Error": "abs-guide.txt"},{"# Use 'function_whatever ()' instead.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# As of version 3 of Bash, periods are not allowed within function names.": "abs-guide.txt"},{"function.whatever ()": "abs-guide.txt"},{"# Error": "abs-guide.txt"},{"# Use 'functionWhatever ()' instead.": "abs-guide.txt"},{"": "abs-guide.txt"},{"\u2022 Using the same name for a variable and a function. This can make a script difficult to understand.": "abs-guide.txt"},{"do_something ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"echo \"This function does something with \\\"$1\\\".\"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"do_something=do_something": "abs-guide.txt"},{"do_something do_something": "abs-guide.txt"},{"# All this is legal, but highly confusing.": "abs-guide.txt"},{"": "abs-guide.txt"},{"\u2022 Using whitespace inappropriately. In contrast to other programming languages, Bash can be quite": "abs-guide.txt"},{"finicky about whitespace.": "abs-guide.txt"},{"var1 = 23": "abs-guide.txt"},{"# 'var1=23' is correct.": "abs-guide.txt"},{"# On line above, Bash attempts to execute command \"var1\"": "abs-guide.txt"},{"# with the arguments \"=\" and \"23\".": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 34. Gotchas": "abs-guide.txt"},{"": "abs-guide.txt"},{"490": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"let c = $a - $b": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Instead:": "abs-guide.txt"},{"": "abs-guide.txt"},{"let c=$a-$b": "abs-guide.txt"},{"": "abs-guide.txt"},{"or": "abs-guide.txt"},{"": "abs-guide.txt"},{"let \"c = $a - $b\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [ $a -le 5]": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^^": "abs-guide.txt"},{"": "abs-guide.txt"},{"# if [ $a -le 5 ]": "abs-guide.txt"},{"is correct.": "abs-guide.txt"},{"if [ \"$a\" -le 5 ]": "abs-guide.txt"},{"is even better.": "abs-guide.txt"},{"# [[ $a -le 5 ]] also works.": "abs-guide.txt"},{"": "abs-guide.txt"},{"\u2022": "abs-guide.txt"},{"Not terminating with a semicolon the final command in a code block within curly brackets.": "abs-guide.txt"},{"{ ls -l; df; echo \"Done.\" }": "abs-guide.txt"},{"# bash: syntax error: unexpected end of file": "abs-guide.txt"},{"{ ls -l; df; echo \"Done.\"; }": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^": "abs-guide.txt"},{"": "abs-guide.txt"},{"### Final command needs semicolon.": "abs-guide.txt"},{"": "abs-guide.txt"},{"\u2022": "abs-guide.txt"},{"Assuming uninitialized variables (variables before a value is assigned to them) are \"zeroed out\". An": "abs-guide.txt"},{"uninitialized variable has a value of null, not zero.": "abs-guide.txt"},{"": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"echo \"uninitialized_var = $uninitialized_var\"": "abs-guide.txt"},{"# uninitialized_var =": "abs-guide.txt"},{"# However . . .": "abs-guide.txt"},{"# if $BASH_VERSION \u2265 4.2; then": "abs-guide.txt"},{"if [[ ! -v uninitialized_var ]]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"uninitialized_var=0": "abs-guide.txt"},{"# Initialize it to zero!": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"\u2022": "abs-guide.txt"},{"Mixing up = and -eq in a test. Remember, = is for comparing literal variables and -eq for integers.": "abs-guide.txt"},{"if [ \"$a\" = 273 ]": "abs-guide.txt"},{"if [ \"$a\" -eq 273 ]": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Is $a an integer or string?": "abs-guide.txt"},{"# If $a is an integer.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Sometimes you can interchange -eq and = without adverse consequences.": "abs-guide.txt"},{"# However . . .": "abs-guide.txt"},{"": "abs-guide.txt"},{"a=273.0": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Not an integer.": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [ \"$a\" = 273 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Comparison works.\"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo \"Comparison does not work.\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# Comparison does not work.": "abs-guide.txt"},{"# Same with": "abs-guide.txt"},{"": "abs-guide.txt"},{"a=\" 273\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"and a=\"0273\".": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Likewise, problems trying to use \"-eq\" with non-integer values.": "abs-guide.txt"},{"if [ \"$a\" -eq 273.0 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"a = $a\"": "abs-guide.txt"},{"fi # Aborts with an error message.": "abs-guide.txt"},{"# test.sh: [: 273.0: integer expression expected": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 34. Gotchas": "abs-guide.txt"},{"": "abs-guide.txt"},{"491": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"\u2022 Misusing string comparison operators.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 34-1. Numerical and string comparison are not equivalent": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# bad-op.sh: Trying to use a string comparison on integers.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"number=1": "abs-guide.txt"},{"# The following while-loop has two errors:": "abs-guide.txt"},{"#+ one blatant, and the other subtle.": "abs-guide.txt"},{"while [ \"$number\" < 5 ]": "abs-guide.txt"},{"# Wrong! Should be: while [ \"$number\" -lt 5 ]": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo -n \"$number \"": "abs-guide.txt"},{"let \"number += 1\"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"# Attempt to run this bombs with the error message:": "abs-guide.txt"},{"#+ bad-op.sh: line 10: 5: No such file or directory": "abs-guide.txt"},{"# Within single brackets, \"<\" must be escaped,": "abs-guide.txt"},{"#+ and even then, it's still wrong for comparing integers.": "abs-guide.txt"},{"echo \"---------------------\"": "abs-guide.txt"},{"while [ \"$number\" \\< 5 ]": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo -n \"$number \"": "abs-guide.txt"},{"let \"number += 1\"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"1 2 3 4": "abs-guide.txt"},{"It *seems* to work, but . . .": "abs-guide.txt"},{"it actually does an ASCII comparison,": "abs-guide.txt"},{"rather than a numerical one.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo; echo \"---------------------\"": "abs-guide.txt"},{"# This can cause problems. For example:": "abs-guide.txt"},{"lesser=5": "abs-guide.txt"},{"greater=105": "abs-guide.txt"},{"if [ \"$greater\" \\< \"$lesser\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"$greater is less than $lesser\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# 105 is less than 5": "abs-guide.txt"},{"# In fact, \"105\" actually is less than \"5\"": "abs-guide.txt"},{"#+ in a string comparison (ASCII sort order).": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"\u2022": "abs-guide.txt"},{"Attempting to use let to set string variables.": "abs-guide.txt"},{"let \"a = hello, you\"": "abs-guide.txt"},{"echo \"$a\"": "abs-guide.txt"},{"# 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"\u2022": "abs-guide.txt"},{"Sometimes variables within \"test\" brackets ([ ]) need to be quoted (double quotes). Failure to do so": "abs-guide.txt"},{"may cause unexpected behavior. See Example 7-6, Example 20-5, and Example 9-6.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 34. Gotchas": "abs-guide.txt"},{"": "abs-guide.txt"},{"492": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"\u2022 Quoting a variable containing whitespace prevents splitting. Sometimes this produces unintended": "abs-guide.txt"},{"consequences.": "abs-guide.txt"},{"\u2022": "abs-guide.txt"},{"Commands issued from a script may fail to execute because the script owner lacks execute permission": "abs-guide.txt"},{"for them. If a user cannot invoke a command from the command-line, then putting it into a script will": "abs-guide.txt"},{"likewise fail. Try changing the attributes of the command in question, perhaps even setting the suid bit": "abs-guide.txt"},{"(as root, of course).": "abs-guide.txt"},{"\u2022": "abs-guide.txt"},{"Attempting to use - as a redirection operator (which it is not) will usually result in an unpleasant": "abs-guide.txt"},{"surprise.": "abs-guide.txt"},{"command1 2> - | command2": "abs-guide.txt"},{"# Trying to redirect error output of command1 into a pipe . . .": "abs-guide.txt"},{"# . . . will not work.": "abs-guide.txt"},{"command1 2>& - | command2": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Also futile.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Thanks, S.C.": "abs-guide.txt"},{"": "abs-guide.txt"},{"\u2022": "abs-guide.txt"},{"Using Bash version 2+ functionality may cause a bailout with error messages. Older Linux machines": "abs-guide.txt"},{"may have version 1.XX of Bash as the default installation.": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"minimum_version=2": "abs-guide.txt"},{"# Since Chet Ramey is constantly adding features to Bash,": "abs-guide.txt"},{"# you may set $minimum_version to 2.XX, 3.XX, or whatever is appropriate.": "abs-guide.txt"},{"E_BAD_VERSION=80": "abs-guide.txt"},{"if [ \"$BASH_VERSION\" \\< \"$minimum_version\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"This script works only with Bash, version $minimum or greater.\"": "abs-guide.txt"},{"echo \"Upgrade strongly recommended.\"": "abs-guide.txt"},{"exit $E_BAD_VERSION": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"...": "abs-guide.txt"},{"": "abs-guide.txt"},{"\u2022 Using Bash-specific functionality in a Bourne shell script (#!/bin/sh) on a non-Linux machine": "abs-guide.txt"},{"may cause unexpected behavior. A Linux system usually aliases sh to bash, but this does not": "abs-guide.txt"},{"necessarily hold true for a generic UNIX machine.": "abs-guide.txt"},{"\u2022": "abs-guide.txt"},{"Using undocumented features in Bash turns out to be a dangerous practice. In previous releases of this": "abs-guide.txt"},{"book there were several scripts that depended on the \"feature\" that, although the maximum value of": "abs-guide.txt"},{"an exit or return value was 255, that limit did not apply to negative integers. Unfortunately, in version": "abs-guide.txt"},{"2.05b and later, that loophole disappeared. See Example 24-9.": "abs-guide.txt"},{"\u2022": "abs-guide.txt"},{"In certain contexts, a misleading exit status may be returned. This may occur when setting a local": "abs-guide.txt"},{"variable within a function or when assigning an arithmetic value to a variable.": "abs-guide.txt"},{"\u2022 The exit status of an arithmetic expression is not equivalent to an error code.": "abs-guide.txt"},{"var=1 && ((--var)) && echo $var": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^^^^^^^^^ Here the and-list terminates with exit status 1.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"$var doesn't echo!": "abs-guide.txt"},{"echo $?": "abs-guide.txt"},{"# 1": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 34. Gotchas": "abs-guide.txt"},{"": "abs-guide.txt"},{"493": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"\u2022 A script with DOS-type newlines (\\r\\n) will fail to execute, since #!/bin/bash\\r\\n is not": "abs-guide.txt"},{"recognized, not the same as the expected #!/bin/bash\\n. The fix is to convert the script to": "abs-guide.txt"},{"UNIX-style newlines.": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"echo \"Here\"": "abs-guide.txt"},{"unix2dos $0": "abs-guide.txt"},{"chmod 755 $0": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Script changes itself to DOS format.": "abs-guide.txt"},{"# Change back to execute permission.": "abs-guide.txt"},{"# The 'unix2dos' command removes execute permission.": "abs-guide.txt"},{"": "abs-guide.txt"},{"./$0": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Script tries to run itself again.": "abs-guide.txt"},{"# But it won't work as a DOS file.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo \"There\"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"\u2022": "abs-guide.txt"},{"A shell script headed by #!/bin/sh will not run in full Bash-compatibility mode. Some": "abs-guide.txt"},{"Bash-specific functions might be disabled. Scripts that need complete access to all the Bash-specific": "abs-guide.txt"},{"extensions should start with #!/bin/bash.": "abs-guide.txt"},{"\u2022 Putting whitespace in front of the terminating limit string of a here document will cause unexpected": "abs-guide.txt"},{"behavior in a script.": "abs-guide.txt"},{"\u2022 Putting more than one echo statement in a function whose output is captured.": "abs-guide.txt"},{"add2 ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"echo \"Whatever ... \"": "abs-guide.txt"},{"# Delete this line!": "abs-guide.txt"},{"let \"retval = $1 + $2\"": "abs-guide.txt"},{"echo $retval": "abs-guide.txt"},{"}": "abs-guide.txt"},{"num1=12": "abs-guide.txt"},{"num2=43": "abs-guide.txt"},{"echo \"Sum of $num1 and $num2 = $(add2 $num1 $num2)\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Sum of 12 and 43 = Whatever ...": "abs-guide.txt"},{"55": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"The \"echoes\" concatenate.": "abs-guide.txt"},{"": "abs-guide.txt"},{"This will not work.": "abs-guide.txt"},{"\u2022": "abs-guide.txt"},{"A script may not export variables back to its parent process, the shell, or to the environment. Just as": "abs-guide.txt"},{"we learned in biology, a child process can inherit from a parent, but not vice versa.": "abs-guide.txt"},{"WHATEVER=/home/bozo": "abs-guide.txt"},{"export WHATEVER": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"bash$ echo $WHATEVER": "abs-guide.txt"},{"bash$": "abs-guide.txt"},{"": "abs-guide.txt"},{"Sure enough, back at the command prompt, $WHATEVER remains unset.": "abs-guide.txt"},{"\u2022": "abs-guide.txt"},{"Setting and manipulating variables in a subshell, then attempting to use those same variables outside": "abs-guide.txt"},{"the scope of the subshell will result an unpleasant surprise.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 34. Gotchas": "abs-guide.txt"},{"": "abs-guide.txt"},{"494": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"Example 34-2. Subshell Pitfalls": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# Pitfalls of variables in a subshell.": "abs-guide.txt"},{"outer_variable=outer": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"outer_variable = $outer_variable\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"(": "abs-guide.txt"},{"# Begin subshell": "abs-guide.txt"},{"echo \"outer_variable inside subshell = $outer_variable\"": "abs-guide.txt"},{"inner_variable=inner # Set": "abs-guide.txt"},{"echo \"inner_variable inside subshell = $inner_variable\"": "abs-guide.txt"},{"outer_variable=inner # Will value change globally?": "abs-guide.txt"},{"echo \"outer_variable inside subshell = $outer_variable\"": "abs-guide.txt"},{"# Will 'exporting' make a difference?": "abs-guide.txt"},{"#": "abs-guide.txt"},{"export inner_variable": "abs-guide.txt"},{"#": "abs-guide.txt"},{"export outer_variable": "abs-guide.txt"},{"# Try it and see.": "abs-guide.txt"},{"# End subshell": "abs-guide.txt"},{")": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"inner_variable outside subshell = $inner_variable\"": "abs-guide.txt"},{"echo \"outer_variable outside subshell = $outer_variable\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Unset.": "abs-guide.txt"},{"# Unchanged.": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"# What happens if you uncomment lines 19 and 20?": "abs-guide.txt"},{"# Does it make a difference?": "abs-guide.txt"},{"": "abs-guide.txt"},{"\u2022": "abs-guide.txt"},{"Piping echo output to a read may produce unexpected results. In this scenario, the read acts as if it": "abs-guide.txt"},{"were running in a subshell. Instead, use the set command (as in Example 15-18).": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 34-3. Piping the output of echo to a read": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# badread.sh:": "abs-guide.txt"},{"# Attempting to use 'echo and 'read'": "abs-guide.txt"},{"#+ to assign variables non-interactively.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"shopt -s lastpipe": "abs-guide.txt"},{"": "abs-guide.txt"},{"a=aaa": "abs-guide.txt"},{"b=bbb": "abs-guide.txt"},{"c=ccc": "abs-guide.txt"},{"echo \"one two three\" | read a b c": "abs-guide.txt"},{"# Try to reassign a, b, and c.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"a = $a\"": "abs-guide.txt"},{"echo \"b = $b\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 34. Gotchas": "abs-guide.txt"},{"": "abs-guide.txt"},{"# a = aaa": "abs-guide.txt"},{"# b = bbb": "abs-guide.txt"},{"": "abs-guide.txt"},{"495": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"echo \"c = $c\" # c = ccc": "abs-guide.txt"},{"# Reassignment failed.": "abs-guide.txt"},{"###": "abs-guide.txt"},{"##": "abs-guide.txt"},{"#": "abs-guide.txt"},{"##+": "abs-guide.txt"},{"###": "abs-guide.txt"},{"": "abs-guide.txt"},{"However . . .": "abs-guide.txt"},{"Uncommenting line 6:": "abs-guide.txt"},{"shopt -s lastpipe": "abs-guide.txt"},{"fixes the problem!": "abs-guide.txt"},{"This is a new feature in Bash, version 4.2.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# -----------------------------# Try the following alternative.": "abs-guide.txt"},{"var=`echo \"one two three\"`": "abs-guide.txt"},{"set -- $var": "abs-guide.txt"},{"a=$1; b=$2; c=$3": "abs-guide.txt"},{"echo \"-------\"": "abs-guide.txt"},{"echo \"a = $a\"": "abs-guide.txt"},{"echo \"b = $b\"": "abs-guide.txt"},{"echo \"c = $c\"": "abs-guide.txt"},{"# Reassignment": "abs-guide.txt"},{"": "abs-guide.txt"},{"# a = one": "abs-guide.txt"},{"# b = two": "abs-guide.txt"},{"# c = three": "abs-guide.txt"},{"succeeded.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# -----------------------------#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Note also that an echo to a 'read' works within a subshell.": "abs-guide.txt"},{"However, the value of the variable changes *only* within the subshell.": "abs-guide.txt"},{"": "abs-guide.txt"},{"a=aaa": "abs-guide.txt"},{"b=bbb": "abs-guide.txt"},{"c=ccc": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Starting all over again.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo; echo": "abs-guide.txt"},{"echo \"one two three\" | ( read a b c;": "abs-guide.txt"},{"echo \"Inside subshell: \"; echo \"a = $a\"; echo \"b = $b\"; echo \"c = $c\" )": "abs-guide.txt"},{"# a = one": "abs-guide.txt"},{"# b = two": "abs-guide.txt"},{"# c = three": "abs-guide.txt"},{"echo \"-----------------\"": "abs-guide.txt"},{"echo \"Outside subshell: \"": "abs-guide.txt"},{"echo \"a = $a\" # a = aaa": "abs-guide.txt"},{"echo \"b = $b\" # b = bbb": "abs-guide.txt"},{"echo \"c = $c\" # c = ccc": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"In fact, as Anthony Richardson points out, piping to any loop can cause a similar problem.": "abs-guide.txt"},{"# Loop piping troubles.": "abs-guide.txt"},{"# This example by Anthony Richardson,": "abs-guide.txt"},{"#+ with addendum by Wilbert Berendsen.": "abs-guide.txt"},{"": "abs-guide.txt"},{"foundone=false": "abs-guide.txt"},{"find $HOME -type f -atime +30 -size 100k |": "abs-guide.txt"},{"while true": "abs-guide.txt"},{"do": "abs-guide.txt"},{"read f": "abs-guide.txt"},{"echo \"$f is over 100KB and has not been accessed in over 30 days\"": "abs-guide.txt"},{"echo \"Consider moving the file to archives.\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 34. Gotchas": "abs-guide.txt"},{"": "abs-guide.txt"},{"496": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"foundone=true": "abs-guide.txt"},{"# -----------------------------------echo \"Subshell level = $BASH_SUBSHELL\"": "abs-guide.txt"},{"# Subshell level = 1": "abs-guide.txt"},{"# Yes, we're inside a subshell.": "abs-guide.txt"},{"# -----------------------------------done": "abs-guide.txt"},{"# foundone will always be false here since it is": "abs-guide.txt"},{"#+ set to true inside a subshell": "abs-guide.txt"},{"if [ $foundone = false ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"No files need archiving.\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# =====================Now, here is the correct way:=================": "abs-guide.txt"},{"foundone=false": "abs-guide.txt"},{"for f in $(find $HOME -type f -atime +30 -size 100k) # No pipe here.": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo \"$f is over 100KB and has not been accessed in over 30 days\"": "abs-guide.txt"},{"echo \"Consider moving the file to archives.\"": "abs-guide.txt"},{"foundone=true": "abs-guide.txt"},{"done": "abs-guide.txt"},{"if [ $foundone = false ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"No files need archiving.\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# ==================And here is another alternative==================": "abs-guide.txt"},{"# Places the part of the script that reads the variables": "abs-guide.txt"},{"#+ within a code block, so they share the same subshell.": "abs-guide.txt"},{"# Thank you, W.B.": "abs-guide.txt"},{"find $HOME -type f -atime +30 -size 100k | {": "abs-guide.txt"},{"foundone=false": "abs-guide.txt"},{"while read f": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo \"$f is over 100KB and has not been accessed in over 30 days\"": "abs-guide.txt"},{"echo \"Consider moving the file to archives.\"": "abs-guide.txt"},{"foundone=true": "abs-guide.txt"},{"done": "abs-guide.txt"},{"if ! $foundone": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"No files need archiving.\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"A lookalike problem occurs when trying to write the stdout of a tail -f piped to grep.": "abs-guide.txt"},{"tail -f /var/log/messages | grep \"$ERROR_MSG\" >> error.log": "abs-guide.txt"},{"# The \"error.log\" file will not have anything written to it.": "abs-guide.txt"},{"# As Samuli Kaipiainen points out, this results from grep": "abs-guide.txt"},{"#+ buffering its output.": "abs-guide.txt"},{"# The fix is to add the \"--line-buffered\" parameter to grep.": "abs-guide.txt"},{"": "abs-guide.txt"},{"\u2022": "abs-guide.txt"},{"Using \"suid\" commands within scripts is risky, as it may compromise system security. [123]": "abs-guide.txt"},{"Chapter 34. Gotchas": "abs-guide.txt"},{"": "abs-guide.txt"},{"497": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"\u2022 Using shell scripts for CGI programming may be problematic. Shell script variables are not": "abs-guide.txt"},{"\"typesafe,\" and this can cause undesirable behavior as far as CGI is concerned. Moreover, it is": "abs-guide.txt"},{"difficult to \"cracker-proof\" shell scripts.": "abs-guide.txt"},{"\u2022 Bash does not handle the double slash (//) string correctly.": "abs-guide.txt"},{"\u2022": "abs-guide.txt"},{"Bash scripts written for Linux or BSD systems may need fixups to run on a commercial UNIX": "abs-guide.txt"},{"machine. Such scripts often employ the GNU set of commands and filters, which have greater": "abs-guide.txt"},{"functionality than their generic UNIX counterparts. This is particularly true of such text processing": "abs-guide.txt"},{"utilites as tr.": "abs-guide.txt"},{"\u2022": "abs-guide.txt"},{"Sadly, updates to Bash itself have broken older scripts that used to work perfectly fine. Let us recall": "abs-guide.txt"},{"how risky it is to use undocumented Bash features.": "abs-guide.txt"},{"Danger is near thee -Beware, beware, beware, beware.": "abs-guide.txt"},{"Many brave hearts are asleep in the deep.": "abs-guide.txt"},{"So beware -Beware.": "abs-guide.txt"},{"--A.J. Lamb and H.W. Petrie": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 34. Gotchas": "abs-guide.txt"},{"": "abs-guide.txt"},{"498": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fChapter 35. Scripting With Style": "abs-guide.txt"},{"Get into the habit of writing shell scripts in a structured and systematic manner. Even on-the-fly and \"written": "abs-guide.txt"},{"on the back of an envelope\" scripts will benefit if you take a few minutes to plan and organize your thoughts": "abs-guide.txt"},{"before sitting down and coding.": "abs-guide.txt"},{"Herewith are a few stylistic guidelines. This is not (necessarily) intended as an Official Shell Scripting": "abs-guide.txt"},{"Stylesheet.": "abs-guide.txt"},{"": "abs-guide.txt"},{"35.1. Unofficial Shell Scripting Stylesheet": "abs-guide.txt"},{"\u2022 Comment your code. This makes it easier for others to understand (and appreciate), and easier for you": "abs-guide.txt"},{"to maintain.": "abs-guide.txt"},{"PASS=\"$PASS${MATRIX:$(($RANDOM%${#MATRIX})):1}\"": "abs-guide.txt"},{"# It made perfect sense when you wrote it last year,": "abs-guide.txt"},{"#+ but now it's a complete mystery.": "abs-guide.txt"},{"# (From Antek Sawicki's \"pw.sh\" script.)": "abs-guide.txt"},{"": "abs-guide.txt"},{"Add descriptive headers to your scripts and functions.": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"#************************************************#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"xyz.sh": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"written by Bozo Bozeman": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"July 05, 2001": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Clean up project files.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#************************************************#": "abs-guide.txt"},{"E_BADDIR=85": "abs-guide.txt"},{"projectdir=/home/bozo/projects": "abs-guide.txt"},{"": "abs-guide.txt"},{"# No such directory.": "abs-guide.txt"},{"# Directory to clean up.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# --------------------------------------------------------# cleanup_pfiles ()": "abs-guide.txt"},{"# Removes all files in designated directory.": "abs-guide.txt"},{"# Parameter: $target_directory": "abs-guide.txt"},{"# Returns: 0 on success, $E_BADDIR if something went wrong.": "abs-guide.txt"},{"# --------------------------------------------------------cleanup_pfiles ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"if [ ! -d \"$1\" ] # Test if target directory exists.": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"$1 is not a directory.\"": "abs-guide.txt"},{"return $E_BADDIR": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"rm -f \"$1\"/*": "abs-guide.txt"},{"return 0": "abs-guide.txt"},{"# Success.": "abs-guide.txt"},{"}": "abs-guide.txt"},{"cleanup_pfiles $projectdir": "abs-guide.txt"},{"exit $?": "abs-guide.txt"},{"": "abs-guide.txt"},{"\u2022 Avoid using \"magic numbers,\" [124] that is, \"hard-wired\" literal constants. Use meaningful variable": "abs-guide.txt"},{"names instead. This makes the script easier to understand and permits making changes and updates": "abs-guide.txt"},{"without breaking the application.": "abs-guide.txt"},{"Chapter 35. Scripting With Style": "abs-guide.txt"},{"": "abs-guide.txt"},{"499": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"if [ -f /var/log/messages ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"...": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# A year later, you decide to change the script to check /var/log/syslog.": "abs-guide.txt"},{"# It is now necessary to manually change the script, instance by instance,": "abs-guide.txt"},{"#+ and hope nothing breaks.": "abs-guide.txt"},{"# A better way:": "abs-guide.txt"},{"LOGFILE=/var/log/messages": "abs-guide.txt"},{"if [ -f \"$LOGFILE\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"...": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Only line that needs to be changed.": "abs-guide.txt"},{"": "abs-guide.txt"},{"\u2022 Choose descriptive names for variables and functions.": "abs-guide.txt"},{"fl=`ls -al $dirname`": "abs-guide.txt"},{"file_listing=`ls -al $dirname`": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Cryptic.": "abs-guide.txt"},{"# Better.": "abs-guide.txt"},{"": "abs-guide.txt"},{"MAXVAL=10": "abs-guide.txt"},{"# All caps used for a script constant.": "abs-guide.txt"},{"while [ \"$index\" -le \"$MAXVAL\" ]": "abs-guide.txt"},{"...": "abs-guide.txt"},{"": "abs-guide.txt"},{"E_NOTFOUND=95": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Uppercase for an errorcode,": "abs-guide.txt"},{"#+ and name prefixed with E_.": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [ ! -e \"$filename\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"File $filename not found.\"": "abs-guide.txt"},{"exit $E_NOTFOUND": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"MAIL_DIRECTORY=/var/spool/mail/bozo": "abs-guide.txt"},{"export MAIL_DIRECTORY": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Uppercase for an environmental": "abs-guide.txt"},{"#+ variable.": "abs-guide.txt"},{"": "abs-guide.txt"},{"GetAnswer ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"prompt=$1": "abs-guide.txt"},{"echo -n $prompt": "abs-guide.txt"},{"read answer": "abs-guide.txt"},{"return $answer": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Mixed case works well for a": "abs-guide.txt"},{"#+ function name, especially": "abs-guide.txt"},{"#+ when it improves legibility.": "abs-guide.txt"},{"": "abs-guide.txt"},{"GetAnswer \"What is your favorite number? \"": "abs-guide.txt"},{"favorite_number=$?": "abs-guide.txt"},{"echo $favorite_number": "abs-guide.txt"},{"": "abs-guide.txt"},{"_uservariable=23": "abs-guide.txt"},{"# Permissible, but not recommended.": "abs-guide.txt"},{"# It's better for user-defined variables not to start with an underscore.": "abs-guide.txt"},{"# Leave that for system variables.": "abs-guide.txt"},{"": "abs-guide.txt"},{"\u2022 Use exit codes in a systematic and meaningful way.": "abs-guide.txt"},{"E_WRONG_ARGS=95": "abs-guide.txt"},{"...": "abs-guide.txt"},{"...": "abs-guide.txt"},{"exit $E_WRONG_ARGS": "abs-guide.txt"},{"": "abs-guide.txt"},{"See also Appendix E.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 35. Scripting With Style": "abs-guide.txt"},{"": "abs-guide.txt"},{"500": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"Ender suggests using the exit codes in /usr/include/sysexits.h in shell scripts, though these": "abs-guide.txt"},{"are primarily intended for C and C++ programming.": "abs-guide.txt"},{"\u2022 Use standardized parameter flags for script invocation. Ender proposes the following set of flags.": "abs-guide.txt"},{"-a": "abs-guide.txt"},{"-b": "abs-guide.txt"},{"-c": "abs-guide.txt"},{"-d": "abs-guide.txt"},{"-e": "abs-guide.txt"},{"-h": "abs-guide.txt"},{"-l": "abs-guide.txt"},{"-m": "abs-guide.txt"},{"-n": "abs-guide.txt"},{"-r": "abs-guide.txt"},{"-s": "abs-guide.txt"},{"-u": "abs-guide.txt"},{"-v": "abs-guide.txt"},{"-V": "abs-guide.txt"},{"": "abs-guide.txt"},{"All: Return all information (including hidden file info).": "abs-guide.txt"},{"Brief: Short version, usually for other scripts.": "abs-guide.txt"},{"Copy, concatenate, etc.": "abs-guide.txt"},{"Daily: Use information from the whole day, and not merely": "abs-guide.txt"},{"information for a specific instance/user.": "abs-guide.txt"},{"Extended/Elaborate: (often does not include hidden file info).": "abs-guide.txt"},{"Help: Verbose usage w/descs, aux info, discussion, help.": "abs-guide.txt"},{"See also -V.": "abs-guide.txt"},{"Log output of script.": "abs-guide.txt"},{"Manual: Launch man-page for base command.": "abs-guide.txt"},{"Numbers: Numerical data only.": "abs-guide.txt"},{"Recursive: All files in a directory (and/or all sub-dirs).": "abs-guide.txt"},{"Setup & File Maintenance: Config files for this script.": "abs-guide.txt"},{"Usage: List of invocation flags for the script.": "abs-guide.txt"},{"Verbose: Human readable output, more or less formatted.": "abs-guide.txt"},{"Version / License / Copy(right|left) / Contribs (email too).": "abs-guide.txt"},{"": "abs-guide.txt"},{"See also Section G.1.": "abs-guide.txt"},{"\u2022 Break complex scripts into simpler modules. Use functions where appropriate. See Example 37-4.": "abs-guide.txt"},{"\u2022 Don't use a complex construct where a simpler one will do.": "abs-guide.txt"},{"COMMAND": "abs-guide.txt"},{"if [ $? -eq 0 ]": "abs-guide.txt"},{"...": "abs-guide.txt"},{"# Redundant and non-intuitive.": "abs-guide.txt"},{"if COMMAND": "abs-guide.txt"},{"...": "abs-guide.txt"},{"# More concise (if perhaps not quite as legible).": "abs-guide.txt"},{"": "abs-guide.txt"},{"... reading the UNIX source code to the Bourne": "abs-guide.txt"},{"shell (/bin/sh). I was shocked at how much simple": "abs-guide.txt"},{"algorithms could be made cryptic, and therefore": "abs-guide.txt"},{"useless, by a poor choice of code style. I asked": "abs-guide.txt"},{"myself, \"Could someone be proud of this code?\"": "abs-guide.txt"},{"--Landon Noll": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 35. Scripting With Style": "abs-guide.txt"},{"": "abs-guide.txt"},{"501": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fChapter 36. Miscellany": "abs-guide.txt"},{"Nobody really knows what the Bourne shell's": "abs-guide.txt"},{"grammar is. Even examination of the source code": "abs-guide.txt"},{"is little help.": "abs-guide.txt"},{"--Tom Duff": "abs-guide.txt"},{"": "abs-guide.txt"},{"36.1. Interactive and non-interactive shells and scripts": "abs-guide.txt"},{"An interactive shell reads commands from user input on a tty. Among other things, such a shell reads startup": "abs-guide.txt"},{"files on activation, displays a prompt, and enables job control by default. The user can interact with the shell.": "abs-guide.txt"},{"A shell running a script is always a non-interactive shell. All the same, the script can still access its tty. It is": "abs-guide.txt"},{"even possible to emulate an interactive shell in a script.": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"MY_PROMPT='$ '": "abs-guide.txt"},{"while :": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo -n \"$MY_PROMPT\"": "abs-guide.txt"},{"read line": "abs-guide.txt"},{"eval \"$line\"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"# This example script, and much of the above explanation supplied by": "abs-guide.txt"},{"# St\u00e9phane Chazelas (thanks again).": "abs-guide.txt"},{"": "abs-guide.txt"},{"Let us consider an interactive script to be one that requires input from the user, usually with read statements": "abs-guide.txt"},{"(see Example 15-3). \"Real life\" is actually a bit messier than that. For now, assume an interactive script is": "abs-guide.txt"},{"bound to a tty, a script that a user has invoked from the console or an xterm.": "abs-guide.txt"},{"Init and startup scripts are necessarily non-interactive, since they must run without human intervention. Many": "abs-guide.txt"},{"administrative and system maintenance scripts are likewise non-interactive. Unvarying repetitive tasks cry out": "abs-guide.txt"},{"for automation by non-interactive scripts.": "abs-guide.txt"},{"Non-interactive scripts can run in the background, but interactive ones hang, waiting for input that never": "abs-guide.txt"},{"comes. Handle that difficulty by having an expect script or embedded here document feed input to an": "abs-guide.txt"},{"interactive script running as a background job. In the simplest case, redirect a file to supply input to a read": "abs-guide.txt"},{"statement (read variable <file). These particular workarounds make possible general purpose scripts that run": "abs-guide.txt"},{"in either interactive or non-interactive modes.": "abs-guide.txt"},{"If a script needs to test whether it is running in an interactive shell, it is simply a matter of finding whether the": "abs-guide.txt"},{"prompt variable, $PS1 is set. (If the user is being prompted for input, then the script needs to display a": "abs-guide.txt"},{"prompt.)": "abs-guide.txt"},{"if [ -z $PS1 ] # no prompt?": "abs-guide.txt"},{"### if [ -v PS1 ]": "abs-guide.txt"},{"# On Bash 4.2+ ...": "abs-guide.txt"},{"then": "abs-guide.txt"},{"# non-interactive": "abs-guide.txt"},{"...": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 36. Miscellany": "abs-guide.txt"},{"": "abs-guide.txt"},{"502": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"else": "abs-guide.txt"},{"# interactive": "abs-guide.txt"},{"...": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"Alternatively, the script can test for the presence of option \"i\" in the $- flag.": "abs-guide.txt"},{"case $- in": "abs-guide.txt"},{"*i*)": "abs-guide.txt"},{"# interactive shell": "abs-guide.txt"},{";;": "abs-guide.txt"},{"*)": "abs-guide.txt"},{"# non-interactive shell": "abs-guide.txt"},{";;": "abs-guide.txt"},{"# (Courtesy of \"UNIX F.A.Q.,\" 1993)": "abs-guide.txt"},{"": "abs-guide.txt"},{"However, John Lange describes an alternative method, using the -t test operator.": "abs-guide.txt"},{"# Test for a terminal!": "abs-guide.txt"},{"fd=0": "abs-guide.txt"},{"": "abs-guide.txt"},{"# stdin": "abs-guide.txt"},{"": "abs-guide.txt"},{"# As we recall, the -t test option checks whether the stdin, [ -t 0 ],": "abs-guide.txt"},{"#+ or stdout, [ -t 1 ], in a given script is running in a terminal.": "abs-guide.txt"},{"if [ -t \"$fd\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo interactive": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo non-interactive": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"But, as John points out:": "abs-guide.txt"},{"if [ -t 0 ] works ... when you're logged in locally": "abs-guide.txt"},{"but fails when you invoke the command remotely via ssh.": "abs-guide.txt"},{"So for a true test you also have to test for a socket.": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [[ -t \"$fd\" || -p /dev/stdin ]]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo interactive": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo non-interactive": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"Scripts may be forced to run in interactive mode with the -i option or with a #!/bin/bash -i header.": "abs-guide.txt"},{"Be aware that this can cause erratic script behavior or show error messages even when no error is": "abs-guide.txt"},{"present.": "abs-guide.txt"},{"": "abs-guide.txt"},{"36.2. Shell Wrappers": "abs-guide.txt"},{"A wrapper is a shell script that embeds a system command or utility, that accepts and passes a set of": "abs-guide.txt"},{"parameters to that command. [125] Wrapping a script around a complex command-line simplifies invoking it.": "abs-guide.txt"},{"This is expecially useful with sed and awk.": "abs-guide.txt"},{"A sed or awk script would normally be invoked from the command-line by a sed -e 'commands' or": "abs-guide.txt"},{"awk 'commands'. Embedding such a script in a Bash script permits calling it more simply, and makes it": "abs-guide.txt"},{"reusable. This also enables combining the functionality of sed and awk, for example piping the output of a set": "abs-guide.txt"},{"of sed commands to awk. As a saved executable file, you can then repeatedly invoke it in its original form or": "abs-guide.txt"},{"modified, without the inconvenience of retyping it on the command-line.": "abs-guide.txt"},{"Chapter 36. Miscellany": "abs-guide.txt"},{"": "abs-guide.txt"},{"503": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"Example 36-1. shell wrapper": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"This simple script removes blank lines from a file.": "abs-guide.txt"},{"No argument checking.": "abs-guide.txt"},{"You might wish to add something like:": "abs-guide.txt"},{"E_NOARGS=85": "abs-guide.txt"},{"if [ -z \"$1\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Usage: `basename $0` target-file\"": "abs-guide.txt"},{"exit $E_NOARGS": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"sed -e /^$/d \"$1\"": "abs-guide.txt"},{"# Same as": "abs-guide.txt"},{"#": "abs-guide.txt"},{"sed -e '/^$/d' filename": "abs-guide.txt"},{"# invoked from the command-line.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"The '-e' means an \"editing\" command follows (optional here).": "abs-guide.txt"},{"'^' indicates the beginning of line, '$' the end.": "abs-guide.txt"},{"This matches lines with nothing between the beginning and the end -blank lines.": "abs-guide.txt"},{"The 'd' is the delete command.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Quoting the command-line arg permits": "abs-guide.txt"},{"#+ whitespace and special characters in the filename.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Note that this script doesn't actually change the target file.": "abs-guide.txt"},{"If you need to do that, redirect its output.": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 36-2. A slightly more complex shell wrapper": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# subst.sh: a script that substitutes one pattern for": "abs-guide.txt"},{"#+ another in a file,": "abs-guide.txt"},{"#+ i.e., \"sh subst.sh Smith Jones letter.txt\".": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Jones replaces Smith.": "abs-guide.txt"},{"ARGS=3": "abs-guide.txt"},{"E_BADARGS=85": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Script requires 3 arguments.": "abs-guide.txt"},{"# Wrong number of arguments passed to script.": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [ $# -ne \"$ARGS\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Usage: `basename $0` old-pattern new-pattern filename\"": "abs-guide.txt"},{"exit $E_BADARGS": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"old_pattern=$1": "abs-guide.txt"},{"new_pattern=$2": "abs-guide.txt"},{"if [ -f \"$3\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"file_name=$3": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 36. Miscellany": "abs-guide.txt"},{"": "abs-guide.txt"},{"504": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo \"File \\\"$3\\\" does not exist.\"": "abs-guide.txt"},{"exit $E_BADARGS": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"# ----------------------------------------------# Here is where the heavy work gets done.": "abs-guide.txt"},{"sed -e \"s/$old_pattern/$new_pattern/g\" $file_name": "abs-guide.txt"},{"# ----------------------------------------------#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"'s' is, of course, the substitute command in sed,": "abs-guide.txt"},{"and /pattern/ invokes address matching.": "abs-guide.txt"},{"The 'g,' or global flag causes substitution for EVERY": "abs-guide.txt"},{"occurence of $old_pattern on each line, not just the first.": "abs-guide.txt"},{"Read the 'sed' docs for an in-depth explanation.": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit $?": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Redirect the output of this script to write to a file.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 36-3. A generic shell wrapper that writes to a logfile": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# logging-wrapper.sh": "abs-guide.txt"},{"# Generic shell wrapper that performs an operation": "abs-guide.txt"},{"#+ and logs it.": "abs-guide.txt"},{"DEFAULT_LOGFILE=logfile.txt": "abs-guide.txt"},{"# Set the following two variables.": "abs-guide.txt"},{"OPERATION=": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Can be a complex chain of commands,": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"for example an awk script or a pipe . . .": "abs-guide.txt"},{"LOGFILE=": "abs-guide.txt"},{"if [ -z \"$LOGFILE\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"# If not set, default to ...": "abs-guide.txt"},{"LOGFILE=\"$DEFAULT_LOGFILE\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Command-line arguments, if any, for the operation.": "abs-guide.txt"},{"OPTIONS=\"$@\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Log it.": "abs-guide.txt"},{"echo \"`date` + `whoami` + $OPERATION \"$@\"\" >> $LOGFILE": "abs-guide.txt"},{"# Now, do it.": "abs-guide.txt"},{"exec $OPERATION \"$@\"": "abs-guide.txt"},{"# It's necessary to do the logging before the operation.": "abs-guide.txt"},{"# Why?": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 36-4. A shell wrapper around an awk script": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# pr-ascii.sh: Prints a table of ASCII characters.": "abs-guide.txt"},{"START=33": "abs-guide.txt"},{"END=127": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Range of printable ASCII characters (decimal).": "abs-guide.txt"},{"# Will not work for unprintable characters (> 127).": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo \" Decimal": "abs-guide.txt"},{"": "abs-guide.txt"},{"Hex": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 36. Miscellany": "abs-guide.txt"},{"": "abs-guide.txt"},{"Character\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Header.": "abs-guide.txt"},{"": "abs-guide.txt"},{"505": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"echo \" -------": "abs-guide.txt"},{"": "abs-guide.txt"},{"---": "abs-guide.txt"},{"": "abs-guide.txt"},{"---------\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"for ((i=START; i<=END; i++))": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo $i | awk '{printf(\" %3d": "abs-guide.txt"},{"%2x": "abs-guide.txt"},{"%c\\n\", $1, $1, $1)}'": "abs-guide.txt"},{"# The Bash printf builtin will not work in this context:": "abs-guide.txt"},{"#": "abs-guide.txt"},{"printf \"%c\" \"$i\"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Decimal": "abs-guide.txt"},{"------33": "abs-guide.txt"},{"34": "abs-guide.txt"},{"35": "abs-guide.txt"},{"36": "abs-guide.txt"},{"": "abs-guide.txt"},{"Hex": "abs-guide.txt"},{"--21": "abs-guide.txt"},{"22": "abs-guide.txt"},{"23": "abs-guide.txt"},{"24": "abs-guide.txt"},{"": "abs-guide.txt"},{"Character": "abs-guide.txt"},{"--------!": "abs-guide.txt"},{"\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"$": "abs-guide.txt"},{"": "abs-guide.txt"},{"7a": "abs-guide.txt"},{"7b": "abs-guide.txt"},{"7c": "abs-guide.txt"},{"7d": "abs-guide.txt"},{"": "abs-guide.txt"},{"z": "abs-guide.txt"},{"{": "abs-guide.txt"},{"|": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{". . .": "abs-guide.txt"},{"122": "abs-guide.txt"},{"123": "abs-guide.txt"},{"124": "abs-guide.txt"},{"125": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Redirect the output of this script to a file": "abs-guide.txt"},{"#+ or pipe it to \"more\": sh pr-asc.sh | more": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 36-5. A shell wrapper around another awk script": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# Adds up a specified column (of numbers) in the target file.": "abs-guide.txt"},{"# Floating-point (decimal) numbers okay, because awk can handle them.": "abs-guide.txt"},{"ARGS=2": "abs-guide.txt"},{"E_WRONGARGS=85": "abs-guide.txt"},{"if [ $# -ne \"$ARGS\" ] # Check for proper number of command-line args.": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Usage: `basename $0` filename column-number\"": "abs-guide.txt"},{"exit $E_WRONGARGS": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"filename=$1": "abs-guide.txt"},{"column_number=$2": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Passing shell variables to the awk part of the script is a bit tricky.": "abs-guide.txt"},{"One method is to strong-quote the Bash-script variable": "abs-guide.txt"},{"within the awk script.": "abs-guide.txt"},{"$'$BASH_SCRIPT_VAR'": "abs-guide.txt"},{"^": "abs-guide.txt"},{"^": "abs-guide.txt"},{"This is done in the embedded awk script below.": "abs-guide.txt"},{"See the awk documentation for more details.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# A multi-line awk script is here invoked by": "abs-guide.txt"},{"#": "abs-guide.txt"},{"awk '": "abs-guide.txt"},{"#": "abs-guide.txt"},{"...": "abs-guide.txt"},{"#": "abs-guide.txt"},{"...": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 36. Miscellany": "abs-guide.txt"},{"": "abs-guide.txt"},{"506": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"...": "abs-guide.txt"},{"'": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Begin awk script.": "abs-guide.txt"},{"# ----------------------------awk '": "abs-guide.txt"},{"{ total += $'\"${column_number}\"'": "abs-guide.txt"},{"}": "abs-guide.txt"},{"END {": "abs-guide.txt"},{"print total": "abs-guide.txt"},{"}": "abs-guide.txt"},{"' \"$filename\"": "abs-guide.txt"},{"# ----------------------------# End awk script.": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"It may not be safe to pass shell variables to an embedded awk script,": "abs-guide.txt"},{"so Stephane Chazelas proposes the following alternative:": "abs-guide.txt"},{"--------------------------------------awk -v column_number=\"$column_number\" '": "abs-guide.txt"},{"{ total += $column_number": "abs-guide.txt"},{"}": "abs-guide.txt"},{"END {": "abs-guide.txt"},{"print total": "abs-guide.txt"},{"}' \"$filename\"": "abs-guide.txt"},{"---------------------------------------": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"For those scripts needing a single do-it-all tool, a Swiss army knife, there is Perl. Perl combines the": "abs-guide.txt"},{"capabilities of sed and awk, and throws in a large subset of C, to boot. It is modular and contains support for": "abs-guide.txt"},{"everything ranging from object-oriented programming up to and including the kitchen sink. Short Perl scripts": "abs-guide.txt"},{"lend themselves to embedding within shell scripts, and there may be some substance to the claim that Perl can": "abs-guide.txt"},{"totally replace shell scripting (though the author of the ABS Guide remains skeptical).": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 36-6. Perl embedded in a Bash script": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# Shell commands may precede the Perl script.": "abs-guide.txt"},{"echo \"This precedes the embedded Perl script within \\\"$0\\\".\"": "abs-guide.txt"},{"echo \"===============================================================\"": "abs-guide.txt"},{"perl -e 'print \"This line prints from an embedded Perl script.\\n\";'": "abs-guide.txt"},{"# Like sed, Perl also uses the \"-e\" option.": "abs-guide.txt"},{"echo \"===============================================================\"": "abs-guide.txt"},{"echo \"However, the script may also contain shell and system commands.\"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"It is even possible to combine a Bash script and Perl script within the same file. Depending on how the script": "abs-guide.txt"},{"is invoked, either the Bash part or the Perl part will execute.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 36. Miscellany": "abs-guide.txt"},{"": "abs-guide.txt"},{"507": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"Example 36-7. Bash and Perl scripts combined": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# bashandperl.sh": "abs-guide.txt"},{"echo \"Greetings from the Bash part of the script, $0.\"": "abs-guide.txt"},{"# More Bash commands may follow here.": "abs-guide.txt"},{"exit": "abs-guide.txt"},{"# End of Bash part of the script.": "abs-guide.txt"},{"# =======================================================": "abs-guide.txt"},{"#!/usr/bin/perl": "abs-guide.txt"},{"# This part of the script must be invoked with": "abs-guide.txt"},{"#": "abs-guide.txt"},{"perl -x bashandperl.sh": "abs-guide.txt"},{"print \"Greetings from the Perl part of the script, $0.\\n\";": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Perl doesn't seem to like \"echo\" ...": "abs-guide.txt"},{"# More Perl commands may follow here.": "abs-guide.txt"},{"# End of Perl part of the script.": "abs-guide.txt"},{"bash$ bash bashandperl.sh": "abs-guide.txt"},{"Greetings from the Bash part of the script.": "abs-guide.txt"},{"": "abs-guide.txt"},{"bash$ perl -x bashandperl.sh": "abs-guide.txt"},{"Greetings from the Perl part of the script.": "abs-guide.txt"},{"": "abs-guide.txt"},{"It is, of course, possible to embed even more exotic scripting languages within shell wrappers. Python, for": "abs-guide.txt"},{"example ...": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 36-8. Python embedded in a Bash script": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# ex56py.sh": "abs-guide.txt"},{"# Shell commands may precede the Python script.": "abs-guide.txt"},{"echo \"This precedes the embedded Python script within \\\"$0.\\\"\"": "abs-guide.txt"},{"echo \"===============================================================\"": "abs-guide.txt"},{"python -c 'print \"This line prints from an embedded Python script.\\n\";'": "abs-guide.txt"},{"# Unlike sed and perl, Python uses the \"-c\" option.": "abs-guide.txt"},{"python -c 'k = raw_input( \"Hit a key to exit to outer script. \" )'": "abs-guide.txt"},{"echo \"===============================================================\"": "abs-guide.txt"},{"echo \"However, the script may also contain shell and system commands.\"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Wrapping a script around mplayer and the Google's translation server, you can create something that talks": "abs-guide.txt"},{"back to you.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 36-9. A script that speaks": "abs-guide.txt"},{"Chapter 36. Miscellany": "abs-guide.txt"},{"": "abs-guide.txt"},{"508": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Courtesy of:": "abs-guide.txt"},{"#": "abs-guide.txt"},{"http://elinux.org/RPi_Text_to_Speech_(Speech_Synthesis)": "abs-guide.txt"},{"# You must be on-line for this script to work,": "abs-guide.txt"},{"#+ so you can access the Google translation server.": "abs-guide.txt"},{"# Of course, mplayer must be present on your computer.": "abs-guide.txt"},{"speak()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"local IFS=+": "abs-guide.txt"},{"# Invoke mplayer, then connect to Google translation server.": "abs-guide.txt"},{"/usr/bin/mplayer -ao alsa -really-quiet -noconsolecontrols \\": "abs-guide.txt"},{"\"http://translate.google.com/translate_tts?tl=en&q=\"$*\"\"": "abs-guide.txt"},{"# Google translates, but can also speak.": "abs-guide.txt"},{"}": "abs-guide.txt"},{"LINES=4": "abs-guide.txt"},{"spk=$(tail -$LINES $0) # Tail end of same script!": "abs-guide.txt"},{"speak \"$spk\"": "abs-guide.txt"},{"exit": "abs-guide.txt"},{"# Browns. Nice talking to you.": "abs-guide.txt"},{"": "abs-guide.txt"},{"One interesting example of a complex shell wrapper is Martin Matusiak's undvd script, which provides an": "abs-guide.txt"},{"easy-to-use command-line interface to the complex mencoder utility. Another example is Itzchak Rehberg's": "abs-guide.txt"},{"Ext3Undel, a set of scripts to recover deleted file on an ext3 filesystem.": "abs-guide.txt"},{"": "abs-guide.txt"},{"36.3. Tests and Comparisons: Alternatives": "abs-guide.txt"},{"For tests, the [[ ]] construct may be more appropriate than [ ]. Likewise, arithmetic comparisons might": "abs-guide.txt"},{"benefit from the (( )) construct.": "abs-guide.txt"},{"a=8": "abs-guide.txt"},{"# All of the comparisons below are equivalent.": "abs-guide.txt"},{"test \"$a\" -lt 16 && echo \"yes, $a < 16\"": "abs-guide.txt"},{"/bin/test \"$a\" -lt 16 && echo \"yes, $a < 16\"": "abs-guide.txt"},{"[ \"$a\" -lt 16 ] && echo \"yes, $a < 16\"": "abs-guide.txt"},{"[[ $a -lt 16 ]] && echo \"yes, $a < 16\"": "abs-guide.txt"},{"(( a < 16 )) && echo \"yes, $a < 16\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# \"and list\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Quoting variables within": "abs-guide.txt"},{"# [[ ]] and (( )) not necessary.": "abs-guide.txt"},{"": "abs-guide.txt"},{"city=\"New York\"": "abs-guide.txt"},{"# Again, all of the comparisons below are equivalent.": "abs-guide.txt"},{"test \"$city\" \\< Paris && echo \"Yes, Paris is greater than $city\"": "abs-guide.txt"},{"# Greater ASCII order.": "abs-guide.txt"},{"/bin/test \"$city\" \\< Paris && echo \"Yes, Paris is greater than $city\"": "abs-guide.txt"},{"[ \"$city\" \\< Paris ] && echo \"Yes, Paris is greater than $city\"": "abs-guide.txt"},{"[[ $city < Paris ]] && echo \"Yes, Paris is greater than $city\"": "abs-guide.txt"},{"# Need not quote $city.": "abs-guide.txt"},{"# Thank you, S.C.": "abs-guide.txt"},{"": "abs-guide.txt"},{"36.4. Recursion: a script calling itself": "abs-guide.txt"},{"Can a script recursively call itself? Indeed.": "abs-guide.txt"},{"Chapter 36. Miscellany": "abs-guide.txt"},{"": "abs-guide.txt"},{"509": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"Example 36-10. A (useless) script that recursively calls itself": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# recurse.sh": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Can a script recursively call itself?": "abs-guide.txt"},{"Yes, but is this of any practical use?": "abs-guide.txt"},{"(See the following.)": "abs-guide.txt"},{"": "abs-guide.txt"},{"RANGE=10": "abs-guide.txt"},{"MAXVAL=9": "abs-guide.txt"},{"i=$RANDOM": "abs-guide.txt"},{"let \"i %= $RANGE\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Generate a random number between 0 and $RANGE - 1.": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [ \"$i\" -lt \"$MAXVAL\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"i = $i\"": "abs-guide.txt"},{"./$0": "abs-guide.txt"},{"# Script recursively spawns a new instance of itself.": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# Each child script does the same, until": "abs-guide.txt"},{"#+ a generated $i equals $MAXVAL.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Using a \"while\" loop instead of an \"if/then\" test causes problems.": "abs-guide.txt"},{"Explain why.": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Note:": "abs-guide.txt"},{"---This script must have execute permission for it to work properly.": "abs-guide.txt"},{"This is the case even if it is invoked by an \"sh\" command.": "abs-guide.txt"},{"Explain why.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 36-11. A (useful) script that recursively calls itself": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# pb.sh: phone book": "abs-guide.txt"},{"# Written by Rick Boivie, and used with permission.": "abs-guide.txt"},{"# Modifications by ABS Guide author.": "abs-guide.txt"},{"MINARGS=1": "abs-guide.txt"},{"# Script needs at least one argument.": "abs-guide.txt"},{"DATAFILE=./phonebook": "abs-guide.txt"},{"# A data file in current working directory": "abs-guide.txt"},{"#+ named \"phonebook\" must exist.": "abs-guide.txt"},{"PROGNAME=$0": "abs-guide.txt"},{"E_NOARGS=70": "abs-guide.txt"},{"# No arguments error.": "abs-guide.txt"},{"if [ $# -lt $MINARGS ]; then": "abs-guide.txt"},{"echo \"Usage: \"$PROGNAME\" data-to-look-up\"": "abs-guide.txt"},{"exit $E_NOARGS": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [ $# -eq $MINARGS ]; then": "abs-guide.txt"},{"grep $1 \"$DATAFILE\"": "abs-guide.txt"},{"# 'grep' prints an error message if $DATAFILE not present.": "abs-guide.txt"},{"else": "abs-guide.txt"},{"( shift; \"$PROGNAME\" $* ) | grep $1": "abs-guide.txt"},{"# Script recursively calls itself.": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 36. Miscellany": "abs-guide.txt"},{"": "abs-guide.txt"},{"510": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Script exits here.": "abs-guide.txt"},{"# Therefore, it's o.k. to put": "abs-guide.txt"},{"#+ non-hashmarked comments and data after this point.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# -----------------------------------------------------------------------Sample \"phonebook\" datafile:": "abs-guide.txt"},{"John Doe": "abs-guide.txt"},{"1555 Main St., Baltimore, MD 21228": "abs-guide.txt"},{"(410) 222-3333": "abs-guide.txt"},{"Mary Moe": "abs-guide.txt"},{"9899 Jones Blvd., Warren, NH 03787": "abs-guide.txt"},{"(603) 898-3232": "abs-guide.txt"},{"Richard Roe": "abs-guide.txt"},{"856 E. 7th St., New York, NY 10009": "abs-guide.txt"},{"(212) 333-4567": "abs-guide.txt"},{"Sam Roe": "abs-guide.txt"},{"956 E. 8th St., New York, NY 10009": "abs-guide.txt"},{"(212) 444-5678": "abs-guide.txt"},{"Zoe Zenobia": "abs-guide.txt"},{"4481 N. Baker St., San Francisco, SF 94338 (415) 501-1631": "abs-guide.txt"},{"# -----------------------------------------------------------------------$bash pb.sh Roe": "abs-guide.txt"},{"Richard Roe": "abs-guide.txt"},{"856 E. 7th St., New York, NY 10009": "abs-guide.txt"},{"Sam Roe": "abs-guide.txt"},{"956 E. 8th St., New York, NY 10009": "abs-guide.txt"},{"": "abs-guide.txt"},{"(212) 333-4567": "abs-guide.txt"},{"(212) 444-5678": "abs-guide.txt"},{"": "abs-guide.txt"},{"$bash pb.sh Roe Sam": "abs-guide.txt"},{"Sam Roe": "abs-guide.txt"},{"956 E. 8th St., New York, NY 10009": "abs-guide.txt"},{"": "abs-guide.txt"},{"(212) 444-5678": "abs-guide.txt"},{"": "abs-guide.txt"},{"# When more than one argument is passed to this script,": "abs-guide.txt"},{"#+ it prints *only* the line(s) containing all the arguments.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 36-12. Another (useful) script that recursively calls itself": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# usrmnt.sh, written by Anthony Richardson": "abs-guide.txt"},{"# Used in ABS Guide with permission.": "abs-guide.txt"},{"# usage:": "abs-guide.txt"},{"usrmnt.sh": "abs-guide.txt"},{"# description: mount device, invoking user must be listed in the": "abs-guide.txt"},{"#": "abs-guide.txt"},{"MNTUSERS group in the /etc/sudoers file.": "abs-guide.txt"},{"# ---------------------------------------------------------# This is a usermount script that reruns itself using sudo.": "abs-guide.txt"},{"# A user with the proper permissions only has to type": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"usermount /dev/fd0 /mnt/floppy": "abs-guide.txt"},{"": "abs-guide.txt"},{"# instead of": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"sudo usermount /dev/fd0 /mnt/floppy": "abs-guide.txt"},{"": "abs-guide.txt"},{"# I use this same technique for all of my": "abs-guide.txt"},{"#+ sudo scripts, because I find it convenient.": "abs-guide.txt"},{"# ---------------------------------------------------------# If SUDO_COMMAND variable is not set we are not being run through": "abs-guide.txt"},{"#+ sudo, so rerun ourselves. Pass the user's real and group id . . .": "abs-guide.txt"},{"if [ -z \"$SUDO_COMMAND\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"mntusr=$(id -u) grpusr=$(id -g) sudo $0 $*": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# We will only get here if we are being run by sudo.": "abs-guide.txt"},{"/bin/mount $* -o uid=$mntusr,gid=$grpusr": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 36. Miscellany": "abs-guide.txt"},{"": "abs-guide.txt"},{"511": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"# Additional notes (from the author of this script):": "abs-guide.txt"},{"# ------------------------------------------------# 1) Linux allows the \"users\" option in the /etc/fstab": "abs-guide.txt"},{"#": "abs-guide.txt"},{"file so that any user can mount removable media.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"But, on a server, I like to allow only a few": "abs-guide.txt"},{"#": "abs-guide.txt"},{"individuals access to removable media.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"I find using sudo gives me more control.": "abs-guide.txt"},{"# 2) I also find sudo to be more convenient than": "abs-guide.txt"},{"#": "abs-guide.txt"},{"accomplishing this task through groups.": "abs-guide.txt"},{"# 3) This method gives anyone with proper permissions": "abs-guide.txt"},{"#": "abs-guide.txt"},{"root access to the mount command, so be careful": "abs-guide.txt"},{"#": "abs-guide.txt"},{"about who you allow access.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"You can get finer control over which access can be mounted": "abs-guide.txt"},{"#": "abs-guide.txt"},{"by using this same technique in separate mntfloppy, mntcdrom,": "abs-guide.txt"},{"#": "abs-guide.txt"},{"and mntsamba scripts.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Too many levels of recursion can exhaust the script's stack space, causing a segfault.": "abs-guide.txt"},{"": "abs-guide.txt"},{"36.5. \"Colorizing\" Scripts": "abs-guide.txt"},{"The ANSI [126] escape sequences set screen attributes, such as bold text, and color of foreground and": "abs-guide.txt"},{"background. DOS batch files commonly used ANSI escape codes for color output, and so can Bash scripts.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 36-13. A \"colorized\" address database": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# ex30a.sh: \"Colorized\" version of ex30.sh.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Crude address database": "abs-guide.txt"},{"": "abs-guide.txt"},{"clear": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Clear the screen.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo -n \"": "abs-guide.txt"},{"\"": "abs-guide.txt"},{"echo -e '\\E[37;44m'\"\\033[1mContact List\\033[0m\"": "abs-guide.txt"},{"# White on blue background": "abs-guide.txt"},{"echo; echo": "abs-guide.txt"},{"echo -e \"\\033[1mChoose one of the following persons:\\033[0m\"": "abs-guide.txt"},{"# Bold": "abs-guide.txt"},{"tput sgr0": "abs-guide.txt"},{"# Reset attributes.": "abs-guide.txt"},{"echo \"(Enter only the first letter of name.)\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo -en '\\E[47;34m'\"\\033[1mE\\033[0m\"": "abs-guide.txt"},{"# Blue": "abs-guide.txt"},{"tput sgr0": "abs-guide.txt"},{"# Reset colors to \"normal.\"": "abs-guide.txt"},{"echo \"vans, Roland\"": "abs-guide.txt"},{"# \"[E]vans, Roland\"": "abs-guide.txt"},{"echo -en '\\E[47;35m'\"\\033[1mJ\\033[0m\"": "abs-guide.txt"},{"# Magenta": "abs-guide.txt"},{"tput sgr0": "abs-guide.txt"},{"echo \"ambalaya, Mildred\"": "abs-guide.txt"},{"echo -en '\\E[47;32m'\"\\033[1mS\\033[0m\"": "abs-guide.txt"},{"# Green": "abs-guide.txt"},{"tput sgr0": "abs-guide.txt"},{"echo \"mith, Julie\"": "abs-guide.txt"},{"echo -en '\\E[47;31m'\"\\033[1mZ\\033[0m\"": "abs-guide.txt"},{"# Red": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 36. Miscellany": "abs-guide.txt"},{"": "abs-guide.txt"},{"512": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"tput sgr0": "abs-guide.txt"},{"echo \"ane, Morris\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"read person": "abs-guide.txt"},{"case \"$person\" in": "abs-guide.txt"},{"# Note variable is quoted.": "abs-guide.txt"},{"\"E\" | \"e\" )": "abs-guide.txt"},{"# Accept upper or lowercase input.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"Roland Evans\"": "abs-guide.txt"},{"echo \"4321 Flash Dr.\"": "abs-guide.txt"},{"echo \"Hardscrabble, CO 80753\"": "abs-guide.txt"},{"echo \"(303) 734-9874\"": "abs-guide.txt"},{"echo \"(303) 734-9892 fax\"": "abs-guide.txt"},{"echo \"revans@zzy.net\"": "abs-guide.txt"},{"echo \"Business partner & old friend\"": "abs-guide.txt"},{";;": "abs-guide.txt"},{"\"J\" | \"j\" )": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"Mildred Jambalaya\"": "abs-guide.txt"},{"echo \"249 E. 7th St., Apt. 19\"": "abs-guide.txt"},{"echo \"New York, NY 10009\"": "abs-guide.txt"},{"echo \"(212) 533-2814\"": "abs-guide.txt"},{"echo \"(212) 533-9972 fax\"": "abs-guide.txt"},{"echo \"milliej@loisaida.com\"": "abs-guide.txt"},{"echo \"Girlfriend\"": "abs-guide.txt"},{"echo \"Birthday: Feb. 11\"": "abs-guide.txt"},{";;": "abs-guide.txt"},{"# Add info for Smith & Zane later.": "abs-guide.txt"},{"* )": "abs-guide.txt"},{"# Default option.": "abs-guide.txt"},{"# Empty input (hitting RETURN) fits here, too.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"Not yet in database.\"": "abs-guide.txt"},{";;": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"tput sgr0": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Reset colors to \"normal.\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 36-14. Drawing a box": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# Draw-box.sh: Drawing a box using ASCII characters.": "abs-guide.txt"},{"# Script by Stefano Palmeri, with minor editing by document author.": "abs-guide.txt"},{"# Minor edits suggested by Jim Angstadt.": "abs-guide.txt"},{"# Used in the ABS Guide with permission.": "abs-guide.txt"},{"": "abs-guide.txt"},{"######################################################################": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 36. Miscellany": "abs-guide.txt"},{"": "abs-guide.txt"},{"513": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"###": "abs-guide.txt"},{"": "abs-guide.txt"},{"draw_box function doc": "abs-guide.txt"},{"": "abs-guide.txt"},{"###": "abs-guide.txt"},{"": "abs-guide.txt"},{"# The \"draw_box\" function lets the user": "abs-guide.txt"},{"#+ draw a box in a terminal.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Usage: draw_box ROW COLUMN HEIGHT WIDTH [COLOR]": "abs-guide.txt"},{"# ROW and COLUMN represent the position": "abs-guide.txt"},{"#+ of the upper left angle of the box you're going to draw.": "abs-guide.txt"},{"# ROW and COLUMN must be greater than 0": "abs-guide.txt"},{"#+ and less than current terminal dimension.": "abs-guide.txt"},{"# HEIGHT is the number of rows of the box, and must be > 0.": "abs-guide.txt"},{"# HEIGHT + ROW must be <= than current terminal height.": "abs-guide.txt"},{"# WIDTH is the number of columns of the box and must be > 0.": "abs-guide.txt"},{"# WIDTH + COLUMN must be <= than current terminal width.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# E.g.: If your terminal dimension is 20x80,": "abs-guide.txt"},{"# draw_box 2 3 10 45 is good": "abs-guide.txt"},{"# draw_box 2 3 19 45 has bad HEIGHT value (19+2 > 20)": "abs-guide.txt"},{"# draw_box 2 3 18 78 has bad WIDTH value (78+3 > 80)": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# COLOR is the color of the box frame.": "abs-guide.txt"},{"# This is the 5th argument and is optional.": "abs-guide.txt"},{"# 0=black 1=red 2=green 3=tan 4=blue 5=purple 6=cyan 7=white.": "abs-guide.txt"},{"# If you pass the function bad arguments,": "abs-guide.txt"},{"#+ it will just exit with code 65,": "abs-guide.txt"},{"#+ and no messages will be printed on stderr.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Clear the terminal before you start to draw a box.": "abs-guide.txt"},{"# The clear command is not contained within the function.": "abs-guide.txt"},{"# This allows the user to draw multiple boxes, even overlapping ones.": "abs-guide.txt"},{"### end of draw_box function doc ###": "abs-guide.txt"},{"######################################################################": "abs-guide.txt"},{"draw_box(){": "abs-guide.txt"},{"#=============#": "abs-guide.txt"},{"HORZ=\"-\"": "abs-guide.txt"},{"VERT=\"|\"": "abs-guide.txt"},{"CORNER_CHAR=\"+\"": "abs-guide.txt"},{"MINARGS=4": "abs-guide.txt"},{"E_BADARGS=65": "abs-guide.txt"},{"#=============#": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [ $# -lt \"$MINARGS\" ]; then": "abs-guide.txt"},{"exit $E_BADARGS": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"# If args are less than 4, exit.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Looking for non digit chars in arguments.": "abs-guide.txt"},{"# Probably it could be done better (exercise for the reader?).": "abs-guide.txt"},{"if echo $@ | tr -d [:blank:] | tr -d [:digit:] | grep . &> /dev/null; then": "abs-guide.txt"},{"exit $E_BADARGS": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"BOX_HEIGHT=`expr $3 - 1`": "abs-guide.txt"},{"BOX_WIDTH=`expr $4 - 1`": "abs-guide.txt"},{"T_ROWS=`tput lines`": "abs-guide.txt"},{"T_COLS=`tput cols`": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"-1 correction needed because angle char \"+\"": "abs-guide.txt"},{"is a part of both box height and width.": "abs-guide.txt"},{"Define current terminal dimension": "abs-guide.txt"},{"in rows and columns.": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [ $1 -lt 1 ] || [ $1 -gt $T_ROWS ]; then": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 36. Miscellany": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Start checking if arguments": "abs-guide.txt"},{"": "abs-guide.txt"},{"514": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"exit $E_BADARGS": "abs-guide.txt"},{"#+ are correct.": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"if [ $2 -lt 1 ] || [ $2 -gt $T_COLS ]; then": "abs-guide.txt"},{"exit $E_BADARGS": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"if [ `expr $1 + $BOX_HEIGHT + 1` -gt $T_ROWS ]; then": "abs-guide.txt"},{"exit $E_BADARGS": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"if [ `expr $2 + $BOX_WIDTH + 1` -gt $T_COLS ]; then": "abs-guide.txt"},{"exit $E_BADARGS": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"if [ $3 -lt 1 ] || [ $4 -lt 1 ]; then": "abs-guide.txt"},{"exit $E_BADARGS": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# End checking arguments.": "abs-guide.txt"},{"plot_char(){": "abs-guide.txt"},{"echo -e \"\\E[${1};${2}H\"$3": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Function within a function.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo -ne \"\\E[3${5}m\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Set box frame color, if defined.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# start drawing the box": "abs-guide.txt"},{"count=1": "abs-guide.txt"},{"for (( r=$1; count<=$BOX_HEIGHT; r++)); do": "abs-guide.txt"},{"plot_char $r $2 $VERT": "abs-guide.txt"},{"let count=count+1": "abs-guide.txt"},{"done": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Draw vertical lines using": "abs-guide.txt"},{"#+ plot_char function.": "abs-guide.txt"},{"": "abs-guide.txt"},{"count=1": "abs-guide.txt"},{"c=`expr $2 + $BOX_WIDTH`": "abs-guide.txt"},{"for (( r=$1; count<=$BOX_HEIGHT; r++)); do": "abs-guide.txt"},{"plot_char $r $c $VERT": "abs-guide.txt"},{"let count=count+1": "abs-guide.txt"},{"done": "abs-guide.txt"},{"count=1": "abs-guide.txt"},{"for (( c=$2; count<=$BOX_WIDTH; c++)); do": "abs-guide.txt"},{"plot_char $1 $c $HORZ": "abs-guide.txt"},{"let count=count+1": "abs-guide.txt"},{"done": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Draw horizontal lines using": "abs-guide.txt"},{"#+ plot_char function.": "abs-guide.txt"},{"": "abs-guide.txt"},{"count=1": "abs-guide.txt"},{"r=`expr $1 + $BOX_HEIGHT`": "abs-guide.txt"},{"for (( c=$2; count<=$BOX_WIDTH; c++)); do": "abs-guide.txt"},{"plot_char $r $c $HORZ": "abs-guide.txt"},{"let count=count+1": "abs-guide.txt"},{"done": "abs-guide.txt"},{"plot_char": "abs-guide.txt"},{"plot_char": "abs-guide.txt"},{"plot_char": "abs-guide.txt"},{"plot_char": "abs-guide.txt"},{"": "abs-guide.txt"},{"$1 $2 $CORNER_CHAR": "abs-guide.txt"},{"# Draw box angles.": "abs-guide.txt"},{"$1 `expr $2 + $BOX_WIDTH` $CORNER_CHAR": "abs-guide.txt"},{"`expr $1 + $BOX_HEIGHT` $2 $CORNER_CHAR": "abs-guide.txt"},{"`expr $1 + $BOX_HEIGHT` `expr $2 + $BOX_WIDTH` $CORNER_CHAR": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo -ne \"\\E[0m\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Restore old colors.": "abs-guide.txt"},{"": "abs-guide.txt"},{"P_ROWS=`expr $T_ROWS - 1`": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Put the prompt at bottom of the terminal.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo -e \"\\E[${P_ROWS};1H\"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 36. Miscellany": "abs-guide.txt"},{"": "abs-guide.txt"},{"515": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# Now, let's try drawing a box.": "abs-guide.txt"},{"clear": "abs-guide.txt"},{"# Clear the terminal.": "abs-guide.txt"},{"R=2": "abs-guide.txt"},{"# Row": "abs-guide.txt"},{"C=3": "abs-guide.txt"},{"# Column": "abs-guide.txt"},{"H=10": "abs-guide.txt"},{"# Height": "abs-guide.txt"},{"W=45": "abs-guide.txt"},{"# Width": "abs-guide.txt"},{"col=1": "abs-guide.txt"},{"# Color (red)": "abs-guide.txt"},{"draw_box $R $C $H $W $col": "abs-guide.txt"},{"# Draw the box.": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"# Exercise:": "abs-guide.txt"},{"# -------# Add the option of printing text within the drawn box.": "abs-guide.txt"},{"": "abs-guide.txt"},{"The simplest, and perhaps most useful ANSI escape sequence is bold text, \\033[1m ... \\033[0m. The \\033": "abs-guide.txt"},{"represents an escape, the \"[1\" turns on the bold attribute, while the \"[0\" switches it off. The \"m\" terminates": "abs-guide.txt"},{"each term of the escape sequence.": "abs-guide.txt"},{"bash$ echo -e \"\\033[1mThis is bold text.\\033[0m\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"A similar escape sequence switches on the underline attribute (on an rxvt and an aterm).": "abs-guide.txt"},{"bash$ echo -e \"\\033[4mThis is underlined text.\\033[0m\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"With an echo, the -e option enables the escape sequences.": "abs-guide.txt"},{"Other escape sequences change the text and/or background color.": "abs-guide.txt"},{"bash$ echo -e '\\E[34;47mThis prints in blue.'; tput sgr0": "abs-guide.txt"},{"": "abs-guide.txt"},{"bash$ echo -e '\\E[33;44m'\"yellow text on blue background\"; tput sgr0": "abs-guide.txt"},{"": "abs-guide.txt"},{"bash$ echo -e '\\E[1;33;44m'\"BOLD yellow text on blue background\"; tput sgr0": "abs-guide.txt"},{"": "abs-guide.txt"},{"It's usually advisable to set the bold attribute for light-colored foreground text.": "abs-guide.txt"},{"The tput sgr0 restores the terminal settings to normal. Omitting this lets all subsequent output from that": "abs-guide.txt"},{"particular terminal remain blue.": "abs-guide.txt"},{"Since tput sgr0 fails to restore terminal settings under certain circumstances, echo -ne \\E[0m may be a": "abs-guide.txt"},{"better choice.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Use the following template for writing colored text on a colored background.": "abs-guide.txt"},{"echo -e '\\E[COLOR1;COLOR2mSome text goes here.'": "abs-guide.txt"},{"The \"\\E[\" begins the escape sequence. The semicolon-separated numbers \"COLOR1\" and \"COLOR2\"": "abs-guide.txt"},{"specify a foreground and a background color, according to the table below. (The order of the numbers does": "abs-guide.txt"},{"not matter, since the foreground and background numbers fall in non-overlapping ranges.) The \"m\"": "abs-guide.txt"},{"terminates the escape sequence, and the text begins immediately after that.": "abs-guide.txt"},{"Chapter 36. Miscellany": "abs-guide.txt"},{"": "abs-guide.txt"},{"516": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"Note also that single quotes enclose the remainder of the command sequence following the echo -e.": "abs-guide.txt"},{"The numbers in the following table work for an rxvt terminal. Results may vary for other terminal emulators.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Table 36-1. Numbers representing colors in Escape Sequences": "abs-guide.txt"},{"Color": "abs-guide.txt"},{"black": "abs-guide.txt"},{"red": "abs-guide.txt"},{"green": "abs-guide.txt"},{"yellow": "abs-guide.txt"},{"blue": "abs-guide.txt"},{"magenta": "abs-guide.txt"},{"cyan": "abs-guide.txt"},{"white": "abs-guide.txt"},{"": "abs-guide.txt"},{"Foreground": "abs-guide.txt"},{"30": "abs-guide.txt"},{"31": "abs-guide.txt"},{"32": "abs-guide.txt"},{"33": "abs-guide.txt"},{"34": "abs-guide.txt"},{"35": "abs-guide.txt"},{"36": "abs-guide.txt"},{"37": "abs-guide.txt"},{"": "abs-guide.txt"},{"Background": "abs-guide.txt"},{"40": "abs-guide.txt"},{"41": "abs-guide.txt"},{"42": "abs-guide.txt"},{"43": "abs-guide.txt"},{"44": "abs-guide.txt"},{"45": "abs-guide.txt"},{"46": "abs-guide.txt"},{"47": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 36-15. Echoing colored text": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# color-echo.sh: Echoing text messages in color.": "abs-guide.txt"},{"# Modify this script for your own purposes.": "abs-guide.txt"},{"# It's easier than hand-coding color.": "abs-guide.txt"},{"black='\\E[30;47m'": "abs-guide.txt"},{"red='\\E[31;47m'": "abs-guide.txt"},{"green='\\E[32;47m'": "abs-guide.txt"},{"yellow='\\E[33;47m'": "abs-guide.txt"},{"blue='\\E[34;47m'": "abs-guide.txt"},{"magenta='\\E[35;47m'": "abs-guide.txt"},{"cyan='\\E[36;47m'": "abs-guide.txt"},{"white='\\E[37;47m'": "abs-guide.txt"},{"": "abs-guide.txt"},{"alias Reset=\"tput sgr0\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Reset text attributes to normal": "abs-guide.txt"},{"#+ without clearing screen.": "abs-guide.txt"},{"": "abs-guide.txt"},{"cecho ()": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Color-echo.": "abs-guide.txt"},{"# Argument $1 = message": "abs-guide.txt"},{"# Argument $2 = color": "abs-guide.txt"},{"": "abs-guide.txt"},{"{": "abs-guide.txt"},{"local default_msg=\"No message passed.\"": "abs-guide.txt"},{"# Doesn't really need to be a local variable.": "abs-guide.txt"},{"message=${1:-$default_msg}": "abs-guide.txt"},{"color=${2:-$black}": "abs-guide.txt"},{"echo -e \"$color\"": "abs-guide.txt"},{"echo \"$message\"": "abs-guide.txt"},{"Reset": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Defaults to default message.": "abs-guide.txt"},{"# Defaults to black, if not specified.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Reset to normal.": "abs-guide.txt"},{"": "abs-guide.txt"},{"return": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 36. Miscellany": "abs-guide.txt"},{"": "abs-guide.txt"},{"517": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Now, let's try it out.": "abs-guide.txt"},{"# ---------------------------------------------------cecho \"Feeling blue...\" $blue": "abs-guide.txt"},{"cecho \"Magenta looks more like purple.\" $magenta": "abs-guide.txt"},{"cecho \"Green with envy.\" $green": "abs-guide.txt"},{"cecho \"Seeing red?\" $red": "abs-guide.txt"},{"cecho \"Cyan, more familiarly known as aqua.\" $cyan": "abs-guide.txt"},{"cecho \"No color passed (defaults to black).\"": "abs-guide.txt"},{"# Missing $color argument.": "abs-guide.txt"},{"cecho \"\\\"Empty\\\" color passed (defaults to black).\" \"\"": "abs-guide.txt"},{"# Empty $color argument.": "abs-guide.txt"},{"cecho": "abs-guide.txt"},{"# Missing $message and $color arguments.": "abs-guide.txt"},{"cecho \"\" \"\"": "abs-guide.txt"},{"# Empty $message and $color arguments.": "abs-guide.txt"},{"# ---------------------------------------------------echo": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Exercises:": "abs-guide.txt"},{"--------1) Add the \"bold\" attribute to the 'cecho ()' function.": "abs-guide.txt"},{"2) Add options for colored backgrounds.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 36-16. A \"horserace\" game": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# horserace.sh: Very simple horserace simulation.": "abs-guide.txt"},{"# Author: Stefano Palmeri": "abs-guide.txt"},{"# Used with permission.": "abs-guide.txt"},{"################################################################": "abs-guide.txt"},{"# Goals of the script:": "abs-guide.txt"},{"# playing with escape sequences and terminal colors.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Exercise:": "abs-guide.txt"},{"# Edit the script to make it run less randomly,": "abs-guide.txt"},{"#+ set up a fake betting shop . . .": "abs-guide.txt"},{"# Um . . . um . . . it's starting to remind me of a movie . . .": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# The script gives each horse a random handicap.": "abs-guide.txt"},{"# The odds are calculated upon horse handicap": "abs-guide.txt"},{"#+ and are expressed in European(?) style.": "abs-guide.txt"},{"# E.g., odds=3.75 means that if you bet $1 and win,": "abs-guide.txt"},{"#+ you receive $3.75.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# The script has been tested with a GNU/Linux OS,": "abs-guide.txt"},{"#+ using xterm and rxvt, and konsole.": "abs-guide.txt"},{"# On a machine with an AMD 900 MHz processor,": "abs-guide.txt"},{"#+ the average race time is 75 seconds.": "abs-guide.txt"},{"# On faster computers the race time would be lower.": "abs-guide.txt"},{"# So, if you want more suspense, reset the USLEEP_ARG variable.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Script by Stefano Palmeri.": "abs-guide.txt"},{"################################################################": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 36. Miscellany": "abs-guide.txt"},{"": "abs-guide.txt"},{"518": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"E_RUNERR=65": "abs-guide.txt"},{"# Check if md5sum and bc are installed.": "abs-guide.txt"},{"if ! which bc &> /dev/null; then": "abs-guide.txt"},{"echo bc is not installed.": "abs-guide.txt"},{"echo \"Can\\'t run . . . \"": "abs-guide.txt"},{"exit $E_RUNERR": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"if ! which md5sum &> /dev/null; then": "abs-guide.txt"},{"echo md5sum is not installed.": "abs-guide.txt"},{"echo \"Can\\'t run . . . \"": "abs-guide.txt"},{"exit $E_RUNERR": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# Set the following variable to slow down script execution.": "abs-guide.txt"},{"# It will be passed as the argument for usleep (man usleep)": "abs-guide.txt"},{"#+ and is expressed in microseconds (500000 = half a second).": "abs-guide.txt"},{"USLEEP_ARG=0": "abs-guide.txt"},{"# Clean up the temp directory, restore terminal cursor and": "abs-guide.txt"},{"#+ terminal colors -- if script interrupted by Ctl-C.": "abs-guide.txt"},{"trap 'echo -en \"\\E[?25h\"; echo -en \"\\E[0m\"; stty echo;\\": "abs-guide.txt"},{"tput cup 20 0; rm -fr $HORSE_RACE_TMP_DIR' TERM EXIT": "abs-guide.txt"},{"# See the chapter on debugging for an explanation of 'trap.'": "abs-guide.txt"},{"# Set a unique (paranoid) name for the temp directory the script needs.": "abs-guide.txt"},{"HORSE_RACE_TMP_DIR=$HOME/.horserace-`date +%s`-`head -c10 /dev/urandom \\": "abs-guide.txt"},{"| md5sum | head -c30`": "abs-guide.txt"},{"# Create the temp directory and move right in.": "abs-guide.txt"},{"mkdir $HORSE_RACE_TMP_DIR": "abs-guide.txt"},{"cd $HORSE_RACE_TMP_DIR": "abs-guide.txt"},{"": "abs-guide.txt"},{"# This function moves the cursor to line $1 column $2 and then prints $3.": "abs-guide.txt"},{"# E.g.: \"move_and_echo 5 10 linux\" is equivalent to": "abs-guide.txt"},{"#+ \"tput cup 4 9; echo linux\", but with one command instead of two.": "abs-guide.txt"},{"# Note: \"tput cup\" defines 0 0 the upper left angle of the terminal,": "abs-guide.txt"},{"#+ echo defines 1 1 the upper left angle of the terminal.": "abs-guide.txt"},{"move_and_echo() {": "abs-guide.txt"},{"echo -ne \"\\E[${1};${2}H\"\"$3\"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"# Function to generate a pseudo-random number between 1 and 9.": "abs-guide.txt"},{"random_1_9 ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"head -c10 /dev/urandom | md5sum | tr -d [a-z] | tr -d 0 | cut -c1": "abs-guide.txt"},{"}": "abs-guide.txt"},{"# Two functions that simulate \"movement,\" when drawing the horses.": "abs-guide.txt"},{"draw_horse_one() {": "abs-guide.txt"},{"echo -n \" \"//$MOVE_HORSE//": "abs-guide.txt"},{"}": "abs-guide.txt"},{"draw_horse_two(){": "abs-guide.txt"},{"echo -n \" \"\\\\\\\\$MOVE_HORSE\\\\\\\\": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Define current terminal dimension.": "abs-guide.txt"},{"N_COLS=`tput cols`": "abs-guide.txt"},{"N_LINES=`tput lines`": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 36. Miscellany": "abs-guide.txt"},{"": "abs-guide.txt"},{"519": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# Need at least a 20-LINES X 80-COLUMNS terminal. Check it.": "abs-guide.txt"},{"if [ $N_COLS -lt 80 ] || [ $N_LINES -lt 20 ]; then": "abs-guide.txt"},{"echo \"`basename $0` needs a 80-cols X 20-lines terminal.\"": "abs-guide.txt"},{"echo \"Your terminal is ${N_COLS}-cols X ${N_LINES}-lines.\"": "abs-guide.txt"},{"exit $E_RUNERR": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Start drawing the race field.": "abs-guide.txt"},{"# Need a string of 80 chars. See below.": "abs-guide.txt"},{"BLANK80=`seq -s \"\" 100 | head -c80`": "abs-guide.txt"},{"clear": "abs-guide.txt"},{"# Set foreground and background colors to white.": "abs-guide.txt"},{"echo -ne '\\E[37;47m'": "abs-guide.txt"},{"# Move the cursor on the upper left angle of the terminal.": "abs-guide.txt"},{"tput cup 0 0": "abs-guide.txt"},{"# Draw six white lines.": "abs-guide.txt"},{"for n in `seq 5`; do": "abs-guide.txt"},{"echo $BLANK80": "abs-guide.txt"},{"# Use the 80 chars string to colorize the terminal.": "abs-guide.txt"},{"done": "abs-guide.txt"},{"# Sets foreground color to black.": "abs-guide.txt"},{"echo -ne '\\E[30m'": "abs-guide.txt"},{"move_and_echo": "abs-guide.txt"},{"move_and_echo": "abs-guide.txt"},{"move_and_echo": "abs-guide.txt"},{"move_and_echo": "abs-guide.txt"},{"move_and_echo": "abs-guide.txt"},{"move_and_echo": "abs-guide.txt"},{"move_and_echo": "abs-guide.txt"},{"move_and_echo": "abs-guide.txt"},{"move_and_echo": "abs-guide.txt"},{"move_and_echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"3": "abs-guide.txt"},{"3": "abs-guide.txt"},{"1": "abs-guide.txt"},{"1": "abs-guide.txt"},{"2": "abs-guide.txt"},{"2": "abs-guide.txt"},{"4": "abs-guide.txt"},{"4": "abs-guide.txt"},{"5": "abs-guide.txt"},{"5": "abs-guide.txt"},{"": "abs-guide.txt"},{"1 \"START 1\"": "abs-guide.txt"},{"75 FINISH": "abs-guide.txt"},{"5 \"|\"": "abs-guide.txt"},{"80 \"|\"": "abs-guide.txt"},{"5 \"|\"": "abs-guide.txt"},{"80 \"|\"": "abs-guide.txt"},{"5 \"| 2\"": "abs-guide.txt"},{"80 \"|\"": "abs-guide.txt"},{"5 \"V 3\"": "abs-guide.txt"},{"80 \"V\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Set foreground color to red.": "abs-guide.txt"},{"echo -ne '\\E[31m'": "abs-guide.txt"},{"# Some ASCII art.": "abs-guide.txt"},{"move_and_echo 1 8 \"..@@@..@@@@@...@@@@@.@...@..@@@@...\"": "abs-guide.txt"},{"move_and_echo 2 8 \".@...@...@.......@...@...@.@.......\"": "abs-guide.txt"},{"move_and_echo 3 8 \".@@@@@...@.......@...@@@@@.@@@@....\"": "abs-guide.txt"},{"move_and_echo 4 8 \".@...@...@.......@...@...@.@.......\"": "abs-guide.txt"},{"move_and_echo 5 8 \".@...@...@.......@...@...@..@@@@...\"": "abs-guide.txt"},{"move_and_echo 1 43 \"@@@@...@@@...@@@@..@@@@..@@@@.\"": "abs-guide.txt"},{"move_and_echo 2 43 \"@...@.@...@.@.....@.....@.....\"": "abs-guide.txt"},{"move_and_echo 3 43 \"@@@@..@@@@@.@.....@@@@...@@@..\"": "abs-guide.txt"},{"move_and_echo 4 43 \"@..@..@...@.@.....@.........@.\"": "abs-guide.txt"},{"move_and_echo 5 43 \"@...@.@...@..@@@@..@@@@.@@@@..\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Set foreground and background colors to green.": "abs-guide.txt"},{"echo -ne '\\E[32;42m'": "abs-guide.txt"},{"# Draw eleven green lines.": "abs-guide.txt"},{"tput cup 5 0": "abs-guide.txt"},{"for n in `seq 11`; do": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 36. Miscellany": "abs-guide.txt"},{"": "abs-guide.txt"},{"520": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"echo $BLANK80": "abs-guide.txt"},{"done": "abs-guide.txt"},{"# Set foreground color to black.": "abs-guide.txt"},{"echo -ne '\\E[30m'": "abs-guide.txt"},{"tput cup 5 0": "abs-guide.txt"},{"# Draw the fences.": "abs-guide.txt"},{"echo \"++++++++++++++++++++++++++++++++++++++\\": "abs-guide.txt"},{"++++++++++++++++++++++++++++++++++++++++++\"": "abs-guide.txt"},{"tput cup 15 0": "abs-guide.txt"},{"echo \"++++++++++++++++++++++++++++++++++++++\\": "abs-guide.txt"},{"++++++++++++++++++++++++++++++++++++++++++\"": "abs-guide.txt"},{"# Set foreground and background colors to white.": "abs-guide.txt"},{"echo -ne '\\E[37;47m'": "abs-guide.txt"},{"# Draw three white lines.": "abs-guide.txt"},{"for n in `seq 3`; do": "abs-guide.txt"},{"echo $BLANK80": "abs-guide.txt"},{"done": "abs-guide.txt"},{"# Set foreground color to black.": "abs-guide.txt"},{"echo -ne '\\E[30m'": "abs-guide.txt"},{"# Create 9 files to stores handicaps.": "abs-guide.txt"},{"for n in `seq 10 7 68`; do": "abs-guide.txt"},{"touch $n": "abs-guide.txt"},{"done": "abs-guide.txt"},{"# Set the first type of \"horse\" the script will draw.": "abs-guide.txt"},{"HORSE_TYPE=2": "abs-guide.txt"},{"# Create position-file and odds-file for every \"horse\".": "abs-guide.txt"},{"#+ In these files, store the current position of the horse,": "abs-guide.txt"},{"#+ the type and the odds.": "abs-guide.txt"},{"for HN in `seq 9`; do": "abs-guide.txt"},{"touch horse_${HN}_position": "abs-guide.txt"},{"touch odds_${HN}": "abs-guide.txt"},{"echo \\-1 > horse_${HN}_position": "abs-guide.txt"},{"echo $HORSE_TYPE >> horse_${HN}_position": "abs-guide.txt"},{"# Define a random handicap for horse.": "abs-guide.txt"},{"HANDICAP=`random_1_9`": "abs-guide.txt"},{"# Check if the random_1_9 function returned a good value.": "abs-guide.txt"},{"while ! echo $HANDICAP | grep [1-9] &> /dev/null; do": "abs-guide.txt"},{"HANDICAP=`random_1_9`": "abs-guide.txt"},{"done": "abs-guide.txt"},{"# Define last handicap position for horse.": "abs-guide.txt"},{"LHP=`expr $HANDICAP \\* 7 + 3`": "abs-guide.txt"},{"for FILE in `seq 10 7 $LHP`; do": "abs-guide.txt"},{"echo $HN >> $FILE": "abs-guide.txt"},{"done": "abs-guide.txt"},{"# Calculate odds.": "abs-guide.txt"},{"case $HANDICAP in": "abs-guide.txt"},{"1) ODDS=`echo $HANDICAP \\* 0.25 + 1.25 | bc`": "abs-guide.txt"},{"echo $ODDS > odds_${HN}": "abs-guide.txt"},{";;": "abs-guide.txt"},{"2 | 3) ODDS=`echo $HANDICAP \\* 0.40 + 1.25 | bc`": "abs-guide.txt"},{"echo $ODDS > odds_${HN}": "abs-guide.txt"},{";;": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 36. Miscellany": "abs-guide.txt"},{"": "abs-guide.txt"},{"521": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"4 | 5 | 6) ODDS=`echo $HANDICAP \\* 0.55 + 1.25 | bc`": "abs-guide.txt"},{"echo $ODDS > odds_${HN}": "abs-guide.txt"},{";;": "abs-guide.txt"},{"7 | 8) ODDS=`echo $HANDICAP \\* 0.75 + 1.25 | bc`": "abs-guide.txt"},{"echo $ODDS > odds_${HN}": "abs-guide.txt"},{";;": "abs-guide.txt"},{"9) ODDS=`echo $HANDICAP \\* 0.90 + 1.25 | bc`": "abs-guide.txt"},{"echo $ODDS > odds_${HN}": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Print odds.": "abs-guide.txt"},{"print_odds() {": "abs-guide.txt"},{"tput cup 6 0": "abs-guide.txt"},{"echo -ne '\\E[30;42m'": "abs-guide.txt"},{"for HN in `seq 9`; do": "abs-guide.txt"},{"echo \"#$HN odds->\" `cat odds_${HN}`": "abs-guide.txt"},{"done": "abs-guide.txt"},{"}": "abs-guide.txt"},{"# Draw the horses at starting line.": "abs-guide.txt"},{"draw_horses() {": "abs-guide.txt"},{"tput cup 6 0": "abs-guide.txt"},{"echo -ne '\\E[30;42m'": "abs-guide.txt"},{"for HN in `seq 9`; do": "abs-guide.txt"},{"echo /\\\\$HN/\\\\\"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"print_odds": "abs-guide.txt"},{"echo -ne '\\E[47m'": "abs-guide.txt"},{"# Wait for a enter key press to start the race.": "abs-guide.txt"},{"# The escape sequence '\\E[?25l' disables the cursor.": "abs-guide.txt"},{"tput cup 17 0": "abs-guide.txt"},{"echo -e '\\E[?25l'Press [enter] key to start the race...": "abs-guide.txt"},{"read -s": "abs-guide.txt"},{"# Disable normal echoing in the terminal.": "abs-guide.txt"},{"# This avoids key presses that might \"contaminate\" the screen": "abs-guide.txt"},{"#+ during the race.": "abs-guide.txt"},{"stty -echo": "abs-guide.txt"},{"# -------------------------------------------------------# Start the race.": "abs-guide.txt"},{"draw_horses": "abs-guide.txt"},{"echo -ne '\\E[37;47m'": "abs-guide.txt"},{"move_and_echo 18 1 $BLANK80": "abs-guide.txt"},{"echo -ne '\\E[30m'": "abs-guide.txt"},{"move_and_echo 18 1 Starting...": "abs-guide.txt"},{"sleep 1": "abs-guide.txt"},{"# Set the column of the finish line.": "abs-guide.txt"},{"WINNING_POS=74": "abs-guide.txt"},{"# Define the time the race started.": "abs-guide.txt"},{"START_TIME=`date +%s`": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 36. Miscellany": "abs-guide.txt"},{"": "abs-guide.txt"},{"522": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# COL variable needed by following \"while\" construct.": "abs-guide.txt"},{"COL=0": "abs-guide.txt"},{"while [ $COL -lt $WINNING_POS ]; do": "abs-guide.txt"},{"MOVE_HORSE=0": "abs-guide.txt"},{"# Check if the random_1_9 function has returned a good value.": "abs-guide.txt"},{"while ! echo $MOVE_HORSE | grep [1-9] &> /dev/null; do": "abs-guide.txt"},{"MOVE_HORSE=`random_1_9`": "abs-guide.txt"},{"done": "abs-guide.txt"},{"# Define old type and position of the \"randomized horse\".": "abs-guide.txt"},{"HORSE_TYPE=`cat horse_${MOVE_HORSE}_position | tail -n 1`": "abs-guide.txt"},{"COL=$(expr `cat horse_${MOVE_HORSE}_position | head -n 1`)": "abs-guide.txt"},{"ADD_POS=1": "abs-guide.txt"},{"# Check if the current position is an handicap position.": "abs-guide.txt"},{"if seq 10 7 68 | grep -w $COL &> /dev/null; then": "abs-guide.txt"},{"if grep -w $MOVE_HORSE $COL &> /dev/null; then": "abs-guide.txt"},{"ADD_POS=0": "abs-guide.txt"},{"grep -v -w $MOVE_HORSE $COL > ${COL}_new": "abs-guide.txt"},{"rm -f $COL": "abs-guide.txt"},{"mv -f ${COL}_new $COL": "abs-guide.txt"},{"else ADD_POS=1": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"else ADD_POS=1": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"COL=`expr $COL + $ADD_POS`": "abs-guide.txt"},{"echo $COL > horse_${MOVE_HORSE}_position # Store new position.": "abs-guide.txt"},{"# Choose the type of horse to draw.": "abs-guide.txt"},{"case $HORSE_TYPE in": "abs-guide.txt"},{"1) HORSE_TYPE=2; DRAW_HORSE=draw_horse_two": "abs-guide.txt"},{";;": "abs-guide.txt"},{"2) HORSE_TYPE=1; DRAW_HORSE=draw_horse_one": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"echo $HORSE_TYPE >> horse_${MOVE_HORSE}_position": "abs-guide.txt"},{"# Store current type.": "abs-guide.txt"},{"# Set foreground color to black and background to green.": "abs-guide.txt"},{"echo -ne '\\E[30;42m'": "abs-guide.txt"},{"# Move the cursor to new horse position.": "abs-guide.txt"},{"tput cup `expr $MOVE_HORSE + 5` \\": "abs-guide.txt"},{"`cat horse_${MOVE_HORSE}_position | head -n 1`": "abs-guide.txt"},{"# Draw the horse.": "abs-guide.txt"},{"$DRAW_HORSE": "abs-guide.txt"},{"usleep $USLEEP_ARG": "abs-guide.txt"},{"# When all horses have gone beyond field line 15, reprint odds.": "abs-guide.txt"},{"touch fieldline15": "abs-guide.txt"},{"if [ $COL = 15 ]; then": "abs-guide.txt"},{"echo $MOVE_HORSE >> fieldline15": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"if [ `wc -l fieldline15 | cut -f1 -d \" \"` = 9 ]; then": "abs-guide.txt"},{"print_odds": "abs-guide.txt"},{": > fieldline15": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# Define the leading horse.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 36. Miscellany": "abs-guide.txt"},{"": "abs-guide.txt"},{"523": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"HIGHEST_POS=`cat *position | sort -n | tail -1`": "abs-guide.txt"},{"# Set background color to white.": "abs-guide.txt"},{"echo -ne '\\E[47m'": "abs-guide.txt"},{"tput cup 17 0": "abs-guide.txt"},{"echo -n Current leader: `grep -w $HIGHEST_POS *position | cut -c7`\\": "abs-guide.txt"},{"\"": "abs-guide.txt"},{"\"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"# Define the time the race finished.": "abs-guide.txt"},{"FINISH_TIME=`date +%s`": "abs-guide.txt"},{"# Set background color to green and enable blinking text.": "abs-guide.txt"},{"echo -ne '\\E[30;42m'": "abs-guide.txt"},{"echo -en '\\E[5m'": "abs-guide.txt"},{"# Make the winning horse blink.": "abs-guide.txt"},{"tput cup `expr $MOVE_HORSE + 5` \\": "abs-guide.txt"},{"`cat horse_${MOVE_HORSE}_position | head -n 1`": "abs-guide.txt"},{"$DRAW_HORSE": "abs-guide.txt"},{"# Disable blinking text.": "abs-guide.txt"},{"echo -en '\\E[25m'": "abs-guide.txt"},{"# Set foreground and background color to white.": "abs-guide.txt"},{"echo -ne '\\E[37;47m'": "abs-guide.txt"},{"move_and_echo 18 1 $BLANK80": "abs-guide.txt"},{"# Set foreground color to black.": "abs-guide.txt"},{"echo -ne '\\E[30m'": "abs-guide.txt"},{"# Make winner blink.": "abs-guide.txt"},{"tput cup 17 0": "abs-guide.txt"},{"echo -e \"\\E[5mWINNER: $MOVE_HORSE\\E[25m\"\" Odds: `cat odds_${MOVE_HORSE}`\"\\": "abs-guide.txt"},{"\" Race time: `expr $FINISH_TIME - $START_TIME` secs\"": "abs-guide.txt"},{"# Restore cursor and old colors.": "abs-guide.txt"},{"echo -en \"\\E[?25h\"": "abs-guide.txt"},{"echo -en \"\\E[0m\"": "abs-guide.txt"},{"# Restore echoing.": "abs-guide.txt"},{"stty echo": "abs-guide.txt"},{"# Remove race temp directory.": "abs-guide.txt"},{"rm -rf $HORSE_RACE_TMP_DIR": "abs-guide.txt"},{"tput cup 19 0": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"See also Example A-21, Example A-44, Example A-52, and Example A-40.": "abs-guide.txt"},{"There is, however, a major problem with all this. ANSI escape sequences are emphatically non-portable.": "abs-guide.txt"},{"What works fine on some terminal emulators (or the console) may work differently, or not at all, on": "abs-guide.txt"},{"others. A \"colorized\" script that looks stunning on the script author's machine may produce unreadable": "abs-guide.txt"},{"output on someone else's. This somewhat compromises the usefulness of colorizing scripts, and possibly": "abs-guide.txt"},{"relegates this technique to the status of a gimmick. Colorized scripts are probably inappropriate in a": "abs-guide.txt"},{"commercial setting, i.e., your supervisor might disapprove.": "abs-guide.txt"},{"Alister's ansi-color utility (based on Moshe Jacobson's color utility considerably simplifies using ANSI": "abs-guide.txt"},{"Chapter 36. Miscellany": "abs-guide.txt"},{"": "abs-guide.txt"},{"524": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"escape sequences. It substitutes a clean and logical syntax for the clumsy constructs just discussed.": "abs-guide.txt"},{"Henry/teikedvl has likewise created a utility (http://scriptechocolor.sourceforge.net/) to simplify creation of": "abs-guide.txt"},{"colorized scripts.": "abs-guide.txt"},{"": "abs-guide.txt"},{"36.6. Optimizations": "abs-guide.txt"},{"Most shell scripts are quick 'n dirty solutions to non-complex problems. As such, optimizing them for speed is": "abs-guide.txt"},{"not much of an issue. Consider the case, though, where a script carries out an important task, does it well, but": "abs-guide.txt"},{"runs too slowly. Rewriting it in a compiled language may not be a palatable option. The simplest fix would be": "abs-guide.txt"},{"to rewrite the parts of the script that slow it down. Is it possible to apply principles of code optimization even": "abs-guide.txt"},{"to a lowly shell script?": "abs-guide.txt"},{"Check the loops in the script. Time consumed by repetitive operations adds up quickly. If at all possible,": "abs-guide.txt"},{"remove time-consuming operations from within loops.": "abs-guide.txt"},{"Use builtin commands in preference to system commands. Builtins execute faster and usually do not launch a": "abs-guide.txt"},{"subshell when invoked.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Avoid unnecessary commands, particularly in a pipe.": "abs-guide.txt"},{"cat \"$file\" | grep \"$word\"": "abs-guide.txt"},{"grep \"$word\" \"$file\"": "abs-guide.txt"},{"# The above command-lines have an identical effect,": "abs-guide.txt"},{"#+ but the second runs faster since it launches one fewer subprocess.": "abs-guide.txt"},{"": "abs-guide.txt"},{"The cat command seems especially prone to overuse in scripts.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Disabling certain Bash options can speed up scripts.": "abs-guide.txt"},{"As Erik Brandsberg points out:": "abs-guide.txt"},{"If you don't need Unicode support, you can get potentially a 2x or more improvement in speed by simply": "abs-guide.txt"},{"setting the LC_ALL variable.": "abs-guide.txt"},{"export LC_ALL=C": "abs-guide.txt"},{"[specifies the locale as ANSI C,": "abs-guide.txt"},{"thereby disabling Unicode support]": "abs-guide.txt"},{"[In an example script ...]": "abs-guide.txt"},{"Without [Unicode support]:": "abs-guide.txt"},{"erik@erik-desktop:~/capture$ time ./cap-ngrep.sh": "abs-guide.txt"},{"live2.pcap > out.txt": "abs-guide.txt"},{"real": "abs-guide.txt"},{"user": "abs-guide.txt"},{"sys": "abs-guide.txt"},{"": "abs-guide.txt"},{"0m20.483s": "abs-guide.txt"},{"1m34.470s": "abs-guide.txt"},{"0m12.869s": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 36. Miscellany": "abs-guide.txt"},{"": "abs-guide.txt"},{"525": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"": "abs-guide.txt"},{"With [Unicode support]:": "abs-guide.txt"},{"erik@erik-desktop:~/capture$ time ./cap-ngrep.sh": "abs-guide.txt"},{"live2.pcap > out.txt": "abs-guide.txt"},{"real": "abs-guide.txt"},{"user": "abs-guide.txt"},{"sys": "abs-guide.txt"},{"": "abs-guide.txt"},{"0m50.232s": "abs-guide.txt"},{"3m51.118s": "abs-guide.txt"},{"0m11.221s": "abs-guide.txt"},{"": "abs-guide.txt"},{"A large part of the overhead that is optimized is, I believe,": "abs-guide.txt"},{"regex match using [[ string =~ REGEX ]],": "abs-guide.txt"},{"but it may help with other portions of the code as well.": "abs-guide.txt"},{"I hadn't [seen it] mentioned that this optimization helped": "abs-guide.txt"},{"with Bash, but I had seen it helped with \"grep,\"": "abs-guide.txt"},{"so why not try?": "abs-guide.txt"},{"": "abs-guide.txt"},{"Certain operators, notably expr, are very inefficient and might be replaced by double parentheses": "abs-guide.txt"},{"arithmetic expansion. See Example A-59.": "abs-guide.txt"},{"Math tests": "abs-guide.txt"},{"math via $(( ))": "abs-guide.txt"},{"real": "abs-guide.txt"},{"0m0.294s": "abs-guide.txt"},{"user": "abs-guide.txt"},{"0m0.288s": "abs-guide.txt"},{"sys": "abs-guide.txt"},{"0m0.008s": "abs-guide.txt"},{"math via expr:": "abs-guide.txt"},{"real": "abs-guide.txt"},{"1m17.879s": "abs-guide.txt"},{"user": "abs-guide.txt"},{"0m3.600s": "abs-guide.txt"},{"sys": "abs-guide.txt"},{"0m8.765s": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Much slower!": "abs-guide.txt"},{"": "abs-guide.txt"},{"math via let:": "abs-guide.txt"},{"real": "abs-guide.txt"},{"0m0.364s": "abs-guide.txt"},{"user": "abs-guide.txt"},{"0m0.372s": "abs-guide.txt"},{"sys": "abs-guide.txt"},{"0m0.000s": "abs-guide.txt"},{"": "abs-guide.txt"},{"Condition testing constructs in scripts deserve close scrutiny. Substitute case for if-then constructs and": "abs-guide.txt"},{"combine tests when possible, to minimize script execution time. Again, refer to Example A-59.": "abs-guide.txt"},{"Test using \"case\" construct:": "abs-guide.txt"},{"real": "abs-guide.txt"},{"0m0.329s": "abs-guide.txt"},{"user": "abs-guide.txt"},{"0m0.320s": "abs-guide.txt"},{"sys": "abs-guide.txt"},{"0m0.000s": "abs-guide.txt"},{"": "abs-guide.txt"},{"Test with if [], no quotes:": "abs-guide.txt"},{"real": "abs-guide.txt"},{"0m0.438s": "abs-guide.txt"},{"user": "abs-guide.txt"},{"0m0.432s": "abs-guide.txt"},{"sys": "abs-guide.txt"},{"0m0.008s": "abs-guide.txt"},{"": "abs-guide.txt"},{"Test with if [], quotes:": "abs-guide.txt"},{"real": "abs-guide.txt"},{"0m0.476s": "abs-guide.txt"},{"user": "abs-guide.txt"},{"0m0.452s": "abs-guide.txt"},{"sys": "abs-guide.txt"},{"0m0.024s": "abs-guide.txt"},{"": "abs-guide.txt"},{"Test with if [], using -eq:": "abs-guide.txt"},{"real": "abs-guide.txt"},{"0m0.457s": "abs-guide.txt"},{"user": "abs-guide.txt"},{"0m0.456s": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 36. Miscellany": "abs-guide.txt"},{"": "abs-guide.txt"},{"526": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"sys": "abs-guide.txt"},{"": "abs-guide.txt"},{"0m0.000s": "abs-guide.txt"},{"": "abs-guide.txt"},{"Erik Brandsberg recommends using associative arrays in preference to conventional numeric-indexed": "abs-guide.txt"},{"arrays in most cases. When overwriting values in a numeric array, there is a significant performance": "abs-guide.txt"},{"penalty vs. associative arrays. Running a test script confirms this. See Example A-60.": "abs-guide.txt"},{"Assignment tests": "abs-guide.txt"},{"Assigning a simple variable": "abs-guide.txt"},{"real": "abs-guide.txt"},{"0m0.418s": "abs-guide.txt"},{"user": "abs-guide.txt"},{"0m0.416s": "abs-guide.txt"},{"sys": "abs-guide.txt"},{"0m0.004s": "abs-guide.txt"},{"Assigning a numeric index array entry": "abs-guide.txt"},{"real": "abs-guide.txt"},{"0m0.582s": "abs-guide.txt"},{"user": "abs-guide.txt"},{"0m0.564s": "abs-guide.txt"},{"sys": "abs-guide.txt"},{"0m0.016s": "abs-guide.txt"},{"Overwriting a numeric index array entry": "abs-guide.txt"},{"real": "abs-guide.txt"},{"0m21.931s": "abs-guide.txt"},{"user": "abs-guide.txt"},{"0m21.913s": "abs-guide.txt"},{"sys": "abs-guide.txt"},{"0m0.016s": "abs-guide.txt"},{"Linear reading of numeric index array": "abs-guide.txt"},{"real": "abs-guide.txt"},{"0m0.422s": "abs-guide.txt"},{"user": "abs-guide.txt"},{"0m0.416s": "abs-guide.txt"},{"sys": "abs-guide.txt"},{"0m0.004s": "abs-guide.txt"},{"Assigning an associative array entry": "abs-guide.txt"},{"real": "abs-guide.txt"},{"0m1.800s": "abs-guide.txt"},{"user": "abs-guide.txt"},{"0m1.796s": "abs-guide.txt"},{"sys": "abs-guide.txt"},{"0m0.004s": "abs-guide.txt"},{"Overwriting an associative array entry": "abs-guide.txt"},{"real": "abs-guide.txt"},{"0m1.798s": "abs-guide.txt"},{"user": "abs-guide.txt"},{"0m1.784s": "abs-guide.txt"},{"sys": "abs-guide.txt"},{"0m0.012s": "abs-guide.txt"},{"Linear reading an associative array entry": "abs-guide.txt"},{"real": "abs-guide.txt"},{"0m0.420s": "abs-guide.txt"},{"user": "abs-guide.txt"},{"0m0.420s": "abs-guide.txt"},{"sys": "abs-guide.txt"},{"0m0.000s": "abs-guide.txt"},{"Assigning a random number to a simple variable": "abs-guide.txt"},{"real": "abs-guide.txt"},{"0m0.402s": "abs-guide.txt"},{"user": "abs-guide.txt"},{"0m0.388s": "abs-guide.txt"},{"sys": "abs-guide.txt"},{"0m0.016s": "abs-guide.txt"},{"Assigning a sparse numeric index array entry randomly into 64k cells": "abs-guide.txt"},{"real": "abs-guide.txt"},{"0m12.678s": "abs-guide.txt"},{"user": "abs-guide.txt"},{"0m12.649s": "abs-guide.txt"},{"sys": "abs-guide.txt"},{"0m0.028s": "abs-guide.txt"},{"Reading sparse numeric index array entry": "abs-guide.txt"},{"real": "abs-guide.txt"},{"0m0.087s": "abs-guide.txt"},{"user": "abs-guide.txt"},{"0m0.084s": "abs-guide.txt"},{"sys": "abs-guide.txt"},{"0m0.000s": "abs-guide.txt"},{"Assigning a sparse associative array entry randomly into 64k cells": "abs-guide.txt"},{"real": "abs-guide.txt"},{"0m0.698s": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 36. Miscellany": "abs-guide.txt"},{"": "abs-guide.txt"},{"527": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"user": "abs-guide.txt"},{"sys": "abs-guide.txt"},{"": "abs-guide.txt"},{"0m0.696s": "abs-guide.txt"},{"0m0.004s": "abs-guide.txt"},{"": "abs-guide.txt"},{"Reading sparse associative index array entry": "abs-guide.txt"},{"real": "abs-guide.txt"},{"0m0.083s": "abs-guide.txt"},{"user": "abs-guide.txt"},{"0m0.084s": "abs-guide.txt"},{"sys": "abs-guide.txt"},{"0m0.000s": "abs-guide.txt"},{"": "abs-guide.txt"},{"Use the time and times tools to profile computation-intensive commands. Consider rewriting time-critical": "abs-guide.txt"},{"code sections in C, or even in assembler.": "abs-guide.txt"},{"Try to minimize file I/O. Bash is not particularly efficient at handling files, so consider using more": "abs-guide.txt"},{"appropriate tools for this within the script, such as awk or Perl.": "abs-guide.txt"},{"Write your scripts in a modular and coherent form, [127] so they can be reorganized and tightened up as": "abs-guide.txt"},{"necessary. Some of the optimization techniques applicable to high-level languages may work for scripts, but": "abs-guide.txt"},{"others, such as loop unrolling, are mostly irrelevant. Above all, use common sense.": "abs-guide.txt"},{"For an excellent demonstration of how optimization can dramatically reduce the execution time of a script, see": "abs-guide.txt"},{"Example 16-47.": "abs-guide.txt"},{"": "abs-guide.txt"},{"36.7. Assorted Tips": "abs-guide.txt"},{"36.7.1. Ideas for more powerful scripts": "abs-guide.txt"},{"\u2022": "abs-guide.txt"},{"You have a problem that you want to solve by writing a Bash script. Unfortunately, you don't know": "abs-guide.txt"},{"quite where to start. One method is to plunge right in and code those parts of the script that come": "abs-guide.txt"},{"easily, and write the hard parts as pseudo-code.": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"ARGCOUNT=1": "abs-guide.txt"},{"E_WRONGARGS=65": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Need name as argument.": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [ number-of-arguments is-not-equal-to \"$ARGCOUNT\" ]": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^": "abs-guide.txt"},{"# Can't figure out how to code this . . .": "abs-guide.txt"},{"#+ . . . so write it in pseudo-code.": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Usage: name-of-script name\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^^^^^^^^^^^^^^": "abs-guide.txt"},{"More pseudo-code.": "abs-guide.txt"},{"exit $E_WRONGARGS": "abs-guide.txt"},{"fi": "abs-guide.txt"},{". . .": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Later on, substitute working code for the pseudo-code.": "abs-guide.txt"},{"# Line 6 becomes:": "abs-guide.txt"},{"if [ $# -ne \"$ARGCOUNT\" ]": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 36. Miscellany": "abs-guide.txt"},{"": "abs-guide.txt"},{"528": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# Line 12 becomes:": "abs-guide.txt"},{"echo \"Usage: `basename $0` name\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"For an example of using pseudo-code, see the Square Root exercise.": "abs-guide.txt"},{"\u2022": "abs-guide.txt"},{"To keep a record of which user scripts have run during a particular session or over a number of": "abs-guide.txt"},{"sessions, add the following lines to each script you want to keep track of. This will keep a continuing": "abs-guide.txt"},{"file record of the script names and invocation times.": "abs-guide.txt"},{"# Append (>>) following to end of each script tracked.": "abs-guide.txt"},{"whoami>> $SAVE_FILE": "abs-guide.txt"},{"echo $0>> $SAVE_FILE": "abs-guide.txt"},{"date>> $SAVE_FILE": "abs-guide.txt"},{"echo>> $SAVE_FILE": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"User invoking the script.": "abs-guide.txt"},{"Script name.": "abs-guide.txt"},{"Date and time.": "abs-guide.txt"},{"Blank line as separator.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Of course, SAVE_FILE defined and exported as environmental variable in ~/.bashrc": "abs-guide.txt"},{"#+ (something like ~/.scripts-run)": "abs-guide.txt"},{"": "abs-guide.txt"},{"\u2022": "abs-guide.txt"},{"The >> operator appends lines to a file. What if you wish to prepend a line to an existing file, that is,": "abs-guide.txt"},{"to paste it in at the beginning?": "abs-guide.txt"},{"file=data.txt": "abs-guide.txt"},{"title=\"***This is the title line of data text file***\"": "abs-guide.txt"},{"echo $title | cat - $file >$file.new": "abs-guide.txt"},{"# \"cat -\" concatenates stdout to $file.": "abs-guide.txt"},{"# End result is": "abs-guide.txt"},{"#+ to write a new file with $title appended at *beginning*.": "abs-guide.txt"},{"": "abs-guide.txt"},{"This is a simplified variant of the Example 19-13 script given earlier. And, of course, sed can also do": "abs-guide.txt"},{"this.": "abs-guide.txt"},{"\u2022": "abs-guide.txt"},{"A shell script may act as an embedded command inside another shell script, a Tcl or wish script, or": "abs-guide.txt"},{"even a Makefile. It can be invoked as an external shell command in a C program using the": "abs-guide.txt"},{"system() call, i.e., system(\"script_name\");.": "abs-guide.txt"},{"\u2022": "abs-guide.txt"},{"Setting a variable to the contents of an embedded sed or awk script increases the readability of the": "abs-guide.txt"},{"surrounding shell wrapper. See Example A-1 and Example 15-20.": "abs-guide.txt"},{"\u2022": "abs-guide.txt"},{"Put together files containing your favorite and most useful definitions and functions. As necessary,": "abs-guide.txt"},{"\"include\" one or more of these \"library files\" in scripts with either the dot (.) or source command.": "abs-guide.txt"},{"# SCRIPT LIBRARY": "abs-guide.txt"},{"# ------ ------# Note:": "abs-guide.txt"},{"# No \"#!\" here.": "abs-guide.txt"},{"# No \"live code\" either.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Useful variable definitions": "abs-guide.txt"},{"ROOT_UID=0": "abs-guide.txt"},{"E_NOTROOT=101": "abs-guide.txt"},{"MAXRETVAL=255": "abs-guide.txt"},{"SUCCESS=0": "abs-guide.txt"},{"FAILURE=-1": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 36. Miscellany": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Root has $UID 0.": "abs-guide.txt"},{"# Not root user error.": "abs-guide.txt"},{"# Maximum (positive) return value of a function.": "abs-guide.txt"},{"": "abs-guide.txt"},{"529": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Functions": "abs-guide.txt"},{"Usage ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"if [ -z \"$1\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"msg=filename": "abs-guide.txt"},{"else": "abs-guide.txt"},{"msg=$@": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"# \"Usage:\" message.": "abs-guide.txt"},{"# No arg passed.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo \"Usage: `basename $0` \"$msg\"\"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"Check_if_root ()": "abs-guide.txt"},{"# Check if root running script.": "abs-guide.txt"},{"{": "abs-guide.txt"},{"# From \"ex39.sh\" example.": "abs-guide.txt"},{"if [ \"$UID\" -ne \"$ROOT_UID\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Must be root to run this script.\"": "abs-guide.txt"},{"exit $E_NOTROOT": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"CreateTempfileName () # Creates a \"unique\" temp filename.": "abs-guide.txt"},{"{": "abs-guide.txt"},{"# From \"ex51.sh\" example.": "abs-guide.txt"},{"prefix=temp": "abs-guide.txt"},{"suffix=`eval date +%s`": "abs-guide.txt"},{"Tempfilename=$prefix.$suffix": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"isalpha2 ()": "abs-guide.txt"},{"# Tests whether *entire string* is alphabetic.": "abs-guide.txt"},{"{": "abs-guide.txt"},{"# From \"isalpha.sh\" example.": "abs-guide.txt"},{"[ $# -eq 1 ] || return $FAILURE": "abs-guide.txt"},{"case $1 in": "abs-guide.txt"},{"*[!a-zA-Z]*|\"\") return $FAILURE;;": "abs-guide.txt"},{"*) return $SUCCESS;;": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"# Thanks, S.C.": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"abs ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"E_ARGERR=-999999": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Absolute value.": "abs-guide.txt"},{"# Caution: Max return value = 255.": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [ -z \"$1\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"return $E_ARGERR": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Need arg passed.": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [ \"$1\" -ge 0 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"absval=$1": "abs-guide.txt"},{"else": "abs-guide.txt"},{"let \"absval = (( 0 - $1 ))\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 36. Miscellany": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Obvious error value returned.": "abs-guide.txt"},{"": "abs-guide.txt"},{"If non-negative,": "abs-guide.txt"},{"stays as-is.": "abs-guide.txt"},{"Otherwise,": "abs-guide.txt"},{"change sign.": "abs-guide.txt"},{"": "abs-guide.txt"},{"530": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"return $absval": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"tolower ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Converts string(s) passed as argument(s)": "abs-guide.txt"},{"#+ to lowercase.": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [ -z \"$1\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"(null)\"": "abs-guide.txt"},{"return": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"If no argument(s) passed,": "abs-guide.txt"},{"send error message": "abs-guide.txt"},{"(C-style void-pointer error message)": "abs-guide.txt"},{"and return from function.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo \"$@\" | tr A-Z a-z": "abs-guide.txt"},{"# Translate all passed arguments ($@).": "abs-guide.txt"},{"return": "abs-guide.txt"},{"# Use command substitution to set a variable to function output.": "abs-guide.txt"},{"# For example:": "abs-guide.txt"},{"#": "abs-guide.txt"},{"oldvar=\"A seT of miXed-caSe LEtTerS\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"newvar=`tolower \"$oldvar\"`": "abs-guide.txt"},{"#": "abs-guide.txt"},{"echo \"$newvar\"": "abs-guide.txt"},{"# a set of mixed-case letters": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Exercise: Rewrite this function to change lowercase passed argument(s)": "abs-guide.txt"},{"#": "abs-guide.txt"},{"to uppercase ... toupper() [easy].": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"\u2022": "abs-guide.txt"},{"Use special-purpose comment headers to increase clarity and legibility in scripts.": "abs-guide.txt"},{"## Caution.": "abs-guide.txt"},{"rm -rf *.zzy": "abs-guide.txt"},{"": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"## The \"-rf\" options to \"rm\" are very dangerous,": "abs-guide.txt"},{"##+ especially with wild cards.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Line continuation.": "abs-guide.txt"},{"This is line 1": "abs-guide.txt"},{"of a multi-line comment,": "abs-guide.txt"},{"and this is the final line.": "abs-guide.txt"},{"": "abs-guide.txt"},{"#* Note.": "abs-guide.txt"},{"#o List item.": "abs-guide.txt"},{"#> Another point of view.": "abs-guide.txt"},{"while [ \"$var1\" != \"end\" ]": "abs-guide.txt"},{"": "abs-guide.txt"},{"#> while test \"$var1\" != \"end\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"\u2022": "abs-guide.txt"},{"Dotan Barak contributes template code for a progress bar in a script.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 36-17. A Progress Bar": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# progress-bar.sh": "abs-guide.txt"},{"# Author: Dotan Barak (very minor revisions by ABS Guide author).": "abs-guide.txt"},{"# Used in ABS Guide with permission (thanks!).": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 36. Miscellany": "abs-guide.txt"},{"": "abs-guide.txt"},{"531": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"BAR_WIDTH=50": "abs-guide.txt"},{"BAR_CHAR_START=\"[\"": "abs-guide.txt"},{"BAR_CHAR_END=\"]\"": "abs-guide.txt"},{"BAR_CHAR_EMPTY=\".\"": "abs-guide.txt"},{"BAR_CHAR_FULL=\"=\"": "abs-guide.txt"},{"BRACKET_CHARS=2": "abs-guide.txt"},{"LIMIT=100": "abs-guide.txt"},{"print_progress_bar()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"# Calculate how many characters will be full.": "abs-guide.txt"},{"let \"full_limit = ((($1 - $BRACKET_CHARS) * $2) / $LIMIT)\"": "abs-guide.txt"},{"# Calculate how many characters will be empty.": "abs-guide.txt"},{"let \"empty_limit = ($1 - $BRACKET_CHARS) - ${full_limit}\"": "abs-guide.txt"},{"# Prepare the bar.": "abs-guide.txt"},{"bar_line=\"${BAR_CHAR_START}\"": "abs-guide.txt"},{"for ((j=0; j<full_limit; j++)); do": "abs-guide.txt"},{"bar_line=\"${bar_line}${BAR_CHAR_FULL}\"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"for ((j=0; j<empty_limit; j++)); do": "abs-guide.txt"},{"bar_line=\"${bar_line}${BAR_CHAR_EMPTY}\"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"bar_line=\"${bar_line}${BAR_CHAR_END}\"": "abs-guide.txt"},{"printf \"%3d%% %s\" $2 ${bar_line}": "abs-guide.txt"},{"}": "abs-guide.txt"},{"# Here is a sample of code that uses it.": "abs-guide.txt"},{"MAX_PERCENT=100": "abs-guide.txt"},{"for ((i=0; i<=MAX_PERCENT; i++)); do": "abs-guide.txt"},{"#": "abs-guide.txt"},{"usleep 10000": "abs-guide.txt"},{"# ... Or run some other commands ...": "abs-guide.txt"},{"#": "abs-guide.txt"},{"print_progress_bar ${BAR_WIDTH} ${i}": "abs-guide.txt"},{"echo -en \"\\r\"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo \"\"": "abs-guide.txt"},{"exit": "abs-guide.txt"},{"": "abs-guide.txt"},{"\u2022": "abs-guide.txt"},{"A particularly clever use of if-test constructs is for comment blocks.": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"COMMENT_BLOCK=": "abs-guide.txt"},{"# Try setting the above variable to some value": "abs-guide.txt"},{"#+ for an unpleasant surprise.": "abs-guide.txt"},{"if [ $COMMENT_BLOCK ]; then": "abs-guide.txt"},{"Comment block -=================================": "abs-guide.txt"},{"This is a comment line.": "abs-guide.txt"},{"This is another comment line.": "abs-guide.txt"},{"This is yet another comment line.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 36. Miscellany": "abs-guide.txt"},{"": "abs-guide.txt"},{"532": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"=================================": "abs-guide.txt"},{"echo \"This will not echo.\"": "abs-guide.txt"},{"Comment blocks are error-free! Whee!": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"echo \"No more comments, please.\"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Compare this with using here documents to comment out code blocks.": "abs-guide.txt"},{"\u2022": "abs-guide.txt"},{"Using the $? exit status variable, a script may test if a parameter contains only digits, so it can be": "abs-guide.txt"},{"treated as an integer.": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"SUCCESS=0": "abs-guide.txt"},{"E_BADINPUT=85": "abs-guide.txt"},{"test \"$1\" -ne 0 -o \"$1\" -eq 0 2>/dev/null": "abs-guide.txt"},{"# An integer is either equal to 0 or not equal to 0.": "abs-guide.txt"},{"# 2>/dev/null suppresses error message.": "abs-guide.txt"},{"if [ $? -ne \"$SUCCESS\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Usage: `basename $0` integer-input\"": "abs-guide.txt"},{"exit $E_BADINPUT": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"let \"sum = $1 + 25\"": "abs-guide.txt"},{"echo \"Sum = $sum\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Would give error if $1 not integer.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Any variable, not just a command-line parameter, can be tested this way.": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"\u2022 The 0 - 255 range for function return values is a severe limitation. Global variables and other": "abs-guide.txt"},{"workarounds are often problematic. An alternative method for a function to communicate a value": "abs-guide.txt"},{"back to the main body of the script is to have the function write to stdout (usually with echo) the": "abs-guide.txt"},{"\"return value,\" and assign this to a variable. This is actually a variant of command substitution.": "abs-guide.txt"},{"Example 36-18. Return value trickery": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# multiplication.sh": "abs-guide.txt"},{"multiply ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Multiplies params passed.": "abs-guide.txt"},{"# Will accept a variable number of args.": "abs-guide.txt"},{"": "abs-guide.txt"},{"local product=1": "abs-guide.txt"},{"until [ -z \"$1\" ]": "abs-guide.txt"},{"do": "abs-guide.txt"},{"let \"product *= $1\"": "abs-guide.txt"},{"shift": "abs-guide.txt"},{"done": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Until uses up arguments passed...": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo $product": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 36. Miscellany": "abs-guide.txt"},{"": "abs-guide.txt"},{"Will not echo to stdout,": "abs-guide.txt"},{"": "abs-guide.txt"},{"533": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"#+ since this will be assigned to a variable.": "abs-guide.txt"},{"": "abs-guide.txt"},{"mult1=15383; mult2=25211": "abs-guide.txt"},{"val1=`multiply $mult1 $mult2`": "abs-guide.txt"},{"# Assigns stdout (echo) of function to the variable val1.": "abs-guide.txt"},{"echo \"$mult1 X $mult2 = $val1\"": "abs-guide.txt"},{"# 387820813": "abs-guide.txt"},{"mult1=25; mult2=5; mult3=20": "abs-guide.txt"},{"val2=`multiply $mult1 $mult2 $mult3`": "abs-guide.txt"},{"echo \"$mult1 X $mult2 X $mult3 = $val2\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# 2500": "abs-guide.txt"},{"": "abs-guide.txt"},{"mult1=188; mult2=37; mult3=25; mult4=47": "abs-guide.txt"},{"val3=`multiply $mult1 $mult2 $mult3 $mult4`": "abs-guide.txt"},{"echo \"$mult1 X $mult2 X $mult3 X $mult4 = $val3\" # 8173300": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"The same technique also works for alphanumeric strings. This means that a function can \"return\" a": "abs-guide.txt"},{"non-numeric value.": "abs-guide.txt"},{"capitalize_ichar ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Capitalizes initial character": "abs-guide.txt"},{"#+ of argument string(s) passed.": "abs-guide.txt"},{"": "abs-guide.txt"},{"string0=\"$@\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Accepts multiple arguments.": "abs-guide.txt"},{"": "abs-guide.txt"},{"firstchar=${string0:0:1}": "abs-guide.txt"},{"string1=${string0:1}": "abs-guide.txt"},{"": "abs-guide.txt"},{"# First character.": "abs-guide.txt"},{"# Rest of string(s).": "abs-guide.txt"},{"": "abs-guide.txt"},{"FirstChar=`echo \"$firstchar\" | tr a-z A-Z`": "abs-guide.txt"},{"# Capitalize first character.": "abs-guide.txt"},{"echo \"$FirstChar$string1\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Output to stdout.": "abs-guide.txt"},{"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"newstring=`capitalize_ichar \"every sentence should start with a capital letter.\"`": "abs-guide.txt"},{"echo \"$newstring\"": "abs-guide.txt"},{"# Every sentence should start with a capital letter.": "abs-guide.txt"},{"": "abs-guide.txt"},{"It is even possible for a function to \"return\" multiple values with this method.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 36-19. Even more return value trickery": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# sum-product.sh": "abs-guide.txt"},{"# A function may \"return\" more than one value.": "abs-guide.txt"},{"sum_and_product ()": "abs-guide.txt"},{"# Calculates both sum and product of passed args.": "abs-guide.txt"},{"{": "abs-guide.txt"},{"echo $(( $1 + $2 )) $(( $1 * $2 ))": "abs-guide.txt"},{"# Echoes to stdout each calculated value, separated by space.": "abs-guide.txt"},{"}": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"Enter first number \"": "abs-guide.txt"},{"read first": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"Enter second number \"": "abs-guide.txt"},{"read second": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 36. Miscellany": "abs-guide.txt"},{"": "abs-guide.txt"},{"534": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"retval=`sum_and_product $first $second`": "abs-guide.txt"},{"sum=`echo \"$retval\" | awk '{print $1}'`": "abs-guide.txt"},{"product=`echo \"$retval\" | awk '{print $2}'`": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Assigns output of function.": "abs-guide.txt"},{"# Assigns first field.": "abs-guide.txt"},{"# Assigns second field.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo \"$first + $second = $sum\"": "abs-guide.txt"},{"echo \"$first * $second = $product\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"There can be only one echo statement in the function for this to work. If you alter the": "abs-guide.txt"},{"previous example:": "abs-guide.txt"},{"sum_and_product ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"echo \"This is the sum_and_product function.\" # This messes things up!": "abs-guide.txt"},{"echo $(( $1 + $2 )) $(( $1 * $2 ))": "abs-guide.txt"},{"}": "abs-guide.txt"},{"...": "abs-guide.txt"},{"retval=`sum_and_product $first $second`": "abs-guide.txt"},{"# Assigns output of function.": "abs-guide.txt"},{"# Now, this will not work correctly.": "abs-guide.txt"},{"": "abs-guide.txt"},{"\u2022": "abs-guide.txt"},{"Next in our bag of tricks are techniques for passing an array to a function, then \"returning\" an array": "abs-guide.txt"},{"back to the main body of the script.": "abs-guide.txt"},{"Passing an array involves loading the space-separated elements of the array into a variable with": "abs-guide.txt"},{"command substitution. Getting an array back as the \"return value\" from a function uses the previously": "abs-guide.txt"},{"mentioned strategem of echoing the array in the function, then invoking command substitution and": "abs-guide.txt"},{"the ( ... ) operator to assign it to an array.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 36-20. Passing and returning arrays": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# array-function.sh: Passing an array to a function and ...": "abs-guide.txt"},{"#": "abs-guide.txt"},{"\"returning\" an array from a function": "abs-guide.txt"},{"": "abs-guide.txt"},{"Pass_Array ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"local passed_array": "abs-guide.txt"},{"# Local variable!": "abs-guide.txt"},{"passed_array=( `echo \"$1\"` )": "abs-guide.txt"},{"echo \"${passed_array[@]}\"": "abs-guide.txt"},{"# List all the elements of the new array": "abs-guide.txt"},{"#+ declared and set within the function.": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"original_array=( element1 element2 element3 element4 element5 )": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"original_array = ${original_array[@]}\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"List all elements of original array.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# This is the trick that permits passing an array to a function.": "abs-guide.txt"},{"# **********************************": "abs-guide.txt"},{"argument=`echo ${original_array[@]}`": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 36. Miscellany": "abs-guide.txt"},{"": "abs-guide.txt"},{"535": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# **********************************": "abs-guide.txt"},{"# Pack a variable": "abs-guide.txt"},{"#+ with all the space-separated elements of the original array.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Attempting to just pass the array itself will not work.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# This is the trick that allows grabbing an array as a \"return value\".": "abs-guide.txt"},{"# *****************************************": "abs-guide.txt"},{"returned_array=( `Pass_Array \"$argument\"` )": "abs-guide.txt"},{"# *****************************************": "abs-guide.txt"},{"# Assign 'echoed' output of function to array variable.": "abs-guide.txt"},{"echo \"returned_array = ${returned_array[@]}\"": "abs-guide.txt"},{"echo \"=============================================================\"": "abs-guide.txt"},{"# Now, try it again,": "abs-guide.txt"},{"#+ attempting to access (list) the array from outside the function.": "abs-guide.txt"},{"Pass_Array \"$argument\"": "abs-guide.txt"},{"# The function itself lists the array, but ...": "abs-guide.txt"},{"#+ accessing the array from outside the function is forbidden.": "abs-guide.txt"},{"echo \"Passed array (within function) = ${passed_array[@]}\"": "abs-guide.txt"},{"# NULL VALUE since the array is a variable local to the function.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"############################################": "abs-guide.txt"},{"# And here is an even more explicit example:": "abs-guide.txt"},{"ret_array ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"for element in {11..20}": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo \"$element \"": "abs-guide.txt"},{"# Echo individual elements": "abs-guide.txt"},{"done": "abs-guide.txt"},{"#+ of what will be assembled into an array.": "abs-guide.txt"},{"}": "abs-guide.txt"},{"arr=( $(ret_array) )": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Assemble into array.": "abs-guide.txt"},{"": "abs-guide.txt"},{"\"Capturing array \\\"arr\\\" from function ret_array () ...\"": "abs-guide.txt"},{"\"Third element of array \\\"arr\\\" is ${arr[2]}.\"": "abs-guide.txt"},{"# 13 (zero-indexed)": "abs-guide.txt"},{"-n \"Entire array is: \"": "abs-guide.txt"},{"${arr[@]}": "abs-guide.txt"},{"# 11 12 13 14 15 16 17 18 19 20": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"# Nathan Coulter points out that passing arrays with elements containing": "abs-guide.txt"},{"#+ whitespace breaks this example.": "abs-guide.txt"},{"": "abs-guide.txt"},{"For a more elaborate example of passing arrays to functions, see Example A-10.": "abs-guide.txt"},{"\u2022": "abs-guide.txt"},{"Using the double-parentheses construct, it is possible to use C-style syntax for setting and": "abs-guide.txt"},{"incrementing/decrementing variables and in for and while loops. See Example 11-13 and Example": "abs-guide.txt"},{"11-18.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 36. Miscellany": "abs-guide.txt"},{"": "abs-guide.txt"},{"536": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"\u2022 Setting the path and umask at the beginning of a script makes it more portable -- more likely to run on": "abs-guide.txt"},{"a \"foreign\" machine whose user may have bollixed up the $PATH and umask.": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"PATH=/bin:/usr/bin:/usr/local/bin ; export PATH": "abs-guide.txt"},{"umask 022": "abs-guide.txt"},{"# Files that the script creates will have 755 permission.": "abs-guide.txt"},{"# Thanks to Ian D. Allen, for this tip.": "abs-guide.txt"},{"": "abs-guide.txt"},{"\u2022": "abs-guide.txt"},{"A useful scripting technique is to repeatedly feed the output of a filter (by piping) back to the same": "abs-guide.txt"},{"filter, but with a different set of arguments and/or options. Especially suitable for this are tr and grep.": "abs-guide.txt"},{"# From \"wstrings.sh\" example.": "abs-guide.txt"},{"wlist=`strings \"$1\" | tr A-Z a-z | tr '[:space:]' Z | \\": "abs-guide.txt"},{"tr -cs '[:alpha:]' Z | tr -s '\\173-\\377' Z | tr Z ' '`": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 36-21. Fun with anagrams": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# agram.sh: Playing games with anagrams.": "abs-guide.txt"},{"# Find anagrams of...": "abs-guide.txt"},{"LETTERSET=etaoinshrdlu": "abs-guide.txt"},{"FILTER='.......'": "abs-guide.txt"},{"# How many letters minimum?": "abs-guide.txt"},{"#": "abs-guide.txt"},{"1234567": "abs-guide.txt"},{"anagram \"$LETTERSET\" |": "abs-guide.txt"},{"grep \"$FILTER\" |": "abs-guide.txt"},{"grep '^is' |": "abs-guide.txt"},{"grep -v 's$' |": "abs-guide.txt"},{"grep -v 'ed$'": "abs-guide.txt"},{"# Possible to add many": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Find all anagrams of the letterset...": "abs-guide.txt"},{"# With at least 7 letters,": "abs-guide.txt"},{"# starting with 'is'": "abs-guide.txt"},{"# no plurals": "abs-guide.txt"},{"# no past tense verbs": "abs-guide.txt"},{"combinations of conditions and filters.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Uses \"anagram\" utility": "abs-guide.txt"},{"that is part of the author's \"yawl\" word list package.": "abs-guide.txt"},{"http://ibiblio.org/pub/Linux/libs/yawl-0.3.2.tar.gz": "abs-guide.txt"},{"http://bash.deta.in/yawl-0.3.2.tar.gz": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"# End of code.": "abs-guide.txt"},{"": "abs-guide.txt"},{"bash$ sh agram.sh": "abs-guide.txt"},{"islander": "abs-guide.txt"},{"isolate": "abs-guide.txt"},{"isolead": "abs-guide.txt"},{"isotheral": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"Exercises:": "abs-guide.txt"},{"--------Modify this script to take the LETTERSET as a command-line parameter.": "abs-guide.txt"},{"Parameterize the filters in lines 11 - 13 (as with $FILTER),": "abs-guide.txt"},{"so that they can be specified by passing arguments to a function.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# For a slightly different approach to anagramming,": "abs-guide.txt"},{"#+ see the agram2.sh script.": "abs-guide.txt"},{"": "abs-guide.txt"},{"See also Example 29-4, Example 16-25, and Example A-9.": "abs-guide.txt"},{"Chapter 36. Miscellany": "abs-guide.txt"},{"": "abs-guide.txt"},{"537": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"\u2022 Use \"anonymous here documents\" to comment out blocks of code, to save having to individually": "abs-guide.txt"},{"comment out each line with a #. See Example 19-11.": "abs-guide.txt"},{"\u2022": "abs-guide.txt"},{"Running a script on a machine that relies on a command that might not be installed is dangerous. Use": "abs-guide.txt"},{"whatis to avoid potential problems with this.": "abs-guide.txt"},{"CMD=command1": "abs-guide.txt"},{"PlanB=command2": "abs-guide.txt"},{"": "abs-guide.txt"},{"# First choice.": "abs-guide.txt"},{"# Fallback option.": "abs-guide.txt"},{"": "abs-guide.txt"},{"command_test=$(whatis \"$CMD\" | grep 'nothing appropriate')": "abs-guide.txt"},{"# If 'command1' not found on system , 'whatis' will return": "abs-guide.txt"},{"#+ \"command1: nothing appropriate.\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# A safer alternative is:": "abs-guide.txt"},{"#": "abs-guide.txt"},{"command_test=$(whereis \"$CMD\" | grep \\/)": "abs-guide.txt"},{"# But then the sense of the following test would have to be reversed,": "abs-guide.txt"},{"#+ since the $command_test variable holds content only if": "abs-guide.txt"},{"#+ the $CMD exists on the system.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"(Thanks, bojster.)": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [[ -z \"$command_test\" ]]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"$CMD option1 option2": "abs-guide.txt"},{"else": "abs-guide.txt"},{"$PlanB": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Check whether command present.": "abs-guide.txt"},{"# Run command1 with options.": "abs-guide.txt"},{"# Otherwise,": "abs-guide.txt"},{"#+ run command2.": "abs-guide.txt"},{"": "abs-guide.txt"},{"\u2022": "abs-guide.txt"},{"An if-grep test may not return expected results in an error case, when text is output to stderr, rather": "abs-guide.txt"},{"that stdout.": "abs-guide.txt"},{"if ls -l nonexistent_filename | grep -q 'No such file or directory'": "abs-guide.txt"},{"then echo \"File \\\"nonexistent_filename\\\" does not exist.\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"Redirecting stderr to stdout fixes this.": "abs-guide.txt"},{"if ls -l nonexistent_filename 2>&1 | grep -q 'No such file or directory'": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^^^^": "abs-guide.txt"},{"then echo \"File \\\"nonexistent_filename\\\" does not exist.\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# Thanks, Chris Martin, for pointing this out.": "abs-guide.txt"},{"": "abs-guide.txt"},{"\u2022 If you absolutely must access a subshell variable outside the subshell, here's a way to do it.": "abs-guide.txt"},{"TMPFILE=tmpfile": "abs-guide.txt"},{"(": "abs-guide.txt"},{"# Inside the subshell ...": "abs-guide.txt"},{"inner_variable=Inner": "abs-guide.txt"},{"echo $inner_variable": "abs-guide.txt"},{"echo $inner_variable >>$TMPFILE": "abs-guide.txt"},{")": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Create a temp file to store the variable.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Append to temp file.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Outside the subshell ...": "abs-guide.txt"},{"echo; echo \"-----\"; echo": "abs-guide.txt"},{"echo $inner_variable": "abs-guide.txt"},{"echo \"-----\"; echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Null, as expected.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Now ...": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 36. Miscellany": "abs-guide.txt"},{"": "abs-guide.txt"},{"538": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"read inner_variable <$TMPFILE": "abs-guide.txt"},{"rm -f \"$TMPFILE\"": "abs-guide.txt"},{"echo \"$inner_variable\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Read back shell variable.": "abs-guide.txt"},{"# Get rid of temp file.": "abs-guide.txt"},{"# It's an ugly kludge, but it works.": "abs-guide.txt"},{"": "abs-guide.txt"},{"\u2022": "abs-guide.txt"},{"The run-parts command is handy for running a set of command scripts in a particular sequence,": "abs-guide.txt"},{"especially in combination with cron or at.": "abs-guide.txt"},{"\u2022": "abs-guide.txt"},{"For doing multiple revisions on a complex script, use the rcs Revision Control System package.": "abs-guide.txt"},{"Among other benefits of this is automatically updated ID header tags. The co command in rcs does a": "abs-guide.txt"},{"parameter replacement of certain reserved key words, for example, replacing # $Id$ in a script with": "abs-guide.txt"},{"something like:": "abs-guide.txt"},{"# $Id: hello-world.sh,v 1.1 2004/10/16 02:43:05 bozo Exp $": "abs-guide.txt"},{"": "abs-guide.txt"},{"36.7.2. Widgets": "abs-guide.txt"},{"It would be nice to be able to invoke X-Windows widgets from a shell script. There happen to exist several": "abs-guide.txt"},{"packages that purport to do so, namely Xscript, Xmenu, and widtools. The first two of these no longer seem to": "abs-guide.txt"},{"be maintained. Fortunately, it is still possible to obtain widtools here.": "abs-guide.txt"},{"The widtools (widget tools) package requires the XForms library to be installed. Additionally, the": "abs-guide.txt"},{"Makefile needs some judicious editing before the package will build on a typical Linux system. Finally,": "abs-guide.txt"},{"three of the six widgets offered do not work (and, in fact, segfault).": "abs-guide.txt"},{"The dialog family of tools offers a method of calling \"dialog\" widgets from a shell script. The original dialog": "abs-guide.txt"},{"utility works in a text console, but its successors, gdialog, Xdialog, and kdialog use X-Windows-based widget": "abs-guide.txt"},{"sets.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 36-22. Widgets invoked from a shell script": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# dialog.sh: Using 'gdialog' widgets.": "abs-guide.txt"},{"# Must have 'gdialog' installed on your system to run this script.": "abs-guide.txt"},{"# Or, you can replace all instance of 'gdialog' below with 'kdialog' ...": "abs-guide.txt"},{"# Version 1.1 (corrected 04/05/05)": "abs-guide.txt"},{"# This script was inspired by the following article.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"\"Scripting for X Productivity,\" by Marco Fioretti,": "abs-guide.txt"},{"#": "abs-guide.txt"},{"LINUX JOURNAL, Issue 113, September 2003, pp. 86-9.": "abs-guide.txt"},{"# Thank you, all you good people at LJ.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Input error in dialog box.": "abs-guide.txt"},{"E_INPUT=85": "abs-guide.txt"},{"# Dimensions of display, input widgets.": "abs-guide.txt"},{"HEIGHT=50": "abs-guide.txt"},{"WIDTH=60": "abs-guide.txt"},{"# Output file name (constructed out of script name).": "abs-guide.txt"},{"OUTFILE=$0.output": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 36. Miscellany": "abs-guide.txt"},{"": "abs-guide.txt"},{"539": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# Display this script in a text widget.": "abs-guide.txt"},{"gdialog --title \"Displaying: $0\" --textbox $0 $HEIGHT $WIDTH": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Now, we'll try saving input in a file.": "abs-guide.txt"},{"echo -n \"VARIABLE=\" > $OUTFILE": "abs-guide.txt"},{"gdialog --title \"User Input\" --inputbox \"Enter variable, please:\" \\": "abs-guide.txt"},{"$HEIGHT $WIDTH 2>> $OUTFILE": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [ \"$?\" -eq 0 ]": "abs-guide.txt"},{"# It's good practice to check exit status.": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Executed \\\"dialog box\\\" without errors.\"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo \"Error(s) in \\\"dialog box\\\" execution.\"": "abs-guide.txt"},{"# Or, clicked on \"Cancel\", instead of \"OK\" button.": "abs-guide.txt"},{"rm $OUTFILE": "abs-guide.txt"},{"exit $E_INPUT": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Now, we'll retrieve and display the saved variable.": "abs-guide.txt"},{". $OUTFILE": "abs-guide.txt"},{"# 'Source' the saved file.": "abs-guide.txt"},{"echo \"The variable input in the \\\"input box\\\" was: \"$VARIABLE\"\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"rm $OUTFILE": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Clean up by removing the temp file.": "abs-guide.txt"},{"# Some applications may need to retain this file.": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit $?": "abs-guide.txt"},{"# Exercise: Rewrite this script using the 'zenity' widget set.": "abs-guide.txt"},{"": "abs-guide.txt"},{"The xmessage command is a simple method of popping up a message/query window. For example:": "abs-guide.txt"},{"xmessage Fatal error in script! -button exit": "abs-guide.txt"},{"": "abs-guide.txt"},{"The latest entry in the widget sweepstakes is zenity. This utility pops up GTK+ dialog widgets-and-windows,": "abs-guide.txt"},{"and it works very nicely within a script.": "abs-guide.txt"},{"get_info ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"zenity --entry": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Pops up query window . . .": "abs-guide.txt"},{"#+ and prints user entry to stdout.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Also try the --calendar and --scale options.": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Capture stdout in $answer variable.": "abs-guide.txt"},{"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"answer=$( get_info )": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo \"User entered: \"$answer\"\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"For other methods of scripting with widgets, try Tk or wish (Tcl derivatives), PerlTk (Perl with Tk": "abs-guide.txt"},{"extensions), tksh (ksh with Tk extensions), XForms4Perl (Perl with XForms extensions), Gtk-Perl (Perl with": "abs-guide.txt"},{"Gtk extensions), or PyQt (Python with Qt extensions).": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 36. Miscellany": "abs-guide.txt"},{"": "abs-guide.txt"},{"540": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"": "abs-guide.txt"},{"36.8. Security Issues": "abs-guide.txt"},{"36.8.1. Infected Shell Scripts": "abs-guide.txt"},{"A brief warning about script security is indicated. A shell script may contain a worm, trojan, or even a virus.": "abs-guide.txt"},{"For that reason, never run as root a script (or permit it to be inserted into the system startup scripts in": "abs-guide.txt"},{"/etc/rc.d) unless you have obtained said script from a trusted source or you have carefully analyzed it to": "abs-guide.txt"},{"make certain it does nothing harmful.": "abs-guide.txt"},{"Various researchers at Bell Labs and other sites, including M. Douglas McIlroy, Tom Duff, and Fred Cohen": "abs-guide.txt"},{"have investigated the implications of shell script viruses. They conclude that it is all too easy for even a": "abs-guide.txt"},{"novice, a \"script kiddie,\" to write one. [128]": "abs-guide.txt"},{"Here is yet another reason to learn scripting. Being able to look at and understand scripts may protect your": "abs-guide.txt"},{"system from being compromised by a rogue script.": "abs-guide.txt"},{"": "abs-guide.txt"},{"36.8.2. Hiding Shell Script Source": "abs-guide.txt"},{"For security purposes, it may be necessary to render a script unreadable. If only there were a utility to create a": "abs-guide.txt"},{"stripped binary executable from a script. Francisco Rosales' shc -- generic shell script compiler does exactly": "abs-guide.txt"},{"that.": "abs-guide.txt"},{"Unfortunately, according to an article in the October, 2005 Linux Journal, the binary can, in at least some": "abs-guide.txt"},{"cases, be decrypted to recover the original script source. Still, this could be a useful method of keeping scripts": "abs-guide.txt"},{"secure from all but the most skilled hackers.": "abs-guide.txt"},{"": "abs-guide.txt"},{"36.8.3. Writing Secure Shell Scripts": "abs-guide.txt"},{"Dan Stromberg suggests the following guidelines for writing (relatively) secure shell scripts.": "abs-guide.txt"},{"\u2022 Don't put secret data in environment variables.": "abs-guide.txt"},{"\u2022 Don't pass secret data in an external command's arguments (pass them in via a pipe or redirection": "abs-guide.txt"},{"instead).": "abs-guide.txt"},{"\u2022 Set your $PATH carefully. Don't just trust whatever path you inherit from the caller if your script is": "abs-guide.txt"},{"running as root. In fact, whenever you use an environment variable inherited from the caller, think": "abs-guide.txt"},{"about what could happen if the caller put something misleading in the variable, e.g., if the caller set": "abs-guide.txt"},{"$HOME to /etc.": "abs-guide.txt"},{"": "abs-guide.txt"},{"36.9. Portability Issues": "abs-guide.txt"},{"It is easier to port a shell than a shell script.": "abs-guide.txt"},{"--Larry Wall": "abs-guide.txt"},{"This book deals specifically with Bash scripting on a GNU/Linux system. All the same, users of sh and ksh": "abs-guide.txt"},{"will find much of value here.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 36. Miscellany": "abs-guide.txt"},{"": "abs-guide.txt"},{"541": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"As it happens, many of the various shells and scripting languages seem to be converging toward the POSIX": "abs-guide.txt"},{"1003.2 standard. Invoking Bash with the --posix option or inserting a set -o posix at the head of a script": "abs-guide.txt"},{"causes Bash to conform very closely to this standard. Another alternative is to use a #!/bin/sh sha-bang header": "abs-guide.txt"},{"in the script, rather than #!/bin/bash. [129] Note that /bin/sh is a link to /bin/bash in Linux and certain": "abs-guide.txt"},{"other flavors of UNIX, and a script invoked this way disables extended Bash functionality.": "abs-guide.txt"},{"Most Bash scripts will run as-is under ksh, and vice-versa, since Chet Ramey has been busily porting ksh": "abs-guide.txt"},{"features to the latest versions of Bash.": "abs-guide.txt"},{"On a commercial UNIX machine, scripts using GNU-specific features of standard commands may not work.": "abs-guide.txt"},{"This has become less of a problem in the last few years, as the GNU utilities have pretty much displaced their": "abs-guide.txt"},{"proprietary counterparts even on \"big-iron\" UNIX. Caldera's release of the source to many of the original": "abs-guide.txt"},{"UNIX utilities has accelerated the trend.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Bash has certain features that the traditional Bourne shell lacks. Among these are:": "abs-guide.txt"},{"\u2022 Certain extended invocation options": "abs-guide.txt"},{"\u2022 Command substitution using $( ) notation": "abs-guide.txt"},{"\u2022 Brace expansion": "abs-guide.txt"},{"\u2022 Certain array operations, and associative arrays": "abs-guide.txt"},{"\u2022 The double brackets extended test construct": "abs-guide.txt"},{"\u2022 The double-parentheses arithmetic-evaluation construct": "abs-guide.txt"},{"\u2022 Certain string manipulation operations": "abs-guide.txt"},{"\u2022 Process substitution": "abs-guide.txt"},{"\u2022 A Regular Expression matching operator": "abs-guide.txt"},{"\u2022 Bash-specific builtins": "abs-guide.txt"},{"\u2022 Coprocesses": "abs-guide.txt"},{"See the Bash F.A.Q. for a complete listing.": "abs-guide.txt"},{"": "abs-guide.txt"},{"36.9.1. A Test Suite": "abs-guide.txt"},{"Let us illustrate some of the incompatibilities between Bash and the classic Bourne shell. Download and": "abs-guide.txt"},{"install the \"Heirloom Bourne Shell\" and run the following script, first using Bash, then the classic sh.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 36-23. Test Suite": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# test-suite.sh": "abs-guide.txt"},{"# A partial Bash compatibility test suite.": "abs-guide.txt"},{"# Run this on your version of Bash, or some other shell.": "abs-guide.txt"},{"default_option=FAIL": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo -n \"Testing": "abs-guide.txt"},{"sleep 1; echo -n": "abs-guide.txt"},{"sleep 1; echo -n": "abs-guide.txt"},{"sleep 1; echo \".": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Tests below will fail unless . . .": "abs-guide.txt"},{"": "abs-guide.txt"},{"\"": "abs-guide.txt"},{"\". \"": "abs-guide.txt"},{"\". \"": "abs-guide.txt"},{"\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 36. Miscellany": "abs-guide.txt"},{"": "abs-guide.txt"},{"542": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# Double brackets": "abs-guide.txt"},{"String=\"Double brackets supported?\"": "abs-guide.txt"},{"echo -n \"Double brackets test: \"": "abs-guide.txt"},{"if [[ \"$String\" = \"Double brackets supported?\" ]]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"PASS\"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo \"FAIL\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Double brackets and regex matching": "abs-guide.txt"},{"String=\"Regex matching supported?\"": "abs-guide.txt"},{"echo -n \"Regex matching: \"": "abs-guide.txt"},{"if [[ \"$String\" =~ R.....matching* ]]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"PASS\"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo \"FAIL\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Arrays": "abs-guide.txt"},{"test_arr=$default_option": "abs-guide.txt"},{"# FAIL": "abs-guide.txt"},{"Array=( If supports arrays will print PASS )": "abs-guide.txt"},{"test_arr=${Array[5]}": "abs-guide.txt"},{"echo \"Array test: $test_arr\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Command Substitution": "abs-guide.txt"},{"csub_test ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"echo \"PASS\"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"test_csub=$default_option": "abs-guide.txt"},{"# FAIL": "abs-guide.txt"},{"test_csub=$(csub_test)": "abs-guide.txt"},{"echo \"Command substitution test: $test_csub\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"# Completing this script is an exercise for the reader.": "abs-guide.txt"},{"# Add to the above similar tests for double parentheses,": "abs-guide.txt"},{"#+ brace expansion, process substitution, etc.": "abs-guide.txt"},{"exit $?": "abs-guide.txt"},{"": "abs-guide.txt"},{"36.10. Shell Scripting Under Windows": "abs-guide.txt"},{"Even users running that other OS can run UNIX-like shell scripts, and therefore benefit from many of the": "abs-guide.txt"},{"lessons of this book. The Cygwin package from Cygnus and the MKS utilities from Mortice Kern Associates": "abs-guide.txt"},{"add shell scripting capabilities to Windows.": "abs-guide.txt"},{"Another alternative is UWIN, written by David Korn of AT&T, of Korn Shell fame.": "abs-guide.txt"},{"In 2006, Microsoft released the Windows Powershell\u00ae, which contains limited Bash-like command-line": "abs-guide.txt"},{"scripting capabilities.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 36. Miscellany": "abs-guide.txt"},{"": "abs-guide.txt"},{"543": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fChapter 37. Bash, versions 2, 3, and 4": "abs-guide.txt"},{"37.1. Bash, version 2": "abs-guide.txt"},{"The current version of Bash, the one you have running on your machine, is most likely version 2.xx.yy,": "abs-guide.txt"},{"3.xx.yy, or 4.xx.yy.": "abs-guide.txt"},{"bash$ echo $BASH_VERSION": "abs-guide.txt"},{"3.2.25(1)-release": "abs-guide.txt"},{"": "abs-guide.txt"},{"The version 2 update of the classic Bash scripting language added array variables, string and parameter": "abs-guide.txt"},{"expansion, and a better method of indirect variable references, among other features.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 37-1. String expansion": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# String expansion.": "abs-guide.txt"},{"# Introduced with version 2 of Bash.": "abs-guide.txt"},{"# Strings of the form $'xxx'": "abs-guide.txt"},{"#+ have the standard escaped characters interpreted.": "abs-guide.txt"},{"echo $'Ringing bell 3 times \\a \\a \\a'": "abs-guide.txt"},{"# May only ring once with certain terminals.": "abs-guide.txt"},{"# Or ...": "abs-guide.txt"},{"# May not ring at all, depending on terminal settings.": "abs-guide.txt"},{"echo $'Three form feeds \\f \\f \\f'": "abs-guide.txt"},{"echo $'10 newlines \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n'": "abs-guide.txt"},{"echo $'\\102\\141\\163\\150'": "abs-guide.txt"},{"#": "abs-guide.txt"},{"B": "abs-guide.txt"},{"a": "abs-guide.txt"},{"s": "abs-guide.txt"},{"h": "abs-guide.txt"},{"# Octal equivalent of characters.": "abs-guide.txt"},{"exit": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 37-2. Indirect variable references - the new way": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# Indirect variable referencing.": "abs-guide.txt"},{"# This has a few of the attributes of references in C++.": "abs-guide.txt"},{"": "abs-guide.txt"},{"a=letter_of_alphabet": "abs-guide.txt"},{"letter_of_alphabet=z": "abs-guide.txt"},{"echo \"a = $a\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Direct reference.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo \"Now a = ${!a}\"": "abs-guide.txt"},{"# Indirect reference.": "abs-guide.txt"},{"# The ${!variable} notation is more intuitive than the old": "abs-guide.txt"},{"#+ eval var1=\\$$var2": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 37. Bash, versions 2, 3, and 4": "abs-guide.txt"},{"": "abs-guide.txt"},{"544": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"t=table_cell_3": "abs-guide.txt"},{"table_cell_3=24": "abs-guide.txt"},{"echo \"t = ${!t}\"": "abs-guide.txt"},{"table_cell_3=387": "abs-guide.txt"},{"echo \"Value of t changed to ${!t}\"": "abs-guide.txt"},{"# No 'eval' necessary.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"# t = 24": "abs-guide.txt"},{"# 387": "abs-guide.txt"},{"": "abs-guide.txt"},{"This is useful for referencing members of an array or table,": "abs-guide.txt"},{"or for simulating a multi-dimensional array.": "abs-guide.txt"},{"An indexing option (analogous to pointer arithmetic)": "abs-guide.txt"},{"would have been nice. Sigh.": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"# See also, ind-ref.sh example.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 37-3. Simple database application, using indirect variable referencing": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# resistor-inventory.sh": "abs-guide.txt"},{"# Simple database / table-lookup application.": "abs-guide.txt"},{"# ============================================================== #": "abs-guide.txt"},{"# Data": "abs-guide.txt"},{"B1723_value=470": "abs-guide.txt"},{"B1723_powerdissip=.25": "abs-guide.txt"},{"B1723_colorcode=\"yellow-violet-brown\"": "abs-guide.txt"},{"B1723_loc=173": "abs-guide.txt"},{"B1723_inventory=78": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Ohms": "abs-guide.txt"},{"Watts": "abs-guide.txt"},{"Color bands": "abs-guide.txt"},{"Where they are": "abs-guide.txt"},{"How many": "abs-guide.txt"},{"": "abs-guide.txt"},{"B1724_value=1000": "abs-guide.txt"},{"B1724_powerdissip=.25": "abs-guide.txt"},{"B1724_colorcode=\"brown-black-red\"": "abs-guide.txt"},{"B1724_loc=24N": "abs-guide.txt"},{"B1724_inventory=243": "abs-guide.txt"},{"B1725_value=10000": "abs-guide.txt"},{"B1725_powerdissip=.125": "abs-guide.txt"},{"B1725_colorcode=\"brown-black-orange\"": "abs-guide.txt"},{"B1725_loc=24N": "abs-guide.txt"},{"B1725_inventory=89": "abs-guide.txt"},{"# ============================================================== #": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"PS3='Enter catalog number: '": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"select catalog_number in \"B1723\" \"B1724\" \"B1725\"": "abs-guide.txt"},{"do": "abs-guide.txt"},{"Inv=${catalog_number}_inventory": "abs-guide.txt"},{"Val=${catalog_number}_value": "abs-guide.txt"},{"Pdissip=${catalog_number}_powerdissip": "abs-guide.txt"},{"Loc=${catalog_number}_loc": "abs-guide.txt"},{"Ccode=${catalog_number}_colorcode": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 37. Bash, versions 2, 3, and 4": "abs-guide.txt"},{"": "abs-guide.txt"},{"545": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"Catalog number $catalog_number:\"": "abs-guide.txt"},{"# Now, retrieve value, using indirect referencing.": "abs-guide.txt"},{"echo \"There are ${!Inv} of [${!Val} ohm / ${!Pdissip} watt]\\": "abs-guide.txt"},{"resistors in stock.\" #": "abs-guide.txt"},{"^": "abs-guide.txt"},{"^": "abs-guide.txt"},{"# As of Bash 4.2, you can replace \"ohm\" with \\u2126 (using echo -e).": "abs-guide.txt"},{"echo \"These are located in bin # ${!Loc}.\"": "abs-guide.txt"},{"echo \"Their color code is \\\"${!Ccode}\\\".\"": "abs-guide.txt"},{"break": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo; echo": "abs-guide.txt"},{"# Exercises:": "abs-guide.txt"},{"# --------# 1) Rewrite this script to read its data from an external file.": "abs-guide.txt"},{"# 2) Rewrite this script to use arrays,": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"rather than indirect variable referencing.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Which method is more straightforward and intuitive?": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Which method is easier to code?": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Notes:": "abs-guide.txt"},{"# ----# Shell scripts are inappropriate for anything except the most simple": "abs-guide.txt"},{"#+ database applications, and even then it involves workarounds and kludges.": "abs-guide.txt"},{"# Much better is to use a language with native support for data structures,": "abs-guide.txt"},{"#+ such as C++ or Java (or even Perl).": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 37-4. Using arrays and other miscellaneous trickery to deal four random hands from a deck of": "abs-guide.txt"},{"cards": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# cards.sh": "abs-guide.txt"},{"# Deals four random hands from a deck of cards.": "abs-guide.txt"},{"UNPICKED=0": "abs-guide.txt"},{"PICKED=1": "abs-guide.txt"},{"DUPE_CARD=99": "abs-guide.txt"},{"LOWER_LIMIT=0": "abs-guide.txt"},{"UPPER_LIMIT=51": "abs-guide.txt"},{"CARDS_IN_SUIT=13": "abs-guide.txt"},{"CARDS=52": "abs-guide.txt"},{"declare -a Deck": "abs-guide.txt"},{"declare -a Suits": "abs-guide.txt"},{"declare -a Cards": "abs-guide.txt"},{"# It would have been easier to implement and more intuitive": "abs-guide.txt"},{"#+ with a single, 3-dimensional array.": "abs-guide.txt"},{"# Perhaps a future version of Bash will support multidimensional arrays.": "abs-guide.txt"},{"": "abs-guide.txt"},{"initialize_Deck ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"i=$LOWER_LIMIT": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 37. Bash, versions 2, 3, and 4": "abs-guide.txt"},{"": "abs-guide.txt"},{"546": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"until [ \"$i\" -gt $UPPER_LIMIT ]": "abs-guide.txt"},{"do": "abs-guide.txt"},{"Deck[i]=$UNPICKED": "abs-guide.txt"},{"# Set each card of \"Deck\" as unpicked.": "abs-guide.txt"},{"let \"i += 1\"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"}": "abs-guide.txt"},{"initialize_Suits ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"Suits[0]=C #Clubs": "abs-guide.txt"},{"Suits[1]=D #Diamonds": "abs-guide.txt"},{"Suits[2]=H #Hearts": "abs-guide.txt"},{"Suits[3]=S #Spades": "abs-guide.txt"},{"}": "abs-guide.txt"},{"initialize_Cards ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"Cards=(2 3 4 5 6 7 8 9 10 J Q K A)": "abs-guide.txt"},{"# Alternate method of initializing an array.": "abs-guide.txt"},{"}": "abs-guide.txt"},{"pick_a_card ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"card_number=$RANDOM": "abs-guide.txt"},{"let \"card_number %= $CARDS\" # Restrict range to 0 - 51, i.e., 52 cards.": "abs-guide.txt"},{"if [ \"${Deck[card_number]}\" -eq $UNPICKED ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"Deck[card_number]=$PICKED": "abs-guide.txt"},{"return $card_number": "abs-guide.txt"},{"else": "abs-guide.txt"},{"return $DUPE_CARD": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"}": "abs-guide.txt"},{"parse_card ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"number=$1": "abs-guide.txt"},{"let \"suit_number = number / CARDS_IN_SUIT\"": "abs-guide.txt"},{"suit=${Suits[suit_number]}": "abs-guide.txt"},{"echo -n \"$suit-\"": "abs-guide.txt"},{"let \"card_no = number % CARDS_IN_SUIT\"": "abs-guide.txt"},{"Card=${Cards[card_no]}": "abs-guide.txt"},{"printf %-4s $Card": "abs-guide.txt"},{"# Print cards in neat columns.": "abs-guide.txt"},{"}": "abs-guide.txt"},{"seed_random () # Seed random number generator.": "abs-guide.txt"},{"{": "abs-guide.txt"},{"# What happens if you don't do this?": "abs-guide.txt"},{"seed=`eval date +%s`": "abs-guide.txt"},{"let \"seed %= 32766\"": "abs-guide.txt"},{"RANDOM=$seed": "abs-guide.txt"},{"} # Consider other methods of seeding the random number generator.": "abs-guide.txt"},{"deal_cards ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"cards_picked=0": "abs-guide.txt"},{"while [ \"$cards_picked\" -le $UPPER_LIMIT ]": "abs-guide.txt"},{"do": "abs-guide.txt"},{"pick_a_card": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 37. Bash, versions 2, 3, and 4": "abs-guide.txt"},{"": "abs-guide.txt"},{"547": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"t=$?": "abs-guide.txt"},{"if [ \"$t\" -ne $DUPE_CARD ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"parse_card $t": "abs-guide.txt"},{"u=$cards_picked+1": "abs-guide.txt"},{"# Change back to 1-based indexing, temporarily. Why?": "abs-guide.txt"},{"let \"u %= $CARDS_IN_SUIT\"": "abs-guide.txt"},{"if [ \"$u\" -eq 0 ]": "abs-guide.txt"},{"# Nested if/then condition test.": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# Each hand set apart with a blank line.": "abs-guide.txt"},{"let \"cards_picked += 1\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"return 0": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Structured programming:": "abs-guide.txt"},{"# Entire program logic modularized in functions.": "abs-guide.txt"},{"#===============": "abs-guide.txt"},{"seed_random": "abs-guide.txt"},{"initialize_Deck": "abs-guide.txt"},{"initialize_Suits": "abs-guide.txt"},{"initialize_Cards": "abs-guide.txt"},{"deal_cards": "abs-guide.txt"},{"#===============": "abs-guide.txt"},{"exit": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Exercise 1:": "abs-guide.txt"},{"# Add comments to thoroughly document this script.": "abs-guide.txt"},{"# Exercise 2:": "abs-guide.txt"},{"# Add a routine (function) to print out each hand sorted in suits.": "abs-guide.txt"},{"# You may add other bells and whistles if you like.": "abs-guide.txt"},{"# Exercise 3:": "abs-guide.txt"},{"# Simplify and streamline the logic of the script.": "abs-guide.txt"},{"": "abs-guide.txt"},{"37.2. Bash, version 3": "abs-guide.txt"},{"On July 27, 2004, Chet Ramey released version 3 of Bash. This update fixed quite a number of bugs and": "abs-guide.txt"},{"added new features.": "abs-guide.txt"},{"Some of the more important added features:": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 37. Bash, versions 2, 3, and 4": "abs-guide.txt"},{"": "abs-guide.txt"},{"548": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"A new, more generalized {a..z} brace expansion operator.": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"for i in {1..10}": "abs-guide.txt"},{"# Simpler and more straightforward than": "abs-guide.txt"},{"#+ for i in $(seq 10)": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo -n \"$i \"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"# 1 2 3 4 5 6 7 8 9 10": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Or just . . .": "abs-guide.txt"},{"echo {a..z}": "abs-guide.txt"},{"echo {e..m}": "abs-guide.txt"},{"echo {z..a}": "abs-guide.txt"},{"echo {25..30}": "abs-guide.txt"},{"echo {3..-2}": "abs-guide.txt"},{"echo {X..d}": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo {]..a}": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"a b c d e f g h i j k l m n o p q r s t u v w x y z": "abs-guide.txt"},{"e f g h i j k l m": "abs-guide.txt"},{"z y x w v u t s r q p o n m l k j i h g f e d c b a": "abs-guide.txt"},{"Works backwards, too.": "abs-guide.txt"},{"25 26 27 28 29 30": "abs-guide.txt"},{"3 2 1 0 -1 -2": "abs-guide.txt"},{"X Y Z [ ] ^ _ ` a b c d": "abs-guide.txt"},{"Shows (some of) the ASCII characters between Z and a,": "abs-guide.txt"},{"but don't rely on this type of behavior because . . .": "abs-guide.txt"},{"{]..a}": "abs-guide.txt"},{"Why?": "abs-guide.txt"},{"": "abs-guide.txt"},{"# You can tack on prefixes and suffixes.": "abs-guide.txt"},{"echo \"Number #\"{1..4}, \"...\"": "abs-guide.txt"},{"# Number #1, Number #2, Number #3, Number #4, ...": "abs-guide.txt"},{"": "abs-guide.txt"},{"# You can concatenate brace-expansion sets.": "abs-guide.txt"},{"echo {1..3}{x..z}\" +\" \"...\"": "abs-guide.txt"},{"# 1x + 1y + 1z + 2x + 2y + 2z + 3x + 3y + 3z + ...": "abs-guide.txt"},{"# Generates an algebraic expression.": "abs-guide.txt"},{"# This could be used to find permutations.": "abs-guide.txt"},{"# You can nest brace-expansion sets.": "abs-guide.txt"},{"echo {{a..c},{1..3}}": "abs-guide.txt"},{"# a b c 1 2 3": "abs-guide.txt"},{"# The \"comma operator\" splices together strings.": "abs-guide.txt"},{"# ########## ######### ############ ########### ######### ###############": "abs-guide.txt"},{"# Unfortunately, brace expansion does not lend itself to parameterization.": "abs-guide.txt"},{"var1=1": "abs-guide.txt"},{"var2=5": "abs-guide.txt"},{"echo {$var1..$var2}": "abs-guide.txt"},{"# {1..5}": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Yet, as Emiliano G. points out, using \"eval\" overcomes this limitation.": "abs-guide.txt"},{"start=0": "abs-guide.txt"},{"end=10": "abs-guide.txt"},{"for index in $(eval echo {$start..$end})": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo -n \"$index \"": "abs-guide.txt"},{"# 0 1 2 3 4 5 6 7 8 9 10": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 37. Bash, versions 2, 3, and 4": "abs-guide.txt"},{"": "abs-guide.txt"},{"549": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"\u2022 done": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"\u2022 The ${!array[@]} operator, which expands to all the indices of a given array.": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"Array=(element-zero element-one element-two element-three)": "abs-guide.txt"},{"echo ${Array[0]}": "abs-guide.txt"},{"": "abs-guide.txt"},{"# element-zero": "abs-guide.txt"},{"# First element of array.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo ${!Array[@]}": "abs-guide.txt"},{"": "abs-guide.txt"},{"# 0 1 2 3": "abs-guide.txt"},{"# All the indices of Array.": "abs-guide.txt"},{"": "abs-guide.txt"},{"for i in ${!Array[@]}": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo ${Array[i]} # element-zero": "abs-guide.txt"},{"# element-one": "abs-guide.txt"},{"# element-two": "abs-guide.txt"},{"# element-three": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# All the elements in Array.": "abs-guide.txt"},{"done": "abs-guide.txt"},{"": "abs-guide.txt"},{"\u2022": "abs-guide.txt"},{"The =~ Regular Expression matching operator within a double brackets test expression. (Perl has a": "abs-guide.txt"},{"similar operator.)": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"variable=\"This is a fine mess.\"": "abs-guide.txt"},{"echo \"$variable\"": "abs-guide.txt"},{"# Regex matching with =~ operator within [[ double brackets ]].": "abs-guide.txt"},{"if [[ \"$variable\" =~ T.........fin*es* ]]": "abs-guide.txt"},{"# NOTE: As of version 3.2 of Bash, expression to match no longer quoted.": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"match found\"": "abs-guide.txt"},{"# match found": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"Or, more usefully:": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"input=$1": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [[ \"$input\" =~ \"[0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9][0-9][0-9]\" ]]": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^ NOTE: Quoting not necessary, as of version 3.2 of Bash.": "abs-guide.txt"},{"# NNN-NN-NNNN (where each N is a digit).": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Social Security number.\"": "abs-guide.txt"},{"# Process SSN.": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo \"Not a Social Security number!\"": "abs-guide.txt"},{"# Or, ask for corrected input.": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 37. Bash, versions 2, 3, and 4": "abs-guide.txt"},{"": "abs-guide.txt"},{"550": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"For additional examples of using the =~ operator, see Example A-29, Example 19-14, Example A-35,": "abs-guide.txt"},{"and Example A-24.": "abs-guide.txt"},{"\u2022": "abs-guide.txt"},{"The new set -o pipefail option is useful for debugging pipes. If this option is set, then the exit": "abs-guide.txt"},{"status of a pipe is the exit status of the last command in the pipe to fail (return a non-zero value),": "abs-guide.txt"},{"rather than the actual final command in the pipe.": "abs-guide.txt"},{"See Example 16-43.": "abs-guide.txt"},{"The update to version 3 of Bash breaks a few scripts that worked under earlier versions. Test critical": "abs-guide.txt"},{"legacy scripts to make sure they still work!": "abs-guide.txt"},{"As it happens, a couple of the scripts in the Advanced Bash Scripting Guide had to be fixed up (see": "abs-guide.txt"},{"Example 9-4, for instance).": "abs-guide.txt"},{"": "abs-guide.txt"},{"37.2.1. Bash, version 3.1": "abs-guide.txt"},{"The version 3.1 update of Bash introduces a number of bugfixes and a few minor changes.": "abs-guide.txt"},{"\u2022 The += operator is now permitted in in places where previously only the = assignment operator was": "abs-guide.txt"},{"recognized.": "abs-guide.txt"},{"": "abs-guide.txt"},{"a=1": "abs-guide.txt"},{"echo $a": "abs-guide.txt"},{"": "abs-guide.txt"},{"# 1": "abs-guide.txt"},{"": "abs-guide.txt"},{"a+=5": "abs-guide.txt"},{"echo $a": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Won't work under versions of Bash earlier than 3.1.": "abs-guide.txt"},{"# 15": "abs-guide.txt"},{"": "abs-guide.txt"},{"a+=Hello": "abs-guide.txt"},{"echo $a": "abs-guide.txt"},{"": "abs-guide.txt"},{"# 15Hello": "abs-guide.txt"},{"": "abs-guide.txt"},{"Here, += functions as a string concatenation operator. Note that its behavior in this particular context": "abs-guide.txt"},{"is different than within a let construct.": "abs-guide.txt"},{"a=1": "abs-guide.txt"},{"echo $a": "abs-guide.txt"},{"": "abs-guide.txt"},{"# 1": "abs-guide.txt"},{"": "abs-guide.txt"},{"let a+=5": "abs-guide.txt"},{"echo $a": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Integer arithmetic, rather than string concatenation.": "abs-guide.txt"},{"# 6": "abs-guide.txt"},{"": "abs-guide.txt"},{"let a+=Hello": "abs-guide.txt"},{"echo $a": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Doesn't \"add\" anything to a.": "abs-guide.txt"},{"# 6": "abs-guide.txt"},{"": "abs-guide.txt"},{"Jeffrey Haemer points out that this concatenation operator can be quite useful. In this instance, we": "abs-guide.txt"},{"append a directory to the $PATH.": "abs-guide.txt"},{"bash$ echo $PATH": "abs-guide.txt"},{"/usr/bin:/bin:/usr/local/bin:/usr/X11R6/bin/:/usr/games": "abs-guide.txt"},{"": "abs-guide.txt"},{"bash$ PATH+=:/opt/bin": "abs-guide.txt"},{"bash$ echo $PATH": "abs-guide.txt"},{"/usr/bin:/bin:/usr/local/bin:/usr/X11R6/bin/:/usr/games:/opt/bin": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 37. Bash, versions 2, 3, and 4": "abs-guide.txt"},{"": "abs-guide.txt"},{"551": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"": "abs-guide.txt"},{"37.2.2. Bash, version 3.2": "abs-guide.txt"},{"This is pretty much a bugfix update.": "abs-guide.txt"},{"\u2022 In global parameter substitutions, the pattern no longer anchors at the start of the string.": "abs-guide.txt"},{"\u2022 The --wordexp option disables process substitution.": "abs-guide.txt"},{"\u2022 The =~ Regular Expression match operator no longer requires quoting of the pattern within [[ ... ]].": "abs-guide.txt"},{"In fact, quoting in this context is not advisable as it may cause regex evaluation to fail.": "abs-guide.txt"},{"Chet Ramey states in the Bash FAQ that quoting explicitly disables regex evaluation.": "abs-guide.txt"},{"See also the Ubuntu Bug List and Wikinerds on Bash syntax.": "abs-guide.txt"},{"Setting shopt -s compat31 in a script causes reversion to the original behavior.": "abs-guide.txt"},{"": "abs-guide.txt"},{"37.3. Bash, version 4": "abs-guide.txt"},{"Chet Ramey announced Version 4 of Bash on the 20th of February, 2009. This release has a number of": "abs-guide.txt"},{"significant new features, as well as some important bugfixes.": "abs-guide.txt"},{"Among the new goodies:": "abs-guide.txt"},{"\u2022 Associative arrays. [130]": "abs-guide.txt"},{"An associative array can be thought of as a set of two linked arrays -- one holding the data, and the": "abs-guide.txt"},{"other the keys that index the individual elements of the data array.": "abs-guide.txt"},{"Example 37-5. A simple address database": "abs-guide.txt"},{"#!/bin/bash4": "abs-guide.txt"},{"# fetch_address.sh": "abs-guide.txt"},{"declare -A address": "abs-guide.txt"},{"#": "abs-guide.txt"},{"-A option declares associative array.": "abs-guide.txt"},{"address[Charles]=\"414 W. 10th Ave., Baltimore, MD 21236\"": "abs-guide.txt"},{"address[John]=\"202 E. 3rd St., New York, NY 10009\"": "abs-guide.txt"},{"address[Wilma]=\"1854 Vermont Ave, Los Angeles, CA 90023\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo \"Charles's address is ${address[Charles]}.\"": "abs-guide.txt"},{"# Charles's address is 414 W. 10th Ave., Baltimore, MD 21236.": "abs-guide.txt"},{"echo \"Wilma's address is ${address[Wilma]}.\"": "abs-guide.txt"},{"# Wilma's address is 1854 Vermont Ave, Los Angeles, CA 90023.": "abs-guide.txt"},{"echo \"John's address is ${address[John]}.\"": "abs-guide.txt"},{"# John's address is 202 E. 3rd St., New York, NY 10009.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"${!address[*]}\"": "abs-guide.txt"},{"# Charles John Wilma": "abs-guide.txt"},{"": "abs-guide.txt"},{"# The array indices ...": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 37. Bash, versions 2, 3, and 4": "abs-guide.txt"},{"": "abs-guide.txt"},{"552": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"Example 37-6. A somewhat more elaborate address database": "abs-guide.txt"},{"#!/bin/bash4": "abs-guide.txt"},{"# fetch_address-2.sh": "abs-guide.txt"},{"# A more elaborate version of fetch_address.sh.": "abs-guide.txt"},{"SUCCESS=0": "abs-guide.txt"},{"E_DB=99": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Error code for missing entry.": "abs-guide.txt"},{"": "abs-guide.txt"},{"declare -A address": "abs-guide.txt"},{"#": "abs-guide.txt"},{"-A option declares associative array.": "abs-guide.txt"},{"": "abs-guide.txt"},{"store_address ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"address[$1]=\"$2\"": "abs-guide.txt"},{"return $?": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"fetch_address ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"if [[ -z \"${address[$1]}\" ]]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"$1's address is not in database.\"": "abs-guide.txt"},{"return $E_DB": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"echo \"$1's address is ${address[$1]}.\"": "abs-guide.txt"},{"return $?": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"store_address \"Lucas Fayne\" \"414 W. 13th Ave., Baltimore, MD 21236\"": "abs-guide.txt"},{"store_address \"Arvid Boyce\" \"202 E. 3rd St., New York, NY 10009\"": "abs-guide.txt"},{"store_address \"Velma Winston\" \"1854 Vermont Ave, Los Angeles, CA 90023\"": "abs-guide.txt"},{"# Exercise:": "abs-guide.txt"},{"# Rewrite the above store_address calls to read data from a file,": "abs-guide.txt"},{"#+ then assign field 1 to name, field 2 to address in the array.": "abs-guide.txt"},{"# Each line in the file would have a format corresponding to the above.": "abs-guide.txt"},{"# Use a while-read loop to read from file, sed or awk to parse the fields.": "abs-guide.txt"},{"fetch_address \"Lucas Fayne\"": "abs-guide.txt"},{"# Lucas Fayne's address is 414 W. 13th Ave., Baltimore, MD 21236.": "abs-guide.txt"},{"fetch_address \"Velma Winston\"": "abs-guide.txt"},{"# Velma Winston's address is 1854 Vermont Ave, Los Angeles, CA 90023.": "abs-guide.txt"},{"fetch_address \"Arvid Boyce\"": "abs-guide.txt"},{"# Arvid Boyce's address is 202 E. 3rd St., New York, NY 10009.": "abs-guide.txt"},{"fetch_address \"Bozo Bozeman\"": "abs-guide.txt"},{"# Bozo Bozeman's address is not in database.": "abs-guide.txt"},{"exit $?": "abs-guide.txt"},{"": "abs-guide.txt"},{"# In this case, exit code = 99, since that is function return.": "abs-guide.txt"},{"": "abs-guide.txt"},{"See Example A-53 for an interesting usage of an associative array.": "abs-guide.txt"},{"Elements of the index array may include embedded space characters, or even leading": "abs-guide.txt"},{"and/or trailing space characters. However, index array elements containing only": "abs-guide.txt"},{"whitespace are not permitted.": "abs-guide.txt"},{"address[": "abs-guide.txt"},{"": "abs-guide.txt"},{"]=\"Blank\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Error!": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 37. Bash, versions 2, 3, and 4": "abs-guide.txt"},{"": "abs-guide.txt"},{"553": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"\u2022 Enhancements to the case construct: the ;;& and ;& terminators.": "abs-guide.txt"},{"Example 37-7. Testing characters": "abs-guide.txt"},{"#!/bin/bash4": "abs-guide.txt"},{"test_char ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"case \"$1\" in": "abs-guide.txt"},{"[[:print:]] ) echo \"$1 is a printable character.\";;&": "abs-guide.txt"},{"# |": "abs-guide.txt"},{"# The ;;& terminator continues to the next pattern test.": "abs-guide.txt"},{"|": "abs-guide.txt"},{"[[:alnum:]] ) echo \"$1 is an alpha/numeric character.\";;& # v": "abs-guide.txt"},{"[[:alpha:]] ) echo \"$1 is an alphabetic character.\";;&": "abs-guide.txt"},{"# v": "abs-guide.txt"},{"[[:lower:]] ) echo \"$1 is a lowercase alphabetic character.\";;&": "abs-guide.txt"},{"[[:digit:]] ) echo \"$1 is an numeric character.\";&": "abs-guide.txt"},{"# |": "abs-guide.txt"},{"# The ;& terminator executes the next statement ...": "abs-guide.txt"},{"# |": "abs-guide.txt"},{"%%%@@@@@": "abs-guide.txt"},{") echo \"********************************\";;": "abs-guide.txt"},{"# v": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^^^^^^^^ ... even with a dummy pattern.": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"}": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"test_char 3": "abs-guide.txt"},{"# 3 is a printable character.": "abs-guide.txt"},{"# 3 is an alpha/numeric character.": "abs-guide.txt"},{"# 3 is an numeric character.": "abs-guide.txt"},{"# ********************************": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"test_char m": "abs-guide.txt"},{"# m is a printable character.": "abs-guide.txt"},{"# m is an alpha/numeric character.": "abs-guide.txt"},{"# m is an alphabetic character.": "abs-guide.txt"},{"# m is a lowercase alphabetic character.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"test_char /": "abs-guide.txt"},{"# / is a printable character.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"# The ;;& terminator can save complex if/then conditions.": "abs-guide.txt"},{"# The ;& is somewhat less useful.": "abs-guide.txt"},{"": "abs-guide.txt"},{"\u2022 The new coproc builtin enables two parallel processes to communicate and interact. As Chet Ramey": "abs-guide.txt"},{"states in the Bash FAQ [131] , ver. 4.01:": "abs-guide.txt"},{"There is a new 'coproc' reserved word that": "abs-guide.txt"},{"an asynchronous command run with two pipes": "abs-guide.txt"},{"shell. Coprocs can be named. The input and": "abs-guide.txt"},{"and the PID of the coprocess are available": "abs-guide.txt"},{"variables with coproc-specific names.": "abs-guide.txt"},{"": "abs-guide.txt"},{"specifies a coprocess:": "abs-guide.txt"},{"connected to the creat": "abs-guide.txt"},{"output file descriptor": "abs-guide.txt"},{"to the calling shell i": "abs-guide.txt"},{"": "abs-guide.txt"},{"George Dimitriu explains,": "abs-guide.txt"},{"\"... coproc ... is a feature used in Bash process substitution,": "abs-guide.txt"},{"which now is made publicly available.\"": "abs-guide.txt"},{"This means it can be explicitly invoked in a script, rather than": "abs-guide.txt"},{"just being a behind-the-scenes mechanism used by Bash.": "abs-guide.txt"},{"Chapter 37. Bash, versions 2, 3, and 4": "abs-guide.txt"},{"": "abs-guide.txt"},{"554": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"": "abs-guide.txt"},{"Coprocesses use file descriptors. File descriptors enable processes and pipes to communicate.": "abs-guide.txt"},{"#!/bin/bash4": "abs-guide.txt"},{"# A coprocess communicates with a while-read loop.": "abs-guide.txt"},{"": "abs-guide.txt"},{"coproc { cat mx_data.txt; sleep 2; }": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^^^^^^^": "abs-guide.txt"},{"# Try running this without \"sleep 2\" and see what happens.": "abs-guide.txt"},{"while read -u ${COPROC[0]} line": "abs-guide.txt"},{"# ${COPROC[0]} is the": "abs-guide.txt"},{"do": "abs-guide.txt"},{"#+ file descriptor of the coprocess.": "abs-guide.txt"},{"echo \"$line\" | sed -e 's/line/NOT-ORIGINAL-TEXT/'": "abs-guide.txt"},{"done": "abs-guide.txt"},{"kill $COPROC_PID": "abs-guide.txt"},{"": "abs-guide.txt"},{"# No longer need the coprocess,": "abs-guide.txt"},{"#+ so kill its PID.": "abs-guide.txt"},{"": "abs-guide.txt"},{"But, be careful!": "abs-guide.txt"},{"#!/bin/bash4": "abs-guide.txt"},{"echo; echo": "abs-guide.txt"},{"a=aaa": "abs-guide.txt"},{"b=bbb": "abs-guide.txt"},{"c=ccc": "abs-guide.txt"},{"coproc echo \"one two three\"": "abs-guide.txt"},{"while read -u ${COPROC[0]} a b c; # Note that this loop": "abs-guide.txt"},{"do": "abs-guide.txt"},{"#+ runs in a subshell.": "abs-guide.txt"},{"echo \"Inside while-read loop: \";": "abs-guide.txt"},{"echo \"a = $a\"; echo \"b = $b\"; echo \"c = $c\"": "abs-guide.txt"},{"echo \"coproc file descriptor: ${COPROC[0]}\"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"a = one": "abs-guide.txt"},{"b = two": "abs-guide.txt"},{"c = three": "abs-guide.txt"},{"So far, so good, but ...": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo \"-----------------\"": "abs-guide.txt"},{"echo \"Outside while-read loop: \"": "abs-guide.txt"},{"echo \"a = $a\" # a =": "abs-guide.txt"},{"echo \"b = $b\" # b =": "abs-guide.txt"},{"echo \"c = $c\" # c =": "abs-guide.txt"},{"echo \"coproc file descriptor: ${COPROC[0]}\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"# The coproc is still running, but ...": "abs-guide.txt"},{"#+ it still doesn't enable the parent process": "abs-guide.txt"},{"#+ to \"inherit\" variables from the child process, the while-read loop.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Compare this to the \"badread.sh\" script.": "abs-guide.txt"},{"": "abs-guide.txt"},{"The coprocess is asynchronous, and this might cause a problem. It may terminate": "abs-guide.txt"},{"before another process has finished communicating with it.": "abs-guide.txt"},{"#!/bin/bash4": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 37. Bash, versions 2, 3, and 4": "abs-guide.txt"},{"": "abs-guide.txt"},{"555": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"coproc cpname { for i in {0..10}; do echo \"index = $i\"; done; }": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^^^^^^ This is a *named* coprocess.": "abs-guide.txt"},{"read -u ${cpname[0]}": "abs-guide.txt"},{"echo $REPLY": "abs-guide.txt"},{"# index = 0": "abs-guide.txt"},{"echo ${COPROC[0]}": "abs-guide.txt"},{"#+ No output ... the coprocess timed out": "abs-guide.txt"},{"# after the first loop iteration.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# However, George Dimitriu has a partial fix.": "abs-guide.txt"},{"coproc cpname { for i in {0..10}; do echo \"index = $i\"; done; sleep 1;": "abs-guide.txt"},{"echo hi > myo; cat - >> myo; }": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^^^^^ This is a *named* coprocess.": "abs-guide.txt"},{"echo \"I am main\"$'\\04' >&${cpname[1]}": "abs-guide.txt"},{"myfd=${cpname[0]}": "abs-guide.txt"},{"echo myfd=$myfd": "abs-guide.txt"},{"### while read -u $myfd": "abs-guide.txt"},{"### do": "abs-guide.txt"},{"###": "abs-guide.txt"},{"echo $REPLY;": "abs-guide.txt"},{"### done": "abs-guide.txt"},{"echo $cpname_PID": "abs-guide.txt"},{"# Run this with and without the commented-out while-loop, and it is": "abs-guide.txt"},{"#+ apparent that each process, the executing shell and the coprocess,": "abs-guide.txt"},{"#+ waits for the other to finish writing in its own write-enabled pipe.": "abs-guide.txt"},{"": "abs-guide.txt"},{"\u2022 The new mapfile builtin makes it possible to load an array with the contents of a text file without": "abs-guide.txt"},{"using a loop or command substitution.": "abs-guide.txt"},{"#!/bin/bash4": "abs-guide.txt"},{"mapfile Arr1 < $0": "abs-guide.txt"},{"# Same result as": "abs-guide.txt"},{"echo \"${Arr1[@]}\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"Arr1=( $(cat $0) )": "abs-guide.txt"},{"# Copies this entire script out to stdout.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo \"--\"; echo": "abs-guide.txt"},{"# But, not the same as": "abs-guide.txt"},{"read -a": "abs-guide.txt"},{"!!!": "abs-guide.txt"},{"read -a Arr2 < $0": "abs-guide.txt"},{"echo \"${Arr2[@]}\" # Reads only first line of script into the array.": "abs-guide.txt"},{"exit": "abs-guide.txt"},{"": "abs-guide.txt"},{"\u2022 The read builtin got a minor facelift. The -t timeout option now accepts (decimal) fractional values": "abs-guide.txt"},{"[132] and the -i option permits preloading the edit buffer. [133] Unfortunately, these enhancements": "abs-guide.txt"},{"are still a work in progress and not (yet) usable in scripts.": "abs-guide.txt"},{"\u2022 Parameter substitution gets case-modification operators.": "abs-guide.txt"},{"#!/bin/bash4": "abs-guide.txt"},{"var=veryMixedUpVariable": "abs-guide.txt"},{"echo ${var}": "abs-guide.txt"},{"#": "abs-guide.txt"},{"echo ${var^}": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"*": "abs-guide.txt"},{"echo ${var^^}": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"**": "abs-guide.txt"},{"echo ${var,}": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"veryMixedUpVariable": "abs-guide.txt"},{"VeryMixedUpVariable": "abs-guide.txt"},{"First char --> uppercase.": "abs-guide.txt"},{"VERYMIXEDUPVARIABLE": "abs-guide.txt"},{"All chars --> uppercase.": "abs-guide.txt"},{"veryMixedUpVariable": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 37. Bash, versions 2, 3, and 4": "abs-guide.txt"},{"": "abs-guide.txt"},{"556": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"#": "abs-guide.txt"},{"*": "abs-guide.txt"},{"echo ${var,,}": "abs-guide.txt"},{"#": "abs-guide.txt"},{"**": "abs-guide.txt"},{"": "abs-guide.txt"},{"First char --> lowercase.": "abs-guide.txt"},{"# verymixedupvariable": "abs-guide.txt"},{"All chars --> lowercase.": "abs-guide.txt"},{"": "abs-guide.txt"},{"\u2022": "abs-guide.txt"},{"The declare builtin now accepts the -l lowercase and -c capitalize options.": "abs-guide.txt"},{"#!/bin/bash4": "abs-guide.txt"},{"declare -l var1": "abs-guide.txt"},{"var1=MixedCaseVARIABLE": "abs-guide.txt"},{"echo \"$var1\"": "abs-guide.txt"},{"# Same effect as": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Will change to lowercase": "abs-guide.txt"},{"": "abs-guide.txt"},{"declare -c var2": "abs-guide.txt"},{"var2=originally_lowercase": "abs-guide.txt"},{"echo \"$var2\"": "abs-guide.txt"},{"# NOT the same effect as": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Changes only initial char to uppercase.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# mixedcasevariable": "abs-guide.txt"},{"echo $var1 | tr A-Z a-z": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Originally_lowercase": "abs-guide.txt"},{"echo $var2 | tr a-z A-Z": "abs-guide.txt"},{"": "abs-guide.txt"},{"\u2022 Brace expansion has more options.": "abs-guide.txt"},{"Increment/decrement, specified in the final term within braces.": "abs-guide.txt"},{"#!/bin/bash4": "abs-guide.txt"},{"echo {40..60..2}": "abs-guide.txt"},{"# 40 42 44 46 48 50 52 54 56 58 60": "abs-guide.txt"},{"# All the even numbers, between 40 and 60.": "abs-guide.txt"},{"echo {60..40..2}": "abs-guide.txt"},{"# 60 58 56 54 52 50 48 46 44 42 40": "abs-guide.txt"},{"# All the even numbers, between 40 and 60, counting backwards.": "abs-guide.txt"},{"# In effect, a decrement.": "abs-guide.txt"},{"echo {60..40..-2}": "abs-guide.txt"},{"# The same output. The minus sign is not necessary.": "abs-guide.txt"},{"# But, what about letters and symbols?": "abs-guide.txt"},{"echo {X..d}": "abs-guide.txt"},{"# X Y Z [ ] ^ _ ` a b c d": "abs-guide.txt"},{"# Does not echo the \\ which escapes a space.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Zero-padding, specified in the first term within braces, prefixes each term in the output with the same": "abs-guide.txt"},{"number of zeroes.": "abs-guide.txt"},{"bash4$ echo {010..15}": "abs-guide.txt"},{"010 011 012 013 014 015": "abs-guide.txt"},{"": "abs-guide.txt"},{"bash4$ echo {000..10}": "abs-guide.txt"},{"000 001 002 003 004 005 006 007 008 009 010": "abs-guide.txt"},{"": "abs-guide.txt"},{"\u2022": "abs-guide.txt"},{"Substring extraction on positional parameters now starts with $0 as the zero-index. (This corrects an": "abs-guide.txt"},{"inconsistency in the treatment of positional parameters.)": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# show-params.bash": "abs-guide.txt"},{"# Requires version 4+ of Bash.": "abs-guide.txt"},{"# Invoke this scripts with at least one positional parameter.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 37. Bash, versions 2, 3, and 4": "abs-guide.txt"},{"": "abs-guide.txt"},{"557": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"E_BADPARAMS=99": "abs-guide.txt"},{"if [ -z \"$1\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Usage $0 param1 ...\"": "abs-guide.txt"},{"exit $E_BADPARAMS": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"echo ${@:0}": "abs-guide.txt"},{"# bash3 show-params.bash4 one two three": "abs-guide.txt"},{"# one two three": "abs-guide.txt"},{"# bash4 show-params.bash4 one two three": "abs-guide.txt"},{"# show-params.bash4 one two three": "abs-guide.txt"},{"# $0": "abs-guide.txt"},{"": "abs-guide.txt"},{"$1": "abs-guide.txt"},{"": "abs-guide.txt"},{"$2": "abs-guide.txt"},{"": "abs-guide.txt"},{"$3": "abs-guide.txt"},{"": "abs-guide.txt"},{"\u2022 The new ** globbing operator matches filenames and directories recursively.": "abs-guide.txt"},{"#!/bin/bash4": "abs-guide.txt"},{"# filelist.bash4": "abs-guide.txt"},{"shopt -s globstar": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Must enable globstar, otherwise ** doesn't work.": "abs-guide.txt"},{"# The globstar shell option is new to version 4 of Bash.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo \"Using *\"; echo": "abs-guide.txt"},{"for filename in *": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo \"$filename\"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"# Lists only files in current directory ($PWD).": "abs-guide.txt"},{"echo; echo \"--------------\"; echo": "abs-guide.txt"},{"echo \"Using **\"": "abs-guide.txt"},{"for filename in **": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo \"$filename\"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"# Lists complete file tree, recursively.": "abs-guide.txt"},{"exit": "abs-guide.txt"},{"Using *": "abs-guide.txt"},{"allmyfiles": "abs-guide.txt"},{"filelist.bash4": "abs-guide.txt"},{"-------------Using **": "abs-guide.txt"},{"allmyfiles": "abs-guide.txt"},{"allmyfiles/file.index.txt": "abs-guide.txt"},{"allmyfiles/my_music": "abs-guide.txt"},{"allmyfiles/my_music/me-singing-60s-folksongs.ogg": "abs-guide.txt"},{"allmyfiles/my_music/me-singing-opera.ogg": "abs-guide.txt"},{"allmyfiles/my_music/piano-lesson.1.ogg": "abs-guide.txt"},{"allmyfiles/my_pictures": "abs-guide.txt"},{"allmyfiles/my_pictures/at-beach-with-Jade.png": "abs-guide.txt"},{"allmyfiles/my_pictures/picnic-with-Melissa.png": "abs-guide.txt"},{"filelist.bash4": "abs-guide.txt"},{"": "abs-guide.txt"},{"\u2022 The new $BASHPID internal variable.": "abs-guide.txt"},{"Chapter 37. Bash, versions 2, 3, and 4": "abs-guide.txt"},{"": "abs-guide.txt"},{"558": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"\u2022 There is a new builtin error-handling function named command_not_found_handle.": "abs-guide.txt"},{"#!/bin/bash4": "abs-guide.txt"},{"command_not_found_handle ()": "abs-guide.txt"},{"{ # Accepts implicit parameters.": "abs-guide.txt"},{"echo \"The following command is not valid: \\\"\"$1\\\"\"\"": "abs-guide.txt"},{"echo \"With the following argument(s): \\\"\"$2\\\"\" \\\"\"$3\\\"\"\"": "abs-guide.txt"},{"} # $1, $2, etc. are not explicitly passed to the function.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# $4, $5 ...": "abs-guide.txt"},{"": "abs-guide.txt"},{"bad_command arg1 arg2": "abs-guide.txt"},{"# The following command is not valid: \"bad_command\"": "abs-guide.txt"},{"# With the following argument(s): \"arg1\" \"arg2\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"Editorial comment": "abs-guide.txt"},{"Associative arrays? Coprocesses? Whatever happened to the lean and mean Bash we have come to know": "abs-guide.txt"},{"and love? Could it be suffering from (horrors!) \"feature creep\"? Or perhaps even Korn shell envy?": "abs-guide.txt"},{"Note to Chet Ramey: Please add only essential features in future Bash releases -- perhaps for-each loops and": "abs-guide.txt"},{"support for multi-dimensional arrays. [134] Most Bash users won't need, won't use, and likely won't greatly": "abs-guide.txt"},{"appreciate complex \"features\" like built-in debuggers, Perl interfaces, and bolt-on rocket boosters.": "abs-guide.txt"},{"": "abs-guide.txt"},{"37.3.1. Bash, version 4.1": "abs-guide.txt"},{"Version 4.1 of Bash, released in May, 2010, was primarily a bugfix update.": "abs-guide.txt"},{"\u2022 The printf command now accepts a -v option for setting array indices.": "abs-guide.txt"},{"\u2022 Within double brackets, the > and < string comparison operators now conform to the locale. Since the": "abs-guide.txt"},{"locale setting may affect the sorting order of string expressions, this has side-effects on comparison": "abs-guide.txt"},{"tests within [[ ... ]] expressions.": "abs-guide.txt"},{"\u2022 The read builtin now takes a -N option (read -N chars), which causes the read to terminate after": "abs-guide.txt"},{"chars characters.": "abs-guide.txt"},{"Example 37-8. Reading N characters": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# Requires Bash version -ge 4.1 ...": "abs-guide.txt"},{"num_chars=61": "abs-guide.txt"},{"read -N $num_chars var < $0": "abs-guide.txt"},{"echo \"$var\"": "abs-guide.txt"},{"exit": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Read first 61 characters of script!": "abs-guide.txt"},{"": "abs-guide.txt"},{"####### Output of Script #######": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# Requires Bash version -ge 4.1 ...": "abs-guide.txt"},{"num_chars=61": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 37. Bash, versions 2, 3, and 4": "abs-guide.txt"},{"": "abs-guide.txt"},{"559": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"\u2022 Here documents embedded in $( ... ) command substitution constructs may terminate with a": "abs-guide.txt"},{"simple ).": "abs-guide.txt"},{"Example 37-9. Using a here document to set a variable": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# here-commsub.sh": "abs-guide.txt"},{"# Requires Bash version -ge 4.1 ...": "abs-guide.txt"},{"multi_line_var=$( cat <<ENDxxx": "abs-guide.txt"},{"-----------------------------This is line 1 of the variable": "abs-guide.txt"},{"This is line 2 of the variable": "abs-guide.txt"},{"This is line 3 of the variable": "abs-guide.txt"},{"-----------------------------ENDxxx)": "abs-guide.txt"},{"# Rather than what Bash 4.0 requires:": "abs-guide.txt"},{"#+ that the terminating limit string and": "abs-guide.txt"},{"#+ the terminating close-parenthesis be on separate lines.": "abs-guide.txt"},{"# ENDxxx": "abs-guide.txt"},{"# )": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo \"$multi_line_var\"": "abs-guide.txt"},{"# Bash still emits a warning, though.": "abs-guide.txt"},{"# warning: here-document at line 10 delimited": "abs-guide.txt"},{"#+ by end-of-file (wanted `ENDxxx')": "abs-guide.txt"},{"": "abs-guide.txt"},{"37.3.2. Bash, version 4.2": "abs-guide.txt"},{"Version 4.2 of Bash, released in February, 2011, contains a number of new features and enhancements, in": "abs-guide.txt"},{"addition to bugfixes.": "abs-guide.txt"},{"\u2022 Bash now supports the the \\u and \\U Unicode escape.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Unicode is a cross-platform standard for encoding into numerical values letters and graphic": "abs-guide.txt"},{"symbols. This permits representing and displaying characters in foreign alphabets and unusual fonts.": "abs-guide.txt"},{"echo -e '\\u2630'": "abs-guide.txt"},{"# Horizontal triple bar character.": "abs-guide.txt"},{"# Equivalent to the more roundabout:": "abs-guide.txt"},{"echo -e \"\\xE2\\x98\\xB0\"": "abs-guide.txt"},{"# Recognized by earlier Bash versions.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"-e": "abs-guide.txt"},{"-e": "abs-guide.txt"},{"-e": "abs-guide.txt"},{"-e": "abs-guide.txt"},{"": "abs-guide.txt"},{"'\\u220F'": "abs-guide.txt"},{"'\\u0416'": "abs-guide.txt"},{"'\\u2708'": "abs-guide.txt"},{"'\\u2622'": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"PI (Greek letter and mathematical symbol)": "abs-guide.txt"},{"Capital \"ZHE\" (Cyrillic letter)": "abs-guide.txt"},{"Airplane (Dingbat font) symbol": "abs-guide.txt"},{"Radioactivity trefoil": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo -e \"The amplifier circuit requires a 100 \\u2126 pull-up resistor.\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 37. Bash, versions 2, 3, and 4": "abs-guide.txt"},{"": "abs-guide.txt"},{"560": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"unicode_var='\\u2640'": "abs-guide.txt"},{"echo -e $unicode_var": "abs-guide.txt"},{"printf \"$unicode_var \\n\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Female symbol": "abs-guide.txt"},{"# Female symbol, with newline": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"And for something a bit more elaborate . . .": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"We can store Unicode symbols in an associative array,": "abs-guide.txt"},{"then retrieve them by name.": "abs-guide.txt"},{"Run this in a gnome-terminal or a terminal with a large, bold font": "abs-guide.txt"},{"for better legibility.": "abs-guide.txt"},{"": "abs-guide.txt"},{"declare -A symbol": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Associative array.": "abs-guide.txt"},{"": "abs-guide.txt"},{"symbol[script_E]='\\u2130'": "abs-guide.txt"},{"symbol[script_F]='\\u2131'": "abs-guide.txt"},{"symbol[script_J]='\\u2110'": "abs-guide.txt"},{"symbol[script_M]='\\u2133'": "abs-guide.txt"},{"symbol[Rx]='\\u211E'": "abs-guide.txt"},{"symbol[TEL]='\\u2121'": "abs-guide.txt"},{"symbol[FAX]='\\u213B'": "abs-guide.txt"},{"symbol[care_of]='\\u2105'": "abs-guide.txt"},{"symbol[account]='\\u2100'": "abs-guide.txt"},{"symbol[trademark]='\\u2122'": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"-ne": "abs-guide.txt"},{"-ne": "abs-guide.txt"},{"-ne": "abs-guide.txt"},{"-ne": "abs-guide.txt"},{"-ne": "abs-guide.txt"},{"-ne": "abs-guide.txt"},{"-ne": "abs-guide.txt"},{"-ne": "abs-guide.txt"},{"-ne": "abs-guide.txt"},{"-ne": "abs-guide.txt"},{"": "abs-guide.txt"},{"\"${symbol[script_E]}": "abs-guide.txt"},{"\"": "abs-guide.txt"},{"\"${symbol[script_F]}": "abs-guide.txt"},{"\"": "abs-guide.txt"},{"\"${symbol[script_J]}": "abs-guide.txt"},{"\"": "abs-guide.txt"},{"\"${symbol[script_M]}": "abs-guide.txt"},{"\"": "abs-guide.txt"},{"\"${symbol[Rx]}": "abs-guide.txt"},{"\"": "abs-guide.txt"},{"\"${symbol[TEL]}": "abs-guide.txt"},{"\"": "abs-guide.txt"},{"\"${symbol[FAX]}": "abs-guide.txt"},{"\"": "abs-guide.txt"},{"\"${symbol[care_of]}": "abs-guide.txt"},{"\"": "abs-guide.txt"},{"\"${symbol[account]}": "abs-guide.txt"},{"\"": "abs-guide.txt"},{"\"${symbol[trademark]}": "abs-guide.txt"},{"\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"The above example uses the $' ... ' string-expansion construct.": "abs-guide.txt"},{"\u2022": "abs-guide.txt"},{"When the lastpipe shell option is set, the last command in a pipe doesn't run in a subshell.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example 37-10. Piping input to a read": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# lastpipe-option.sh": "abs-guide.txt"},{"line=''": "abs-guide.txt"},{"echo \"\\$line = \"$line\"\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Null value.": "abs-guide.txt"},{"# $line =": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"shopt -s lastpipe": "abs-guide.txt"},{"# Error on Bash version -lt 4.2.": "abs-guide.txt"},{"echo \"Exit status of attempting to set \\\"lastpipe\\\" option is $?\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"1 if Bash version -lt 4.2, 0 otherwise.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 37. Bash, versions 2, 3, and 4": "abs-guide.txt"},{"": "abs-guide.txt"},{"561": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"head -1 $0 | read line": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^^^^^^^^^": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Pipe the first line of the script to read.": "abs-guide.txt"},{"Not in a subshell!!!": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo \"\\$line = \"$line\"\"": "abs-guide.txt"},{"# Older Bash releases": "abs-guide.txt"},{"# Bash version 4.2": "abs-guide.txt"},{"": "abs-guide.txt"},{"$line =": "abs-guide.txt"},{"$line = #!/bin/bash": "abs-guide.txt"},{"": "abs-guide.txt"},{"This option offers possible \"fixups\" for these example scripts: Example 34-3 and Example 15-8.": "abs-guide.txt"},{"\u2022 Negative array indices permit counting backwards from the end of an array.": "abs-guide.txt"},{"Example 37-11. Negative array indices": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# neg-array.sh": "abs-guide.txt"},{"# Requires Bash, version -ge 4.2.": "abs-guide.txt"},{"array=( zero one two three four five )": "abs-guide.txt"},{"#": "abs-guide.txt"},{"0": "abs-guide.txt"},{"1": "abs-guide.txt"},{"2": "abs-guide.txt"},{"3": "abs-guide.txt"},{"4": "abs-guide.txt"},{"5": "abs-guide.txt"},{"#": "abs-guide.txt"},{"-6": "abs-guide.txt"},{"-5 -4": "abs-guide.txt"},{"-3": "abs-guide.txt"},{"-2": "abs-guide.txt"},{"-1": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Six-element array.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Negative array indices now permitted.": "abs-guide.txt"},{"echo ${array[-1]}": "abs-guide.txt"},{"# five": "abs-guide.txt"},{"echo ${array[-2]}": "abs-guide.txt"},{"# four": "abs-guide.txt"},{"# ...": "abs-guide.txt"},{"echo ${array[-6]}": "abs-guide.txt"},{"# zero": "abs-guide.txt"},{"# Negative array indices count backward from the last element+1.": "abs-guide.txt"},{"# But, you cannot index past the beginning of the array.": "abs-guide.txt"},{"echo ${array[-7]}": "abs-guide.txt"},{"# array: bad array subscript": "abs-guide.txt"},{"": "abs-guide.txt"},{"# So, what is this new feature good for?": "abs-guide.txt"},{"echo \"The last element in the array is \"${array[-1]}\"\"": "abs-guide.txt"},{"# Which is quite a bit more straightforward than:": "abs-guide.txt"},{"echo \"The last element in the array is \"${array[${#array[*]}-1]}\"\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"# And ...": "abs-guide.txt"},{"index=0": "abs-guide.txt"},{"let \"neg_element_count = 0 - ${#array[*]}\"": "abs-guide.txt"},{"# Number of elements, converted to a negative number.": "abs-guide.txt"},{"while [ $index -gt $neg_element_count ]; do": "abs-guide.txt"},{"((index--)); echo -n \"${array[index]} \"": "abs-guide.txt"},{"done # Lists the elements in the array, backwards.": "abs-guide.txt"},{"# We have just simulated the \"tac\" command on this array.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"# See also neg-offset.sh.": "abs-guide.txt"},{"": "abs-guide.txt"},{"\u2022 Substring extraction uses a negative length parameter to specify an offset from the end of the target": "abs-guide.txt"},{"string.": "abs-guide.txt"},{"Example 37-12. Negative parameter in string-extraction construct": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# Bash, version -ge 4.2": "abs-guide.txt"},{"# Negative length-index in substring extraction.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 37. Bash, versions 2, 3, and 4": "abs-guide.txt"},{"": "abs-guide.txt"},{"562": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# Important: It changes the interpretation of this construct!": "abs-guide.txt"},{"stringZ=abcABC123ABCabc": "abs-guide.txt"},{"echo ${stringZ}": "abs-guide.txt"},{"# abcABC123ABCabc": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Position within string:": "abs-guide.txt"},{"0123456789.....": "abs-guide.txt"},{"echo ${stringZ:2:3}": "abs-guide.txt"},{"#": "abs-guide.txt"},{"cAB": "abs-guide.txt"},{"# Count 2 chars forward from string beginning, and extract 3 chars.": "abs-guide.txt"},{"# ${string:position:length}": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"So far, nothing new, but now ...": "abs-guide.txt"},{"": "abs-guide.txt"},{"# abcABC123ABCabc": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Position within string:": "abs-guide.txt"},{"0123....6543210": "abs-guide.txt"},{"echo ${stringZ:3:-6}": "abs-guide.txt"},{"#": "abs-guide.txt"},{"ABC123": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^": "abs-guide.txt"},{"# Index 3 chars forward from beginning and 6 chars backward from end,": "abs-guide.txt"},{"#+ and extract everything in between.": "abs-guide.txt"},{"# ${string:offset-from-front:offset-from-end}": "abs-guide.txt"},{"# When the \"length\" parameter is negative,": "abs-guide.txt"},{"#+ it serves as an offset-from-end parameter.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"See also neg-array.sh.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 37. Bash, versions 2, 3, and 4": "abs-guide.txt"},{"": "abs-guide.txt"},{"563": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fChapter 38. Endnotes": "abs-guide.txt"},{"38.1. Author's Note": "abs-guide.txt"},{"doce ut discas": "abs-guide.txt"},{"(Teach, that you yourself may learn.)": "abs-guide.txt"},{"How did I come to write a scripting book? It's a strange tale. It seems that a few years back I needed to learn": "abs-guide.txt"},{"shell scripting -- and what better way to do that than to read a good book on the subject? I was looking to buy": "abs-guide.txt"},{"a tutorial and reference covering all aspects of the subject. I was looking for a book that would take difficult": "abs-guide.txt"},{"concepts, turn them inside out, and explain them in excruciating detail, with well-commented examples. [135]": "abs-guide.txt"},{"In fact, I was looking for this very book, or something very much like it. Unfortunately, it didn't exist, and if I": "abs-guide.txt"},{"wanted it, I'd have to write it. And so, here we are, folks.": "abs-guide.txt"},{"That reminds me of the apocryphal story about a mad professor. Crazy as a loon, the fellow was. At the sight": "abs-guide.txt"},{"of a book, any book -- at the library, at a bookstore, anywhere -- he would become totally obsessed with the": "abs-guide.txt"},{"idea that he could have written it, should have written it -- and done a better job of it to boot. He would": "abs-guide.txt"},{"thereupon rush home and proceed to do just that, write a book with the very same title. When he died some": "abs-guide.txt"},{"years later, he allegedly had several thousand books to his credit, probably putting even Asimov to shame.": "abs-guide.txt"},{"The books might not have been any good, who knows, but does that really matter? Here's a fellow who lived": "abs-guide.txt"},{"his dream, even if he was obsessed by it, driven by it . . . and somehow I can't help admiring the old coot.": "abs-guide.txt"},{"": "abs-guide.txt"},{"38.2. About the Author": "abs-guide.txt"},{"Who is this guy anyhow?": "abs-guide.txt"},{"The author claims no credentials or special qualifications, [136] other than a compulsion to write. [137]": "abs-guide.txt"},{"This book is somewhat of a departure from his other major work, HOW-2 Meet Women: The Shy Man's": "abs-guide.txt"},{"Guide to Relationships. He has also written the Software-Building HOWTO. Of late, he has been trying his": "abs-guide.txt"},{"(heavy) hand at fiction: Dave Dawson Over Berlin (First Installment) Dave Dawson Over Berlin (Second": "abs-guide.txt"},{"Installment) and Dave Dawson Over Berlin (Third Installment) . He also has a few Instructables (here, here,": "abs-guide.txt"},{"here, here, here, here, and here to his (dis)credit.": "abs-guide.txt"},{"A Linux user since 1995 (Slackware 2.2, kernel 1.2.1), the author has emitted a few software truffles,": "abs-guide.txt"},{"including the cruft one-time pad encryption utility, the mcalc mortgage calculator, the judge Scrabble\u00ae": "abs-guide.txt"},{"adjudicator, the yawl word gaming list package, and the Quacky anagramming gaming package. He got off to": "abs-guide.txt"},{"a rather shaky start in the computer game -- programming FORTRAN IV on a CDC 3800 (on paper coding": "abs-guide.txt"},{"pads, with occasional forays on a keypunch machine and a Friden Flexowriter) -- and is not the least bit": "abs-guide.txt"},{"nostalgic for those days.": "abs-guide.txt"},{"Living in an out-of-the-way community with wife and orange tabby, he cherishes human frailty, especially his": "abs-guide.txt"},{"own. [138]": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 38. Endnotes": "abs-guide.txt"},{"": "abs-guide.txt"},{"564": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"": "abs-guide.txt"},{"38.3. Where to Go For Help": "abs-guide.txt"},{"The author is no longer supporting or updating this document. He will not answer questions about this book or": "abs-guide.txt"},{"about general scripting topics.": "abs-guide.txt"},{"": "abs-guide.txt"},{"If you need assistance with a schoolwork assignment, read the pertinent sections of this and other reference": "abs-guide.txt"},{"works. Do your best to solve the problem using your own wits and resources. Please do not waste the": "abs-guide.txt"},{"author's time. You will get neither help nor sympathy. [139]": "abs-guide.txt"},{"Likewise, kindly refrain from annoying the author with solicitations, offers of employment, or \"business": "abs-guide.txt"},{"opportunities.\" He is doing just fine, and requires neither help nor sympathy, thank you.": "abs-guide.txt"},{"Please note that the author will not answer scripting questions for Sun/Solaris/Oracle or Apple systems. The": "abs-guide.txt"},{"endarkened execs and the arachnoid corporate attorneys of those particular outfits have been using litigation": "abs-guide.txt"},{"in a predatory manner and/or as a weapon against the Open Source Community. Any Solaris or Apple users": "abs-guide.txt"},{"needing scripting help will therefore kindly direct their concerns to corporate customer service.": "abs-guide.txt"},{"... sophisticated in mechanism but possibly agile": "abs-guide.txt"},{"operating under noises being extremely": "abs-guide.txt"},{"suppressed ...": "abs-guide.txt"},{"--CI-300 printer manual": "abs-guide.txt"},{"": "abs-guide.txt"},{"38.4. Tools Used to Produce This Book": "abs-guide.txt"},{"38.4.1. Hardware": "abs-guide.txt"},{"A used IBM Thinkpad, model 760XL laptop (P166, 104 meg RAM) running Red Hat 7.1/7.3. Sure, it's slow": "abs-guide.txt"},{"and has a funky keyboard, but it beats the heck out of a No. 2 pencil and a Big Chief tablet.": "abs-guide.txt"},{"Update: upgraded to a 770Z Thinkpad (P2-366, 192 meg RAM) running FC3. Anyone feel like donating a": "abs-guide.txt"},{"later-model laptop to a starving writer <g>?": "abs-guide.txt"},{"Update: upgraded to a T61 Thinkpad running Mandriva 2011. No longer starving <g>, but not too proud to": "abs-guide.txt"},{"accept donations.": "abs-guide.txt"},{"": "abs-guide.txt"},{"38.4.2. Software and Printware": "abs-guide.txt"},{"i. Bram Moolenaar's powerful SGML-aware vim text editor.": "abs-guide.txt"},{"ii. OpenJade, a DSSSL rendering engine for converting SGML documents into other formats.": "abs-guide.txt"},{"iii. Norman Walsh's DSSSL stylesheets.": "abs-guide.txt"},{"iv. DocBook, The Definitive Guide, by Norman Walsh and Leonard Muellner (O'Reilly, ISBN": "abs-guide.txt"},{"1-56592-580-7). This is still the standard reference for anyone attempting to write a document in": "abs-guide.txt"},{"Docbook SGML format.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 38. Endnotes": "abs-guide.txt"},{"": "abs-guide.txt"},{"565": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"": "abs-guide.txt"},{"38.5. Credits": "abs-guide.txt"},{"Community participation made this project possible. The author gratefully acknowledges that writing this": "abs-guide.txt"},{"book would have been unthinkable without help and feedback from all you people out there.": "abs-guide.txt"},{"Philippe Martin translated the first version (0.1) of this document into DocBook/SGML. While not on the job": "abs-guide.txt"},{"at a small French company as a software developer, he enjoys working on GNU/Linux documentation and": "abs-guide.txt"},{"software, reading literature, playing music, and, for his peace of mind, making merry with friends. You may": "abs-guide.txt"},{"run across him somewhere in France or in the Basque Country, or you can email him at feloy@free.fr.": "abs-guide.txt"},{"Philippe Martin also pointed out that positional parameters past $9 are possible using {bracket} notation. (See": "abs-guide.txt"},{"Example 4-5).": "abs-guide.txt"},{"St\u00e9phane Chazelas sent a long list of corrections, additions, and example scripts. More than a contributor, he": "abs-guide.txt"},{"had, in effect, for a while taken on the role of co-editor for this document. Merci beaucoup!": "abs-guide.txt"},{"Paulo Marcel Coelho Aragao offered many corrections, both major and minor, and contributed quite a number": "abs-guide.txt"},{"of helpful suggestions.": "abs-guide.txt"},{"I would like to especially thank Patrick Callahan, Mike Novak, and Pal Domokos for catching bugs, pointing": "abs-guide.txt"},{"out ambiguities, and for suggesting clarifications and changes in the preliminary version (0.1) of this": "abs-guide.txt"},{"document. Their lively discussion of shell scripting and general documentation issues inspired me to try to": "abs-guide.txt"},{"make this document more readable.": "abs-guide.txt"},{"I'm grateful to Jim Van Zandt for pointing out errors and omissions in version 0.2 of this document. He also": "abs-guide.txt"},{"contributed an instructive example script.": "abs-guide.txt"},{"Many thanks to Jordi Sanfeliu for giving permission to use his fine tree script (Example A-16), and to Rick": "abs-guide.txt"},{"Boivie for revising it.": "abs-guide.txt"},{"Likewise, thanks to Michel Charpentier for permission to use his dc factoring script (Example 16-52).": "abs-guide.txt"},{"Kudos to Noah Friedman for permission to use his string function script (Example A-18).": "abs-guide.txt"},{"Emmanuel Rouat suggested corrections and additions on command substitution, aliases, and path": "abs-guide.txt"},{"management. He also contributed a very nice sample .bashrc file (Appendix M).": "abs-guide.txt"},{"Heiner Steven kindly gave permission to use his base conversion script, Example 16-48. He also made a": "abs-guide.txt"},{"number of corrections and many helpful suggestions. Special thanks.": "abs-guide.txt"},{"Rick Boivie contributed the delightfully recursive pb.sh script (Example 36-11), revised the tree.sh script": "abs-guide.txt"},{"(Example A-16), and suggested performance improvements for the monthlypmt.sh script (Example 16-47).": "abs-guide.txt"},{"Florian Wisser enlightened me on some of the fine points of testing strings (see Example 7-6), and on other": "abs-guide.txt"},{"matters.": "abs-guide.txt"},{"Oleg Philon sent suggestions concerning cut and pidof.": "abs-guide.txt"},{"Michael Zick extended the empty array example to demonstrate some surprising array properties. He also": "abs-guide.txt"},{"contributed the isspammer scripts (Example 16-41 and Example A-28).": "abs-guide.txt"},{"Chapter 38. Endnotes": "abs-guide.txt"},{"": "abs-guide.txt"},{"566": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"Marc-Jano Knopp sent corrections and clarifications on DOS batch files.": "abs-guide.txt"},{"Hyun Jin Cha found several typos in the document in the process of doing a Korean translation. Thanks for": "abs-guide.txt"},{"pointing these out.": "abs-guide.txt"},{"Andreas Abraham sent in a long list of typographical errors and other corrections. Special thanks!": "abs-guide.txt"},{"Others contributing scripts, making helpful suggestions, and pointing out errors were Gabor Kiss, Leopold": "abs-guide.txt"},{"Toetsch, Peter Tillier, Marcus Berglof, Tony Richardson, Nick Drage (script ideas!), Rich Bartell, Jess": "abs-guide.txt"},{"Thrysoee, Adam Lazur, Bram Moolenaar, Baris Cicek, Greg Keraunen, Keith Matthews, Sandro Magi, Albert": "abs-guide.txt"},{"Reiner, Dim Segebart, Rory Winston, Lee Bigelow, Wayne Pollock, \"jipe,\" \"bojster,\" \"nyal,\" \"Hobbit,\"": "abs-guide.txt"},{"\"Ender,\" \"Little Monster\" (Alexis), \"Mark,\" \"Patsie,\" \"vladz,\" Peggy Russell, Emilio Conti, Ian. D. Allen,": "abs-guide.txt"},{"Hans-Joerg Diers, Arun Giridhar, Dennis Leeuw, Dan Jacobson, Aurelio Marinho Jargas, Edward Scholtz,": "abs-guide.txt"},{"Jean Helou, Chris Martin, Lee Maschmeyer, Bruno Haible, Wilbert Berendsen, Sebastien Godard, Bj\u00f6n": "abs-guide.txt"},{"Eriksson, John MacDonald, John Lange, Joshua Tschida, Troy Engel, Manfred Schwarb, Amit Singh, Bill": "abs-guide.txt"},{"Gradwohl, E. Choroba, David Lombard, Jason Parker, Steve Parker, Bruce W. Clare, William Park, Vernia": "abs-guide.txt"},{"Damiano, Mihai Maties, Mark Alexander, Jeremy Impson, Ken Fuchs, Jared Martin, Frank Wang, Sylvain": "abs-guide.txt"},{"Fourmanoit, Matthew Sage, Matthew Walker, Kenny Stauffer, Filip Moritz, Andrzej Stefanski, Daniel Albers,": "abs-guide.txt"},{"Jeffrey Haemer, Stefano Palmeri, Nils Radtke, Sigurd Solaas, Serghey Rodin, Jeroen Domburg, Alfredo": "abs-guide.txt"},{"Pironti, Phil Braham, Bruno de Oliveira Schneider, Stefano Falsetto, Chris Morgan, Walter Dnes, Linc": "abs-guide.txt"},{"Fessenden, Michael Iatrou, Pharis Monalo, Jesse Gough, Fabian Kreutz, Mark Norman, Harald Koenig, Dan": "abs-guide.txt"},{"Stromberg, Peter Knowles, Francisco Lobo, Mariusz Gniazdowski, Sebastian Arming, Chetankumar": "abs-guide.txt"},{"Phulpagare, Benno Schulenberg, Tedman Eng, Jochen DeSmet, Juan Nicolas Ruiz, Oliver Beckstein, Achmed": "abs-guide.txt"},{"Darwish, Dotan Barak, Richard Neill, Albert Siersema, Omair Eshkenazi, Geoff Lee, Graham Ewart, JuanJo": "abs-guide.txt"},{"Ciarlante, Cliff Bamford, Nathan Coulter, Ramses Rodriguez Martinez, Evgeniy Ivanov, Craig Barnes,": "abs-guide.txt"},{"George Dimitriu, Kevin LeBlanc, Antonio Macchi, Tomas Pospisek, David Wheeler, Erik Brandsberg,": "abs-guide.txt"},{"YongYe, Andreas K\u00fchne, P\u00e1draig Brady, Joseph Steinhauser, and David Lawyer (himself an author of four": "abs-guide.txt"},{"HOWTOs).": "abs-guide.txt"},{"My gratitude to Chet Ramey and Brian Fox for writing Bash, and building into it elegant and powerful": "abs-guide.txt"},{"scripting capabilities rivaling those of ksh.": "abs-guide.txt"},{"Very special thanks to the hard-working volunteers at the Linux Documentation Project. The LDP hosts a": "abs-guide.txt"},{"repository of Linux knowledge and lore, and has, to a great extent, enabled the publication of this book.": "abs-guide.txt"},{"Thanks and appreciation to IBM, Red Hat, Google, the Free Software Foundation, and all the good people": "abs-guide.txt"},{"fighting the good fight to keep Open Source software free and open.": "abs-guide.txt"},{"Belated thanks to my fourth grade teacher, Miss Spencer, for emotional support and for convincing me that": "abs-guide.txt"},{"maybe, just maybe I wasn't a total loss.": "abs-guide.txt"},{"Thanks most of all to my wife, Anita, for her encouragement, inspiration, and emotional support.": "abs-guide.txt"},{"": "abs-guide.txt"},{"38.6. Disclaimer": "abs-guide.txt"},{"(This is a variant of the standard LDP disclaimer.)": "abs-guide.txt"},{"No liability for the contents of this document can be accepted. Use the concepts, examples and information at": "abs-guide.txt"},{"your own risk. There may be errors, omissions, and inaccuracies that could cause you to lose data, harm your": "abs-guide.txt"},{"system, or induce involuntary electrocution, so proceed with appropriate caution. The author takes no": "abs-guide.txt"},{"Chapter 38. Endnotes": "abs-guide.txt"},{"": "abs-guide.txt"},{"567": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"responsibility for any damages, incidental or otherwise.": "abs-guide.txt"},{"As it happens, it is highly unlikely that either you or your system will suffer ill effects, aside from": "abs-guide.txt"},{"uncontrollable hiccups. In fact, the raison d'etre of this book is to enable its readers to analyze shell scripts": "abs-guide.txt"},{"and determine whether they have unanticipated consequences.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chapter 38. Endnotes": "abs-guide.txt"},{"": "abs-guide.txt"},{"568": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fBibliography": "abs-guide.txt"},{"Those who do not understand UNIX are": "abs-guide.txt"},{"condemned to reinvent it, poorly.": "abs-guide.txt"},{"--Henry Spencer": "abs-guide.txt"},{"": "abs-guide.txt"},{"Edited by Peter Denning, Computers Under Attack: Intruders, Worms, and Viruses, ACM Press, 1990,": "abs-guide.txt"},{"0-201-53067-8.": "abs-guide.txt"},{"This compendium contains a couple of articles on shell script viruses.": "abs-guide.txt"},{"*": "abs-guide.txt"},{"": "abs-guide.txt"},{"Ken Burtch, Linux Shell Scripting with Bash, 1st edition, Sams Publishing (Pearson), 2004, 0672326426.": "abs-guide.txt"},{"Covers much of the same material as the ABS Guide, though in a different style.": "abs-guide.txt"},{"*": "abs-guide.txt"},{"": "abs-guide.txt"},{"Daniel Goldman, Definitive Guide to Sed, 1st edition, 2013.": "abs-guide.txt"},{"This ebook is an excellent introduction to sed. Rather than being a conversion from a printed volume, it was": "abs-guide.txt"},{"specifically designed and formatted for viewing on an ebook reader. Well-written, informative, and useful as a": "abs-guide.txt"},{"reference as well as a tutorial. Highly recommended.": "abs-guide.txt"},{"*": "abs-guide.txt"},{"": "abs-guide.txt"},{"Dale Dougherty and Arnold Robbins, Sed and Awk, 2nd edition, O'Reilly and Associates, 1997,": "abs-guide.txt"},{"1-156592-225-5.": "abs-guide.txt"},{"Unfolding the full power of shell scripting requires at least a passing familiarity with sed and awk. This is the": "abs-guide.txt"},{"classic tutorial. It includes an excellent introduction to Regular Expressions. Recommended.": "abs-guide.txt"},{"*": "abs-guide.txt"},{"": "abs-guide.txt"},{"Jeffrey Friedl, Mastering Regular Expressions, O'Reilly and Associates, 2002, 0-596-00289-0.": "abs-guide.txt"},{"Still the best all-around reference on Regular Expressions.": "abs-guide.txt"},{"*": "abs-guide.txt"},{"": "abs-guide.txt"},{"Bibliography": "abs-guide.txt"},{"": "abs-guide.txt"},{"569": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"Aeleen Frisch, Essential System Administration, 3rd edition, O'Reilly and Associates, 2002, 0-596-00343-9.": "abs-guide.txt"},{"This excellent manual provides a decent introduction to shell scripting from a sys admin point of view. It": "abs-guide.txt"},{"includes comprehensive explanations of the startup and initialization scripts in a UNIX system.": "abs-guide.txt"},{"*": "abs-guide.txt"},{"": "abs-guide.txt"},{"Stephen Kochan and Patrick Wood, Unix Shell Programming, Hayden, 1990, 067248448X.": "abs-guide.txt"},{"Still considered a standard reference, though somewhat dated, and a bit \"wooden\" stylistically speaking. [140]": "abs-guide.txt"},{"In fact, this book was the ABS Guide author's first exposure to UNIX shell scripting, lo these many years ago.": "abs-guide.txt"},{"*": "abs-guide.txt"},{"": "abs-guide.txt"},{"Neil Matthew and Richard Stones, Beginning Linux Programming, Wrox Press, 1996, 1874416680.": "abs-guide.txt"},{"Surprisingly good in-depth coverage of various programming languages available for Linux, including a fairly": "abs-guide.txt"},{"strong chapter on shell scripting.": "abs-guide.txt"},{"*": "abs-guide.txt"},{"": "abs-guide.txt"},{"Herbert Mayer, Advanced C Programming on the IBM PC, Windcrest Books, 1989, 0830693637.": "abs-guide.txt"},{"Excellent coverage of algorithms and general programming practices. Highly recommended, but unfortunately": "abs-guide.txt"},{"out of print.": "abs-guide.txt"},{"*": "abs-guide.txt"},{"": "abs-guide.txt"},{"David Medinets, Unix Shell Programming Tools, McGraw-Hill, 1999, 0070397333.": "abs-guide.txt"},{"Pretty good treatment of shell scripting, with examples, and a short intro to Tcl and Perl.": "abs-guide.txt"},{"*": "abs-guide.txt"},{"": "abs-guide.txt"},{"Cameron Newham and Bill Rosenblatt, Learning the Bash Shell, 2nd edition, O'Reilly and Associates, 1998,": "abs-guide.txt"},{"1-56592-347-2.": "abs-guide.txt"},{"This is a valiant effort at a decent shell primer, but sadly deficient in its coverage of writing scripts and": "abs-guide.txt"},{"lacking sufficient examples.": "abs-guide.txt"},{"*": "abs-guide.txt"},{"": "abs-guide.txt"},{"Anatole Olczak, Bourne Shell Quick Reference Guide, ASP, Inc., 1991, 093573922X.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Bibliography": "abs-guide.txt"},{"": "abs-guide.txt"},{"570": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"A very handy pocket reference, despite lacking coverage of Bash-specific features.": "abs-guide.txt"},{"*": "abs-guide.txt"},{"": "abs-guide.txt"},{"Jerry Peek, Tim O'Reilly, and Mike Loukides, Unix Power Tools, 3rd edition, O'Reilly and Associates,": "abs-guide.txt"},{"Random House, 2002, 0-596-00330-7.": "abs-guide.txt"},{"Contains a couple of sections of very informative in-depth articles on shell programming, but falls short of": "abs-guide.txt"},{"being a self-teaching manual. It reproduces much of the Regular Expressions tutorial from the Dougherty and": "abs-guide.txt"},{"Robbins book, above. The comprehensive coverage of UNIX commands makes this book worthy of a place": "abs-guide.txt"},{"on your bookshelf.": "abs-guide.txt"},{"*": "abs-guide.txt"},{"": "abs-guide.txt"},{"Clifford Pickover, Computers, Pattern, Chaos, and Beauty, St. Martin's Press, 1990, 0-312-04123-3.": "abs-guide.txt"},{"A treasure trove of ideas and recipes for computer-based exploration of mathematical oddities.": "abs-guide.txt"},{"*": "abs-guide.txt"},{"": "abs-guide.txt"},{"George Polya, How To Solve It, Princeton University Press, 1973, 0-691-02356-5.": "abs-guide.txt"},{"The classic tutorial on problem-solving methods (algorithms), with special emphasis on how to teach them.": "abs-guide.txt"},{"*": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chet Ramey and Brian Fox, The GNU Bash Reference Manual, Network Theory Ltd, 2003, 0-9541617-7-7.": "abs-guide.txt"},{"This manual is the definitive reference for GNU Bash. The authors of this manual, Chet Ramey and Brian": "abs-guide.txt"},{"Fox, are the original developers of GNU Bash. For each copy sold, the publisher donates $1 to the Free": "abs-guide.txt"},{"Software Foundation.": "abs-guide.txt"},{"*": "abs-guide.txt"},{"": "abs-guide.txt"},{"Arnold Robbins, Bash Reference Card, SSC, 1998, 1-58731-010-5.": "abs-guide.txt"},{"Excellent Bash pocket reference (don't leave home without it, especially if you're a sysadmin). A bargain at": "abs-guide.txt"},{"$4.95, but unfortunately no longer available for free download.": "abs-guide.txt"},{"*": "abs-guide.txt"},{"": "abs-guide.txt"},{"Arnold Robbins, Effective Awk Programming, Free Software Foundation / O'Reilly and Associates, 2000,": "abs-guide.txt"},{"1-882114-26-4.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Bibliography": "abs-guide.txt"},{"": "abs-guide.txt"},{"571": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"The absolute best awk tutorial and reference. The free electronic version of this book is part of the awk": "abs-guide.txt"},{"documentation, and printed copies of the latest version are available from O'Reilly and Associates.": "abs-guide.txt"},{"This book served as an inspiration for the author of the ABS Guide.": "abs-guide.txt"},{"*": "abs-guide.txt"},{"": "abs-guide.txt"},{"Bill Rosenblatt, Learning the Korn Shell, O'Reilly and Associates, 1993, 1-56592-054-6.": "abs-guide.txt"},{"This well-written book contains some excellent pointers on shell scripting in general.": "abs-guide.txt"},{"*": "abs-guide.txt"},{"": "abs-guide.txt"},{"Paul Sheer, LINUX: Rute User's Tutorial and Exposition, 1st edition, , 2002, 0-13-033351-4.": "abs-guide.txt"},{"Very detailed and readable introduction to Linux system administration.": "abs-guide.txt"},{"The book is available in print, or on-line.": "abs-guide.txt"},{"*": "abs-guide.txt"},{"": "abs-guide.txt"},{"Ellen Siever and the staff of O'Reilly and Associates, Linux in a Nutshell, 2nd edition, O'Reilly and": "abs-guide.txt"},{"Associates, 1999, 1-56592-585-8.": "abs-guide.txt"},{"The all-around best Linux command reference. It even has a Bash section.": "abs-guide.txt"},{"*": "abs-guide.txt"},{"": "abs-guide.txt"},{"Dave Taylor, Wicked Cool Shell Scripts: 101 Scripts for Linux, Mac OS X, and Unix Systems, 1st edition, No": "abs-guide.txt"},{"Starch Press, 2004, 1-59327-012-7.": "abs-guide.txt"},{"Pretty much what the title promises . . .": "abs-guide.txt"},{"*": "abs-guide.txt"},{"": "abs-guide.txt"},{"The UNIX CD Bookshelf, 3rd edition, O'Reilly and Associates, 2003, 0-596-00392-7.": "abs-guide.txt"},{"An array of seven UNIX books on CD ROM, including UNIX Power Tools, Sed and Awk, and Learning the": "abs-guide.txt"},{"Korn Shell. A complete set of all the UNIX references and tutorials you would ever need at about $130. Buy": "abs-guide.txt"},{"this one, even if it means going into debt and not paying the rent.": "abs-guide.txt"},{"Update: Seems to have somehow fallen out of print. Ah, well. You can still buy the dead-tree editions of these": "abs-guide.txt"},{"books.": "abs-guide.txt"},{"*": "abs-guide.txt"},{"": "abs-guide.txt"},{"Bibliography": "abs-guide.txt"},{"": "abs-guide.txt"},{"572": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"The O'Reilly books on Perl. (Actually, any O'Reilly books.)": "abs-guide.txt"},{"": "abs-guide.txt"},{"***": "abs-guide.txt"},{"Other Resources": "abs-guide.txt"},{"": "abs-guide.txt"},{"Fioretti, Marco, \"Scripting for X Productivity,\" Linux Journal, Issue 113, September, 2003, pp. 86-9.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Ben Okopnik's well-written introductory Bash scripting articles in issues 53, 54, 55, 57, and 59 of the Linux": "abs-guide.txt"},{"Gazette, and his explanation of \"The Deep, Dark Secrets of Bash\" in issue 56.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chet Ramey's Bash - The GNU Shell, a two-part series published in issues 3 and 4 of the Linux Journal,": "abs-guide.txt"},{"July-August 1994.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Mike G's Bash-Programming-Intro HOWTO.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Richard's Unix Scripting Universe.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Chet Ramey's Bash FAQ.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Greg's WIKI: Bash FAQ.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example shell scripts at Lucc's Shell Scripts .": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example shell scripts at SHELLdorado .": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example shell scripts at Noah Friedman's script site.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Examples from the The Bash Scripting Cookbook, by Albing, Vossen, and Newham.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example shell scripts at zazzybob.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Steve Parker's Shell Programming Stuff. In fact, all of his shell scripting books are highly recommended. See": "abs-guide.txt"},{"also Steve's Arcade Games written in a shell script.": "abs-guide.txt"},{"": "abs-guide.txt"},{"An excellent collection of Bash scripting tips, tricks, and resources at the Bash Hackers Wiki.": "abs-guide.txt"},{"Bibliography": "abs-guide.txt"},{"": "abs-guide.txt"},{"573": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"Giles Orr's Bash-Prompt HOWTO.": "abs-guide.txt"},{"": "abs-guide.txt"},{"The Pixelbeat command-line reference.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Very nice sed, awk, and regular expression tutorials at The UNIX Grymoire.": "abs-guide.txt"},{"": "abs-guide.txt"},{"The GNU sed and gawk manuals. As you recall, gawk is the enhanced GNU version of awk.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Many interesting sed scripts at the seder's grab bag.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Tips and tricks at Linux Reviews.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Trent Fisher's groff tutorial.": "abs-guide.txt"},{"": "abs-guide.txt"},{"David Wheeler's Filenames in Shell essay.": "abs-guide.txt"},{"": "abs-guide.txt"},{"\"Shelltris\" and \"shellitaire\" at Shell Script Games.": "abs-guide.txt"},{"": "abs-guide.txt"},{"YongYe's wonderfully complex Tetris game script.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Mark Komarinski's Printing-Usage HOWTO.": "abs-guide.txt"},{"": "abs-guide.txt"},{"The Linux USB subsystem (helpful in writing scripts affecting USB peripherals).": "abs-guide.txt"},{"": "abs-guide.txt"},{"There is some nice material on I/O redirection in chapter 10 of the textutils documentation at the University": "abs-guide.txt"},{"of Alberta site.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Rick Hohensee has written the osimpa i386 assembler entirely as Bash scripts.": "abs-guide.txt"},{"": "abs-guide.txt"},{"dgatwood has a very nice shell script games site, featuring a Tetris\u00ae clone and solitaire.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Aurelio Marinho Jargas has written a Regular expression wizard. He has also written an informative book on": "abs-guide.txt"},{"Regular Expressions, in Portuguese.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Ben Tomkins has created the Bash Navigator directory management tool.": "abs-guide.txt"},{"Bibliography": "abs-guide.txt"},{"": "abs-guide.txt"},{"574": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"William Park has been working on a project to incorporate certain Awk and Python features into Bash. Among": "abs-guide.txt"},{"these is a gdbm interface. He has released bashdiff on Freshmeat.net. He has an article in the November, 2004": "abs-guide.txt"},{"issue of the Linux Gazette on adding string functions to Bash, with a followup article in the December issue,": "abs-guide.txt"},{"and yet another in the January, 2005 issue.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Peter Knowles has written an elaborate Bash script that generates a book list on the Sony Librie e-book": "abs-guide.txt"},{"reader. This useful tool facilitates loading non-DRM user content on the Librie (and the newer PRS-xxx-series": "abs-guide.txt"},{"devices).": "abs-guide.txt"},{"": "abs-guide.txt"},{"Tim Waugh's xmlto is an elaborate Bash script for converting Docbook XML documents to other formats.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Philip Patterson's logforbash logging/debugging script.": "abs-guide.txt"},{"": "abs-guide.txt"},{"AuctionGallery, an application for eBay \"power sellers\" coded in Bash.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Of historical interest are Colin Needham's original International Movie Database (IMDB) reader polling": "abs-guide.txt"},{"scripts, which nicely illustrate the use of awk for string parsing. Unfortunately, the URL link is broken.": "abs-guide.txt"},{"---": "abs-guide.txt"},{"": "abs-guide.txt"},{"Fritz Mehner has written a bash-support plugin for the vim text editor. He has also also come up with his own": "abs-guide.txt"},{"stylesheet for Bash. Compare it with the ABS Guide Unofficial Stylesheet.": "abs-guide.txt"},{"---": "abs-guide.txt"},{"": "abs-guide.txt"},{"Penguin Pete has quite a number of shell scripting tips and hints on his superb site. Highly recommended.": "abs-guide.txt"},{"": "abs-guide.txt"},{"The excellent Bash Reference Manual, by Chet Ramey and Brian Fox, distributed as part of the bash-2-doc": "abs-guide.txt"},{"package (available as an rpm). See especially the instructive example scripts in this package.": "abs-guide.txt"},{"": "abs-guide.txt"},{"John Lion's classic, A Commentary on the Sixth Edition UNIX Operating System.": "abs-guide.txt"},{"": "abs-guide.txt"},{"The comp.os.unix.shell newsgroup.": "abs-guide.txt"},{"": "abs-guide.txt"},{"The dd thread on Linux Questions.": "abs-guide.txt"},{"": "abs-guide.txt"},{"The comp.os.unix.shell FAQ.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Bibliography": "abs-guide.txt"},{"": "abs-guide.txt"},{"575": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"Assorted comp.os.unix FAQs.": "abs-guide.txt"},{"": "abs-guide.txt"},{"The Wikipedia article covering dc.": "abs-guide.txt"},{"": "abs-guide.txt"},{"The manpages for bash and bash2, date, expect, expr, find, grep, gzip, ln, patch, tar, tr, bc, xargs. The": "abs-guide.txt"},{"texinfo documentation on bash, dd, m4, gawk, and sed.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Bibliography": "abs-guide.txt"},{"": "abs-guide.txt"},{"576": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAppendix A. Contributed Scripts": "abs-guide.txt"},{"These scripts, while not fitting into the text of this document, do illustrate some interesting shell programming": "abs-guide.txt"},{"techniques. Some are useful, too. Have fun analyzing and running them.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example A-1. mailformat: Formatting an e-mail message": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# mail-format.sh (ver. 1.1): Format e-mail messages.": "abs-guide.txt"},{"# Gets rid of carets, tabs, and also folds excessively long lines.": "abs-guide.txt"},{"# =================================================================": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Standard Check for Script Argument(s)": "abs-guide.txt"},{"ARGS=1": "abs-guide.txt"},{"E_BADARGS=85": "abs-guide.txt"},{"E_NOFILE=86": "abs-guide.txt"},{"if [ $# -ne $ARGS ] # Correct number of arguments passed to script?": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Usage: `basename $0` filename\"": "abs-guide.txt"},{"exit $E_BADARGS": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"if [ -f \"$1\" ]": "abs-guide.txt"},{"# Check if file exists.": "abs-guide.txt"},{"then": "abs-guide.txt"},{"file_name=$1": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo \"File \\\"$1\\\" does not exist.\"": "abs-guide.txt"},{"exit $E_NOFILE": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# ----------------------------------------------------------------MAXWIDTH=70": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Width to fold excessively long lines to.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# =================================": "abs-guide.txt"},{"# A variable can hold a sed script.": "abs-guide.txt"},{"# It's a useful technique.": "abs-guide.txt"},{"sedscript='s/^>//": "abs-guide.txt"},{"s/^ *>//": "abs-guide.txt"},{"s/^ *//": "abs-guide.txt"},{"s/": "abs-guide.txt"},{"*//'": "abs-guide.txt"},{"# =================================": "abs-guide.txt"},{"# Delete carets and tabs at beginning of lines,": "abs-guide.txt"},{"#+ then fold lines to $MAXWIDTH characters.": "abs-guide.txt"},{"sed \"$sedscript\" $1 | fold -s --width=$MAXWIDTH": "abs-guide.txt"},{"# -s option to \"fold\"": "abs-guide.txt"},{"#+ breaks lines at whitespace, if possible.": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"This script was inspired by an article in a well-known trade journal": "abs-guide.txt"},{"extolling a 164K MS Windows utility with similar functionality.": "abs-guide.txt"},{"An nice set of text processing utilities and an efficient": "abs-guide.txt"},{"scripting language provide an alternative to the bloated executables": "abs-guide.txt"},{"of a clunky operating system.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"577": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"exit $?": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example A-2. rn: A simple-minded file renaming utility": "abs-guide.txt"},{"This script is a modification of Example 16-22.": "abs-guide.txt"},{"#! /bin/bash": "abs-guide.txt"},{"# rn.sh": "abs-guide.txt"},{"# Very simpleminded filename \"rename\" utility (based on \"lowercase.sh\").": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# The \"ren\" utility, by Vladimir Lanin (lanin@csd2.nyu.edu),": "abs-guide.txt"},{"#+ does a much better job of this.": "abs-guide.txt"},{"": "abs-guide.txt"},{"ARGS=2": "abs-guide.txt"},{"E_BADARGS=85": "abs-guide.txt"},{"ONE=1": "abs-guide.txt"},{"": "abs-guide.txt"},{"# For getting singular/plural right (see below).": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [ $# -ne \"$ARGS\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Usage: `basename $0` old-pattern new-pattern\"": "abs-guide.txt"},{"# As in \"rn gif jpg\", which renames all gif files in working directory to jpg.": "abs-guide.txt"},{"exit $E_BADARGS": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"number=0": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Keeps track of how many files actually renamed.": "abs-guide.txt"},{"": "abs-guide.txt"},{"for filename in *$1*": "abs-guide.txt"},{"#Traverse all matching files in directory.": "abs-guide.txt"},{"do": "abs-guide.txt"},{"if [ -f \"$filename\" ] # If finds match...": "abs-guide.txt"},{"then": "abs-guide.txt"},{"fname=`basename $filename`": "abs-guide.txt"},{"# Strip off path.": "abs-guide.txt"},{"n=`echo $fname | sed -e \"s/$1/$2/\"`": "abs-guide.txt"},{"# Substitute new for old in filename.": "abs-guide.txt"},{"mv $fname $n": "abs-guide.txt"},{"# Rename.": "abs-guide.txt"},{"let \"number += 1\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"done": "abs-guide.txt"},{"if [ \"$number\" -eq \"$ONE\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"$number file renamed.\"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo \"$number files renamed.\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"# For correct grammar.": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit $?": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Exercises:": "abs-guide.txt"},{"--------What types of files will this not work on?": "abs-guide.txt"},{"How can this be fixed?": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example A-3. blank-rename: Renames filenames containing blanks": "abs-guide.txt"},{"This is an even simpler-minded version of previous script.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"578": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"#! /bin/bash": "abs-guide.txt"},{"# blank-rename.sh": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Substitutes underscores for blanks in all the filenames in a directory.": "abs-guide.txt"},{"ONE=1": "abs-guide.txt"},{"number=0": "abs-guide.txt"},{"FOUND=0": "abs-guide.txt"},{"": "abs-guide.txt"},{"# For getting singular/plural right (see below).": "abs-guide.txt"},{"# Keeps track of how many files actually renamed.": "abs-guide.txt"},{"# Successful return value.": "abs-guide.txt"},{"": "abs-guide.txt"},{"for filename in *": "abs-guide.txt"},{"#Traverse all files in directory.": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo \"$filename\" | grep -q \" \"": "abs-guide.txt"},{"# Check whether filename": "abs-guide.txt"},{"if [ $? -eq $FOUND ]": "abs-guide.txt"},{"#+ contains space(s).": "abs-guide.txt"},{"then": "abs-guide.txt"},{"fname=$filename": "abs-guide.txt"},{"# Yes, this filename needs work.": "abs-guide.txt"},{"n=`echo $fname | sed -e \"s/ /_/g\"`": "abs-guide.txt"},{"# Substitute underscore for blank.": "abs-guide.txt"},{"mv \"$fname\" \"$n\"": "abs-guide.txt"},{"# Do the actual renaming.": "abs-guide.txt"},{"let \"number += 1\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"done": "abs-guide.txt"},{"if [ \"$number\" -eq \"$ONE\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"$number file renamed.\"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo \"$number files renamed.\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"# For correct grammar.": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example A-4. encryptedpw: Uploading to an ftp site, using a locally encrypted password": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# Example \"ex72.sh\" modified to use encrypted password.": "abs-guide.txt"},{"# Note that this is still rather insecure,": "abs-guide.txt"},{"#+ since the decrypted password is sent in the clear.": "abs-guide.txt"},{"# Use something like \"ssh\" if this is a concern.": "abs-guide.txt"},{"E_BADARGS=85": "abs-guide.txt"},{"if [ -z \"$1\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Usage: `basename $0` filename\"": "abs-guide.txt"},{"exit $E_BADARGS": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"Username=bozo": "abs-guide.txt"},{"# Change to suit.": "abs-guide.txt"},{"pword=/home/bozo/secret/password_encrypted.file": "abs-guide.txt"},{"# File containing encrypted password.": "abs-guide.txt"},{"Filename=`basename $1`": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Strips pathname out of file name.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Server=\"XXX\"": "abs-guide.txt"},{"Directory=\"YYY\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Change above to actual server name & directory.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Password=`cruft <$pword`": "abs-guide.txt"},{"# Decrypt password.": "abs-guide.txt"},{"# Uses the author's own \"cruft\" file encryption package,": "abs-guide.txt"},{"#+ based on the classic \"onetime pad\" algorithm,": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"579": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"#+ and obtainable from:": "abs-guide.txt"},{"#+ Primary-site:": "abs-guide.txt"},{"ftp://ibiblio.org/pub/Linux/utils/file": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"cruft-0.2.tar.gz [16k]": "abs-guide.txt"},{"": "abs-guide.txt"},{"ftp -n $Server <<End-Of-Session": "abs-guide.txt"},{"user $Username $Password": "abs-guide.txt"},{"binary": "abs-guide.txt"},{"bell": "abs-guide.txt"},{"cd $Directory": "abs-guide.txt"},{"put $Filename": "abs-guide.txt"},{"bye": "abs-guide.txt"},{"End-Of-Session": "abs-guide.txt"},{"# -n option to \"ftp\" disables auto-logon.": "abs-guide.txt"},{"# Note that \"bell\" rings 'bell' after each file transfer.": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example A-5. copy-cd: Copying a data CD": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# copy-cd.sh: copying a data CD": "abs-guide.txt"},{"CDROM=/dev/cdrom": "abs-guide.txt"},{"OF=/home/bozo/projects/cdimage.iso": "abs-guide.txt"},{"#": "abs-guide.txt"},{"/xxxx/xxxxxxxx/": "abs-guide.txt"},{"BLOCKSIZE=2048": "abs-guide.txt"},{"# SPEED=10": "abs-guide.txt"},{"# DEVICE=/dev/cdrom": "abs-guide.txt"},{"DEVICE=\"1,0,0\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# CD ROM device": "abs-guide.txt"},{"# output file": "abs-guide.txt"},{"Change to suit your system.": "abs-guide.txt"},{"# If unspecified, uses max spd.": "abs-guide.txt"},{"older version.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo; echo \"Insert source CD, but do *not* mount it.\"": "abs-guide.txt"},{"echo \"Press ENTER when ready. \"": "abs-guide.txt"},{"read ready": "abs-guide.txt"},{"# Wait for input, $ready not used.": "abs-guide.txt"},{"echo; echo \"Copying the source CD to $OF.\"": "abs-guide.txt"},{"echo \"This may take a while. Please be patient.\"": "abs-guide.txt"},{"dd if=$CDROM of=$OF bs=$BLOCKSIZE": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Raw device copy.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo; echo \"Remove data CD.\"": "abs-guide.txt"},{"echo \"Insert blank CDR.\"": "abs-guide.txt"},{"echo \"Press ENTER when ready. \"": "abs-guide.txt"},{"read ready": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Wait for input, $ready not used.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo \"Copying $OF to CDR.\"": "abs-guide.txt"},{"# cdrecord -v -isosize speed=$SPEED dev=$DEVICE $OF": "abs-guide.txt"},{"# Old version.": "abs-guide.txt"},{"wodim -v -isosize dev=$DEVICE $OF": "abs-guide.txt"},{"# Uses Joerg Schilling's \"cdrecord\" package (see its docs).": "abs-guide.txt"},{"# http://www.fokus.gmd.de/nthp/employees/schilling/cdrecord.html": "abs-guide.txt"},{"# Newer Linux distros may use \"wodim\" rather than \"cdrecord\" ...": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo; echo \"Done copying $OF to CDR on device $CDROM.\"": "abs-guide.txt"},{"echo \"Do you want to erase the image file (y/n)? \"": "abs-guide.txt"},{"read answer": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Probably a huge file.": "abs-guide.txt"},{"": "abs-guide.txt"},{"case \"$answer\" in": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"580": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"[yY]) rm -f $OF": "abs-guide.txt"},{"echo \"$OF erased.\"": "abs-guide.txt"},{";;": "abs-guide.txt"},{"*)": "abs-guide.txt"},{"echo \"$OF not erased.\";;": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"# Exercise:": "abs-guide.txt"},{"# Change the above \"case\" statement to also accept \"yes\" and \"Yes\" as input.": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example A-6. Collatz series": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# collatz.sh": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"The notorious \"hailstone\" or Collatz series.": "abs-guide.txt"},{"------------------------------------------1) Get the integer \"seed\" from the command-line.": "abs-guide.txt"},{"2) NUMBER <-- seed": "abs-guide.txt"},{"3) Print NUMBER.": "abs-guide.txt"},{"4) If NUMBER is even, divide by 2, or": "abs-guide.txt"},{"5)+ if odd, multiply by 3 and add 1.": "abs-guide.txt"},{"6) NUMBER <-- result": "abs-guide.txt"},{"7) Loop back to step 3 (for specified number of iterations).": "abs-guide.txt"},{"The theory is that every such sequence,": "abs-guide.txt"},{"no matter how large the initial value,": "abs-guide.txt"},{"eventually settles down to repeating \"4,2,1...\" cycles,": "abs-guide.txt"},{"even after fluctuating through a wide range of values.": "abs-guide.txt"},{"This is an instance of an \"iterate,\"": "abs-guide.txt"},{"an operation that feeds its output back into its input.": "abs-guide.txt"},{"Sometimes the result is a \"chaotic\" series.": "abs-guide.txt"},{"": "abs-guide.txt"},{"MAX_ITERATIONS=200": "abs-guide.txt"},{"# For large seed numbers (>32000), try increasing MAX_ITERATIONS.": "abs-guide.txt"},{"h=${1:-$$}": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Seed.": "abs-guide.txt"},{"# Use $PID as seed,": "abs-guide.txt"},{"#+ if not specified as command-line arg.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"C($h) -*- $MAX_ITERATIONS Iterations\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"for ((i=1; i<=MAX_ITERATIONS; i++))": "abs-guide.txt"},{"do": "abs-guide.txt"},{"# echo -n \"$h": "abs-guide.txt"},{"\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^^^": "abs-guide.txt"},{"#": "abs-guide.txt"},{"tab": "abs-guide.txt"},{"# printf does it better ...": "abs-guide.txt"},{"COLWIDTH=%7d": "abs-guide.txt"},{"printf $COLWIDTH $h": "abs-guide.txt"},{"let \"remainder = h % 2\"": "abs-guide.txt"},{"if [ \"$remainder\" -eq 0 ]": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Even?": "abs-guide.txt"},{"": "abs-guide.txt"},{"581": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"then": "abs-guide.txt"},{"let \"h /= 2\"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"let \"h = h*3 + 1\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Divide by 2.": "abs-guide.txt"},{"# Multiply by 3 and add 1.": "abs-guide.txt"},{"": "abs-guide.txt"},{"COLUMNS=10": "abs-guide.txt"},{"# Output 10 values per line.": "abs-guide.txt"},{"let \"line_break = i % $COLUMNS\"": "abs-guide.txt"},{"if [ \"$line_break\" -eq 0 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"# For more information on this strange mathematical function,": "abs-guide.txt"},{"#+ see _Computers, Pattern, Chaos, and Beauty_, by Pickover, p. 185 ff.,": "abs-guide.txt"},{"#+ as listed in the bibliography.": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example A-7. days-between: Days between two dates": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# days-between.sh:": "abs-guide.txt"},{"Number of days between two dates.": "abs-guide.txt"},{"# Usage: ./days-between.sh [M]M/[D]D/YYYY [M]M/[D]D/YYYY": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Note: Script modified to account for changes in Bash, v. 2.05b +,": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"that closed the loophole permitting large negative": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"integer return values.": "abs-guide.txt"},{"ARGS=2": "abs-guide.txt"},{"E_PARAM_ERR=85": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Two command-line parameters expected.": "abs-guide.txt"},{"# Param error.": "abs-guide.txt"},{"": "abs-guide.txt"},{"REFYR=1600": "abs-guide.txt"},{"CENTURY=100": "abs-guide.txt"},{"DIY=365": "abs-guide.txt"},{"ADJ_DIY=367": "abs-guide.txt"},{"MIY=12": "abs-guide.txt"},{"DIM=31": "abs-guide.txt"},{"LEAPCYCLE=4": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Reference year.": "abs-guide.txt"},{"": "abs-guide.txt"},{"MAXRETVAL=255": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Largest permissible": "abs-guide.txt"},{"#+ positive return value from a function.": "abs-guide.txt"},{"": "abs-guide.txt"},{"diff=": "abs-guide.txt"},{"value=": "abs-guide.txt"},{"day=": "abs-guide.txt"},{"month=": "abs-guide.txt"},{"year=": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Declare global variable for date difference.": "abs-guide.txt"},{"# Declare global variable for absolute value.": "abs-guide.txt"},{"# Declare globals for day, month, year.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Adjusted for leap year + fraction.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Param_Error ()": "abs-guide.txt"},{"# Command-line parameters wrong.": "abs-guide.txt"},{"{": "abs-guide.txt"},{"echo \"Usage: `basename $0` [M]M/[D]D/YYYY [M]M/[D]D/YYYY\"": "abs-guide.txt"},{"echo \"": "abs-guide.txt"},{"(date must be after 1/3/1600)\"": "abs-guide.txt"},{"exit $E_PARAM_ERR": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"582": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"Parse_Date ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"month=${1%%/**}": "abs-guide.txt"},{"dm=${1%/**}": "abs-guide.txt"},{"day=${dm#*/}": "abs-guide.txt"},{"let \"year = `basename $1`\"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Parse date from command-line params.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Day and month.": "abs-guide.txt"},{"# Not a filename, but works just the same.": "abs-guide.txt"},{"": "abs-guide.txt"},{"check_date ()": "abs-guide.txt"},{"# Checks for invalid date(s) passed.": "abs-guide.txt"},{"{": "abs-guide.txt"},{"[ \"$day\" -gt \"$DIM\" ] || [ \"$month\" -gt \"$MIY\" ] ||": "abs-guide.txt"},{"[ \"$year\" -lt \"$REFYR\" ] && Param_Error": "abs-guide.txt"},{"# Exit script on bad value(s).": "abs-guide.txt"},{"# Uses or-list / and-list.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Exercise: Implement more rigorous date checking.": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"strip_leading_zero () # Better to strip": "abs-guide.txt"},{"{": "abs-guide.txt"},{"#+ from day and/or": "abs-guide.txt"},{"return ${1#0}": "abs-guide.txt"},{"#+ since otherwise": "abs-guide.txt"},{"}": "abs-guide.txt"},{"#+ as octal values": "abs-guide.txt"},{"": "abs-guide.txt"},{"day_index ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"": "abs-guide.txt"},{"possible leading zero(s)": "abs-guide.txt"},{"month": "abs-guide.txt"},{"Bash will interpret them": "abs-guide.txt"},{"(POSIX.2, sect 2.9.2.1).": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Gauss' Formula:": "abs-guide.txt"},{"# Days from March 1, 1600 to date passed as param.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^^^^^^^^^^^^^": "abs-guide.txt"},{"": "abs-guide.txt"},{"day=$1": "abs-guide.txt"},{"month=$2": "abs-guide.txt"},{"year=$3": "abs-guide.txt"},{"let \"month = $month - 2\"": "abs-guide.txt"},{"if [ \"$month\" -le 0 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"let \"month += 12\"": "abs-guide.txt"},{"let \"year -= 1\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"let \"year -= $REFYR\"": "abs-guide.txt"},{"let \"indexyr = $year / $CENTURY\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"let \"Days = $DIY*$year + $year/$LEAPCYCLE - $indexyr \\": "abs-guide.txt"},{"+ $indexyr/$LEAPCYCLE + $ADJ_DIY*$month/$MIY + $day - $DIM\"": "abs-guide.txt"},{"# For an in-depth explanation of this algorithm, see": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"http://weblogs.asp.net/pgreborio/archive/2005/01/06/347968.aspx": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo $Days": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"calculate_difference ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"let \"diff = $1 - $2\"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Difference between two day indices.": "abs-guide.txt"},{"# Global variable.": "abs-guide.txt"},{"": "abs-guide.txt"},{"583": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"": "abs-guide.txt"},{"abs ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"if [ \"$1\" -lt 0 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"let \"value = 0 - $1\"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"let \"value = $1\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [ $# -ne \"$ARGS\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"Param_Error": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Require two command-line params.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Parse_Date $1": "abs-guide.txt"},{"check_date $day $month $year": "abs-guide.txt"},{"strip_leading_zero $day": "abs-guide.txt"},{"day=$?": "abs-guide.txt"},{"strip_leading_zero $month": "abs-guide.txt"},{"month=$?": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Absolute value": "abs-guide.txt"},{"Uses global \"value\" variable.": "abs-guide.txt"},{"If negative": "abs-guide.txt"},{"then": "abs-guide.txt"},{"change sign,": "abs-guide.txt"},{"else": "abs-guide.txt"},{"leave it alone.": "abs-guide.txt"},{"": "abs-guide.txt"},{"See if valid date.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Remove any leading zeroes": "abs-guide.txt"},{"#+ on day and/or month.": "abs-guide.txt"},{"": "abs-guide.txt"},{"let \"date1 = `day_index $day $month $year`\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"Parse_Date $2": "abs-guide.txt"},{"check_date $day $month $year": "abs-guide.txt"},{"strip_leading_zero $day": "abs-guide.txt"},{"day=$?": "abs-guide.txt"},{"strip_leading_zero $month": "abs-guide.txt"},{"month=$?": "abs-guide.txt"},{"date2=$(day_index $day $month $year) # Command substitution.": "abs-guide.txt"},{"": "abs-guide.txt"},{"calculate_difference $date1 $date2": "abs-guide.txt"},{"abs $diff": "abs-guide.txt"},{"diff=$value": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Make sure it's positive.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo $diff": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"Exercise:": "abs-guide.txt"},{"-------If given only one command-line parameter, have the script": "abs-guide.txt"},{"use today's date as the second.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Compare this script with": "abs-guide.txt"},{"#+ the implementation of Gauss' Formula in a C program at": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"http://buschencrew.hypermart.net/software/datedif": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example A-8. Making a dictionary": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"584": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# makedict.sh": "abs-guide.txt"},{"": "abs-guide.txt"},{"[make dictionary]": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Modification of /usr/sbin/mkdict (/usr/sbin/cracklib-forman) script.": "abs-guide.txt"},{"# Original script copyright 1993, by Alec Muffett.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# This modified script included in this document in a manner": "abs-guide.txt"},{"#+ consistent with the \"LICENSE\" document of the \"Crack\" package": "abs-guide.txt"},{"#+ that the original script is a part of.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"This script processes text files to produce a sorted list": "abs-guide.txt"},{"of words found in the files.": "abs-guide.txt"},{"This may be useful for compiling dictionaries": "abs-guide.txt"},{"and for other lexicographic purposes.": "abs-guide.txt"},{"": "abs-guide.txt"},{"E_BADARGS=85": "abs-guide.txt"},{"if [ ! -r \"$1\" ]": "abs-guide.txt"},{"# Need at least one": "abs-guide.txt"},{"then": "abs-guide.txt"},{"#+ valid file argument.": "abs-guide.txt"},{"echo \"Usage: $0 files-to-process\"": "abs-guide.txt"},{"exit $E_BADARGS": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"# SORT=\"sort\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# No longer necessary to define": "abs-guide.txt"},{"#+ options to sort. Changed from": "abs-guide.txt"},{"#+ original script.": "abs-guide.txt"},{"": "abs-guide.txt"},{"cat $* |": "abs-guide.txt"},{"tr A-Z a-z |": "abs-guide.txt"},{"tr ' ' '\\012' |": "abs-guide.txt"},{"#": "abs-guide.txt"},{"tr -cd '\\012[a-z][0-9]' |": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"tr -c '\\012a-z'": "abs-guide.txt"},{"sort": "abs-guide.txt"},{"uniq": "abs-guide.txt"},{"grep": "abs-guide.txt"},{"grep": "abs-guide.txt"},{"": "abs-guide.txt"},{"'\\012' |": "abs-guide.txt"},{"": "abs-guide.txt"},{"|": "abs-guide.txt"},{"|": "abs-guide.txt"},{"-v '^#' |": "abs-guide.txt"},{"-v '^$'": "abs-guide.txt"},{"": "abs-guide.txt"},{"Dump specified files to stdout.": "abs-guide.txt"},{"Convert to lowercase.": "abs-guide.txt"},{"New: change spaces to newlines.": "abs-guide.txt"},{"Get rid of everything": "abs-guide.txt"},{"non-alphanumeric (in orig. script).": "abs-guide.txt"},{"Rather than deleting non-alpha": "abs-guide.txt"},{"chars, change them to newlines.": "abs-guide.txt"},{"$SORT options unnecessary now.": "abs-guide.txt"},{"Remove duplicates.": "abs-guide.txt"},{"Delete lines starting with #.": "abs-guide.txt"},{"Delete blank lines.": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit $?": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example A-9. Soundex conversion": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# soundex.sh: Calculate \"soundex\" code for names": "abs-guide.txt"},{"# =======================================================": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Soundex script": "abs-guide.txt"},{"#": "abs-guide.txt"},{"by": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Mendel Cooper": "abs-guide.txt"},{"#": "abs-guide.txt"},{"thegrendel.abs@gmail.com": "abs-guide.txt"},{"#": "abs-guide.txt"},{"reldate: 23 January, 2002": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Placed in the Public Domain.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# A slightly different version of this script appeared in": "abs-guide.txt"},{"#+ Ed Schaefer's July, 2002 \"Shell Corner\" column": "abs-guide.txt"},{"#+ in \"Unix Review\" on-line,": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"585": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"#+ http://www.unixreview.com/documents/uni1026336632258/": "abs-guide.txt"},{"# =======================================================": "abs-guide.txt"},{"": "abs-guide.txt"},{"ARGCOUNT=1": "abs-guide.txt"},{"E_WRONGARGS=90": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Need name as argument.": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [ $# -ne \"$ARGCOUNT\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Usage: `basename $0` name\"": "abs-guide.txt"},{"exit $E_WRONGARGS": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"assign_value ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"val1=bfpv": "abs-guide.txt"},{"val2=cgjkqsxz": "abs-guide.txt"},{"val3=dt": "abs-guide.txt"},{"val4=l": "abs-guide.txt"},{"val5=mn": "abs-guide.txt"},{"val6=r": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Assigns numerical value": "abs-guide.txt"},{"#+ to letters of name.": "abs-guide.txt"},{"# 'b,f,p,v' = 1": "abs-guide.txt"},{"# 'c,g,j,k,q,s,x,z' = 2": "abs-guide.txt"},{"# etc.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Exceptionally clever use of 'tr' follows.": "abs-guide.txt"},{"# Try to figure out what is going on here.": "abs-guide.txt"},{"value=$( echo \"$1\" \\": "abs-guide.txt"},{"| tr -d wh \\": "abs-guide.txt"},{"| tr $val1 1 | tr $val2 2 | tr $val3 3 \\": "abs-guide.txt"},{"| tr $val4 4 | tr $val5 5 | tr $val6 6 \\": "abs-guide.txt"},{"| tr -s 123456 \\": "abs-guide.txt"},{"| tr -d aeiouy )": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Assign": "abs-guide.txt"},{"Remove": "abs-guide.txt"},{"Ignore": "abs-guide.txt"},{"Ignore": "abs-guide.txt"},{"": "abs-guide.txt"},{"letter values.": "abs-guide.txt"},{"duplicate numbers, except when separated by vowels.": "abs-guide.txt"},{"vowels, except as separators, so delete them last.": "abs-guide.txt"},{"'w' and 'h', even as separators, so delete them first.": "abs-guide.txt"},{"": "abs-guide.txt"},{"The above command substitution lays more pipe than a plumber <g>.": "abs-guide.txt"},{"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"input_name=\"$1\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"Name = $input_name\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Change all characters of name input to lowercase.": "abs-guide.txt"},{"# -----------------------------------------------name=$( echo $input_name | tr A-Z a-z )": "abs-guide.txt"},{"# -----------------------------------------------# Just in case argument to script is mixed case.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Prefix of soundex code: first letter of name.": "abs-guide.txt"},{"# --------------------------------------------": "abs-guide.txt"},{"": "abs-guide.txt"},{"char_pos=0": "abs-guide.txt"},{"prefix0=${name:$char_pos:1}": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Initialize character position.": "abs-guide.txt"},{"": "abs-guide.txt"},{"586": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"prefix=`echo $prefix0 | tr a-z A-Z`": "abs-guide.txt"},{"# Uppercase 1st letter of soundex.": "abs-guide.txt"},{"let \"char_pos += 1\"": "abs-guide.txt"},{"name1=${name:$char_pos}": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Bump character position to 2nd letter of name.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# ++++++++++++++++++++++++++ Exception Patch ++++++++++++++++++++++++++++++": "abs-guide.txt"},{"# Now, we run both the input name and the name shifted one char": "abs-guide.txt"},{"#+ to the right through the value-assigning function.": "abs-guide.txt"},{"# If we get the same value out, that means that the first two characters": "abs-guide.txt"},{"#+ of the name have the same value assigned, and that one should cancel.": "abs-guide.txt"},{"# However, we also need to test whether the first letter of the name": "abs-guide.txt"},{"#+ is a vowel or 'w' or 'h', because otherwise this would bollix things up.": "abs-guide.txt"},{"char1=`echo $prefix | tr A-Z a-z`": "abs-guide.txt"},{"assign_value $name": "abs-guide.txt"},{"s1=$value": "abs-guide.txt"},{"assign_value $name1": "abs-guide.txt"},{"s2=$value": "abs-guide.txt"},{"assign_value $char1": "abs-guide.txt"},{"s3=$value": "abs-guide.txt"},{"s3=9$s3": "abs-guide.txt"},{"": "abs-guide.txt"},{"# First letter of name, lowercased.": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"If first letter of name is a vowel": "abs-guide.txt"},{"or 'w' or 'h',": "abs-guide.txt"},{"then its \"value\" will be null (unset).": "abs-guide.txt"},{"Therefore, set it to 9, an otherwise": "abs-guide.txt"},{"unused value, which can be tested for.": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [[ \"$s1\" -ne \"$s2\" || \"$s3\" -eq 9 ]]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"suffix=$s2": "abs-guide.txt"},{"else": "abs-guide.txt"},{"suffix=${s2:$char_pos}": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# ++++++++++++++++++++++ end Exception Patch ++++++++++++++++++++++++++++++": "abs-guide.txt"},{"": "abs-guide.txt"},{"padding=000": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Use at most 3 zeroes to pad.": "abs-guide.txt"},{"": "abs-guide.txt"},{"soun=$prefix$suffix$padding": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Pad with zeroes.": "abs-guide.txt"},{"": "abs-guide.txt"},{"MAXLEN=4": "abs-guide.txt"},{"soundex=${soun:0:$MAXLEN}": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Truncate to maximum of 4 chars.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo \"Soundex = $soundex\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"The soundex code is a method of indexing and classifying names": "abs-guide.txt"},{"by grouping together the ones that sound alike.": "abs-guide.txt"},{"The soundex code for a given name is the first letter of the name,": "abs-guide.txt"},{"followed by a calculated three-number code.": "abs-guide.txt"},{"Similar sounding names should have almost the same soundex codes.": "abs-guide.txt"},{"Examples:": "abs-guide.txt"},{"Smith and Smythe both have a \"S-530\" soundex.": "abs-guide.txt"},{"Harrison = H-625": "abs-guide.txt"},{"Hargison = H-622": "abs-guide.txt"},{"Harriman = H-655": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"587": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"This works out fairly well in practice, but there are numerous anomalies.": "abs-guide.txt"},{"": "abs-guide.txt"},{"The U.S. Census and certain other governmental agencies use soundex,": "abs-guide.txt"},{"as do genealogical researchers.": "abs-guide.txt"},{"For more information,": "abs-guide.txt"},{"see the \"National Archives and Records Administration home page\",": "abs-guide.txt"},{"http://www.nara.gov/genealogy/soundex/soundex.html": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Exercise:": "abs-guide.txt"},{"# -------# Simplify the \"Exception Patch\" section of this script.": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example A-10. Game of Life": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# life.sh: \"Life in the Slow Lane\"": "abs-guide.txt"},{"# Author: Mendel Cooper": "abs-guide.txt"},{"# License: GPL3": "abs-guide.txt"},{"# Version 0.2:": "abs-guide.txt"},{"Patched by Daniel Albers": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"to allow non-square grids as input.": "abs-guide.txt"},{"# Version 0.2.1: Added 2-second delay between generations.": "abs-guide.txt"},{"# ##################################################################### #": "abs-guide.txt"},{"# This is the Bash script version of John Conway's \"Game of Life\".": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# \"Life\" is a simple implementation of cellular automata.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# --------------------------------------------------------------------- #": "abs-guide.txt"},{"# On a rectangular grid, let each \"cell\" be either \"living\" or \"dead.\" #": "abs-guide.txt"},{"# Designate a living cell with a dot, and a dead one with a blank space.#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Begin with an arbitrarily drawn dot-and-blank grid,": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"and let this be the starting generation: generation 0.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Determine each successive generation by the following rules:": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"1) Each cell has 8 neighbors, the adjoining cells": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"left, right, top, bottom, and the 4 diagonals.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"123": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"4*5": "abs-guide.txt"},{"The * is the cell under consideration. #": "abs-guide.txt"},{"#": "abs-guide.txt"},{"678": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# 2) A living cell with either 2 or 3 living neighbors remains alive.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"SURVIVE=2": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# 3) A dead cell with 3 living neighbors comes alive, a \"birth.\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"BIRTH=3": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# 4) All other cases result in a dead cell for the next generation.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# ##################################################################### #": "abs-guide.txt"},{"": "abs-guide.txt"},{"startfile=gen0": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Read the starting generation from the file \"gen0\" ...": "abs-guide.txt"},{"# Default, if no other file specified when invoking script.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Specify another \"generation 0\" file.": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [ -n \"$1\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"startfile=\"$1\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"588": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"############################################": "abs-guide.txt"},{"# Abort script if \"startfile\" not specified": "abs-guide.txt"},{"#+ and": "abs-guide.txt"},{"#+ default file \"gen0\" not present.": "abs-guide.txt"},{"E_NOSTARTFILE=86": "abs-guide.txt"},{"if [ ! -e \"$startfile\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Startfile \\\"\"$startfile\"\\\" missing!\"": "abs-guide.txt"},{"exit $E_NOSTARTFILE": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"############################################": "abs-guide.txt"},{"": "abs-guide.txt"},{"ALIVE1=.": "abs-guide.txt"},{"DEAD1=_": "abs-guide.txt"},{"# Represent living and dead cells in the start-up file.": "abs-guide.txt"},{"# -----------------------------------------------------#": "abs-guide.txt"},{"# This script uses a 10 x 10 grid (may be increased,": "abs-guide.txt"},{"#+ but a large grid will slow down execution).": "abs-guide.txt"},{"ROWS=10": "abs-guide.txt"},{"COLS=10": "abs-guide.txt"},{"# Change above two variables to match desired grid size.": "abs-guide.txt"},{"# -----------------------------------------------------#": "abs-guide.txt"},{"GENERATIONS=10": "abs-guide.txt"},{"": "abs-guide.txt"},{"# How many generations to cycle through.": "abs-guide.txt"},{"# Adjust this upwards": "abs-guide.txt"},{"#+ if you have time on your hands.": "abs-guide.txt"},{"": "abs-guide.txt"},{"NONE_ALIVE=85": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Exit status on premature bailout,": "abs-guide.txt"},{"#+ if no cells left alive.": "abs-guide.txt"},{"# Pause between generations.": "abs-guide.txt"},{"": "abs-guide.txt"},{"DELAY=2": "abs-guide.txt"},{"TRUE=0": "abs-guide.txt"},{"FALSE=1": "abs-guide.txt"},{"ALIVE=0": "abs-guide.txt"},{"DEAD=1": "abs-guide.txt"},{"avar=": "abs-guide.txt"},{"generation=0": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Global; holds current generation.": "abs-guide.txt"},{"# Initialize generation count.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# =================================================================": "abs-guide.txt"},{"let \"cells = $ROWS * $COLS\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# How many cells.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Arrays containing \"cells.\"": "abs-guide.txt"},{"declare -a initial": "abs-guide.txt"},{"declare -a current": "abs-guide.txt"},{"display ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"alive=0": "abs-guide.txt"},{"": "abs-guide.txt"},{"declare -a arr": "abs-guide.txt"},{"arr=( `echo \"$1\"` )": "abs-guide.txt"},{"": "abs-guide.txt"},{"# How many cells alive at any given time.": "abs-guide.txt"},{"# Initially zero.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Convert passed arg to array.": "abs-guide.txt"},{"": "abs-guide.txt"},{"element_count=${#arr[*]}": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"589": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"local i": "abs-guide.txt"},{"local rowcheck": "abs-guide.txt"},{"for ((i=0; i<$element_count; i++))": "abs-guide.txt"},{"do": "abs-guide.txt"},{"# Insert newline at end of each row.": "abs-guide.txt"},{"let \"rowcheck = $i % COLS\"": "abs-guide.txt"},{"if [ \"$rowcheck\" -eq 0 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"# Newline.": "abs-guide.txt"},{"echo -n \"": "abs-guide.txt"},{"\"": "abs-guide.txt"},{"# Indent.": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"cell=${arr[i]}": "abs-guide.txt"},{"if [ \"$cell\" = . ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"let \"alive += 1\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"echo -n \"$cell\" | sed -e 's/_/ /g'": "abs-guide.txt"},{"# Print out array, changing underscores to spaces.": "abs-guide.txt"},{"done": "abs-guide.txt"},{"return": "abs-guide.txt"},{"}": "abs-guide.txt"},{"IsValid ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"if [ -z \"$1\" -o -z \"$2\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"return $FALSE": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"local": "abs-guide.txt"},{"local": "abs-guide.txt"},{"local": "abs-guide.txt"},{"local": "abs-guide.txt"},{"local": "abs-guide.txt"},{"": "abs-guide.txt"},{"row": "abs-guide.txt"},{"lower_limit=0": "abs-guide.txt"},{"upper_limit": "abs-guide.txt"},{"left": "abs-guide.txt"},{"right": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Test if cell coordinate valid.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Mandatory arguments missing?": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Disallow negative coordinate.": "abs-guide.txt"},{"": "abs-guide.txt"},{"let \"upper_limit = $ROWS * $COLS - 1\" # Total number of cells.": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [ \"$1\" -lt \"$lower_limit\" -o \"$1\" -gt \"$upper_limit\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"return $FALSE": "abs-guide.txt"},{"# Out of array bounds.": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"row=$2": "abs-guide.txt"},{"let \"left = $row * $COLS\"": "abs-guide.txt"},{"let \"right = $left + $COLS - 1\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Left limit.": "abs-guide.txt"},{"# Right limit.": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [ \"$1\" -lt \"$left\" -o \"$1\" -gt \"$right\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"return $FALSE": "abs-guide.txt"},{"# Beyond row boundary.": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"return $TRUE": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Valid coordinate.": "abs-guide.txt"},{"": "abs-guide.txt"},{"590": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"IsAlive ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"GetCount \"$1\" $2": "abs-guide.txt"},{"local nhbd=$?": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Test whether cell is alive.": "abs-guide.txt"},{"Takes array, cell number, and": "abs-guide.txt"},{"state of cell as arguments.": "abs-guide.txt"},{"Get alive cell count in neighborhood.": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [ \"$nhbd\" -eq \"$BIRTH\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"return $ALIVE": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Alive in any case.": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [ \"$3\" = \".\" -a \"$nhbd\" -eq \"$SURVIVE\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"# Alive only if previously alive.": "abs-guide.txt"},{"return $ALIVE": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"return $DEAD": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Defaults to dead.": "abs-guide.txt"},{"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"GetCount ()": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Count live cells in passed cell's neighborhood.": "abs-guide.txt"},{"Two arguments needed:": "abs-guide.txt"},{"$1) variable holding array": "abs-guide.txt"},{"$2) cell number": "abs-guide.txt"},{"": "abs-guide.txt"},{"{": "abs-guide.txt"},{"local": "abs-guide.txt"},{"local": "abs-guide.txt"},{"local": "abs-guide.txt"},{"local": "abs-guide.txt"},{"local": "abs-guide.txt"},{"local": "abs-guide.txt"},{"local": "abs-guide.txt"},{"local": "abs-guide.txt"},{"local": "abs-guide.txt"},{"local": "abs-guide.txt"},{"local": "abs-guide.txt"},{"local": "abs-guide.txt"},{"local": "abs-guide.txt"},{"": "abs-guide.txt"},{"cell_number=$2": "abs-guide.txt"},{"array": "abs-guide.txt"},{"top": "abs-guide.txt"},{"center": "abs-guide.txt"},{"bottom": "abs-guide.txt"},{"r": "abs-guide.txt"},{"row": "abs-guide.txt"},{"i": "abs-guide.txt"},{"t_top": "abs-guide.txt"},{"t_cen": "abs-guide.txt"},{"t_bot": "abs-guide.txt"},{"count=0": "abs-guide.txt"},{"ROW_NHBD=3": "abs-guide.txt"},{"": "abs-guide.txt"},{"array=( `echo \"$1\"` )": "abs-guide.txt"},{"let": "abs-guide.txt"},{"let": "abs-guide.txt"},{"let": "abs-guide.txt"},{"let": "abs-guide.txt"},{"": "abs-guide.txt"},{"\"top = $cell_number - $COLS - 1\"": "abs-guide.txt"},{"# Set up cell neighborhood.": "abs-guide.txt"},{"\"center = $cell_number - 1\"": "abs-guide.txt"},{"\"bottom = $cell_number + $COLS - 1\"": "abs-guide.txt"},{"\"r = $cell_number / $COLS\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"for ((i=0; i<$ROW_NHBD; i++))": "abs-guide.txt"},{"do": "abs-guide.txt"},{"let \"t_top = $top + $i\"": "abs-guide.txt"},{"let \"t_cen = $center + $i\"": "abs-guide.txt"},{"let \"t_bot = $bottom + $i\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"let \"row = $r\"": "abs-guide.txt"},{"IsValid $t_cen $row": "abs-guide.txt"},{"if [ $? -eq \"$TRUE\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Traverse from left to right.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Count center row.": "abs-guide.txt"},{"# Valid cell position?": "abs-guide.txt"},{"": "abs-guide.txt"},{"591": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"if [ ${array[$t_cen]} = \"$ALIVE1\" ] # Is it alive?": "abs-guide.txt"},{"then": "abs-guide.txt"},{"# If yes, then ...": "abs-guide.txt"},{"let \"count += 1\"": "abs-guide.txt"},{"# Increment count.": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"let \"row = $r - 1\"": "abs-guide.txt"},{"# Count top row.": "abs-guide.txt"},{"IsValid $t_top $row": "abs-guide.txt"},{"if [ $? -eq \"$TRUE\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"if [ ${array[$t_top]} = \"$ALIVE1\" ] # Redundancy here.": "abs-guide.txt"},{"then": "abs-guide.txt"},{"# Can it be optimized?": "abs-guide.txt"},{"let \"count += 1\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"let \"row = $r + 1\"": "abs-guide.txt"},{"# Count bottom row.": "abs-guide.txt"},{"IsValid $t_bot $row": "abs-guide.txt"},{"if [ $? -eq \"$TRUE\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"if [ ${array[$t_bot]} = \"$ALIVE1\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"let \"count += 1\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"done": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [ ${array[$cell_number]} = \"$ALIVE1\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"let \"count -= 1\"": "abs-guide.txt"},{"# Make sure value of tested cell itself": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"#+ is not counted.": "abs-guide.txt"},{"": "abs-guide.txt"},{"return $count": "abs-guide.txt"},{"}": "abs-guide.txt"},{"next_gen ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Update generation array.": "abs-guide.txt"},{"": "abs-guide.txt"},{"local array": "abs-guide.txt"},{"local i=0": "abs-guide.txt"},{"array=( `echo \"$1\"` )": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Convert passed arg to array.": "abs-guide.txt"},{"": "abs-guide.txt"},{"while [ \"$i\" -lt \"$cells\" ]": "abs-guide.txt"},{"do": "abs-guide.txt"},{"IsAlive \"$1\" $i ${array[$i]}": "abs-guide.txt"},{"if [ $? -eq \"$ALIVE\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"array[$i]=.": "abs-guide.txt"},{"else": "abs-guide.txt"},{"array[$i]=\"_\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"let \"i += 1\"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"###": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Is the cell alive?": "abs-guide.txt"},{"# If alive, then": "abs-guide.txt"},{"#+ represent the cell as a period.": "abs-guide.txt"},{"# Otherwise underscore": "abs-guide.txt"},{"#+ (will later be converted to space).": "abs-guide.txt"},{"": "abs-guide.txt"},{"let \"generation += 1\"": "abs-guide.txt"},{"# Increment generation count.": "abs-guide.txt"},{"Why was the above line commented out?": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"592": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Set variable to pass as parameter to \"display\" function.": "abs-guide.txt"},{"avar=`echo ${array[@]}`": "abs-guide.txt"},{"# Convert array back to string variable.": "abs-guide.txt"},{"display \"$avar\"": "abs-guide.txt"},{"# Display it.": "abs-guide.txt"},{"echo; echo": "abs-guide.txt"},{"echo \"Generation $generation - $alive alive\"": "abs-guide.txt"},{"if [ \"$alive\" -eq 0 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"Premature exit: no more cells alive!\"": "abs-guide.txt"},{"exit $NONE_ALIVE": "abs-guide.txt"},{"# No point in continuing": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"#+ if no live cells.": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"# =========================================================": "abs-guide.txt"},{"# main ()": "abs-guide.txt"},{"# {": "abs-guide.txt"},{"# Load initial array with contents of startup file.": "abs-guide.txt"},{"initial=( `cat \"$startfile\" | sed -e '/#/d' | tr -d '\\n' |\\": "abs-guide.txt"},{"# Delete lines containing '#' comment character.": "abs-guide.txt"},{"sed -e 's/\\./\\. /g' -e 's/_/_ /g'` )": "abs-guide.txt"},{"# Remove linefeeds and insert space between elements.": "abs-guide.txt"},{"clear": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Clear screen.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo #": "abs-guide.txt"},{"Title": "abs-guide.txt"},{"setterm -reverse on": "abs-guide.txt"},{"echo \"=======================\"": "abs-guide.txt"},{"setterm -reverse off": "abs-guide.txt"},{"echo \"": "abs-guide.txt"},{"$GENERATIONS generations\"": "abs-guide.txt"},{"echo \"": "abs-guide.txt"},{"of\"": "abs-guide.txt"},{"echo \"\\\"Life in the Slow Lane\\\"\"": "abs-guide.txt"},{"setterm -reverse on": "abs-guide.txt"},{"echo \"=======================\"": "abs-guide.txt"},{"setterm -reverse off": "abs-guide.txt"},{"sleep $DELAY": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Display \"splash screen\" for 2 seconds.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# -------- Display first generation. -------Gen0=`echo ${initial[@]}`": "abs-guide.txt"},{"display \"$Gen0\"": "abs-guide.txt"},{"# Display only.": "abs-guide.txt"},{"echo; echo": "abs-guide.txt"},{"echo \"Generation $generation - $alive alive\"": "abs-guide.txt"},{"sleep $DELAY": "abs-guide.txt"},{"# -------------------------------------------": "abs-guide.txt"},{"": "abs-guide.txt"},{"let \"generation += 1\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Bump generation count.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# ------- Display second generation. ------Cur=`echo ${initial[@]}`": "abs-guide.txt"},{"next_gen \"$Cur\"": "abs-guide.txt"},{"# Update & display.": "abs-guide.txt"},{"sleep $DELAY": "abs-guide.txt"},{"# ------------------------------------------": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"593": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"let \"generation += 1\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Increment generation count.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# ------ Main loop for displaying subsequent generations -----while [ \"$generation\" -le \"$GENERATIONS\" ]": "abs-guide.txt"},{"do": "abs-guide.txt"},{"Cur=\"$avar\"": "abs-guide.txt"},{"next_gen \"$Cur\"": "abs-guide.txt"},{"let \"generation += 1\"": "abs-guide.txt"},{"sleep $DELAY": "abs-guide.txt"},{"done": "abs-guide.txt"},{"# ==============================================================": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"# }": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"# CEOF:EOF": "abs-guide.txt"},{"": "abs-guide.txt"},{"# The grid in this script has a \"boundary problem.\"": "abs-guide.txt"},{"# The the top, bottom, and sides border on a void of dead cells.": "abs-guide.txt"},{"# Exercise: Change the script to have the grid wrap around,": "abs-guide.txt"},{"# +": "abs-guide.txt"},{"so that the left and right sides will \"touch,\"": "abs-guide.txt"},{"# +": "abs-guide.txt"},{"as will the top and bottom.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Exercise: Create a new \"gen0\" file to seed this script.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Use a 12 x 16 grid, instead of the original 10 x 10 one.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Make the necessary changes to the script,": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"so it will run with the altered file.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Exercise: Modify this script so that it can determine the grid size": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"from the \"gen0\" file, and set any variables necessary": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"for the script to run.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"This would make unnecessary any changes to variables": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"in the script for an altered grid size.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Exercise: Optimize this script.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"It has redundant code.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example A-11. Data file for Game of Life": "abs-guide.txt"},{"# gen0": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# This is an example \"generation 0\" start-up file for \"life.sh\".": "abs-guide.txt"},{"# -------------------------------------------------------------# The \"gen0\" file is a 10 x 10 grid using a period (.) for live cells,": "abs-guide.txt"},{"#+ and an underscore (_) for dead ones. We cannot simply use spaces": "abs-guide.txt"},{"#+ for dead cells in this file because of a peculiarity in Bash arrays.": "abs-guide.txt"},{"# [Exercise for the reader: explain this.]": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Lines beginning with a '#' are comments, and the script ignores them.": "abs-guide.txt"},{"__.__..___": "abs-guide.txt"},{"__.._.____": "abs-guide.txt"},{"____.___..": "abs-guide.txt"},{"_._______.": "abs-guide.txt"},{"____._____": "abs-guide.txt"},{"..__...___": "abs-guide.txt"},{"____._____": "abs-guide.txt"},{"___...____": "abs-guide.txt"},{"__.._..___": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"594": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"_..___..__": "abs-guide.txt"},{"": "abs-guide.txt"},{"+++": "abs-guide.txt"},{"The following script is by Mark Moraes of the University of Toronto. See the file Moraes-COPYRIGHT for": "abs-guide.txt"},{"permissions and restrictions. This file is included in the combined HTML/source tarball of the ABS Guide.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example A-12. behead: Removing mail and news message headers": "abs-guide.txt"},{"#!": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"/bin/sh": "abs-guide.txt"},{"Strips off the header from a mail/News message i.e. till the first": "abs-guide.txt"},{"empty line.": "abs-guide.txt"},{"Author: Mark Moraes, University of Toronto": "abs-guide.txt"},{"": "abs-guide.txt"},{"# ==> These comments added by author of this document.": "abs-guide.txt"},{"if [ $# -eq 0 ]; then": "abs-guide.txt"},{"# ==> If no command-line args present, then works on file redirected to stdin.": "abs-guide.txt"},{"sed -e '1,/^$/d' -e '/^[": "abs-guide.txt"},{"]*$/d'": "abs-guide.txt"},{"# --> Delete empty lines and all lines until": "abs-guide.txt"},{"# --> first one beginning with white space.": "abs-guide.txt"},{"else": "abs-guide.txt"},{"# ==> If command-line args present, then work on files named.": "abs-guide.txt"},{"for i do": "abs-guide.txt"},{"sed -e '1,/^$/d' -e '/^[": "abs-guide.txt"},{"]*$/d' $i": "abs-guide.txt"},{"# --> Ditto, as above.": "abs-guide.txt"},{"done": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"exit": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"==> Exercise: Add error checking and other options.": "abs-guide.txt"},{"==>": "abs-guide.txt"},{"==> Note that the small sed script repeats, except for the arg passed.": "abs-guide.txt"},{"==> Does it make sense to embed it in a function? Why or why not?": "abs-guide.txt"},{"": "abs-guide.txt"},{"/*": "abs-guide.txt"},{"* Copyright University of Toronto 1988, 1989.": "abs-guide.txt"},{"* Written by Mark Moraes": "abs-guide.txt"},{"*": "abs-guide.txt"},{"* Permission is granted to anyone to use this software for any purpose on": "abs-guide.txt"},{"* any computer system, and to alter it and redistribute it freely, subject": "abs-guide.txt"},{"* to the following restrictions:": "abs-guide.txt"},{"*": "abs-guide.txt"},{"* 1. The author and the University of Toronto are not responsible": "abs-guide.txt"},{"*": "abs-guide.txt"},{"for the consequences of use of this software, no matter how awful,": "abs-guide.txt"},{"*": "abs-guide.txt"},{"even if they arise from flaws in it.": "abs-guide.txt"},{"*": "abs-guide.txt"},{"* 2. The origin of this software must not be misrepresented, either by": "abs-guide.txt"},{"*": "abs-guide.txt"},{"explicit claim or by omission. Since few users ever read sources,": "abs-guide.txt"},{"*": "abs-guide.txt"},{"credits must appear in the documentation.": "abs-guide.txt"},{"*": "abs-guide.txt"},{"* 3. Altered versions must be plainly marked as such, and must not be": "abs-guide.txt"},{"*": "abs-guide.txt"},{"misrepresented as being the original software. Since few users": "abs-guide.txt"},{"*": "abs-guide.txt"},{"ever read sources, credits must appear in the documentation.": "abs-guide.txt"},{"*": "abs-guide.txt"},{"* 4. This notice may not be removed or altered.": "abs-guide.txt"},{"*/": "abs-guide.txt"},{"": "abs-guide.txt"},{"+": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"595": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"Antek Sawicki contributed the following script, which makes very clever use of the parameter substitution": "abs-guide.txt"},{"operators discussed in Section 10.2.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example A-13. password: Generating random 8-character passwords": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Random password generator for Bash 2.x +": "abs-guide.txt"},{"#+ by Antek Sawicki <tenox@tenox.tc>,": "abs-guide.txt"},{"#+ who generously gave usage permission to the ABS Guide author.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# ==> Comments added by document author ==>": "abs-guide.txt"},{"": "abs-guide.txt"},{"MATRIX=\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"": "abs-guide.txt"},{"# ==> Password will consist of alphanumeric characters.": "abs-guide.txt"},{"LENGTH=\"8\"": "abs-guide.txt"},{"# ==> May change 'LENGTH' for longer password.": "abs-guide.txt"},{"": "abs-guide.txt"},{"while [ \"${n:=1}\" -le \"$LENGTH\" ]": "abs-guide.txt"},{"# ==> Recall that := is \"default substitution\" operator.": "abs-guide.txt"},{"# ==> So, if 'n' has not been initialized, set it to 1.": "abs-guide.txt"},{"do": "abs-guide.txt"},{"PASS=\"$PASS${MATRIX:$(($RANDOM%${#MATRIX})):1}\"": "abs-guide.txt"},{"# ==> Very clever, but tricky.": "abs-guide.txt"},{"# ==> Starting from the innermost nesting...": "abs-guide.txt"},{"# ==> ${#MATRIX} returns length of array MATRIX.": "abs-guide.txt"},{"# ==> $RANDOM%${#MATRIX} returns random number between 1": "abs-guide.txt"},{"# ==> and [length of MATRIX] - 1.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"==>": "abs-guide.txt"},{"==>": "abs-guide.txt"},{"==>": "abs-guide.txt"},{"==>": "abs-guide.txt"},{"": "abs-guide.txt"},{"${MATRIX:$(($RANDOM%${#MATRIX})):1}": "abs-guide.txt"},{"returns expansion of MATRIX at random position, by length 1.": "abs-guide.txt"},{"See {var:pos:len} parameter substitution in Chapter 9.": "abs-guide.txt"},{"and the associated examples.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# ==> PASS=... simply pastes this result onto previous PASS (concatenation).": "abs-guide.txt"},{"# ==> To visualize this more clearly, uncomment the following line": "abs-guide.txt"},{"#": "abs-guide.txt"},{"echo \"$PASS\"": "abs-guide.txt"},{"# ==> to see PASS being built up,": "abs-guide.txt"},{"# ==> one character at a time, each iteration of the loop.": "abs-guide.txt"},{"let n+=1": "abs-guide.txt"},{"# ==> Increment 'n' for next pass.": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo \"$PASS\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# ==> Or, redirect to a file, as desired.": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"+": "abs-guide.txt"},{"James R. Van Zandt contributed this script which uses named pipes and, in his words, \"really exercises": "abs-guide.txt"},{"quoting and escaping.\"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"596": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"Example A-14. fifo: Making daily backups, using named pipes": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# ==> Script by James R. Van Zandt, and used here with his permission.": "abs-guide.txt"},{"# ==> Comments added by author of this document.": "abs-guide.txt"},{"": "abs-guide.txt"},{"HERE=`uname -n`": "abs-guide.txt"},{"# ==> hostname": "abs-guide.txt"},{"THERE=bilbo": "abs-guide.txt"},{"echo \"starting remote backup to $THERE at `date +%r`\"": "abs-guide.txt"},{"# ==> `date +%r` returns time in 12-hour format, i.e. \"08:08:34 PM\".": "abs-guide.txt"},{"# make sure /pipe really is a pipe and not a plain file": "abs-guide.txt"},{"rm -rf /pipe": "abs-guide.txt"},{"mkfifo /pipe": "abs-guide.txt"},{"# ==> Create a \"named pipe\", named \"/pipe\" ...": "abs-guide.txt"},{"# ==> 'su xyz' runs commands as user \"xyz\".": "abs-guide.txt"},{"# ==> 'ssh' invokes secure shell (remote login client).": "abs-guide.txt"},{"su xyz -c \"ssh $THERE \\\"cat > /home/xyz/backup/${HERE}-daily.tar.gz\\\" < /pipe\"&": "abs-guide.txt"},{"cd /": "abs-guide.txt"},{"tar -czf - bin boot dev etc home info lib man root sbin share usr var > /pipe": "abs-guide.txt"},{"# ==> Uses named pipe, /pipe, to communicate between processes:": "abs-guide.txt"},{"# ==> 'tar/gzip' writes to /pipe and 'ssh' reads from /pipe.": "abs-guide.txt"},{"# ==> The end result is this backs up the main directories, from / on down.": "abs-guide.txt"},{"# ==> What are the advantages of a \"named pipe\" in this situation,": "abs-guide.txt"},{"# ==>+ as opposed to an \"anonymous pipe\", with |?": "abs-guide.txt"},{"# ==> Will an anonymous pipe even work here?": "abs-guide.txt"},{"# ==>": "abs-guide.txt"},{"# ==>": "abs-guide.txt"},{"": "abs-guide.txt"},{"Is it necessary to delete the pipe before exiting the script?": "abs-guide.txt"},{"How could that be done?": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"+": "abs-guide.txt"},{"": "abs-guide.txt"},{"St\u00e9phane Chazelas used the following script to demonstrate generating prime numbers without arrays.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example A-15. Generating prime numbers using the modulo operator": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# primes.sh: Generate prime numbers, without using arrays.": "abs-guide.txt"},{"# Script contributed by Stephane Chazelas.": "abs-guide.txt"},{"# This does *not* use the classic \"Sieve of Eratosthenes\" algorithm,": "abs-guide.txt"},{"#+ but instead the more intuitive method of testing each candidate number": "abs-guide.txt"},{"#+ for factors (divisors), using the \"%\" modulo operator.": "abs-guide.txt"},{"": "abs-guide.txt"},{"LIMIT=1000": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Primes, 2 ... 1000.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Primes()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"(( n = $1 + 1 ))": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Bump to next integer.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"597": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"shift": "abs-guide.txt"},{"# echo \"_n=$n i=$i_\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Next parameter in list.": "abs-guide.txt"},{"": "abs-guide.txt"},{"if (( n == LIMIT ))": "abs-guide.txt"},{"then echo $*": "abs-guide.txt"},{"return": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"for i; do": "abs-guide.txt"},{"#": "abs-guide.txt"},{"echo \"-n=$n i=$i-\"": "abs-guide.txt"},{"(( i * i > n )) && break": "abs-guide.txt"},{"(( n % i )) && continue": "abs-guide.txt"},{"Primes $n $@": "abs-guide.txt"},{"return": "abs-guide.txt"},{"done": "abs-guide.txt"},{"Primes $n $@ $n": "abs-guide.txt"},{"": "abs-guide.txt"},{"# \"i\" set to \"@\", previous values of $n.": "abs-guide.txt"},{"# Optimization.": "abs-guide.txt"},{"# Sift out non-primes using modulo operator.": "abs-guide.txt"},{"# Recursion inside loop.": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Recursion outside loop.": "abs-guide.txt"},{"Successively accumulate": "abs-guide.txt"},{"positional parameters.": "abs-guide.txt"},{"\"$@\" is the accumulating list of primes.": "abs-guide.txt"},{"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"Primes 1": "abs-guide.txt"},{"exit $?": "abs-guide.txt"},{"# Pipe output of the script to 'fmt' for prettier printing.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Uncomment lines 16 and 24 to help figure out what is going on.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Compare the speed of this algorithm for generating primes": "abs-guide.txt"},{"#+ with the Sieve of Eratosthenes (ex68.sh).": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Exercise: Rewrite this script without recursion.": "abs-guide.txt"},{"": "abs-guide.txt"},{"+": "abs-guide.txt"},{"Rick Boivie's revision of Jordi Sanfeliu's tree script.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example A-16. tree: Displaying a directory tree": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# tree.sh": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Written by Rick Boivie.": "abs-guide.txt"},{"Used with permission.": "abs-guide.txt"},{"This is a revised and simplified version of a script": "abs-guide.txt"},{"by Jordi Sanfeliu (the original author), and patched by Ian Kjos.": "abs-guide.txt"},{"This script replaces the earlier version used in": "abs-guide.txt"},{"previous releases of the Advanced Bash Scripting Guide.": "abs-guide.txt"},{"Copyright (c) 2002, by Jordi Sanfeliu, Rick Boivie, and Ian Kjos.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# ==> Comments added by the author of this document.": "abs-guide.txt"},{"": "abs-guide.txt"},{"search () {": "abs-guide.txt"},{"for dir in `echo *`": "abs-guide.txt"},{"# ==> `echo *` lists all the files in current working directory,": "abs-guide.txt"},{"#+ ==> without line breaks.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"598": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# ==> Similar effect to for dir in *": "abs-guide.txt"},{"# ==> but \"dir in `echo *`\" will not handle filenames with blanks.": "abs-guide.txt"},{"do": "abs-guide.txt"},{"if [ -d \"$dir\" ] ; then # ==> If it is a directory (-d)...": "abs-guide.txt"},{"zz=0": "abs-guide.txt"},{"# ==> Temp variable, keeping track of": "abs-guide.txt"},{"#": "abs-guide.txt"},{"directory level.": "abs-guide.txt"},{"while [ $zz != $1 ]": "abs-guide.txt"},{"# Keep track of inner nested loop.": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo -n \"| \"": "abs-guide.txt"},{"# ==> Display vertical connector symbol,": "abs-guide.txt"},{"# ==> with 2 spaces & no line feed": "abs-guide.txt"},{"#": "abs-guide.txt"},{"in order to indent.": "abs-guide.txt"},{"zz=`expr $zz + 1`": "abs-guide.txt"},{"# ==> Increment zz.": "abs-guide.txt"},{"done": "abs-guide.txt"},{"if [ -L \"$dir\" ] ; then # ==> If directory is a symbolic link...": "abs-guide.txt"},{"echo \"+---$dir\" `ls -l $dir | sed 's/^.*'$dir' //'`": "abs-guide.txt"},{"# ==> Display horiz. connector and list directory name, but...": "abs-guide.txt"},{"# ==> delete date/time part of long listing.": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo \"+---$dir\"": "abs-guide.txt"},{"# ==> Display horizontal connector symbol...": "abs-guide.txt"},{"# ==> and print directory name.": "abs-guide.txt"},{"numdirs=`expr $numdirs + 1` # ==> Increment directory count.": "abs-guide.txt"},{"if cd \"$dir\" ; then": "abs-guide.txt"},{"# ==> If can move to subdirectory...": "abs-guide.txt"},{"search `expr $1 + 1`": "abs-guide.txt"},{"# with recursion ;-)": "abs-guide.txt"},{"# ==> Function calls itself.": "abs-guide.txt"},{"cd ..": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"done": "abs-guide.txt"},{"}": "abs-guide.txt"},{"if [ $# != 0 ] ; then": "abs-guide.txt"},{"cd $1": "abs-guide.txt"},{"# Move to indicated directory.": "abs-guide.txt"},{"#else": "abs-guide.txt"},{"# stay in current directory": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"echo \"Initial directory = `pwd`\"": "abs-guide.txt"},{"numdirs=0": "abs-guide.txt"},{"search 0": "abs-guide.txt"},{"echo \"Total directories = $numdirs\"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Patsie's version of a directory tree script.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example A-17. tree2: Alternate directory tree script": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# tree2.sh": "abs-guide.txt"},{"# Lightly modified/reformatted by ABS Guide author.": "abs-guide.txt"},{"# Included in ABS Guide with permission of script author (thanks!).": "abs-guide.txt"},{"##": "abs-guide.txt"},{"##": "abs-guide.txt"},{"##": "abs-guide.txt"},{"##": "abs-guide.txt"},{"##": "abs-guide.txt"},{"##": "abs-guide.txt"},{"": "abs-guide.txt"},{"Recursive file/dirsize checking script, by Patsie": "abs-guide.txt"},{"This script builds a list of files/directories and their size (du -akx)": "abs-guide.txt"},{"and processes this list to a human readable tree shape": "abs-guide.txt"},{"The 'du -akx' is only as good as the permissions the owner has.": "abs-guide.txt"},{"So preferably run as root* to get the best results, or use only on": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"599": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"## directories for which you have read permissions. Anything you can't": "abs-guide.txt"},{"## read is not in the list.": "abs-guide.txt"},{"#* ABS Guide author advises caution when running scripts as root!": "abs-guide.txt"},{"": "abs-guide.txt"},{"##########": "abs-guide.txt"},{"TOP=5": "abs-guide.txt"},{"MAXRECURS=5": "abs-guide.txt"},{"E_BL=80": "abs-guide.txt"},{"E_DIR=81": "abs-guide.txt"},{"": "abs-guide.txt"},{"##########": "abs-guide.txt"},{"": "abs-guide.txt"},{"THIS IS CONFIGURABLE": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"##########": "abs-guide.txt"},{"": "abs-guide.txt"},{"Top 5 biggest (sub)directories.": "abs-guide.txt"},{"Max 5 subdirectories/recursions deep.": "abs-guide.txt"},{"Blank line already returned.": "abs-guide.txt"},{"Directory not specified.": "abs-guide.txt"},{"": "abs-guide.txt"},{"DON'T CHANGE ANYTHING BELOW THIS LINE": "abs-guide.txt"},{"": "abs-guide.txt"},{"PID=$$": "abs-guide.txt"},{"SELF=`basename $0`": "abs-guide.txt"},{"TMP=\"/tmp/${SELF}.${PID}.tmp\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"##########": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Our own process ID.": "abs-guide.txt"},{"# Our own program name.": "abs-guide.txt"},{"# Temporary 'du' result.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Convert number to dotted thousand.": "abs-guide.txt"},{"function dot { echo \"": "abs-guide.txt"},{"$*\" |": "abs-guide.txt"},{"sed -e :a -e 's/\\(.*[0-9]\\)\\([0-9]\\{3\\}\\)/\\1,\\2/;ta' |": "abs-guide.txt"},{"tail -c 12; }": "abs-guide.txt"},{"# Usage: tree <recursion>": "abs-guide.txt"},{"function tree {": "abs-guide.txt"},{"recurs=\"$1\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"prefix=\"$2\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"minsize=\"$3\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"dirname=\"$4\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"<indent prefix> <min size> <directory>": "abs-guide.txt"},{"How deep nested are we?": "abs-guide.txt"},{"What do we display before file/dirname?": "abs-guide.txt"},{"What is the minumum file/dirsize?": "abs-guide.txt"},{"Which directory are we checking?": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Get ($TOP) biggest subdirs/subfiles from TMP file.": "abs-guide.txt"},{"LIST=`egrep \"[[:space:]]${dirname}/[^/]*$\" \"$TMP\" |": "abs-guide.txt"},{"awk '{if($1>'$minsize') print;}' | sort -nr | head -$TOP`": "abs-guide.txt"},{"[ -z \"$LIST\" ] && return": "abs-guide.txt"},{"# Empty list, then go back.": "abs-guide.txt"},{"cnt=0": "abs-guide.txt"},{"num=`echo \"$LIST\" | wc -l`": "abs-guide.txt"},{"": "abs-guide.txt"},{"# How many entries in the list.": "abs-guide.txt"},{"": "abs-guide.txt"},{"## Main loop": "abs-guide.txt"},{"echo \"$LIST\" | while read size name; do": "abs-guide.txt"},{"((cnt+=1))": "abs-guide.txt"},{"# Count entry number.": "abs-guide.txt"},{"bname=`basename \"$name\"`": "abs-guide.txt"},{"# We only need a basename of the entry.": "abs-guide.txt"},{"[ -d \"$name\" ] && bname=\"$bname/\"": "abs-guide.txt"},{"# If it's a directory, append a slash.": "abs-guide.txt"},{"echo \"`dot $size`$prefix +-$bname\"": "abs-guide.txt"},{"# Display the result.": "abs-guide.txt"},{"# Call ourself recursively if it's a directory": "abs-guide.txt"},{"#+ and we're not nested too deep ($MAXRECURS).": "abs-guide.txt"},{"# The recursion goes up: $((recurs+1))": "abs-guide.txt"},{"# The prefix gets a space if it's the last entry,": "abs-guide.txt"},{"#+ or a pipe if there are more entries.": "abs-guide.txt"},{"# The minimum file/dirsize becomes": "abs-guide.txt"},{"#+ a tenth of his parent: $((size/10)).": "abs-guide.txt"},{"# Last argument is the full directory name to check.": "abs-guide.txt"},{"if [ -d \"$name\" -a $recurs -lt $MAXRECURS ]; then": "abs-guide.txt"},{"[ $cnt -lt $num ] \\": "abs-guide.txt"},{"|| (tree $((recurs+1)) \"$prefix \" $((size/10)) \"$name\") \\": "abs-guide.txt"},{"&& (tree $((recurs+1)) \"$prefix |\" $((size/10)) \"$name\")": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"done": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"600": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"[ $? -eq 0 ] && echo \"": "abs-guide.txt"},{"$prefix\"": "abs-guide.txt"},{"# Every time we jump back add a 'blank' line.": "abs-guide.txt"},{"return $E_BL": "abs-guide.txt"},{"# We return 80 to tell we added a blank line already.": "abs-guide.txt"},{"}": "abs-guide.txt"},{"###": "abs-guide.txt"},{"###": "abs-guide.txt"},{"###": "abs-guide.txt"},{"": "abs-guide.txt"},{"main program": "abs-guide.txt"},{"": "abs-guide.txt"},{"###": "abs-guide.txt"},{"###": "abs-guide.txt"},{"###": "abs-guide.txt"},{"": "abs-guide.txt"},{"rootdir=\"$@\"": "abs-guide.txt"},{"[ -d \"$rootdir\" ] ||": "abs-guide.txt"},{"{ echo \"$SELF: Usage: $SELF <directory>\" >&2; exit $E_DIR; }": "abs-guide.txt"},{"# We should be called with a directory name.": "abs-guide.txt"},{"echo \"Building inventory list, please wait ...\"": "abs-guide.txt"},{"# Show \"please wait\" message.": "abs-guide.txt"},{"du -akx \"$rootdir\" 1>\"$TMP\" 2>/dev/null": "abs-guide.txt"},{"# Build a temporary list of all files/dirs and their size.": "abs-guide.txt"},{"size=`tail -1 \"$TMP\" | awk '{print $1}'`": "abs-guide.txt"},{"# What is our rootdirectory's size?": "abs-guide.txt"},{"echo \"`dot $size` $rootdir\"": "abs-guide.txt"},{"# Display rootdirectory's entry.": "abs-guide.txt"},{"tree 0 \"\" 0 \"$rootdir\"": "abs-guide.txt"},{"# Display the tree below our rootdirectory.": "abs-guide.txt"},{"rm \"$TMP\" 2>/dev/null": "abs-guide.txt"},{"# Clean up TMP file.": "abs-guide.txt"},{"exit $?": "abs-guide.txt"},{"": "abs-guide.txt"},{"Noah Friedman permitted use of his string function script. It essentially reproduces some of the C-library": "abs-guide.txt"},{"string manipulation functions.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example A-18. string functions: C-style string functions": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"string.bash --- bash emulation of string(3) library routines": "abs-guide.txt"},{"Author: Noah Friedman <friedman@prep.ai.mit.edu>": "abs-guide.txt"},{"==>": "abs-guide.txt"},{"Used with his kind permission in this document.": "abs-guide.txt"},{"Created: 1992-07-01": "abs-guide.txt"},{"Last modified: 1993-09-29": "abs-guide.txt"},{"Public domain": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Conversion to bash v2 syntax done by Chet Ramey": "abs-guide.txt"},{"# Commentary:": "abs-guide.txt"},{"# Code:": "abs-guide.txt"},{"#:docstring strcat:": "abs-guide.txt"},{"# Usage: strcat s1 s2": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Strcat appends the value of variable s2 to variable s1.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Example:": "abs-guide.txt"},{"#": "abs-guide.txt"},{"a=\"foo\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"b=\"bar\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"strcat a b": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"601": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"#": "abs-guide.txt"},{"echo $a": "abs-guide.txt"},{"#": "abs-guide.txt"},{"=> foobar": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#:end docstring:": "abs-guide.txt"},{"###;;;autoload": "abs-guide.txt"},{"==> Autoloading of function commented out.": "abs-guide.txt"},{"function strcat ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"local s1_val s2_val": "abs-guide.txt"},{"s1_val=${!1}": "abs-guide.txt"},{"# indirect variable expansion": "abs-guide.txt"},{"s2_val=${!2}": "abs-guide.txt"},{"eval \"$1\"=\\'\"${s1_val}${s2_val}\"\\'": "abs-guide.txt"},{"# ==> eval $1='${s1_val}${s2_val}' avoids problems,": "abs-guide.txt"},{"# ==> if one of the variables contains a single quote.": "abs-guide.txt"},{"}": "abs-guide.txt"},{"#:docstring strncat:": "abs-guide.txt"},{"# Usage: strncat s1 s2 $n": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Line strcat, but strncat appends a maximum of n characters from the value": "abs-guide.txt"},{"# of variable s2. It copies fewer if the value of variabl s2 is shorter": "abs-guide.txt"},{"# than n characters. Echoes result on stdout.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Example:": "abs-guide.txt"},{"#": "abs-guide.txt"},{"a=foo": "abs-guide.txt"},{"#": "abs-guide.txt"},{"b=barbaz": "abs-guide.txt"},{"#": "abs-guide.txt"},{"strncat a b 3": "abs-guide.txt"},{"#": "abs-guide.txt"},{"echo $a": "abs-guide.txt"},{"#": "abs-guide.txt"},{"=> foobar": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#:end docstring:": "abs-guide.txt"},{"###;;;autoload": "abs-guide.txt"},{"function strncat ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"local s1=\"$1\"": "abs-guide.txt"},{"local s2=\"$2\"": "abs-guide.txt"},{"local -i n=\"$3\"": "abs-guide.txt"},{"local s1_val s2_val": "abs-guide.txt"},{"s1_val=${!s1}": "abs-guide.txt"},{"s2_val=${!s2}": "abs-guide.txt"},{"if [ ${#s2_val} -gt ${n} ]; then": "abs-guide.txt"},{"s2_val=${s2_val:0:$n}": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"# ==> indirect variable expansion": "abs-guide.txt"},{"": "abs-guide.txt"},{"# ==> substring extraction": "abs-guide.txt"},{"": "abs-guide.txt"},{"eval \"$s1\"=\\'\"${s1_val}${s2_val}\"\\'": "abs-guide.txt"},{"# ==> eval $1='${s1_val}${s2_val}' avoids problems,": "abs-guide.txt"},{"# ==> if one of the variables contains a single quote.": "abs-guide.txt"},{"}": "abs-guide.txt"},{"#:docstring strcmp:": "abs-guide.txt"},{"# Usage: strcmp $s1 $s2": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Strcmp compares its arguments and returns an integer less than, equal to,": "abs-guide.txt"},{"# or greater than zero, depending on whether string s1 is lexicographically": "abs-guide.txt"},{"# less than, equal to, or greater than string s2.": "abs-guide.txt"},{"#:end docstring:": "abs-guide.txt"},{"###;;;autoload": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"602": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"function strcmp ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"[ \"$1\" = \"$2\" ] && return 0": "abs-guide.txt"},{"[ \"${1}\" '<' \"${2}\" ] > /dev/null && return -1": "abs-guide.txt"},{"return 1": "abs-guide.txt"},{"}": "abs-guide.txt"},{"#:docstring strncmp:": "abs-guide.txt"},{"# Usage: strncmp $s1 $s2 $n": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Like strcmp, but makes the comparison by examining a maximum of n": "abs-guide.txt"},{"# characters (n less than or equal to zero yields equality).": "abs-guide.txt"},{"#:end docstring:": "abs-guide.txt"},{"###;;;autoload": "abs-guide.txt"},{"function strncmp ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"if [ -z \"${3}\" -o \"${3}\" -le \"0\" ]; then": "abs-guide.txt"},{"return 0": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"if [ ${3} -ge ${#1} -a ${3} -ge ${#2} ]; then": "abs-guide.txt"},{"strcmp \"$1\" \"$2\"": "abs-guide.txt"},{"return $?": "abs-guide.txt"},{"else": "abs-guide.txt"},{"s1=${1:0:$3}": "abs-guide.txt"},{"s2=${2:0:$3}": "abs-guide.txt"},{"strcmp $s1 $s2": "abs-guide.txt"},{"return $?": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"}": "abs-guide.txt"},{"#:docstring strlen:": "abs-guide.txt"},{"# Usage: strlen s": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Strlen returns the number of characters in string literal s.": "abs-guide.txt"},{"#:end docstring:": "abs-guide.txt"},{"###;;;autoload": "abs-guide.txt"},{"function strlen ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"eval echo \"\\${#${1}}\"": "abs-guide.txt"},{"# ==> Returns the length of the value of the variable": "abs-guide.txt"},{"# ==> whose name is passed as an argument.": "abs-guide.txt"},{"}": "abs-guide.txt"},{"#:docstring strspn:": "abs-guide.txt"},{"# Usage: strspn $s1 $s2": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Strspn returns the length of the maximum initial segment of string s1,": "abs-guide.txt"},{"# which consists entirely of characters from string s2.": "abs-guide.txt"},{"#:end docstring:": "abs-guide.txt"},{"###;;;autoload": "abs-guide.txt"},{"function strspn ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"# Unsetting IFS allows whitespace to be handled as normal chars.": "abs-guide.txt"},{"local IFS=": "abs-guide.txt"},{"local result=\"${1%%[!${2}]*}\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"603": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"echo ${#result}": "abs-guide.txt"},{"}": "abs-guide.txt"},{"#:docstring strcspn:": "abs-guide.txt"},{"# Usage: strcspn $s1 $s2": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Strcspn returns the length of the maximum initial segment of string s1,": "abs-guide.txt"},{"# which consists entirely of characters not from string s2.": "abs-guide.txt"},{"#:end docstring:": "abs-guide.txt"},{"###;;;autoload": "abs-guide.txt"},{"function strcspn ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"# Unsetting IFS allows whitspace to be handled as normal chars.": "abs-guide.txt"},{"local IFS=": "abs-guide.txt"},{"local result=\"${1%%[${2}]*}\"": "abs-guide.txt"},{"echo ${#result}": "abs-guide.txt"},{"}": "abs-guide.txt"},{"#:docstring strstr:": "abs-guide.txt"},{"# Usage: strstr s1 s2": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Strstr echoes a substring starting at the first occurrence of string s2 in": "abs-guide.txt"},{"# string s1, or nothing if s2 does not occur in the string. If s2 points to": "abs-guide.txt"},{"# a string of zero length, strstr echoes s1.": "abs-guide.txt"},{"#:end docstring:": "abs-guide.txt"},{"###;;;autoload": "abs-guide.txt"},{"function strstr ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"# if s2 points to a string of zero length, strstr echoes s1": "abs-guide.txt"},{"[ ${#2} -eq 0 ] && { echo \"$1\" ; return 0; }": "abs-guide.txt"},{"# strstr echoes nothing if s2 does not occur in s1": "abs-guide.txt"},{"case \"$1\" in": "abs-guide.txt"},{"*$2*) ;;": "abs-guide.txt"},{"*) return 1;;": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"# use the pattern matching code to strip off the match and everything": "abs-guide.txt"},{"# following it": "abs-guide.txt"},{"first=${1/$2*/}": "abs-guide.txt"},{"# then strip off the first unmatched portion of the string": "abs-guide.txt"},{"echo \"${1##$first}\"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"#:docstring strtok:": "abs-guide.txt"},{"# Usage: strtok s1 s2": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Strtok considers the string s1 to consist of a sequence of zero or more": "abs-guide.txt"},{"# text tokens separated by spans of one or more characters from the": "abs-guide.txt"},{"# separator string s2. The first call (with a non-empty string s1": "abs-guide.txt"},{"# specified) echoes a string consisting of the first token on stdout. The": "abs-guide.txt"},{"# function keeps track of its position in the string s1 between separate": "abs-guide.txt"},{"# calls, so that subsequent calls made with the first argument an empty": "abs-guide.txt"},{"# string will work through the string immediately following that token. In": "abs-guide.txt"},{"# this way subsequent calls will work through the string s1 until no tokens": "abs-guide.txt"},{"# remain. The separator string s2 may be different from call to call.": "abs-guide.txt"},{"# When no token remains in s1, an empty value is echoed on stdout.": "abs-guide.txt"},{"#:end docstring:": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"604": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"###;;;autoload": "abs-guide.txt"},{"function strtok ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{":": "abs-guide.txt"},{"}": "abs-guide.txt"},{"#:docstring strtrunc:": "abs-guide.txt"},{"# Usage: strtrunc $n $s1 {$s2} {$...}": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Used by many functions like strncmp to truncate arguments for comparison.": "abs-guide.txt"},{"# Echoes the first n characters of each string s1 s2 ... on stdout.": "abs-guide.txt"},{"#:end docstring:": "abs-guide.txt"},{"###;;;autoload": "abs-guide.txt"},{"function strtrunc ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"n=$1 ; shift": "abs-guide.txt"},{"for z; do": "abs-guide.txt"},{"echo \"${z:0:$n}\"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"}": "abs-guide.txt"},{"# provide string": "abs-guide.txt"},{"# string.bash ends here": "abs-guide.txt"},{"": "abs-guide.txt"},{"# ========================================================================== #": "abs-guide.txt"},{"# ==> Everything below here added by the document author.": "abs-guide.txt"},{"# ==> Suggested use of this script is to delete everything below here,": "abs-guide.txt"},{"# ==> and \"source\" this file into your own scripts.": "abs-guide.txt"},{"# strcat": "abs-guide.txt"},{"string0=one": "abs-guide.txt"},{"string1=two": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"Testing \\\"strcat\\\" function:\"": "abs-guide.txt"},{"echo \"Original \\\"string0\\\" = $string0\"": "abs-guide.txt"},{"echo \"\\\"string1\\\" = $string1\"": "abs-guide.txt"},{"strcat string0 string1": "abs-guide.txt"},{"echo \"New \\\"string0\\\" = $string0\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"# strlen": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"Testing \\\"strlen\\\" function:\"": "abs-guide.txt"},{"str=123456789": "abs-guide.txt"},{"echo \"\\\"str\\\" = $str\"": "abs-guide.txt"},{"echo -n \"Length of \\\"str\\\" = \"": "abs-guide.txt"},{"strlen str": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Exercise:": "abs-guide.txt"},{"# -------# Add code to test all the other string functions above.": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"605": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"Michael Zick's complex array example uses the md5sum check sum command to encode directory": "abs-guide.txt"},{"information.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example A-19. Directory information": "abs-guide.txt"},{"#! /bin/bash": "abs-guide.txt"},{"# directory-info.sh": "abs-guide.txt"},{"# Parses and lists directory information.": "abs-guide.txt"},{"# NOTE: Change lines 273 and 353 per \"README\" file.": "abs-guide.txt"},{"# Michael Zick is the author of this script.": "abs-guide.txt"},{"# Used here with his permission.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Controls": "abs-guide.txt"},{"If overridden by command arguments, they must be in the order:": "abs-guide.txt"},{"Arg1: \"Descriptor Directory\"": "abs-guide.txt"},{"Arg2: \"Exclude Paths\"": "abs-guide.txt"},{"Arg3: \"Exclude Directories\"": "abs-guide.txt"},{"Environment Settings override Defaults.": "abs-guide.txt"},{"Command arguments override Environment Settings.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Default location for content addressed file descriptors.": "abs-guide.txt"},{"MD5UCFS=${1:-${MD5UCFS:-'/tmpfs/ucfs'}}": "abs-guide.txt"},{"# Directory paths never to list or enter": "abs-guide.txt"},{"declare -a \\": "abs-guide.txt"},{"EXCLUDE_PATHS=${2:-${EXCLUDE_PATHS:-'(/proc /dev /devfs /tmpfs)'}}": "abs-guide.txt"},{"# Directories never to list or enter": "abs-guide.txt"},{"declare -a \\": "abs-guide.txt"},{"EXCLUDE_DIRS=${3:-${EXCLUDE_DIRS:-'(ucfs lost+found tmp wtmp)'}}": "abs-guide.txt"},{"# Files never to list or enter": "abs-guide.txt"},{"declare -a \\": "abs-guide.txt"},{"EXCLUDE_FILES=${3:-${EXCLUDE_FILES:-'(core \"Name with Spaces\")'}}": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{":": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Here document used as a comment block.": "abs-guide.txt"},{"<<LSfieldsDoc": "abs-guide.txt"},{"# # # # List Filesystem Directory Information # # # # #": "abs-guide.txt"},{"ListDirectory \"FileGlob\" \"Field-Array-Name\"": "abs-guide.txt"},{"or": "abs-guide.txt"},{"ListDirectory -of \"FileGlob\" \"Field-Array-Filename\"": "abs-guide.txt"},{"'-of' meaning 'output to filename'": "abs-guide.txt"},{"# # # #": "abs-guide.txt"},{"": "abs-guide.txt"},{"String format description based on: ls (GNU fileutils) version 4.0.36": "abs-guide.txt"},{"Produces a line (or more) formatted:": "abs-guide.txt"},{"inode permissions hard-links owner group ...": "abs-guide.txt"},{"32736 -rw------1 mszick": "abs-guide.txt"},{"mszick": "abs-guide.txt"},{"size": "abs-guide.txt"},{"day month date hh:mm:ss year path": "abs-guide.txt"},{"2756608 Sun Apr 20 08:53:06 2003 /home/mszick/core": "abs-guide.txt"},{"Unless it is formatted:": "abs-guide.txt"},{"inode permissions hard-links owner group ...": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"606": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"266705 crw-rw----": "abs-guide.txt"},{"": "abs-guide.txt"},{"1": "abs-guide.txt"},{"": "abs-guide.txt"},{"root": "abs-guide.txt"},{"": "abs-guide.txt"},{"uucp": "abs-guide.txt"},{"": "abs-guide.txt"},{"major minor day month date hh:mm:ss year path": "abs-guide.txt"},{"4, 68 Sun Apr 20 09:27:33 2003 /dev/ttyS4": "abs-guide.txt"},{"NOTE: that pesky comma after the major number": "abs-guide.txt"},{"NOTE: the 'path' may be multiple fields:": "abs-guide.txt"},{"/home/mszick/core": "abs-guide.txt"},{"/proc/982/fd/0 -> /dev/null": "abs-guide.txt"},{"/proc/982/fd/1 -> /home/mszick/.xsession-errors": "abs-guide.txt"},{"/proc/982/fd/13 -> /tmp/tmpfZVVOCs (deleted)": "abs-guide.txt"},{"/proc/982/fd/7 -> /tmp/kde-mszick/ksycoca": "abs-guide.txt"},{"/proc/982/fd/8 -> socket:[11586]": "abs-guide.txt"},{"/proc/982/fd/9 -> pipe:[11588]": "abs-guide.txt"},{"If that isn't enough to keep your parser guessing,": "abs-guide.txt"},{"either or both of the path components may be relative:": "abs-guide.txt"},{"../Built-Shared -> Built-Static": "abs-guide.txt"},{"../linux-2.4.20.tar.bz2 -> ../../../SRCS/linux-2.4.20.tar.bz2": "abs-guide.txt"},{"The first character of the 11 (10?) character permissions field:": "abs-guide.txt"},{"'s' Socket": "abs-guide.txt"},{"'d' Directory": "abs-guide.txt"},{"'b' Block device": "abs-guide.txt"},{"'c' Character device": "abs-guide.txt"},{"'l' Symbolic link": "abs-guide.txt"},{"NOTE: Hard links not marked - test for identical inode numbers": "abs-guide.txt"},{"on identical filesystems.": "abs-guide.txt"},{"All information about hard linked files are shared, except": "abs-guide.txt"},{"for the names and the name's location in the directory system.": "abs-guide.txt"},{"NOTE: A \"Hard link\" is known as a \"File Alias\" on some systems.": "abs-guide.txt"},{"'-' An undistingushed file": "abs-guide.txt"},{"Followed by three groups of letters for: User, Group, Others": "abs-guide.txt"},{"Character 1: '-' Not readable; 'r' Readable": "abs-guide.txt"},{"Character 2: '-' Not writable; 'w' Writable": "abs-guide.txt"},{"Character 3, User and Group: Combined execute and special": "abs-guide.txt"},{"'-' Not Executable, Not Special": "abs-guide.txt"},{"'x' Executable, Not Special": "abs-guide.txt"},{"'s' Executable, Special": "abs-guide.txt"},{"'S' Not Executable, Special": "abs-guide.txt"},{"Character 3, Others: Combined execute and sticky (tacky?)": "abs-guide.txt"},{"'-' Not Executable, Not Tacky": "abs-guide.txt"},{"'x' Executable, Not Tacky": "abs-guide.txt"},{"'t' Executable, Tacky": "abs-guide.txt"},{"'T' Not Executable, Tacky": "abs-guide.txt"},{"Followed by an access indicator": "abs-guide.txt"},{"Haven't tested this one, it may be the eleventh character": "abs-guide.txt"},{"or it may generate another field": "abs-guide.txt"},{"' ' No alternate access": "abs-guide.txt"},{"'+' Alternate access": "abs-guide.txt"},{"LSfieldsDoc": "abs-guide.txt"},{"": "abs-guide.txt"},{"ListDirectory()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"local -a T": "abs-guide.txt"},{"local -i of=0": "abs-guide.txt"},{"#": "abs-guide.txt"},{"OLD_IFS=$IFS": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Default return in variable": "abs-guide.txt"},{"# Using BASH default ' \\t\\n'": "abs-guide.txt"},{"": "abs-guide.txt"},{"case \"$#\" in": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"607": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"3)": "abs-guide.txt"},{"": "abs-guide.txt"},{"2)": "abs-guide.txt"},{"*)": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"": "abs-guide.txt"},{"case \"$1\" in": "abs-guide.txt"},{"-of)": "abs-guide.txt"},{"of=1 ; shift ;;": "abs-guide.txt"},{"* )": "abs-guide.txt"},{"return 1 ;;": "abs-guide.txt"},{"esac ;;": "abs-guide.txt"},{": ;;": "abs-guide.txt"},{"# Poor man's \"continue\"": "abs-guide.txt"},{"return 1 ;;": "abs-guide.txt"},{"": "abs-guide.txt"},{"# NOTE: the (ls) command is NOT quoted (\")": "abs-guide.txt"},{"T=( $(ls --inode --ignore-backups --almost-all --directory \\": "abs-guide.txt"},{"--full-time --color=none --time=status --sort=none \\": "abs-guide.txt"},{"--format=long $1) )": "abs-guide.txt"},{"case $of in": "abs-guide.txt"},{"# Assign T back to the array whose name was passed as $2": "abs-guide.txt"},{"0) eval $2=\\( \\\"\\$\\{T\\[@\\]\\}\\\" \\) ;;": "abs-guide.txt"},{"# Write T into filename passed as $2": "abs-guide.txt"},{"1) echo \"${T[@]}\" > \"$2\" ;;": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"return 0": "abs-guide.txt"},{"}": "abs-guide.txt"},{"# # # # # Is that string a legal number? # # # # #": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"IsNumber \"Var\"": "abs-guide.txt"},{"# # # # # There has to be a better way, sigh...": "abs-guide.txt"},{"IsNumber()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"local -i int": "abs-guide.txt"},{"if [ $# -eq 0 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"return 1": "abs-guide.txt"},{"else": "abs-guide.txt"},{"(let int=$1)": "abs-guide.txt"},{"return $?": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"2>/dev/null": "abs-guide.txt"},{"# Exit status of the let thread": "abs-guide.txt"},{"": "abs-guide.txt"},{"# # # # # Index Filesystem Directory Information # # # # #": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"IndexList \"Field-Array-Name\" \"Index-Array-Name\"": "abs-guide.txt"},{"# or": "abs-guide.txt"},{"#": "abs-guide.txt"},{"IndexList -if Field-Array-Filename Index-Array-Name": "abs-guide.txt"},{"#": "abs-guide.txt"},{"IndexList -of Field-Array-Name Index-Array-Filename": "abs-guide.txt"},{"#": "abs-guide.txt"},{"IndexList -if -of Field-Array-Filename Index-Array-Filename": "abs-guide.txt"},{"# # # # #": "abs-guide.txt"},{": <<IndexListDoc": "abs-guide.txt"},{"Walk an array of directory fields produced by ListDirectory": "abs-guide.txt"},{"Having suppressed the line breaks in an otherwise line oriented": "abs-guide.txt"},{"report, build an index to the array element which starts each line.": "abs-guide.txt"},{"Each line gets two index entries, the first element of each line": "abs-guide.txt"},{"(inode) and the element that holds the pathname of the file.": "abs-guide.txt"},{"The first index entry pair (Line-Number==0) are informational:": "abs-guide.txt"},{"Index-Array-Name[0] : Number of \"Lines\" indexed": "abs-guide.txt"},{"Index-Array-Name[1] : \"Current Line\" pointer into Index-Array-Name": "abs-guide.txt"},{"The following index pairs (if any) hold element indexes into": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"608": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"the Field-Array-Name per:": "abs-guide.txt"},{"Index-Array-Name[Line-Number * 2] : The \"inode\" field element.": "abs-guide.txt"},{"NOTE: This distance may be either +11 or +12 elements.": "abs-guide.txt"},{"Index-Array-Name[(Line-Number * 2) + 1] : The \"pathname\" element.": "abs-guide.txt"},{"NOTE: This distance may be a variable number of elements.": "abs-guide.txt"},{"Next line index pair for Line-Number+1.": "abs-guide.txt"},{"IndexListDoc": "abs-guide.txt"},{"": "abs-guide.txt"},{"IndexList()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"local": "abs-guide.txt"},{"local": "abs-guide.txt"},{"local": "abs-guide.txt"},{"local": "abs-guide.txt"},{"": "abs-guide.txt"},{"-a": "abs-guide.txt"},{"-a": "abs-guide.txt"},{"-i": "abs-guide.txt"},{"-i": "abs-guide.txt"},{"": "abs-guide.txt"},{"LIST": "abs-guide.txt"},{"-i INDEX=( 0 0 )": "abs-guide.txt"},{"Lidx Lcnt": "abs-guide.txt"},{"if=0 of=0": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Local of listname passed": "abs-guide.txt"},{"# Local of index to return": "abs-guide.txt"},{"# Default to variable names": "abs-guide.txt"},{"": "abs-guide.txt"},{"case \"$#\" in": "abs-guide.txt"},{"# Simplistic option testing": "abs-guide.txt"},{"0) return 1 ;;": "abs-guide.txt"},{"1) return 1 ;;": "abs-guide.txt"},{"2) : ;;": "abs-guide.txt"},{"# Poor man's continue": "abs-guide.txt"},{"3) case \"$1\" in": "abs-guide.txt"},{"-if) if=1 ;;": "abs-guide.txt"},{"-of) of=1 ;;": "abs-guide.txt"},{"* ) return 1 ;;": "abs-guide.txt"},{"esac ; shift ;;": "abs-guide.txt"},{"4) if=1 ; of=1 ; shift ; shift ;;": "abs-guide.txt"},{"*) return 1": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"# Make local copy of list": "abs-guide.txt"},{"case \"$if\" in": "abs-guide.txt"},{"0) eval LIST=\\( \\\"\\$\\{$1\\[@\\]\\}\\\" \\) ;;": "abs-guide.txt"},{"1) LIST=( $(cat $1) ) ;;": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"# Grok (grope?) the array": "abs-guide.txt"},{"Lcnt=${#LIST[@]}": "abs-guide.txt"},{"Lidx=0": "abs-guide.txt"},{"until (( Lidx >= Lcnt ))": "abs-guide.txt"},{"do": "abs-guide.txt"},{"if IsNumber ${LIST[$Lidx]}": "abs-guide.txt"},{"then": "abs-guide.txt"},{"local -i inode name": "abs-guide.txt"},{"local ft": "abs-guide.txt"},{"inode=Lidx": "abs-guide.txt"},{"local m=${LIST[$Lidx+2]}": "abs-guide.txt"},{"# Hard Links field": "abs-guide.txt"},{"ft=${LIST[$Lidx+1]:0:1}": "abs-guide.txt"},{"# Fast-Stat": "abs-guide.txt"},{"case $ft in": "abs-guide.txt"},{"b)": "abs-guide.txt"},{"((Lidx+=12)) ;;": "abs-guide.txt"},{"# Block device": "abs-guide.txt"},{"c)": "abs-guide.txt"},{"((Lidx+=12)) ;;": "abs-guide.txt"},{"# Character device": "abs-guide.txt"},{"*)": "abs-guide.txt"},{"((Lidx+=11)) ;;": "abs-guide.txt"},{"# Anything else": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"name=Lidx": "abs-guide.txt"},{"case $ft in": "abs-guide.txt"},{"-)": "abs-guide.txt"},{"((Lidx+=1)) ;;": "abs-guide.txt"},{"# The easy one": "abs-guide.txt"},{"b)": "abs-guide.txt"},{"((Lidx+=1)) ;;": "abs-guide.txt"},{"# Block device": "abs-guide.txt"},{"c)": "abs-guide.txt"},{"((Lidx+=1)) ;;": "abs-guide.txt"},{"# Character device": "abs-guide.txt"},{"d)": "abs-guide.txt"},{"((Lidx+=1)) ;;": "abs-guide.txt"},{"# The other easy one": "abs-guide.txt"},{"l)": "abs-guide.txt"},{"((Lidx+=3)) ;;": "abs-guide.txt"},{"# At LEAST two more fields": "abs-guide.txt"},{"# A little more elegance here would handle pipes,": "abs-guide.txt"},{"#+ sockets, deleted files - later.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"609": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"*)": "abs-guide.txt"},{"": "abs-guide.txt"},{"until IsNumber ${LIST[$Lidx]} || ((Lidx >= Lcnt))": "abs-guide.txt"},{"do": "abs-guide.txt"},{"((Lidx+=1))": "abs-guide.txt"},{"done": "abs-guide.txt"},{";;": "abs-guide.txt"},{"# Not required": "abs-guide.txt"},{"": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"INDEX[${#INDEX[*]}]=$inode": "abs-guide.txt"},{"INDEX[${#INDEX[*]}]=$name": "abs-guide.txt"},{"INDEX[0]=${INDEX[0]}+1": "abs-guide.txt"},{"# One more \"line\" found": "abs-guide.txt"},{"# echo \"Line: ${INDEX[0]} Type: $ft Links: $m Inode: \\": "abs-guide.txt"},{"# ${LIST[$inode]} Name: ${LIST[$name]}\"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"((Lidx+=1))": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"done": "abs-guide.txt"},{"case \"$of\" in": "abs-guide.txt"},{"0) eval $2=\\( \\\"\\$\\{INDEX\\[@\\]\\}\\\" \\) ;;": "abs-guide.txt"},{"1) echo \"${INDEX[@]}\" > \"$2\" ;;": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"return 0": "abs-guide.txt"},{"# What could go wrong?": "abs-guide.txt"},{"}": "abs-guide.txt"},{"# # # # # Content Identify File # # # # #": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"DigestFile Input-Array-Name Digest-Array-Name": "abs-guide.txt"},{"# or": "abs-guide.txt"},{"#": "abs-guide.txt"},{"DigestFile -if Input-FileName Digest-Array-Name": "abs-guide.txt"},{"# # # # #": "abs-guide.txt"},{"# Here document used as a comment block.": "abs-guide.txt"},{": <<DigestFilesDoc": "abs-guide.txt"},{"The key (no pun intended) to a Unified Content File System (UCFS)": "abs-guide.txt"},{"is to distinguish the files in the system based on their content.": "abs-guide.txt"},{"Distinguishing files by their name is just so 20th Century.": "abs-guide.txt"},{"The content is distinguished by computing a checksum of that content.": "abs-guide.txt"},{"This version uses the md5sum program to generate a 128 bit checksum": "abs-guide.txt"},{"representative of the file's contents.": "abs-guide.txt"},{"There is a chance that two files having different content might": "abs-guide.txt"},{"generate the same checksum using md5sum (or any checksum). Should": "abs-guide.txt"},{"that become a problem, then the use of md5sum can be replace by a": "abs-guide.txt"},{"cyrptographic signature. But until then...": "abs-guide.txt"},{"The md5sum program is documented as outputting three fields (and it": "abs-guide.txt"},{"does), but when read it appears as two fields (array elements). This": "abs-guide.txt"},{"is caused by the lack of whitespace between the second and third field.": "abs-guide.txt"},{"So this function gropes the md5sum output and returns:": "abs-guide.txt"},{"[0]": "abs-guide.txt"},{"32 character checksum in hexidecimal (UCFS filename)": "abs-guide.txt"},{"[1]": "abs-guide.txt"},{"Single character: ' ' text file, '*' binary file": "abs-guide.txt"},{"[2]": "abs-guide.txt"},{"Filesystem (20th Century Style) name": "abs-guide.txt"},{"Note: That name may be the character '-' indicating STDIN read.": "abs-guide.txt"},{"DigestFilesDoc": "abs-guide.txt"},{"": "abs-guide.txt"},{"DigestFile()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"local if=0": "abs-guide.txt"},{"local -a T1 T2": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Default, variable name": "abs-guide.txt"},{"": "abs-guide.txt"},{"610": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"case \"$#\" in": "abs-guide.txt"},{"3)": "abs-guide.txt"},{"case \"$1\" in": "abs-guide.txt"},{"-if)": "abs-guide.txt"},{"if=1 ; shift ;;": "abs-guide.txt"},{"* )": "abs-guide.txt"},{"return 1 ;;": "abs-guide.txt"},{"esac ;;": "abs-guide.txt"},{"2)": "abs-guide.txt"},{": ;;": "abs-guide.txt"},{"# Poor man's \"continue\"": "abs-guide.txt"},{"*)": "abs-guide.txt"},{"return 1 ;;": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"case $if in": "abs-guide.txt"},{"0) eval T1=\\( \\\"\\$\\{$1\\[@\\]\\}\\\" \\)": "abs-guide.txt"},{"T2=( $(echo ${T1[@]} | md5sum -) )": "abs-guide.txt"},{";;": "abs-guide.txt"},{"1) T2=( $(md5sum $1) )": "abs-guide.txt"},{";;": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"case ${#T2[@]} in": "abs-guide.txt"},{"0) return 1 ;;": "abs-guide.txt"},{"1) return 1 ;;": "abs-guide.txt"},{"2) case ${T2[1]:0:1} in": "abs-guide.txt"},{"# SanScrit-2.0.5": "abs-guide.txt"},{"\\*) T2[${#T2[@]}]=${T2[1]:1}": "abs-guide.txt"},{"T2[1]=\\*": "abs-guide.txt"},{";;": "abs-guide.txt"},{"*) T2[${#T2[@]}]=${T2[1]}": "abs-guide.txt"},{"T2[1]=\" \"": "abs-guide.txt"},{";;": "abs-guide.txt"},{"esac": "abs-guide.txt"},{";;": "abs-guide.txt"},{"3) : ;; # Assume it worked": "abs-guide.txt"},{"*) return 1 ;;": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"local -i len=${#T2[0]}": "abs-guide.txt"},{"if [ $len -ne 32 ] ; then return 1 ; fi": "abs-guide.txt"},{"eval $2=\\( \\\"\\$\\{T2\\[@\\]\\}\\\" \\)": "abs-guide.txt"},{"}": "abs-guide.txt"},{"# # # # # Locate File # # # # #": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"LocateFile [-l] FileName Location-Array-Name": "abs-guide.txt"},{"# or": "abs-guide.txt"},{"#": "abs-guide.txt"},{"LocateFile [-l] -of FileName Location-Array-FileName": "abs-guide.txt"},{"# # # # #": "abs-guide.txt"},{"# A file location is Filesystem-id and inode-number": "abs-guide.txt"},{"# Here document used as a comment block.": "abs-guide.txt"},{": <<StatFieldsDoc": "abs-guide.txt"},{"Based on stat, version 2.2": "abs-guide.txt"},{"stat -t and stat -lt fields": "abs-guide.txt"},{"[0]": "abs-guide.txt"},{"name": "abs-guide.txt"},{"[1]": "abs-guide.txt"},{"Total size": "abs-guide.txt"},{"File - number of bytes": "abs-guide.txt"},{"Symbolic link - string length of pathname": "abs-guide.txt"},{"[2]": "abs-guide.txt"},{"Number of (512 byte) blocks allocated": "abs-guide.txt"},{"[3]": "abs-guide.txt"},{"File type and Access rights (hex)": "abs-guide.txt"},{"[4]": "abs-guide.txt"},{"User ID of owner": "abs-guide.txt"},{"[5]": "abs-guide.txt"},{"Group ID of owner": "abs-guide.txt"},{"[6]": "abs-guide.txt"},{"Device number": "abs-guide.txt"},{"[7]": "abs-guide.txt"},{"Inode number": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"611": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"[8]": "abs-guide.txt"},{"[9]": "abs-guide.txt"},{"[10]": "abs-guide.txt"},{"[11]": "abs-guide.txt"},{"": "abs-guide.txt"},{"[12]": "abs-guide.txt"},{"": "abs-guide.txt"},{"[13]": "abs-guide.txt"},{"": "abs-guide.txt"},{"Number of hard links": "abs-guide.txt"},{"Device type (if inode device) Major": "abs-guide.txt"},{"Device type (if inode device) Minor": "abs-guide.txt"},{"Time of last access": "abs-guide.txt"},{"May be disabled in 'mount' with noatime": "abs-guide.txt"},{"atime of files changed by exec, read, pipe, utime, mknod (mmap?)": "abs-guide.txt"},{"atime of directories changed by addition/deletion of files": "abs-guide.txt"},{"Time of last modification": "abs-guide.txt"},{"mtime of files changed by write, truncate, utime, mknod": "abs-guide.txt"},{"mtime of directories changed by addtition/deletion of files": "abs-guide.txt"},{"Time of last change": "abs-guide.txt"},{"ctime reflects time of changed inode information (owner, group": "abs-guide.txt"},{"permissions, link count": "abs-guide.txt"},{"": "abs-guide.txt"},{"-*-*- Per:": "abs-guide.txt"},{"Return code: 0": "abs-guide.txt"},{"Size of array: 14": "abs-guide.txt"},{"Contents of array": "abs-guide.txt"},{"Element 0: /home/mszick": "abs-guide.txt"},{"Element 1: 4096": "abs-guide.txt"},{"Element 2: 8": "abs-guide.txt"},{"Element 3: 41e8": "abs-guide.txt"},{"Element 4: 500": "abs-guide.txt"},{"Element 5: 500": "abs-guide.txt"},{"Element 6: 303": "abs-guide.txt"},{"Element 7: 32385": "abs-guide.txt"},{"Element 8: 22": "abs-guide.txt"},{"Element 9: 0": "abs-guide.txt"},{"Element 10: 0": "abs-guide.txt"},{"Element 11: 1051221030": "abs-guide.txt"},{"Element 12: 1051214068": "abs-guide.txt"},{"Element 13: 1051214068": "abs-guide.txt"},{"For a link in the form of linkname -> realname": "abs-guide.txt"},{"stat -t linkname returns the linkname (link) information": "abs-guide.txt"},{"stat -lt linkname returns the realname information": "abs-guide.txt"},{"stat -tf and stat -ltf fields": "abs-guide.txt"},{"[0]": "abs-guide.txt"},{"name": "abs-guide.txt"},{"[1]": "abs-guide.txt"},{"ID-0?": "abs-guide.txt"},{"# Maybe someday, but Linux stat structure": "abs-guide.txt"},{"[2]": "abs-guide.txt"},{"ID-0?": "abs-guide.txt"},{"# does not have either LABEL nor UUID": "abs-guide.txt"},{"# fields, currently information must come": "abs-guide.txt"},{"# from file-system specific utilities": "abs-guide.txt"},{"These will be munged into:": "abs-guide.txt"},{"[1]": "abs-guide.txt"},{"UUID if possible": "abs-guide.txt"},{"[2]": "abs-guide.txt"},{"Volume Label if possible": "abs-guide.txt"},{"Note: 'mount -l' does return the label and could return the UUID": "abs-guide.txt"},{"[3]": "abs-guide.txt"},{"[4]": "abs-guide.txt"},{"[5]": "abs-guide.txt"},{"[6]": "abs-guide.txt"},{"[7]": "abs-guide.txt"},{"[8]": "abs-guide.txt"},{"[9]": "abs-guide.txt"},{"[10]": "abs-guide.txt"},{"": "abs-guide.txt"},{"Maximum length of filenames": "abs-guide.txt"},{"Filesystem type": "abs-guide.txt"},{"Total blocks in the filesystem": "abs-guide.txt"},{"Free blocks": "abs-guide.txt"},{"Free blocks for non-root user(s)": "abs-guide.txt"},{"Block size of the filesystem": "abs-guide.txt"},{"Total inodes": "abs-guide.txt"},{"Free inodes": "abs-guide.txt"},{"": "abs-guide.txt"},{"-*-*- Per:": "abs-guide.txt"},{"Return code: 0": "abs-guide.txt"},{"Size of array: 11": "abs-guide.txt"},{"Contents of array": "abs-guide.txt"},{"Element 0: /home/mszick": "abs-guide.txt"},{"Element 1: 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"612": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"Element": "abs-guide.txt"},{"Element": "abs-guide.txt"},{"Element": "abs-guide.txt"},{"Element": "abs-guide.txt"},{"Element": "abs-guide.txt"},{"Element": "abs-guide.txt"},{"Element": "abs-guide.txt"},{"Element": "abs-guide.txt"},{"Element": "abs-guide.txt"},{"": "abs-guide.txt"},{"2: 0": "abs-guide.txt"},{"3: 255": "abs-guide.txt"},{"4: ef53": "abs-guide.txt"},{"5: 2581445": "abs-guide.txt"},{"6: 2277180": "abs-guide.txt"},{"7: 2146050": "abs-guide.txt"},{"8: 4096": "abs-guide.txt"},{"9: 1311552": "abs-guide.txt"},{"10: 1276425": "abs-guide.txt"},{"": "abs-guide.txt"},{"StatFieldsDoc": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"LocateFile [-l] FileName Location-Array-Name": "abs-guide.txt"},{"LocateFile [-l] -of FileName Location-Array-FileName": "abs-guide.txt"},{"": "abs-guide.txt"},{"LocateFile()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"local -a LOC LOC1 LOC2": "abs-guide.txt"},{"local lk=\"\" of=0": "abs-guide.txt"},{"case \"$#\" in": "abs-guide.txt"},{"0) return 1 ;;": "abs-guide.txt"},{"1) return 1 ;;": "abs-guide.txt"},{"2) : ;;": "abs-guide.txt"},{"*) while (( \"$#\" > 2 ))": "abs-guide.txt"},{"do": "abs-guide.txt"},{"case \"$1\" in": "abs-guide.txt"},{"-l) lk=-1 ;;": "abs-guide.txt"},{"-of) of=1 ;;": "abs-guide.txt"},{"*) return 1 ;;": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"shift": "abs-guide.txt"},{"done ;;": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"# More Sanscrit-2.0.5": "abs-guide.txt"},{"# LOC1=( $(stat -t $lk $1) )": "abs-guide.txt"},{"# LOC2=( $(stat -tf $lk $1) )": "abs-guide.txt"},{"# Uncomment above two lines if system has \"stat\" command installed.": "abs-guide.txt"},{"LOC=( ${LOC1[@]:0:1} ${LOC1[@]:3:11}": "abs-guide.txt"},{"${LOC2[@]:1:2} ${LOC2[@]:4:1} )": "abs-guide.txt"},{"case \"$of\" in": "abs-guide.txt"},{"0) eval $2=\\( \\\"\\$\\{LOC\\[@\\]\\}\\\" \\) ;;": "abs-guide.txt"},{"1) echo \"${LOC[@]}\" > \"$2\" ;;": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"return 0": "abs-guide.txt"},{"# Which yields (if you are lucky, and have \"stat\" installed)": "abs-guide.txt"},{"# -*-*- Location Discriptor -*-*#": "abs-guide.txt"},{"Return code: 0": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Size of array: 15": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Contents of array": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Element 0: /home/mszick": "abs-guide.txt"},{"20th Century name": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Element 1: 41e8": "abs-guide.txt"},{"Type and Permissions": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Element 2: 500": "abs-guide.txt"},{"User": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Element 3: 500": "abs-guide.txt"},{"Group": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Element 4: 303": "abs-guide.txt"},{"Device": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Element 5: 32385": "abs-guide.txt"},{"inode": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Element 6: 22": "abs-guide.txt"},{"Link count": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Element 7: 0": "abs-guide.txt"},{"Device Major": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Element 8: 0": "abs-guide.txt"},{"Device Minor": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"613": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"Element": "abs-guide.txt"},{"Element": "abs-guide.txt"},{"Element": "abs-guide.txt"},{"Element": "abs-guide.txt"},{"Element": "abs-guide.txt"},{"Element": "abs-guide.txt"},{"": "abs-guide.txt"},{"9: 1051224608": "abs-guide.txt"},{"10: 1051214068": "abs-guide.txt"},{"11: 1051214068": "abs-guide.txt"},{"12: 0": "abs-guide.txt"},{"13: 0": "abs-guide.txt"},{"14: ef53": "abs-guide.txt"},{"": "abs-guide.txt"},{"Last Access": "abs-guide.txt"},{"Last Modify": "abs-guide.txt"},{"Last Status": "abs-guide.txt"},{"UUID (to be)": "abs-guide.txt"},{"Volume Label (to be)": "abs-guide.txt"},{"Filesystem type": "abs-guide.txt"},{"": "abs-guide.txt"},{"# And then there was some test code": "abs-guide.txt"},{"ListArray() # ListArray Name": "abs-guide.txt"},{"{": "abs-guide.txt"},{"local -a Ta": "abs-guide.txt"},{"eval Ta=\\( \\\"\\$\\{$1\\[@\\]\\}\\\" \\)": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"-*-*- List of Array -*-*-\"": "abs-guide.txt"},{"echo \"Size of array $1: ${#Ta[*]}\"": "abs-guide.txt"},{"echo \"Contents of array $1:\"": "abs-guide.txt"},{"for (( i=0 ; i<${#Ta[*]} ; i++ ))": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo -e \"\\tElement $i: ${Ta[$i]}\"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"return 0": "abs-guide.txt"},{"}": "abs-guide.txt"},{"declare -a CUR_DIR": "abs-guide.txt"},{"# For small arrays": "abs-guide.txt"},{"ListDirectory \"${PWD}\" CUR_DIR": "abs-guide.txt"},{"ListArray CUR_DIR": "abs-guide.txt"},{"declare -a DIR_DIG": "abs-guide.txt"},{"DigestFile CUR_DIR DIR_DIG": "abs-guide.txt"},{"echo \"The new \\\"name\\\" (checksum) for ${CUR_DIR[9]} is ${DIR_DIG[0]}\"": "abs-guide.txt"},{"declare -a DIR_ENT": "abs-guide.txt"},{"# BIG_DIR # For really big arrays - use a temporary file in ramdisk": "abs-guide.txt"},{"# BIG-DIR # ListDirectory -of \"${CUR_DIR[11]}/*\" \"/tmpfs/junk2\"": "abs-guide.txt"},{"ListDirectory \"${CUR_DIR[11]}/*\" DIR_ENT": "abs-guide.txt"},{"declare -a DIR_IDX": "abs-guide.txt"},{"# BIG-DIR # IndexList -if \"/tmpfs/junk2\" DIR_IDX": "abs-guide.txt"},{"IndexList DIR_ENT DIR_IDX": "abs-guide.txt"},{"declare -a IDX_DIG": "abs-guide.txt"},{"# BIG-DIR # DIR_ENT=( $(cat /tmpfs/junk2) )": "abs-guide.txt"},{"# BIG-DIR # DigestFile -if /tmpfs/junk2 IDX_DIG": "abs-guide.txt"},{"DigestFile DIR_ENT IDX_DIG": "abs-guide.txt"},{"# Small (should) be able to parallize IndexList & DigestFile": "abs-guide.txt"},{"# Large (should) be able to parallize IndexList & DigestFile & the assignment": "abs-guide.txt"},{"echo \"The \\\"name\\\" (checksum) for the contents of ${PWD} is ${IDX_DIG[0]}\"": "abs-guide.txt"},{"declare -a FILE_LOC": "abs-guide.txt"},{"LocateFile ${PWD} FILE_LOC": "abs-guide.txt"},{"ListArray FILE_LOC": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"St\u00e9phane Chazelas demonstrates object-oriented programming in a Bash script.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"614": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"Mariusz Gniazdowski contributed a hash library for use in scripts.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example A-20. Library of hash functions": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Hash:": "abs-guide.txt"},{"Hash function library": "abs-guide.txt"},{"Author: Mariusz Gniazdowski <mariusz.gn-at-gmail.com>": "abs-guide.txt"},{"Date: 2005-04-07": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Functions making emulating hashes in Bash a little less painful.": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Limitations:": "abs-guide.txt"},{"* Only global variables are supported.": "abs-guide.txt"},{"* Each hash instance generates one global variable per value.": "abs-guide.txt"},{"* Variable names collisions are possible": "abs-guide.txt"},{"if you define variable like __hash__hashname_key": "abs-guide.txt"},{"* Keys must use chars that can be part of a Bash variable name": "abs-guide.txt"},{"(no dashes, periods, etc.).": "abs-guide.txt"},{"* The hash is created as a variable:": "abs-guide.txt"},{"... hashname_keyname": "abs-guide.txt"},{"So if somone will create hashes like:": "abs-guide.txt"},{"myhash_ + mykey = myhash__mykey": "abs-guide.txt"},{"myhash + _mykey = myhash__mykey": "abs-guide.txt"},{"Then there will be a collision.": "abs-guide.txt"},{"(This should not pose a major problem.)": "abs-guide.txt"},{"": "abs-guide.txt"},{"Hash_config_varname_prefix=__hash__": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Emulates: hash[key]=value": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Params:": "abs-guide.txt"},{"# 1 - hash": "abs-guide.txt"},{"# 2 - key": "abs-guide.txt"},{"# 3 - value": "abs-guide.txt"},{"function hash_set {": "abs-guide.txt"},{"eval \"${Hash_config_varname_prefix}${1}_${2}=\\\"${3}\\\"\"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Emulates: value=hash[key]": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Params:": "abs-guide.txt"},{"# 1 - hash": "abs-guide.txt"},{"# 2 - key": "abs-guide.txt"},{"# 3 - value (name of global variable to set)": "abs-guide.txt"},{"function hash_get_into {": "abs-guide.txt"},{"eval \"$3=\\\"\\$${Hash_config_varname_prefix}${1}_${2}\\\"\"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Emulates: echo hash[key]": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Params:": "abs-guide.txt"},{"# 1 - hash": "abs-guide.txt"},{"# 2 - key": "abs-guide.txt"},{"# 3 - echo params (like -n, for example)": "abs-guide.txt"},{"function hash_echo {": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"615": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"eval \"echo $3 \\\"\\$${Hash_config_varname_prefix}${1}_${2}\\\"\"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Emulates: hash1[key1]=hash2[key2]": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Params:": "abs-guide.txt"},{"# 1 - hash1": "abs-guide.txt"},{"# 2 - key1": "abs-guide.txt"},{"# 3 - hash2": "abs-guide.txt"},{"# 4 - key2": "abs-guide.txt"},{"function hash_copy {": "abs-guide.txt"},{"eval \"${Hash_config_varname_prefix}${1}_${2}\\": "abs-guide.txt"},{"=\\\"\\$${Hash_config_varname_prefix}${3}_${4}\\\"\"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Emulates: hash[keyN-1]=hash[key2]=...hash[key1]": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Copies first key to rest of keys.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Params:": "abs-guide.txt"},{"# 1 - hash1": "abs-guide.txt"},{"# 2 - key1": "abs-guide.txt"},{"# 3 - key2": "abs-guide.txt"},{"# . . .": "abs-guide.txt"},{"# N - keyN": "abs-guide.txt"},{"function hash_dup {": "abs-guide.txt"},{"local hashName=\"$1\" keyName=\"$2\"": "abs-guide.txt"},{"shift 2": "abs-guide.txt"},{"until [ ${#} -le 0 ]; do": "abs-guide.txt"},{"eval \"${Hash_config_varname_prefix}${hashName}_${1}\\": "abs-guide.txt"},{"=\\\"\\$${Hash_config_varname_prefix}${hashName}_${keyName}\\\"\"": "abs-guide.txt"},{"shift;": "abs-guide.txt"},{"done;": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Emulates: unset hash[key]": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Params:": "abs-guide.txt"},{"# 1 - hash": "abs-guide.txt"},{"# 2 - key": "abs-guide.txt"},{"function hash_unset {": "abs-guide.txt"},{"eval \"unset ${Hash_config_varname_prefix}${1}_${2}\"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Emulates something similar to: ref=&hash[key]": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# The reference is name of the variable in which value is held.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Params:": "abs-guide.txt"},{"# 1 - hash": "abs-guide.txt"},{"# 2 - key": "abs-guide.txt"},{"# 3 - ref - Name of global variable to set.": "abs-guide.txt"},{"function hash_get_ref_into {": "abs-guide.txt"},{"eval \"$3=\\\"${Hash_config_varname_prefix}${1}_${2}\\\"\"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Emulates something similar to:": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo &hash[key]": "abs-guide.txt"},{"": "abs-guide.txt"},{"616": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# That reference is name of variable in which value is held.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Params:": "abs-guide.txt"},{"# 1 - hash": "abs-guide.txt"},{"# 2 - key": "abs-guide.txt"},{"# 3 - echo params (like -n for example)": "abs-guide.txt"},{"function hash_echo_ref {": "abs-guide.txt"},{"eval \"echo $3 \\\"${Hash_config_varname_prefix}${1}_${2}\\\"\"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Emulates something similar to: $$hash[key](param1, param2, ...)": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Params:": "abs-guide.txt"},{"# 1 - hash": "abs-guide.txt"},{"# 2 - key": "abs-guide.txt"},{"# 3,4, ... - Function parameters": "abs-guide.txt"},{"function hash_call {": "abs-guide.txt"},{"local hash key": "abs-guide.txt"},{"hash=$1": "abs-guide.txt"},{"key=$2": "abs-guide.txt"},{"shift 2": "abs-guide.txt"},{"eval \"eval \\\"\\$${Hash_config_varname_prefix}${hash}_${key} \\\\\\\"\\\\\\$@\\\\\\\"\\\"\"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Emulates something similar to: isset(hash[key]) or hash[key]==NULL": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Params:": "abs-guide.txt"},{"# 1 - hash": "abs-guide.txt"},{"# 2 - key": "abs-guide.txt"},{"# Returns:": "abs-guide.txt"},{"# 0 - there is such key": "abs-guide.txt"},{"# 1 - there is no such key": "abs-guide.txt"},{"function hash_is_set {": "abs-guide.txt"},{"eval \"if [[ \\\"\\${${Hash_config_varname_prefix}${1}_${2}-a}\\\" = \\\"a\\\" &&": "abs-guide.txt"},{"\\\"\\${${Hash_config_varname_prefix}${1}_${2}-b}\\\" = \\\"b\\\" ]]": "abs-guide.txt"},{"then return 1; else return 0; fi\"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Emulates something similar to:": "abs-guide.txt"},{"#": "abs-guide.txt"},{"foreach($hash as $key => $value) { fun($key,$value); }": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# It is possible to write different variations of this function.": "abs-guide.txt"},{"# Here we use a function call to make it as \"generic\" as possible.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Params:": "abs-guide.txt"},{"# 1 - hash": "abs-guide.txt"},{"# 2 - function name": "abs-guide.txt"},{"function hash_foreach {": "abs-guide.txt"},{"local keyname oldIFS=\"$IFS\"": "abs-guide.txt"},{"IFS=' '": "abs-guide.txt"},{"for i in $(eval \"echo \\${!${Hash_config_varname_prefix}${1}_*}\"); do": "abs-guide.txt"},{"keyname=$(eval \"echo \\${i##${Hash_config_varname_prefix}${1}_}\")": "abs-guide.txt"},{"eval \"$2 $keyname \\\"\\$$i\\\"\"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"IFS=\"$oldIFS\"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"617": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"NOTE: In lines 103 and 116, ampersand changed.": "abs-guide.txt"},{"But, it doesn't matter, because these are comment lines anyhow.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Here is an example script using the foregoing hash library.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example A-21. Colorizing text using hash functions": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# hash-example.sh: Colorizing text.": "abs-guide.txt"},{"# Author: Mariusz Gniazdowski <mariusz.gn-at-gmail.com>": "abs-guide.txt"},{". Hash.lib": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Load the library of functions.": "abs-guide.txt"},{"": "abs-guide.txt"},{"hash_set": "abs-guide.txt"},{"hash_set": "abs-guide.txt"},{"hash_set": "abs-guide.txt"},{"hash_set": "abs-guide.txt"},{"hash_set": "abs-guide.txt"},{"hash_set": "abs-guide.txt"},{"hash_set": "abs-guide.txt"},{"hash_set": "abs-guide.txt"},{"hash_set": "abs-guide.txt"},{"hash_set": "abs-guide.txt"},{"hash_set": "abs-guide.txt"},{"hash_set": "abs-guide.txt"},{"": "abs-guide.txt"},{"red": "abs-guide.txt"},{"blue": "abs-guide.txt"},{"light_blue": "abs-guide.txt"},{"light_red": "abs-guide.txt"},{"cyan": "abs-guide.txt"},{"light_green": "abs-guide.txt"},{"light_gray": "abs-guide.txt"},{"green": "abs-guide.txt"},{"yellow": "abs-guide.txt"},{"light_purple": "abs-guide.txt"},{"purple": "abs-guide.txt"},{"reset_color": "abs-guide.txt"},{"": "abs-guide.txt"},{"colors": "abs-guide.txt"},{"colors": "abs-guide.txt"},{"colors": "abs-guide.txt"},{"colors": "abs-guide.txt"},{"colors": "abs-guide.txt"},{"colors": "abs-guide.txt"},{"colors": "abs-guide.txt"},{"colors": "abs-guide.txt"},{"colors": "abs-guide.txt"},{"colors": "abs-guide.txt"},{"colors": "abs-guide.txt"},{"colors": "abs-guide.txt"},{"": "abs-guide.txt"},{"\"\\033[0;31m\"": "abs-guide.txt"},{"\"\\033[0;34m\"": "abs-guide.txt"},{"\"\\033[1;34m\"": "abs-guide.txt"},{"\"\\033[1;31m\"": "abs-guide.txt"},{"\"\\033[0;36m\"": "abs-guide.txt"},{"\"\\033[1;32m\"": "abs-guide.txt"},{"\"\\033[0;37m\"": "abs-guide.txt"},{"\"\\033[0;32m\"": "abs-guide.txt"},{"\"\\033[1;33m\"": "abs-guide.txt"},{"\"\\033[1;35m\"": "abs-guide.txt"},{"\"\\033[0;35m\"": "abs-guide.txt"},{"\"\\033[0;00m\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# $1 - keyname": "abs-guide.txt"},{"# $2 - value": "abs-guide.txt"},{"try_colors() {": "abs-guide.txt"},{"echo -en \"$2\"": "abs-guide.txt"},{"echo \"This line is $1.\"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"hash_foreach colors try_colors": "abs-guide.txt"},{"hash_echo colors reset_color -en": "abs-guide.txt"},{"echo -e '\\nLet us overwrite some colors with yellow.\\n'": "abs-guide.txt"},{"# It's hard to read yellow text on some terminals.": "abs-guide.txt"},{"hash_dup colors yellow": "abs-guide.txt"},{"red light_green blue green light_gray cyan": "abs-guide.txt"},{"hash_foreach colors try_colors": "abs-guide.txt"},{"hash_echo colors reset_color -en": "abs-guide.txt"},{"echo -e '\\nLet us delete them and try colors once more . . .\\n'": "abs-guide.txt"},{"for i in red light_green blue green light_gray cyan; do": "abs-guide.txt"},{"hash_unset colors $i": "abs-guide.txt"},{"done": "abs-guide.txt"},{"hash_foreach colors try_colors": "abs-guide.txt"},{"hash_echo colors reset_color -en": "abs-guide.txt"},{"hash_set other txt \"Other examples . . .\"": "abs-guide.txt"},{"hash_echo other txt": "abs-guide.txt"},{"hash_get_into other txt text": "abs-guide.txt"},{"echo $text": "abs-guide.txt"},{"hash_set other my_fun try_colors": "abs-guide.txt"},{"hash_call other my_fun": "abs-guide.txt"},{"purple \"`hash_echo colors purple`\"": "abs-guide.txt"},{"hash_echo colors reset_color -en": "abs-guide.txt"},{"echo; echo \"Back to normal?\"; echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"618": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"exit $?": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"On some terminals, the \"light\" colors print in bold,": "abs-guide.txt"},{"and end up looking darker than the normal ones.": "abs-guide.txt"},{"Why is this?": "abs-guide.txt"},{"": "abs-guide.txt"},{"An example illustrating the mechanics of hashing, but from a different point of view.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example A-22. More on hash functions": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# $Id: ha.sh,v 1.2 2005/04/21 23:24:26 oliver Exp $": "abs-guide.txt"},{"# Copyright 2005 Oliver Beckstein": "abs-guide.txt"},{"# Released under the GNU Public License": "abs-guide.txt"},{"# Author of script granted permission for inclusion in ABS Guide.": "abs-guide.txt"},{"# (Thank you!)": "abs-guide.txt"},{"#---------------------------------------------------------------# pseudo hash based on indirect parameter expansion": "abs-guide.txt"},{"# API: access through functions:": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# create the hash:": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"newhash Lovers": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# add entries (note single quotes for spaces)": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"addhash Lovers Tristan Isolde": "abs-guide.txt"},{"#": "abs-guide.txt"},{"addhash Lovers 'Romeo Montague' 'Juliet Capulet'": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# access value by key": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"gethash Lovers Tristan": "abs-guide.txt"},{"----> Isolde": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# show all keys": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"keyshash Lovers": "abs-guide.txt"},{"----> 'Tristan' 'Romeo Montague'": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Convention: instead of perls' foo{bar} = boing' syntax,": "abs-guide.txt"},{"# use": "abs-guide.txt"},{"#": "abs-guide.txt"},{"'_foo_bar=boing' (two underscores, no spaces)": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# 1) store key": "abs-guide.txt"},{"in _NAME_keys[]": "abs-guide.txt"},{"# 2) store value in _NAME_values[] using the same integer index": "abs-guide.txt"},{"# The integer index for the last entry is _NAME_ptr": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# NOTE: No error or sanity checks, just bare bones.": "abs-guide.txt"},{"": "abs-guide.txt"},{"function _inihash () {": "abs-guide.txt"},{"# private function": "abs-guide.txt"},{"# call at the beginning of each procedure": "abs-guide.txt"},{"# defines: _keys _values _ptr": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Usage: _inihash NAME": "abs-guide.txt"},{"local name=$1": "abs-guide.txt"},{"_keys=_${name}_keys": "abs-guide.txt"},{"_values=_${name}_values": "abs-guide.txt"},{"_ptr=_${name}_ptr": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"619": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"function newhash () {": "abs-guide.txt"},{"# Usage: newhash NAME": "abs-guide.txt"},{"#": "abs-guide.txt"},{"NAME should not contain spaces or dots.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Actually: it must be a legal name for a Bash variable.": "abs-guide.txt"},{"# We rely on Bash automatically recognising arrays.": "abs-guide.txt"},{"local name=$1": "abs-guide.txt"},{"local _keys _values _ptr": "abs-guide.txt"},{"_inihash ${name}": "abs-guide.txt"},{"eval ${_ptr}=0": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"function addhash () {": "abs-guide.txt"},{"# Usage: addhash NAME KEY 'VALUE with spaces'": "abs-guide.txt"},{"#": "abs-guide.txt"},{"arguments with spaces need to be quoted with single quotes ''": "abs-guide.txt"},{"local name=$1 k=\"$2\" v=\"$3\"": "abs-guide.txt"},{"local _keys _values _ptr": "abs-guide.txt"},{"_inihash ${name}": "abs-guide.txt"},{"#echo \"DEBUG(addhash): ${_ptr}=${!_ptr}\"": "abs-guide.txt"},{"eval let ${_ptr}=${_ptr}+1": "abs-guide.txt"},{"eval \"$_keys[${!_ptr}]=\\\"${k}\\\"\"": "abs-guide.txt"},{"eval \"$_values[${!_ptr}]=\\\"${v}\\\"\"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"function gethash () {": "abs-guide.txt"},{"# Usage: gethash NAME KEY": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Returns boing": "abs-guide.txt"},{"#": "abs-guide.txt"},{"ERR=0 if entry found, 1 otherwise": "abs-guide.txt"},{"# That's not a proper hash -#+ we simply linearly search through the keys.": "abs-guide.txt"},{"local name=$1 key=\"$2\"": "abs-guide.txt"},{"local _keys _values _ptr": "abs-guide.txt"},{"local k v i found h": "abs-guide.txt"},{"_inihash ${name}": "abs-guide.txt"},{"# _ptr holds the highest index in the hash": "abs-guide.txt"},{"found=0": "abs-guide.txt"},{"for i in $(seq 1 ${!_ptr}); do": "abs-guide.txt"},{"h=\"\\${${_keys}[${i}]}\" # Safer to do it in two steps,": "abs-guide.txt"},{"eval k=${h}": "abs-guide.txt"},{"#+ especially when quoting for spaces.": "abs-guide.txt"},{"if [ \"${k}\" = \"${key}\" ]; then found=1; break; fi": "abs-guide.txt"},{"done;": "abs-guide.txt"},{"[ ${found} = 0 ] && return 1;": "abs-guide.txt"},{"# else: i is the index that matches the key": "abs-guide.txt"},{"h=\"\\${${_values}[${i}]}\"": "abs-guide.txt"},{"eval echo \"${h}\"": "abs-guide.txt"},{"return 0;": "abs-guide.txt"},{"}": "abs-guide.txt"},{"function keyshash () {": "abs-guide.txt"},{"# Usage: keyshash NAME": "abs-guide.txt"},{"# Returns list of all keys defined for hash name.": "abs-guide.txt"},{"local name=$1 key=\"$2\"": "abs-guide.txt"},{"local _keys _values _ptr": "abs-guide.txt"},{"local k i h": "abs-guide.txt"},{"_inihash ${name}": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"620": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# _ptr holds the highest index in the hash": "abs-guide.txt"},{"for i in $(seq 1 ${!_ptr}); do": "abs-guide.txt"},{"h=\"\\${${_keys}[${i}]}\"": "abs-guide.txt"},{"# Safer to do it in two steps,": "abs-guide.txt"},{"eval k=${h}": "abs-guide.txt"},{"#+ especially when quoting for spaces.": "abs-guide.txt"},{"echo -n \"'${k}' \"": "abs-guide.txt"},{"done;": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"# ----------------------------------------------------------------------# Now, let's test it.": "abs-guide.txt"},{"# (Per comments at the beginning of the script.)": "abs-guide.txt"},{"newhash Lovers": "abs-guide.txt"},{"addhash Lovers Tristan Isolde": "abs-guide.txt"},{"addhash Lovers 'Romeo Montague' 'Juliet Capulet'": "abs-guide.txt"},{"# Output results.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"gethash Lovers Tristan": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"keyshash Lovers": "abs-guide.txt"},{"echo; echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Isolde": "abs-guide.txt"},{"# 'Tristan' 'Romeo Montague'": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"# Exercise:": "abs-guide.txt"},{"# -------# Add error checks to the functions.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Now for a script that installs and mounts those cute USB keychain solid-state \"hard drives.\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example A-23. Mounting USB keychain storage devices": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# ==> usb.sh": "abs-guide.txt"},{"# ==> Script for mounting and installing pen/keychain USB storage devices.": "abs-guide.txt"},{"# ==> Runs as root at system startup (see below).": "abs-guide.txt"},{"# ==>": "abs-guide.txt"},{"# ==> Newer Linux distros (2004 or later) autodetect": "abs-guide.txt"},{"# ==> and install USB pen drives, and therefore don't need this script.": "abs-guide.txt"},{"# ==> But, it's still instructive.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"This code is free software covered by GNU GPL license version 2 or above.": "abs-guide.txt"},{"Please refer to http://www.gnu.org/ for the full license text.": "abs-guide.txt"},{"Some code lifted from usb-mount by Michael Hamilton's usb-mount (LGPL)": "abs-guide.txt"},{"see http://users.actrix.co.nz/michael/usbmount.html": "abs-guide.txt"},{"INSTALL": "abs-guide.txt"},{"------Put this in /etc/hotplug/usb/diskonkey.": "abs-guide.txt"},{"Then look in /etc/hotplug/usb.distmap, and copy all usb-storage entries": "abs-guide.txt"},{"into /etc/hotplug/usb.usermap, substituting \"usb-storage\" for \"diskonkey\".": "abs-guide.txt"},{"Otherwise this code is only run during the kernel module invocation/removal": "abs-guide.txt"},{"(at least in my tests), which defeats the purpose.": "abs-guide.txt"},{"TODO": "abs-guide.txt"},{"----": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"621": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# Handle more than one diskonkey device at one time (e.g. /dev/diskonkey1": "abs-guide.txt"},{"#+ and /mnt/diskonkey1), etc. The biggest problem here is the handling in": "abs-guide.txt"},{"#+ devlabel, which I haven't yet tried.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# AUTHOR and SUPPORT": "abs-guide.txt"},{"# -----------------# Konstantin Riabitsev, <icon linux duke edu>.": "abs-guide.txt"},{"# Send any problem reports to my email address at the moment.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# ==> Comments added by ABS Guide author.": "abs-guide.txt"},{"": "abs-guide.txt"},{"SYMLINKDEV=/dev/diskonkey": "abs-guide.txt"},{"MOUNTPOINT=/mnt/diskonkey": "abs-guide.txt"},{"DEVLABEL=/sbin/devlabel": "abs-guide.txt"},{"DEVLABELCONFIG=/etc/sysconfig/devlabel": "abs-guide.txt"},{"IAM=$0": "abs-guide.txt"},{"##": "abs-guide.txt"},{"# Functions lifted near-verbatim from usb-mount code.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"function allAttachedScsiUsb {": "abs-guide.txt"},{"find /proc/scsi/ -path '/proc/scsi/usb-storage*' -type f |": "abs-guide.txt"},{"xargs grep -l 'Attached: Yes'": "abs-guide.txt"},{"}": "abs-guide.txt"},{"function scsiDevFromScsiUsb {": "abs-guide.txt"},{"echo $1 | awk -F\"[-/]\" '{ n=$(NF-1);": "abs-guide.txt"},{"print \"/dev/sd\" substr(\"abcdefghijklmnopqrstuvwxyz\", n+1, 1) }'": "abs-guide.txt"},{"}": "abs-guide.txt"},{"if [ \"${ACTION}\" = \"add\" ] && [ -f \"${DEVICE}\" ]; then": "abs-guide.txt"},{"##": "abs-guide.txt"},{"# lifted from usbcam code.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"if [ -f /var/run/console.lock ]; then": "abs-guide.txt"},{"CONSOLEOWNER=`cat /var/run/console.lock`": "abs-guide.txt"},{"elif [ -f /var/lock/console.lock ]; then": "abs-guide.txt"},{"CONSOLEOWNER=`cat /var/lock/console.lock`": "abs-guide.txt"},{"else": "abs-guide.txt"},{"CONSOLEOWNER=": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"for procEntry in $(allAttachedScsiUsb); do": "abs-guide.txt"},{"scsiDev=$(scsiDevFromScsiUsb $procEntry)": "abs-guide.txt"},{"# Some bug with usb-storage?": "abs-guide.txt"},{"# Partitions are not in /proc/partitions until they are accessed": "abs-guide.txt"},{"#+ somehow.": "abs-guide.txt"},{"/sbin/fdisk -l $scsiDev >/dev/null": "abs-guide.txt"},{"##": "abs-guide.txt"},{"# Most devices have partitioning info, so the data would be on": "abs-guide.txt"},{"#+ /dev/sd?1. However, some stupider ones don't have any partitioning": "abs-guide.txt"},{"#+ and use the entire device for data storage. This tries to": "abs-guide.txt"},{"#+ guess semi-intelligently if we have a /dev/sd?1 and if not, then": "abs-guide.txt"},{"#+ it uses the entire device and hopes for the better.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"if grep -q `basename $scsiDev`1 /proc/partitions; then": "abs-guide.txt"},{"part=\"$scsiDev\"\"1\"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"part=$scsiDev": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"##": "abs-guide.txt"},{"# Change ownership of the partition to the console user so they can": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"622": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"#+ mount it.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"if [ ! -z \"$CONSOLEOWNER\" ]; then": "abs-guide.txt"},{"chown $CONSOLEOWNER:disk $part": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"##": "abs-guide.txt"},{"# This checks if we already have this UUID defined with devlabel.": "abs-guide.txt"},{"# If not, it then adds the device to the list.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"prodid=`$DEVLABEL printid -d $part`": "abs-guide.txt"},{"if ! grep -q $prodid $DEVLABELCONFIG; then": "abs-guide.txt"},{"# cross our fingers and hope it works": "abs-guide.txt"},{"$DEVLABEL add -d $part -s $SYMLINKDEV 2>/dev/null": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"##": "abs-guide.txt"},{"# Check if the mount point exists and create if it doesn't.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"if [ ! -e $MOUNTPOINT ]; then": "abs-guide.txt"},{"mkdir -p $MOUNTPOINT": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"##": "abs-guide.txt"},{"# Take care of /etc/fstab so mounting is easy.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"if ! grep -q \"^$SYMLINKDEV\" /etc/fstab; then": "abs-guide.txt"},{"# Add an fstab entry": "abs-guide.txt"},{"echo -e \\": "abs-guide.txt"},{"\"$SYMLINKDEV\\t\\t$MOUNTPOINT\\t\\tauto\\tnoauto,owner,kudzu 0 0\" \\": "abs-guide.txt"},{">> /etc/fstab": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"done": "abs-guide.txt"},{"if [ ! -z \"$REMOVER\" ]; then": "abs-guide.txt"},{"##": "abs-guide.txt"},{"# Make sure this script is triggered on device removal.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"mkdir -p `dirname $REMOVER`": "abs-guide.txt"},{"ln -s $IAM $REMOVER": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"elif [ \"${ACTION}\" = \"remove\" ]; then": "abs-guide.txt"},{"##": "abs-guide.txt"},{"# If the device is mounted, unmount it cleanly.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"if grep -q \"$MOUNTPOINT\" /etc/mtab; then": "abs-guide.txt"},{"# unmount cleanly": "abs-guide.txt"},{"umount -l $MOUNTPOINT": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"##": "abs-guide.txt"},{"# Remove it from /etc/fstab if it's there.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"if grep -q \"^$SYMLINKDEV\" /etc/fstab; then": "abs-guide.txt"},{"grep -v \"^$SYMLINKDEV\" /etc/fstab > /etc/.fstab.new": "abs-guide.txt"},{"mv -f /etc/.fstab.new /etc/fstab": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Converting a text file to HTML format.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example A-24. Converting to HTML": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"623": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# tohtml.sh [v. 0.2.01, reldate: 04/13/12, a teeny bit less buggy]": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Convert a text file to HTML format.": "abs-guide.txt"},{"Author: Mendel Cooper": "abs-guide.txt"},{"License: GPL3": "abs-guide.txt"},{"Usage: sh tohtml.sh < textfile > htmlfile": "abs-guide.txt"},{"Script can easily be modified to accept source and target filenames.": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# 1)": "abs-guide.txt"},{"# 2)": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# 3)": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"Assumptions:": "abs-guide.txt"},{"Paragraphs in (target) text file are separated by a blank line.": "abs-guide.txt"},{"Jpeg images (*.jpg) are located in \"images\" subdirectory.": "abs-guide.txt"},{"In the target file, the image names are enclosed in square brackets,": "abs-guide.txt"},{"for example, [image01.jpg].": "abs-guide.txt"},{"Emphasized (italic) phrases begin with a space+underscore": "abs-guide.txt"},{"or the first character on the line is an underscore,": "abs-guide.txt"},{"and end with an underscore+space or underscore+end-of-line.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Settings": "abs-guide.txt"},{"FNTSIZE=2": "abs-guide.txt"},{"# Small-medium font size": "abs-guide.txt"},{"IMGDIR=\"images\" # Image directory": "abs-guide.txt"},{"# Headers": "abs-guide.txt"},{"HDR01='<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">'": "abs-guide.txt"},{"HDR02='<!-- Converted to HTML by ***tohtml.sh*** script -->'": "abs-guide.txt"},{"HDR03='<!-- script author: M. Leo Cooper <thegrendel.abs@gmail.com> -->'": "abs-guide.txt"},{"HDR10='<html>'": "abs-guide.txt"},{"HDR11='<head>'": "abs-guide.txt"},{"HDR11a='</head>'": "abs-guide.txt"},{"HDR12a='<title>'": "abs-guide.txt"},{"HDR12b='</title>'": "abs-guide.txt"},{"HDR121='<META NAME=\"GENERATOR\" CONTENT=\"tohtml.sh script\">'": "abs-guide.txt"},{"HDR13='<body bgcolor=\"#dddddd\">'": "abs-guide.txt"},{"# Change background color to suit.": "abs-guide.txt"},{"HDR14a='<font size='": "abs-guide.txt"},{"HDR14b='>'": "abs-guide.txt"},{"# Footers": "abs-guide.txt"},{"FTR10='</body>'": "abs-guide.txt"},{"FTR11='</html>'": "abs-guide.txt"},{"# Tags": "abs-guide.txt"},{"BOLD=\"<b>\"": "abs-guide.txt"},{"CENTER=\"<center>\"": "abs-guide.txt"},{"END_CENTER=\"</center>\"": "abs-guide.txt"},{"LF=\"<br>\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"write_headers ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"echo \"$HDR01\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"$HDR02\"": "abs-guide.txt"},{"echo \"$HDR03\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"$HDR10\"": "abs-guide.txt"},{"echo \"$HDR11\"": "abs-guide.txt"},{"echo \"$HDR121\"": "abs-guide.txt"},{"echo \"$HDR11a\"": "abs-guide.txt"},{"echo \"$HDR13\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo -n \"$HDR14a\"": "abs-guide.txt"},{"echo -n \"$FNTSIZE\"": "abs-guide.txt"},{"echo \"$HDR14b\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"624": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"$BOLD\"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Everything in bold (more easily readable).": "abs-guide.txt"},{"": "abs-guide.txt"},{"process_text ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"while read line": "abs-guide.txt"},{"do": "abs-guide.txt"},{"{": "abs-guide.txt"},{"if [ ! \"$line\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"$LF\"": "abs-guide.txt"},{"echo \"$LF\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"continue": "abs-guide.txt"},{"else": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Read one line at a time.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Blank line?": "abs-guide.txt"},{"# Then new paragraph must follow.": "abs-guide.txt"},{"# Insert two <br> tags.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Skip the underscore test.": "abs-guide.txt"},{"# Otherwise . . .": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [[ \"$line\" =~ \\[*jpg\\] ]]": "abs-guide.txt"},{"# Is a graphic?": "abs-guide.txt"},{"then": "abs-guide.txt"},{"# Strip away brackets.": "abs-guide.txt"},{"temp=$( echo \"$line\" | sed -e 's/\\[//' -e 's/\\]//' )": "abs-guide.txt"},{"line=\"\"$CENTER\" <img src=\"\\\"$IMGDIR\"/$temp\\\"> \"$END_CENTER\" \"": "abs-guide.txt"},{"# Add image tag.": "abs-guide.txt"},{"# And, center it.": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo \"$line\" | grep -q _": "abs-guide.txt"},{"if [ \"$?\" -eq 0 ]": "abs-guide.txt"},{"# If line contains underscore ...": "abs-guide.txt"},{"then": "abs-guide.txt"},{"# ===================================================": "abs-guide.txt"},{"# Convert underscored phrase to italics.": "abs-guide.txt"},{"temp=$( echo \"$line\" |": "abs-guide.txt"},{"sed -e 's/ _/ <i>/' -e 's/_/<\\/i> /' |": "abs-guide.txt"},{"sed -e 's/^_/<i>/' -e 's/_/<\\/i>/' )": "abs-guide.txt"},{"# Process only underscores prefixed by space,": "abs-guide.txt"},{"#+ or at beginning or end of line.": "abs-guide.txt"},{"# Do not convert underscores embedded within a word!": "abs-guide.txt"},{"line=\"$temp\"": "abs-guide.txt"},{"# Slows script execution. Can be optimized?": "abs-guide.txt"},{"# ===================================================": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"$line\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Don't want extra blank lines in generated text!": "abs-guide.txt"},{"} # End while": "abs-guide.txt"},{"done": "abs-guide.txt"},{"}": "abs-guide.txt"},{"# End process_text ()": "abs-guide.txt"},{"": "abs-guide.txt"},{"write_footers ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"echo \"$FTR10\"": "abs-guide.txt"},{"echo \"$FTR11\"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Termination tags.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"625": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"": "abs-guide.txt"},{"# main () {": "abs-guide.txt"},{"# =========": "abs-guide.txt"},{"write_headers": "abs-guide.txt"},{"process_text": "abs-guide.txt"},{"write_footers": "abs-guide.txt"},{"# =========": "abs-guide.txt"},{"#": "abs-guide.txt"},{"}": "abs-guide.txt"},{"exit $?": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"Exercises:": "abs-guide.txt"},{"--------1) Fixup: Check for closing underscore before a comma or period.": "abs-guide.txt"},{"2) Add a test for the presence of a closing underscore": "abs-guide.txt"},{"in phrases to be italicized.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Here is something to warm the hearts of webmasters and mistresses: a script that saves weblogs.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example A-25. Preserving weblogs": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# archiveweblogs.sh v1.0": "abs-guide.txt"},{"# Troy Engel <tengel@fluid.com>": "abs-guide.txt"},{"# Slightly modified by document author.": "abs-guide.txt"},{"# Used with permission.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# This script will preserve the normally rotated and": "abs-guide.txt"},{"#+ thrown away weblogs from a default RedHat/Apache installation.": "abs-guide.txt"},{"# It will save the files with a date/time stamp in the filename,": "abs-guide.txt"},{"#+ bzipped, to a given directory.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Run this from crontab nightly at an off hour,": "abs-guide.txt"},{"#+ as bzip2 can suck up some serious CPU on huge logs:": "abs-guide.txt"},{"# 0 2 * * * /opt/sbin/archiveweblogs.sh": "abs-guide.txt"},{"": "abs-guide.txt"},{"PROBLEM=66": "abs-guide.txt"},{"# Set this to your backup dir.": "abs-guide.txt"},{"BKP_DIR=/opt/backups/weblogs": "abs-guide.txt"},{"# Default Apache/RedHat stuff": "abs-guide.txt"},{"LOG_DAYS=\"4 3 2 1\"": "abs-guide.txt"},{"LOG_DIR=/var/log/httpd": "abs-guide.txt"},{"LOG_FILES=\"access_log error_log\"": "abs-guide.txt"},{"# Default RedHat program locations": "abs-guide.txt"},{"LS=/bin/ls": "abs-guide.txt"},{"MV=/bin/mv": "abs-guide.txt"},{"ID=/usr/bin/id": "abs-guide.txt"},{"CUT=/bin/cut": "abs-guide.txt"},{"COL=/usr/bin/column": "abs-guide.txt"},{"BZ2=/usr/bin/bzip2": "abs-guide.txt"},{"# Are we root?": "abs-guide.txt"},{"USER=`$ID -u`": "abs-guide.txt"},{"if [ \"X$USER\" != \"X0\" ]; then": "abs-guide.txt"},{"echo \"PANIC: Only root can run this script!\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"626": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"exit $PROBLEM": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# Backup dir exists/writable?": "abs-guide.txt"},{"if [ ! -x $BKP_DIR ]; then": "abs-guide.txt"},{"echo \"PANIC: $BKP_DIR doesn't exist or isn't writable!\"": "abs-guide.txt"},{"exit $PROBLEM": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# Move, rename and bzip2 the logs": "abs-guide.txt"},{"for logday in $LOG_DAYS; do": "abs-guide.txt"},{"for logfile in $LOG_FILES; do": "abs-guide.txt"},{"MYFILE=\"$LOG_DIR/$logfile.$logday\"": "abs-guide.txt"},{"if [ -w $MYFILE ]; then": "abs-guide.txt"},{"DTS=`$LS -lgo --time-style=+%Y%m%d $MYFILE | $COL -t | $CUT -d ' ' -f7`": "abs-guide.txt"},{"$MV $MYFILE $BKP_DIR/$logfile.$DTS": "abs-guide.txt"},{"$BZ2 $BKP_DIR/$logfile.$DTS": "abs-guide.txt"},{"else": "abs-guide.txt"},{"# Only spew an error if the file exits (ergo non-writable).": "abs-guide.txt"},{"if [ -f $MYFILE ]; then": "abs-guide.txt"},{"echo \"ERROR: $MYFILE not writable. Skipping.\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"done": "abs-guide.txt"},{"done": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"How to keep the shell from expanding and reinterpreting text strings.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example A-26. Protecting literal strings": "abs-guide.txt"},{"#! /bin/bash": "abs-guide.txt"},{"# protect_literal.sh": "abs-guide.txt"},{"# set -vx": "abs-guide.txt"},{":<<-'_Protect_Literal_String_Doc'": "abs-guide.txt"},{"Copyright (c) Michael S. Zick, 2003; All Rights Reserved": "abs-guide.txt"},{"License: Unrestricted reuse in any form, for any purpose.": "abs-guide.txt"},{"Warranty: None": "abs-guide.txt"},{"Revision: $ID$": "abs-guide.txt"},{"Documentation redirected to the Bash no-operation.": "abs-guide.txt"},{"Bash will '/dev/null' this block when the script is first read.": "abs-guide.txt"},{"(Uncomment the above set command to see this action.)": "abs-guide.txt"},{"Remove the first (Sha-Bang) line when sourcing this as a library": "abs-guide.txt"},{"procedure. Also comment out the example use code in the two": "abs-guide.txt"},{"places where shown.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Usage:": "abs-guide.txt"},{"_protect_literal_str 'Whatever string meets your ${fancy}'": "abs-guide.txt"},{"Just echos the argument to standard out, hard quotes": "abs-guide.txt"},{"restored.": "abs-guide.txt"},{"$(_protect_literal_str 'Whatever string meets your ${fancy}')": "abs-guide.txt"},{"as the right-hand-side of an assignment statement.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"627": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"Does:": "abs-guide.txt"},{"As the right-hand-side of an assignment, preserves the": "abs-guide.txt"},{"hard quotes protecting the contents of the literal during": "abs-guide.txt"},{"assignment.": "abs-guide.txt"},{"Notes:": "abs-guide.txt"},{"The strange names (_*) are used to avoid trampling on": "abs-guide.txt"},{"the user's chosen names when this is sourced as a": "abs-guide.txt"},{"library.": "abs-guide.txt"},{"_Protect_Literal_String_Doc": "abs-guide.txt"},{"# The 'for illustration' function form": "abs-guide.txt"},{"_protect_literal_str() {": "abs-guide.txt"},{"# Pick an un-used, non-printing character as local IFS.": "abs-guide.txt"},{"# Not required, but shows that we are ignoring it.": "abs-guide.txt"},{"local IFS=$'\\x1B'": "abs-guide.txt"},{"# \\ESC character": "abs-guide.txt"},{"# Enclose the All-Elements-Of in hard quotes during assignment.": "abs-guide.txt"},{"local tmp=$'\\x27'$@$'\\x27'": "abs-guide.txt"},{"#": "abs-guide.txt"},{"local tmp=$'\\''$@$'\\''": "abs-guide.txt"},{"# Even uglier.": "abs-guide.txt"},{"local len=${#tmp}": "abs-guide.txt"},{"echo $tmp is $len long.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Info only.": "abs-guide.txt"},{"# Output AND information.": "abs-guide.txt"},{"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"# This is the short-named version.": "abs-guide.txt"},{"_pls() {": "abs-guide.txt"},{"local IFS=$'x1B'": "abs-guide.txt"},{"echo $'\\x27'$@$'\\x27'": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"# \\ESC character (not required)": "abs-guide.txt"},{"# Hard quoted parameter glob": "abs-guide.txt"},{"": "abs-guide.txt"},{"# :<<-'_Protect_Literal_String_Test'": "abs-guide.txt"},{"# # # Remove the above \"# \" to disable this code. # # #": "abs-guide.txt"},{"# See how that looks": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"- - Test One _protect_literal_str": "abs-guide.txt"},{"_protect_literal_str": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"when printed.": "abs-guide.txt"},{"-\"": "abs-guide.txt"},{"'Hello $user'": "abs-guide.txt"},{"'Hello \"${username}\"'": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Which yields:": "abs-guide.txt"},{"- - Test One - 'Hello $user' is 13 long.": "abs-guide.txt"},{"'Hello \"${username}\"' is 21 long.": "abs-guide.txt"},{"Looks as expected, but why all of the trouble?": "abs-guide.txt"},{"The difference is hidden inside the Bash internal order": "abs-guide.txt"},{"of operations.": "abs-guide.txt"},{"Which shows when you use it on the RHS of an assignment.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Declare an array for test values.": "abs-guide.txt"},{"declare -a arrayZ": "abs-guide.txt"},{"# Assign elements with various types of quotes and escapes.": "abs-guide.txt"},{"arrayZ=( zero \"$(_pls 'Hello ${Me}')\" 'Hello ${You}' \"\\'Pass: ${pw}\\'\" )": "abs-guide.txt"},{"# Now list that array and see what is there.": "abs-guide.txt"},{"echo \"- - Test Two - -\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"628": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"for (( i=0 ; i<${#arrayZ[*]} ; i++ ))": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo Element $i: ${arrayZ[$i]} is: ${#arrayZ[$i]} long.": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Which yields:": "abs-guide.txt"},{"- - Test Two - Element 0: zero is: 4 long.": "abs-guide.txt"},{"Element 1: 'Hello ${Me}' is: 13 long.": "abs-guide.txt"},{"Element 2: Hello ${You} is: 12 long.": "abs-guide.txt"},{"Element 3: \\'Pass: \\' is: 10 long.": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Our marker element": "abs-guide.txt"},{"Our \"$(_pls '...' )\"": "abs-guide.txt"},{"Quotes are missing": "abs-guide.txt"},{"${pw} expanded to nothing": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Now make an assignment with that result.": "abs-guide.txt"},{"declare -a array2=( ${arrayZ[@]} )": "abs-guide.txt"},{"# And print what happened.": "abs-guide.txt"},{"echo \"- - Test Three - -\"": "abs-guide.txt"},{"for (( i=0 ; i<${#array2[*]} ; i++ ))": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo Element $i: ${array2[$i]} is: ${#array2[$i]} long.": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Which yields:": "abs-guide.txt"},{"- - Test Three - Element 0: zero is: 4 long.": "abs-guide.txt"},{"Element 1: Hello ${Me} is: 11 long.": "abs-guide.txt"},{"Element 2: Hello is: 5 long.": "abs-guide.txt"},{"Element 3: 'Pass: is: 6 long.": "abs-guide.txt"},{"Element 4: ' is: 1 long.": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Our marker element.": "abs-guide.txt"},{"Intended result.": "abs-guide.txt"},{"${You} expanded to nothing.": "abs-guide.txt"},{"Split on the whitespace.": "abs-guide.txt"},{"The end quote is here now.": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"Our Element 1 has had its leading and trailing hard quotes stripped.": "abs-guide.txt"},{"Although not shown, leading and trailing whitespace is also stripped.": "abs-guide.txt"},{"Now that the string contents are set, Bash will always, internally,": "abs-guide.txt"},{"hard quote the contents as required during its operations.": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Why?": "abs-guide.txt"},{"Considering our \"$(_pls 'Hello ${Me}')\" construction:": "abs-guide.txt"},{"\" ... \" -> Expansion required, strip the quotes.": "abs-guide.txt"},{"$( ... ) -> Replace with the result of..., strip this.": "abs-guide.txt"},{"_pls ' ... ' -> called with literal arguments, strip the quotes.": "abs-guide.txt"},{"The result returned includes hard quotes; BUT the above processing": "abs-guide.txt"},{"has already been done, so they become part of the value assigned.": "abs-guide.txt"},{"Similarly, during further usage of the string variable, the ${Me}": "abs-guide.txt"},{"is part of the contents (result) and survives any operations": "abs-guide.txt"},{"(Until explicitly told to evaluate the string).": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Hint: See what happens when the hard quotes ($'\\x27') are replaced": "abs-guide.txt"},{"#+ with soft quotes ($'\\x22') in the above procedures.": "abs-guide.txt"},{"# Interesting also is to remove the addition of any quoting.": "abs-guide.txt"},{"# _Protect_Literal_String_Test": "abs-guide.txt"},{"# # # Remove the above \"# \" to disable this code. # # #": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"But, what if you want the shell to expand and reinterpret strings?": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example A-27. Unprotecting literal strings": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"629": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"#! /bin/bash": "abs-guide.txt"},{"# unprotect_literal.sh": "abs-guide.txt"},{"# set -vx": "abs-guide.txt"},{":<<-'_UnProtect_Literal_String_Doc'": "abs-guide.txt"},{"Copyright (c) Michael S. Zick, 2003; All Rights Reserved": "abs-guide.txt"},{"License: Unrestricted reuse in any form, for any purpose.": "abs-guide.txt"},{"Warranty: None": "abs-guide.txt"},{"Revision: $ID$": "abs-guide.txt"},{"Documentation redirected to the Bash no-operation. Bash will": "abs-guide.txt"},{"'/dev/null' this block when the script is first read.": "abs-guide.txt"},{"(Uncomment the above set command to see this action.)": "abs-guide.txt"},{"Remove the first (Sha-Bang) line when sourcing this as a library": "abs-guide.txt"},{"procedure. Also comment out the example use code in the two": "abs-guide.txt"},{"places where shown.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Usage:": "abs-guide.txt"},{"Complement of the \"$(_pls 'Literal String')\" function.": "abs-guide.txt"},{"(See the protect_literal.sh example.)": "abs-guide.txt"},{"StringVar=$(_upls ProtectedSringVariable)": "abs-guide.txt"},{"Does:": "abs-guide.txt"},{"When used on the right-hand-side of an assignment statement;": "abs-guide.txt"},{"makes the substitions embedded in the protected string.": "abs-guide.txt"},{"Notes:": "abs-guide.txt"},{"The strange names (_*) are used to avoid trampling on": "abs-guide.txt"},{"the user's chosen names when this is sourced as a": "abs-guide.txt"},{"library.": "abs-guide.txt"},{"": "abs-guide.txt"},{"_UnProtect_Literal_String_Doc": "abs-guide.txt"},{"_upls() {": "abs-guide.txt"},{"local IFS=$'x1B'": "abs-guide.txt"},{"eval echo $@": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"# \\ESC character (not required)": "abs-guide.txt"},{"# Substitution on the glob.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# :<<-'_UnProtect_Literal_String_Test'": "abs-guide.txt"},{"# # # Remove the above \"# \" to disable this code. # # #": "abs-guide.txt"},{"": "abs-guide.txt"},{"_pls() {": "abs-guide.txt"},{"local IFS=$'x1B'": "abs-guide.txt"},{"echo $'\\x27'$@$'\\x27'": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"# \\ESC character (not required)": "abs-guide.txt"},{"# Hard quoted parameter glob": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Declare an array for test values.": "abs-guide.txt"},{"declare -a arrayZ": "abs-guide.txt"},{"# Assign elements with various types of quotes and escapes.": "abs-guide.txt"},{"arrayZ=( zero \"$(_pls 'Hello ${Me}')\" 'Hello ${You}' \"\\'Pass: ${pw}\\'\" )": "abs-guide.txt"},{"# Now make an assignment with that result.": "abs-guide.txt"},{"declare -a array2=( ${arrayZ[@]} )": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"630": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Which yielded:": "abs-guide.txt"},{"- - Test Three - Element 0: zero is: 4 long": "abs-guide.txt"},{"Element 1: Hello ${Me} is: 11 long": "abs-guide.txt"},{"Element 2: Hello is: 5 long": "abs-guide.txt"},{"Element 3: 'Pass: is: 6 long": "abs-guide.txt"},{"Element 4: ' is: 1 long": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Our marker element.": "abs-guide.txt"},{"Intended result.": "abs-guide.txt"},{"${You} expanded to nothing.": "abs-guide.txt"},{"Split on the whitespace.": "abs-guide.txt"},{"The end quote is here now.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# set -vx": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Initialize 'Me' to something for the embedded ${Me} substitution.": "abs-guide.txt"},{"This needs to be done ONLY just prior to evaluating the": "abs-guide.txt"},{"protected string.": "abs-guide.txt"},{"(This is why it was protected to begin with.)": "abs-guide.txt"},{"": "abs-guide.txt"},{"Me=\"to the array guy.\"": "abs-guide.txt"},{"# Set a string variable destination to the result.": "abs-guide.txt"},{"newVar=$(_upls ${array2[1]})": "abs-guide.txt"},{"# Show what the contents are.": "abs-guide.txt"},{"echo $newVar": "abs-guide.txt"},{"# Do we really need a function to do this?": "abs-guide.txt"},{"newerVar=$(eval echo ${array2[1]})": "abs-guide.txt"},{"echo $newerVar": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"I guess not, but the _upls function gives us a place to hang": "abs-guide.txt"},{"the documentation on.": "abs-guide.txt"},{"This helps when we forget what a # construction like:": "abs-guide.txt"},{"$(eval echo ... ) means.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# What if Me isn't set when the protected string is evaluated?": "abs-guide.txt"},{"unset Me": "abs-guide.txt"},{"newestVar=$(_upls ${array2[1]})": "abs-guide.txt"},{"echo $newestVar": "abs-guide.txt"},{"# Just gone, no hints, no runs, no errors.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"Why in the world?": "abs-guide.txt"},{"Setting the contents of a string variable containing character": "abs-guide.txt"},{"sequences that have a meaning in Bash is a general problem in": "abs-guide.txt"},{"script programming.": "abs-guide.txt"},{"This problem is now solved in eight lines of code": "abs-guide.txt"},{"(and four pages of description).": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Where is all this going?": "abs-guide.txt"},{"# Dynamic content Web pages as an array of Bash strings.": "abs-guide.txt"},{"# Content set per request by a Bash 'eval' command": "abs-guide.txt"},{"#+ on the stored page template.": "abs-guide.txt"},{"# Not intended to replace PHP, just an interesting thing to do.": "abs-guide.txt"},{"###": "abs-guide.txt"},{"# Don't have a webserver application?": "abs-guide.txt"},{"# No problem, check the example directory of the Bash source;": "abs-guide.txt"},{"#+ there is a Bash script for that also.": "abs-guide.txt"},{"# _UnProtect_Literal_String_Test": "abs-guide.txt"},{"# # # Remove the above \"# \" to disable this code. # # #": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"This interesting script helps hunt down spammers.": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"631": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"Example A-28. Spammer Identification": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# $Id: is_spammer.bash,v 1.12.2.11 2004/10/01 21:42:33 mszick Exp $": "abs-guide.txt"},{"# Above line is RCS info.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"The latest version of this script is available from http://www.morethan.org.": "abs-guide.txt"},{"Spammer-identification": "abs-guide.txt"},{"by Michael S. Zick": "abs-guide.txt"},{"Used in the ABS Guide with permission.": "abs-guide.txt"},{"": "abs-guide.txt"},{"#######################################################": "abs-guide.txt"},{"# Documentation": "abs-guide.txt"},{"# See also \"Quickstart\" at end of script.": "abs-guide.txt"},{"#######################################################": "abs-guide.txt"},{":<<-'__is_spammer_Doc_'": "abs-guide.txt"},{"Copyright (c) Michael S. Zick, 2004": "abs-guide.txt"},{"License: Unrestricted reuse in any form, for any purpose.": "abs-guide.txt"},{"Warranty: None -{Its a script; the user is on their own.}Impatient?": "abs-guide.txt"},{"Application code: goto \"# # # Hunt the Spammer' program code # # #\"": "abs-guide.txt"},{"Example output: \":<<-'_is_spammer_outputs_'\"": "abs-guide.txt"},{"How to use: Enter script name without arguments.": "abs-guide.txt"},{"Or goto \"Quickstart\" at end of script.": "abs-guide.txt"},{"Provides": "abs-guide.txt"},{"Given a domain name or IP(v4) address as input:": "abs-guide.txt"},{"Does an exhaustive set of queries to find the associated": "abs-guide.txt"},{"network resources (short of recursing into TLDs).": "abs-guide.txt"},{"Checks the IP(v4) addresses found against Blacklist": "abs-guide.txt"},{"nameservers.": "abs-guide.txt"},{"If found to be a blacklisted IP(v4) address,": "abs-guide.txt"},{"reports the blacklist text records.": "abs-guide.txt"},{"(Usually hyper-links to the specific report.)": "abs-guide.txt"},{"Requires": "abs-guide.txt"},{"A working Internet connection.": "abs-guide.txt"},{"(Exercise: Add check and/or abort if not on-line when running script.)": "abs-guide.txt"},{"Bash with arrays (2.05b+).": "abs-guide.txt"},{"The external program 'dig' -a utility program provided with the 'bind' set of programs.": "abs-guide.txt"},{"Specifically, the version which is part of Bind series 9.x": "abs-guide.txt"},{"See: http://www.isc.org": "abs-guide.txt"},{"All usages of 'dig' are limited to wrapper functions,": "abs-guide.txt"},{"which may be rewritten as required.": "abs-guide.txt"},{"See: dig_wrappers.bash for details.": "abs-guide.txt"},{"(\"Additional documentation\" -- below)": "abs-guide.txt"},{"Usage": "abs-guide.txt"},{"Script requires a single argument, which may be:": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"632": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"1) A domain name;": "abs-guide.txt"},{"2) An IP(v4) address;": "abs-guide.txt"},{"3) A filename, with one name or address per line.": "abs-guide.txt"},{"Script accepts an optional second argument, which may be:": "abs-guide.txt"},{"1) A Blacklist server name;": "abs-guide.txt"},{"2) A filename, with one Blacklist server name per line.": "abs-guide.txt"},{"If the second argument is not provided, the script uses": "abs-guide.txt"},{"a built-in set of (free) Blacklist servers.": "abs-guide.txt"},{"See also, the Quickstart at the end of this script (after 'exit').": "abs-guide.txt"},{"Return Codes": "abs-guide.txt"},{"0 - All OK": "abs-guide.txt"},{"1 - Script failure": "abs-guide.txt"},{"2 - Something is Blacklisted": "abs-guide.txt"},{"Optional environment variables": "abs-guide.txt"},{"SPAMMER_TRACE": "abs-guide.txt"},{"If set to a writable file,": "abs-guide.txt"},{"script will log an execution flow trace.": "abs-guide.txt"},{"SPAMMER_DATA": "abs-guide.txt"},{"If set to a writable file, script will dump its": "abs-guide.txt"},{"discovered data in the form of GraphViz file.": "abs-guide.txt"},{"See: http://www.research.att.com/sw/tools/graphviz": "abs-guide.txt"},{"SPAMMER_LIMIT": "abs-guide.txt"},{"Limits the depth of resource tracing.": "abs-guide.txt"},{"Default is 2 levels.": "abs-guide.txt"},{"A setting of 0 (zero) means 'unlimited' . . .": "abs-guide.txt"},{"Caution: script might recurse the whole Internet!": "abs-guide.txt"},{"A limit of 1 or 2 is most useful when processing": "abs-guide.txt"},{"a file of domain names and addresses.": "abs-guide.txt"},{"A higher limit can be useful when hunting spam gangs.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Additional documentation": "abs-guide.txt"},{"Download the archived set of scripts": "abs-guide.txt"},{"explaining and illustrating the function contained within this script.": "abs-guide.txt"},{"http://bash.deta.in/mszick_clf.tar.bz2": "abs-guide.txt"},{"": "abs-guide.txt"},{"Study notes": "abs-guide.txt"},{"This script uses a large number of functions.": "abs-guide.txt"},{"Nearly all general functions have their own example script.": "abs-guide.txt"},{"Each of the example scripts have tutorial level comments.": "abs-guide.txt"},{"Scripting project": "abs-guide.txt"},{"Add support for IP(v6) addresses.": "abs-guide.txt"},{"IP(v6) addresses are recognized but not processed.": "abs-guide.txt"},{"Advanced project": "abs-guide.txt"},{"Add the reverse lookup detail to the discovered information.": "abs-guide.txt"},{"Report the delegation chain and abuse contacts.": "abs-guide.txt"},{"Modify the GraphViz file output to include the": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"633": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"newly discovered information.": "abs-guide.txt"},{"__is_spammer_Doc_": "abs-guide.txt"},{"#######################################################": "abs-guide.txt"},{"": "abs-guide.txt"},{"#### Special IFS settings used for string parsing. ####": "abs-guide.txt"},{"# Whitespace == :Space:Tab:Line Feed:Carriage Return:": "abs-guide.txt"},{"WSP_IFS=$'\\x20'$'\\x09'$'\\x0A'$'\\x0D'": "abs-guide.txt"},{"# No Whitespace == Line Feed:Carriage Return": "abs-guide.txt"},{"NO_WSP=$'\\x0A'$'\\x0D'": "abs-guide.txt"},{"# Field separator for dotted decimal IP addresses": "abs-guide.txt"},{"ADR_IFS=${NO_WSP}'.'": "abs-guide.txt"},{"# Array to dotted string conversions": "abs-guide.txt"},{"DOT_IFS='.'${WSP_IFS}": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"# # Pending operations stack machine # # #": "abs-guide.txt"},{"This set of functions described in func_stack.bash.": "abs-guide.txt"},{"(See \"Additional documentation\" above.)": "abs-guide.txt"},{"# #": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Global stack of pending operations.": "abs-guide.txt"},{"declare -f -a _pending_": "abs-guide.txt"},{"# Global sentinel for stack runners": "abs-guide.txt"},{"declare -i _p_ctrl_": "abs-guide.txt"},{"# Global holder for currently executing function": "abs-guide.txt"},{"declare -f _pend_current_": "abs-guide.txt"},{"# # # Debug version only - remove for regular use # # #": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# The function stored in _pend_hook_ is called": "abs-guide.txt"},{"# immediately before each pending function is": "abs-guide.txt"},{"# evaluated. Stack clean, _pend_current_ set.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# This thingy demonstrated in pend_hook.bash.": "abs-guide.txt"},{"declare -f _pend_hook_": "abs-guide.txt"},{"# # #": "abs-guide.txt"},{"# The do nothing function": "abs-guide.txt"},{"pend_dummy() { : ; }": "abs-guide.txt"},{"# Clear and initialize the function stack.": "abs-guide.txt"},{"pend_init() {": "abs-guide.txt"},{"unset _pending_[@]": "abs-guide.txt"},{"pend_func pend_stop_mark": "abs-guide.txt"},{"_pend_hook_='pend_dummy' # Debug only.": "abs-guide.txt"},{"}": "abs-guide.txt"},{"# Discard the top function on the stack.": "abs-guide.txt"},{"pend_pop() {": "abs-guide.txt"},{"if [ ${#_pending_[@]} -gt 0 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"local -i _top_": "abs-guide.txt"},{"_top_=${#_pending_[@]}-1": "abs-guide.txt"},{"unset _pending_[$_top_]": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"634": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"}": "abs-guide.txt"},{"# pend_func function_name [$(printf '%q\\n' arguments)]": "abs-guide.txt"},{"pend_func() {": "abs-guide.txt"},{"local IFS=${NO_WSP}": "abs-guide.txt"},{"set -f": "abs-guide.txt"},{"_pending_[${#_pending_[@]}]=$@": "abs-guide.txt"},{"set +f": "abs-guide.txt"},{"}": "abs-guide.txt"},{"# The function which stops the release:": "abs-guide.txt"},{"pend_stop_mark() {": "abs-guide.txt"},{"_p_ctrl_=0": "abs-guide.txt"},{"}": "abs-guide.txt"},{"pend_mark() {": "abs-guide.txt"},{"pend_func pend_stop_mark": "abs-guide.txt"},{"}": "abs-guide.txt"},{"# Execute functions until 'pend_stop_mark' . . .": "abs-guide.txt"},{"pend_release() {": "abs-guide.txt"},{"local -i _top_": "abs-guide.txt"},{"# Declare _top_ as integer.": "abs-guide.txt"},{"_p_ctrl_=${#_pending_[@]}": "abs-guide.txt"},{"while [ ${_p_ctrl_} -gt 0 ]": "abs-guide.txt"},{"do": "abs-guide.txt"},{"_top_=${#_pending_[@]}-1": "abs-guide.txt"},{"_pend_current_=${_pending_[$_top_]}": "abs-guide.txt"},{"unset _pending_[$_top_]": "abs-guide.txt"},{"$_pend_hook_": "abs-guide.txt"},{"# Debug only.": "abs-guide.txt"},{"eval $_pend_current_": "abs-guide.txt"},{"done": "abs-guide.txt"},{"}": "abs-guide.txt"},{"# Drop functions until 'pend_stop_mark' . . .": "abs-guide.txt"},{"pend_drop() {": "abs-guide.txt"},{"local -i _top_": "abs-guide.txt"},{"local _pd_ctrl_=${#_pending_[@]}": "abs-guide.txt"},{"while [ ${_pd_ctrl_} -gt 0 ]": "abs-guide.txt"},{"do": "abs-guide.txt"},{"_top_=$_pd_ctrl_-1": "abs-guide.txt"},{"if [ \"${_pending_[$_top_]}\" == 'pend_stop_mark' ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"unset _pending_[$_top_]": "abs-guide.txt"},{"break": "abs-guide.txt"},{"else": "abs-guide.txt"},{"unset _pending_[$_top_]": "abs-guide.txt"},{"_pd_ctrl_=$_top_": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"done": "abs-guide.txt"},{"if [ ${#_pending_[@]} -eq 0 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"pend_func pend_stop_mark": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"}": "abs-guide.txt"},{"#### Array editors ####": "abs-guide.txt"},{"# This function described in edit_exact.bash.": "abs-guide.txt"},{"# (See \"Additional documentation,\" above.)": "abs-guide.txt"},{"# edit_exact <excludes_array_name> <target_array_name>": "abs-guide.txt"},{"edit_exact() {": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"635": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"[ $# -eq 2 ] ||": "abs-guide.txt"},{"[ $# -eq 3 ] || return 1": "abs-guide.txt"},{"local -a _ee_Excludes": "abs-guide.txt"},{"local -a _ee_Target": "abs-guide.txt"},{"local _ee_x": "abs-guide.txt"},{"local _ee_t": "abs-guide.txt"},{"local IFS=${NO_WSP}": "abs-guide.txt"},{"set -f": "abs-guide.txt"},{"eval _ee_Excludes=\\( \\$\\{$1\\[@\\]\\} \\)": "abs-guide.txt"},{"eval _ee_Target=\\( \\$\\{$2\\[@\\]\\} \\)": "abs-guide.txt"},{"local _ee_len=${#_ee_Target[@]}": "abs-guide.txt"},{"# Original length.": "abs-guide.txt"},{"local _ee_cnt=${#_ee_Excludes[@]}": "abs-guide.txt"},{"# Exclude list length.": "abs-guide.txt"},{"[ ${_ee_len} -ne 0 ] || return 0": "abs-guide.txt"},{"# Can't edit zero length.": "abs-guide.txt"},{"[ ${_ee_cnt} -ne 0 ] || return 0": "abs-guide.txt"},{"# Can't edit zero length.": "abs-guide.txt"},{"for (( x = 0; x < ${_ee_cnt} ; x++ ))": "abs-guide.txt"},{"do": "abs-guide.txt"},{"_ee_x=${_ee_Excludes[$x]}": "abs-guide.txt"},{"for (( n = 0 ; n < ${_ee_len} ; n++ ))": "abs-guide.txt"},{"do": "abs-guide.txt"},{"_ee_t=${_ee_Target[$n]}": "abs-guide.txt"},{"if [ x\"${_ee_t}\" == x\"${_ee_x}\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"unset _ee_Target[$n]": "abs-guide.txt"},{"# Discard match.": "abs-guide.txt"},{"[ $# -eq 2 ] && break": "abs-guide.txt"},{"# If 2 arguments, then done.": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"done": "abs-guide.txt"},{"done": "abs-guide.txt"},{"eval $2=\\( \\$\\{_ee_Target\\[@\\]\\} \\)": "abs-guide.txt"},{"set +f": "abs-guide.txt"},{"return 0": "abs-guide.txt"},{"}": "abs-guide.txt"},{"# This function described in edit_by_glob.bash.": "abs-guide.txt"},{"# edit_by_glob <excludes_array_name> <target_array_name>": "abs-guide.txt"},{"edit_by_glob() {": "abs-guide.txt"},{"[ $# -eq 2 ] ||": "abs-guide.txt"},{"[ $# -eq 3 ] || return 1": "abs-guide.txt"},{"local -a _ebg_Excludes": "abs-guide.txt"},{"local -a _ebg_Target": "abs-guide.txt"},{"local _ebg_x": "abs-guide.txt"},{"local _ebg_t": "abs-guide.txt"},{"local IFS=${NO_WSP}": "abs-guide.txt"},{"set -f": "abs-guide.txt"},{"eval _ebg_Excludes=\\( \\$\\{$1\\[@\\]\\} \\)": "abs-guide.txt"},{"eval _ebg_Target=\\( \\$\\{$2\\[@\\]\\} \\)": "abs-guide.txt"},{"local _ebg_len=${#_ebg_Target[@]}": "abs-guide.txt"},{"local _ebg_cnt=${#_ebg_Excludes[@]}": "abs-guide.txt"},{"[ ${_ebg_len} -ne 0 ] || return 0": "abs-guide.txt"},{"[ ${_ebg_cnt} -ne 0 ] || return 0": "abs-guide.txt"},{"for (( x = 0; x < ${_ebg_cnt} ; x++ ))": "abs-guide.txt"},{"do": "abs-guide.txt"},{"_ebg_x=${_ebg_Excludes[$x]}": "abs-guide.txt"},{"for (( n = 0 ; n < ${_ebg_len} ; n++ ))": "abs-guide.txt"},{"do": "abs-guide.txt"},{"[ $# -eq 3 ] && _ebg_x=${_ebg_x}'*' # Do prefix edit": "abs-guide.txt"},{"if [ ${_ebg_Target[$n]:=} ]": "abs-guide.txt"},{"#+ if defined & set.": "abs-guide.txt"},{"then": "abs-guide.txt"},{"_ebg_t=${_ebg_Target[$n]/#${_ebg_x}/}": "abs-guide.txt"},{"[ ${#_ebg_t} -eq 0 ] && unset _ebg_Target[$n]": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"done": "abs-guide.txt"},{"done": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"636": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"eval $2=\\( \\$\\{_ebg_Target\\[@\\]\\} \\)": "abs-guide.txt"},{"set +f": "abs-guide.txt"},{"return 0": "abs-guide.txt"},{"}": "abs-guide.txt"},{"# This function described in unique_lines.bash.": "abs-guide.txt"},{"# unique_lines <in_name> <out_name>": "abs-guide.txt"},{"unique_lines() {": "abs-guide.txt"},{"[ $# -eq 2 ] || return 1": "abs-guide.txt"},{"local -a _ul_in": "abs-guide.txt"},{"local -a _ul_out": "abs-guide.txt"},{"local -i _ul_cnt": "abs-guide.txt"},{"local -i _ul_pos": "abs-guide.txt"},{"local _ul_tmp": "abs-guide.txt"},{"local IFS=${NO_WSP}": "abs-guide.txt"},{"set -f": "abs-guide.txt"},{"eval _ul_in=\\( \\$\\{$1\\[@\\]\\} \\)": "abs-guide.txt"},{"_ul_cnt=${#_ul_in[@]}": "abs-guide.txt"},{"for (( _ul_pos = 0 ; _ul_pos < ${_ul_cnt} ; _ul_pos++ ))": "abs-guide.txt"},{"do": "abs-guide.txt"},{"if [ ${_ul_in[${_ul_pos}]:=} ]": "abs-guide.txt"},{"# If defined & not empty": "abs-guide.txt"},{"then": "abs-guide.txt"},{"_ul_tmp=${_ul_in[${_ul_pos}]}": "abs-guide.txt"},{"_ul_out[${#_ul_out[@]}]=${_ul_tmp}": "abs-guide.txt"},{"for (( zap = _ul_pos ; zap < ${_ul_cnt} ; zap++ ))": "abs-guide.txt"},{"do": "abs-guide.txt"},{"[ ${_ul_in[${zap}]:=} ] &&": "abs-guide.txt"},{"[ 'x'${_ul_in[${zap}]} == 'x'${_ul_tmp} ] &&": "abs-guide.txt"},{"unset _ul_in[${zap}]": "abs-guide.txt"},{"done": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"done": "abs-guide.txt"},{"eval $2=\\( \\$\\{_ul_out\\[@\\]\\} \\)": "abs-guide.txt"},{"set +f": "abs-guide.txt"},{"return 0": "abs-guide.txt"},{"}": "abs-guide.txt"},{"# This function described in char_convert.bash.": "abs-guide.txt"},{"# to_lower <string>": "abs-guide.txt"},{"to_lower() {": "abs-guide.txt"},{"[ $# -eq 1 ] || return 1": "abs-guide.txt"},{"local _tl_out": "abs-guide.txt"},{"_tl_out=${1//A/a}": "abs-guide.txt"},{"_tl_out=${_tl_out//B/b}": "abs-guide.txt"},{"_tl_out=${_tl_out//C/c}": "abs-guide.txt"},{"_tl_out=${_tl_out//D/d}": "abs-guide.txt"},{"_tl_out=${_tl_out//E/e}": "abs-guide.txt"},{"_tl_out=${_tl_out//F/f}": "abs-guide.txt"},{"_tl_out=${_tl_out//G/g}": "abs-guide.txt"},{"_tl_out=${_tl_out//H/h}": "abs-guide.txt"},{"_tl_out=${_tl_out//I/i}": "abs-guide.txt"},{"_tl_out=${_tl_out//J/j}": "abs-guide.txt"},{"_tl_out=${_tl_out//K/k}": "abs-guide.txt"},{"_tl_out=${_tl_out//L/l}": "abs-guide.txt"},{"_tl_out=${_tl_out//M/m}": "abs-guide.txt"},{"_tl_out=${_tl_out//N/n}": "abs-guide.txt"},{"_tl_out=${_tl_out//O/o}": "abs-guide.txt"},{"_tl_out=${_tl_out//P/p}": "abs-guide.txt"},{"_tl_out=${_tl_out//Q/q}": "abs-guide.txt"},{"_tl_out=${_tl_out//R/r}": "abs-guide.txt"},{"_tl_out=${_tl_out//S/s}": "abs-guide.txt"},{"_tl_out=${_tl_out//T/t}": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"637": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"_tl_out=${_tl_out//U/u}": "abs-guide.txt"},{"_tl_out=${_tl_out//V/v}": "abs-guide.txt"},{"_tl_out=${_tl_out//W/w}": "abs-guide.txt"},{"_tl_out=${_tl_out//X/x}": "abs-guide.txt"},{"_tl_out=${_tl_out//Y/y}": "abs-guide.txt"},{"_tl_out=${_tl_out//Z/z}": "abs-guide.txt"},{"echo ${_tl_out}": "abs-guide.txt"},{"return 0": "abs-guide.txt"},{"}": "abs-guide.txt"},{"#### Application helper functions ####": "abs-guide.txt"},{"# Not everybody uses dots as separators (APNIC, for example).": "abs-guide.txt"},{"# This function described in to_dot.bash": "abs-guide.txt"},{"# to_dot <string>": "abs-guide.txt"},{"to_dot() {": "abs-guide.txt"},{"[ $# -eq 1 ] || return 1": "abs-guide.txt"},{"echo ${1//[#|@|%]/.}": "abs-guide.txt"},{"return 0": "abs-guide.txt"},{"}": "abs-guide.txt"},{"# This function described in is_number.bash.": "abs-guide.txt"},{"# is_number <input>": "abs-guide.txt"},{"is_number() {": "abs-guide.txt"},{"[ \"$#\" -eq 1 ]": "abs-guide.txt"},{"|| return 1 # is blank?": "abs-guide.txt"},{"[ x\"$1\" == 'x0' ] && return 0 # is zero?": "abs-guide.txt"},{"local -i tst": "abs-guide.txt"},{"let tst=$1 2>/dev/null": "abs-guide.txt"},{"# else is numeric!": "abs-guide.txt"},{"return $?": "abs-guide.txt"},{"}": "abs-guide.txt"},{"# This function described in is_address.bash.": "abs-guide.txt"},{"# is_address <input>": "abs-guide.txt"},{"is_address() {": "abs-guide.txt"},{"[ $# -eq 1 ] || return 1": "abs-guide.txt"},{"# Blank ==> false": "abs-guide.txt"},{"local -a _ia_input": "abs-guide.txt"},{"local IFS=${ADR_IFS}": "abs-guide.txt"},{"_ia_input=( $1 )": "abs-guide.txt"},{"if [ ${#_ia_input[@]} -eq 4 ] &&": "abs-guide.txt"},{"is_number ${_ia_input[0]}": "abs-guide.txt"},{"&&": "abs-guide.txt"},{"is_number ${_ia_input[1]}": "abs-guide.txt"},{"&&": "abs-guide.txt"},{"is_number ${_ia_input[2]}": "abs-guide.txt"},{"&&": "abs-guide.txt"},{"is_number ${_ia_input[3]}": "abs-guide.txt"},{"&&": "abs-guide.txt"},{"[ ${_ia_input[0]} -lt 256 ] &&": "abs-guide.txt"},{"[ ${_ia_input[1]} -lt 256 ] &&": "abs-guide.txt"},{"[ ${_ia_input[2]} -lt 256 ] &&": "abs-guide.txt"},{"[ ${_ia_input[3]} -lt 256 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"return 0": "abs-guide.txt"},{"else": "abs-guide.txt"},{"return 1": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"}": "abs-guide.txt"},{"# This function described in split_ip.bash.": "abs-guide.txt"},{"# split_ip <IP_address>": "abs-guide.txt"},{"#+ <array_name_norm> [<array_name_rev>]": "abs-guide.txt"},{"split_ip() {": "abs-guide.txt"},{"[ $# -eq 3 ] ||": "abs-guide.txt"},{"# Either three": "abs-guide.txt"},{"[ $# -eq 2 ] || return 1": "abs-guide.txt"},{"#+ or two arguments": "abs-guide.txt"},{"local -a _si_input": "abs-guide.txt"},{"local IFS=${ADR_IFS}": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"638": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"_si_input=( $1 )": "abs-guide.txt"},{"IFS=${WSP_IFS}": "abs-guide.txt"},{"eval $2=\\(\\ \\$\\{_si_input\\[@\\]\\}\\ \\)": "abs-guide.txt"},{"if [ $# -eq 3 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"# Build query order array.": "abs-guide.txt"},{"local -a _dns_ip": "abs-guide.txt"},{"_dns_ip[0]=${_si_input[3]}": "abs-guide.txt"},{"_dns_ip[1]=${_si_input[2]}": "abs-guide.txt"},{"_dns_ip[2]=${_si_input[1]}": "abs-guide.txt"},{"_dns_ip[3]=${_si_input[0]}": "abs-guide.txt"},{"eval $3=\\(\\ \\$\\{_dns_ip\\[@\\]\\}\\ \\)": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"return 0": "abs-guide.txt"},{"}": "abs-guide.txt"},{"# This function described in dot_array.bash.": "abs-guide.txt"},{"# dot_array <array_name>": "abs-guide.txt"},{"dot_array() {": "abs-guide.txt"},{"[ $# -eq 1 ] || return 1": "abs-guide.txt"},{"# Single argument required.": "abs-guide.txt"},{"local -a _da_input": "abs-guide.txt"},{"eval _da_input=\\(\\ \\$\\{$1\\[@\\]\\}\\ \\)": "abs-guide.txt"},{"local IFS=${DOT_IFS}": "abs-guide.txt"},{"local _da_output=${_da_input[@]}": "abs-guide.txt"},{"IFS=${WSP_IFS}": "abs-guide.txt"},{"echo ${_da_output}": "abs-guide.txt"},{"return 0": "abs-guide.txt"},{"}": "abs-guide.txt"},{"# This function described in file_to_array.bash": "abs-guide.txt"},{"# file_to_array <file_name> <line_array_name>": "abs-guide.txt"},{"file_to_array() {": "abs-guide.txt"},{"[ $# -eq 2 ] || return 1 # Two arguments required.": "abs-guide.txt"},{"local IFS=${NO_WSP}": "abs-guide.txt"},{"local -a _fta_tmp_": "abs-guide.txt"},{"_fta_tmp_=( $(cat $1) )": "abs-guide.txt"},{"eval $2=\\( \\$\\{_fta_tmp_\\[@\\]\\} \\)": "abs-guide.txt"},{"return 0": "abs-guide.txt"},{"}": "abs-guide.txt"},{"# Columnized print of an array of multi-field strings.": "abs-guide.txt"},{"# col_print <array_name> <min_space> <": "abs-guide.txt"},{"#+ tab_stop [tab_stops]>": "abs-guide.txt"},{"col_print() {": "abs-guide.txt"},{"[ $# -gt 2 ] || return 0": "abs-guide.txt"},{"local -a _cp_inp": "abs-guide.txt"},{"local -a _cp_spc": "abs-guide.txt"},{"local -a _cp_line": "abs-guide.txt"},{"local _cp_min": "abs-guide.txt"},{"local _cp_mcnt": "abs-guide.txt"},{"local _cp_pos": "abs-guide.txt"},{"local _cp_cnt": "abs-guide.txt"},{"local _cp_tab": "abs-guide.txt"},{"local -i _cp": "abs-guide.txt"},{"local -i _cpf": "abs-guide.txt"},{"local _cp_fld": "abs-guide.txt"},{"# WARNING: FOLLOWING LINE NOT BLANK -- IT IS QUOTED SPACES.": "abs-guide.txt"},{"local _cp_max='": "abs-guide.txt"},{"set -f": "abs-guide.txt"},{"local IFS=${NO_WSP}": "abs-guide.txt"},{"eval _cp_inp=\\(\\ \\$\\{$1\\[@\\]\\}\\ \\)": "abs-guide.txt"},{"[ ${#_cp_inp[@]} -gt 0 ] || return 0 # Empty is easy.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"'": "abs-guide.txt"},{"": "abs-guide.txt"},{"639": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"_cp_mcnt=$2": "abs-guide.txt"},{"_cp_min=${_cp_max:1:${_cp_mcnt}}": "abs-guide.txt"},{"shift": "abs-guide.txt"},{"shift": "abs-guide.txt"},{"_cp_cnt=$#": "abs-guide.txt"},{"for (( _cp = 0 ; _cp < _cp_cnt ; _cp++ ))": "abs-guide.txt"},{"do": "abs-guide.txt"},{"_cp_spc[${#_cp_spc[@]}]=\"${_cp_max:2:$1}\" #\"": "abs-guide.txt"},{"shift": "abs-guide.txt"},{"done": "abs-guide.txt"},{"_cp_cnt=${#_cp_inp[@]}": "abs-guide.txt"},{"for (( _cp = 0 ; _cp < _cp_cnt ; _cp++ ))": "abs-guide.txt"},{"do": "abs-guide.txt"},{"_cp_pos=1": "abs-guide.txt"},{"IFS=${NO_WSP}$'\\x20'": "abs-guide.txt"},{"_cp_line=( ${_cp_inp[${_cp}]} )": "abs-guide.txt"},{"IFS=${NO_WSP}": "abs-guide.txt"},{"for (( _cpf = 0 ; _cpf < ${#_cp_line[@]} ; _cpf++ ))": "abs-guide.txt"},{"do": "abs-guide.txt"},{"_cp_tab=${_cp_spc[${_cpf}]:${_cp_pos}}": "abs-guide.txt"},{"if [ ${#_cp_tab} -lt ${_cp_mcnt} ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"_cp_tab=\"${_cp_min}\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"echo -n \"${_cp_tab}\"": "abs-guide.txt"},{"(( _cp_pos = ${_cp_pos} + ${#_cp_tab} ))": "abs-guide.txt"},{"_cp_fld=\"${_cp_line[${_cpf}]}\"": "abs-guide.txt"},{"echo -n ${_cp_fld}": "abs-guide.txt"},{"(( _cp_pos = ${_cp_pos} + ${#_cp_fld} ))": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"done": "abs-guide.txt"},{"set +f": "abs-guide.txt"},{"return 0": "abs-guide.txt"},{"}": "abs-guide.txt"},{"# # # # 'Hunt the Spammer' data flow # # # #": "abs-guide.txt"},{"# Application return code": "abs-guide.txt"},{"declare -i _hs_RC": "abs-guide.txt"},{"# Original input, from which IP addresses are removed": "abs-guide.txt"},{"# After which, domain names to check": "abs-guide.txt"},{"declare -a uc_name": "abs-guide.txt"},{"# Original input IP addresses are moved here": "abs-guide.txt"},{"# After which, IP addresses to check": "abs-guide.txt"},{"declare -a uc_address": "abs-guide.txt"},{"# Names against which address expansion run": "abs-guide.txt"},{"# Ready for name detail lookup": "abs-guide.txt"},{"declare -a chk_name": "abs-guide.txt"},{"# Addresses against which name expansion run": "abs-guide.txt"},{"# Ready for address detail lookup": "abs-guide.txt"},{"declare -a chk_address": "abs-guide.txt"},{"# Recursion is depth-first-by-name.": "abs-guide.txt"},{"# The expand_input_address maintains this list": "abs-guide.txt"},{"#+ to prohibit looking up addresses twice during": "abs-guide.txt"},{"#+ domain name recursion.": "abs-guide.txt"},{"declare -a been_there_addr": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"640": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"been_there_addr=( '127.0.0.1' ) # Whitelist localhost": "abs-guide.txt"},{"# Names which we have checked (or given up on)": "abs-guide.txt"},{"declare -a known_name": "abs-guide.txt"},{"# Addresses which we have checked (or given up on)": "abs-guide.txt"},{"declare -a known_address": "abs-guide.txt"},{"# List": "abs-guide.txt"},{"# Each": "abs-guide.txt"},{"#+ with": "abs-guide.txt"},{"declare": "abs-guide.txt"},{"": "abs-guide.txt"},{"of zero or more Blacklist servers to check.": "abs-guide.txt"},{"'known_address' will be checked against each server,": "abs-guide.txt"},{"negative replies and failures suppressed.": "abs-guide.txt"},{"-a list_server": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Indirection limit - set to zero == no limit": "abs-guide.txt"},{"indirect=${SPAMMER_LIMIT:=2}": "abs-guide.txt"},{"# # # # 'Hunt the Spammer' information output data # # # #": "abs-guide.txt"},{"# Any domain name may have multiple IP addresses.": "abs-guide.txt"},{"# Any IP address may have multiple domain names.": "abs-guide.txt"},{"# Therefore, track unique address-name pairs.": "abs-guide.txt"},{"declare -a known_pair": "abs-guide.txt"},{"declare -a reverse_pair": "abs-guide.txt"},{"# In addition to the data flow variables; known_address": "abs-guide.txt"},{"#+ known_name and list_server, the following are output to the": "abs-guide.txt"},{"#+ external graphics interface file.": "abs-guide.txt"},{"# Authority chain, parent -> SOA fields.": "abs-guide.txt"},{"declare -a auth_chain": "abs-guide.txt"},{"# Reference chain, parent name -> child name": "abs-guide.txt"},{"declare -a ref_chain": "abs-guide.txt"},{"# DNS chain - domain name -> address": "abs-guide.txt"},{"declare -a name_address": "abs-guide.txt"},{"# Name and service pairs - domain name -> service": "abs-guide.txt"},{"declare -a name_srvc": "abs-guide.txt"},{"# Name and resource pairs - domain name -> Resource Record": "abs-guide.txt"},{"declare -a name_resource": "abs-guide.txt"},{"# Parent and Child pairs - parent name -> child name": "abs-guide.txt"},{"# This MAY NOT be the same as the ref_chain followed!": "abs-guide.txt"},{"declare -a parent_child": "abs-guide.txt"},{"# Address and Blacklist hit pairs - address->server": "abs-guide.txt"},{"declare -a address_hits": "abs-guide.txt"},{"# Dump interface file data": "abs-guide.txt"},{"declare -f _dot_dump": "abs-guide.txt"},{"_dot_dump=pend_dummy": "abs-guide.txt"},{"# Initially a no-op": "abs-guide.txt"},{"# Data dump is enabled by setting the environment variable SPAMMER_DATA": "abs-guide.txt"},{"#+ to the name of a writable file.": "abs-guide.txt"},{"declare _dot_file": "abs-guide.txt"},{"# Helper function for the dump-to-dot-file function": "abs-guide.txt"},{"# dump_to_dot <array_name> <prefix>": "abs-guide.txt"},{"dump_to_dot() {": "abs-guide.txt"},{"local -a _dda_tmp": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"641": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"local -i _dda_cnt": "abs-guide.txt"},{"local _dda_form='": "abs-guide.txt"},{"'${2}'%04u %s\\n'": "abs-guide.txt"},{"local IFS=${NO_WSP}": "abs-guide.txt"},{"eval _dda_tmp=\\(\\ \\$\\{$1\\[@\\]\\}\\ \\)": "abs-guide.txt"},{"_dda_cnt=${#_dda_tmp[@]}": "abs-guide.txt"},{"if [ ${_dda_cnt} -gt 0 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"for (( _dda = 0 ; _dda < _dda_cnt ; _dda++ ))": "abs-guide.txt"},{"do": "abs-guide.txt"},{"printf \"${_dda_form}\" \\": "abs-guide.txt"},{"\"${_dda}\" \"${_dda_tmp[${_dda}]}\" >>${_dot_file}": "abs-guide.txt"},{"done": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"}": "abs-guide.txt"},{"# Which will also set _dot_dump to this function . . .": "abs-guide.txt"},{"dump_dot() {": "abs-guide.txt"},{"local -i _dd_cnt": "abs-guide.txt"},{"echo '# Data vintage: '$(date -R) >${_dot_file}": "abs-guide.txt"},{"echo '# ABS Guide: is_spammer.bash; v2, 2004-msz' >>${_dot_file}": "abs-guide.txt"},{"echo >>${_dot_file}": "abs-guide.txt"},{"echo 'digraph G {' >>${_dot_file}": "abs-guide.txt"},{"if [ ${#known_name[@]} -gt 0 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo >>${_dot_file}": "abs-guide.txt"},{"echo '# Known domain name nodes' >>${_dot_file}": "abs-guide.txt"},{"_dd_cnt=${#known_name[@]}": "abs-guide.txt"},{"for (( _dd = 0 ; _dd < _dd_cnt ; _dd++ ))": "abs-guide.txt"},{"do": "abs-guide.txt"},{"printf '": "abs-guide.txt"},{"N%04u [label=\"%s\"] ;\\n' \\": "abs-guide.txt"},{"\"${_dd}\" \"${known_name[${_dd}]}\" >>${_dot_file}": "abs-guide.txt"},{"done": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"if [ ${#known_address[@]} -gt 0 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo >>${_dot_file}": "abs-guide.txt"},{"echo '# Known address nodes' >>${_dot_file}": "abs-guide.txt"},{"_dd_cnt=${#known_address[@]}": "abs-guide.txt"},{"for (( _dd = 0 ; _dd < _dd_cnt ; _dd++ ))": "abs-guide.txt"},{"do": "abs-guide.txt"},{"printf '": "abs-guide.txt"},{"A%04u [label=\"%s\"] ;\\n' \\": "abs-guide.txt"},{"\"${_dd}\" \"${known_address[${_dd}]}\" >>${_dot_file}": "abs-guide.txt"},{"done": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{">>${_dot_file}": "abs-guide.txt"},{"'/*'": "abs-guide.txt"},{">>${_dot_file}": "abs-guide.txt"},{"' * Known relationships :: User conversion to' >>${_dot_file}": "abs-guide.txt"},{"' * graphic form by hand or program required.' >>${_dot_file}": "abs-guide.txt"},{"' *'": "abs-guide.txt"},{">>${_dot_file}": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [ ${#auth_chain[@]} -gt 0 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo >>${_dot_file}": "abs-guide.txt"},{"echo '# Authority ref. edges followed & field source.' >>${_dot_file}": "abs-guide.txt"},{"dump_to_dot auth_chain AC": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"if [ ${#ref_chain[@]} -gt 0 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"642": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"echo >>${_dot_file}": "abs-guide.txt"},{"echo '# Name ref. edges followed and field source.' >>${_dot_file}": "abs-guide.txt"},{"dump_to_dot ref_chain RC": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"if [ ${#name_address[@]} -gt 0 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo >>${_dot_file}": "abs-guide.txt"},{"echo '# Known name->address edges' >>${_dot_file}": "abs-guide.txt"},{"dump_to_dot name_address NA": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"if [ ${#name_srvc[@]} -gt 0 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo >>${_dot_file}": "abs-guide.txt"},{"echo '# Known name->service edges' >>${_dot_file}": "abs-guide.txt"},{"dump_to_dot name_srvc NS": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"if [ ${#name_resource[@]} -gt 0 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo >>${_dot_file}": "abs-guide.txt"},{"echo '# Known name->resource edges' >>${_dot_file}": "abs-guide.txt"},{"dump_to_dot name_resource NR": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"if [ ${#parent_child[@]} -gt 0 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo >>${_dot_file}": "abs-guide.txt"},{"echo '# Known parent->child edges' >>${_dot_file}": "abs-guide.txt"},{"dump_to_dot parent_child PC": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"if [ ${#list_server[@]} -gt 0 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo >>${_dot_file}": "abs-guide.txt"},{"echo '# Known Blacklist nodes' >>${_dot_file}": "abs-guide.txt"},{"_dd_cnt=${#list_server[@]}": "abs-guide.txt"},{"for (( _dd = 0 ; _dd < _dd_cnt ; _dd++ ))": "abs-guide.txt"},{"do": "abs-guide.txt"},{"printf '": "abs-guide.txt"},{"LS%04u [label=\"%s\"] ;\\n' \\": "abs-guide.txt"},{"\"${_dd}\" \"${list_server[${_dd}]}\" >>${_dot_file}": "abs-guide.txt"},{"done": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"unique_lines address_hits address_hits": "abs-guide.txt"},{"if [ ${#address_hits[@]} -gt 0 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo >>${_dot_file}": "abs-guide.txt"},{"echo '# Known address->Blacklist_hit edges' >>${_dot_file}": "abs-guide.txt"},{"echo '# CAUTION: dig warnings can trigger false hits.' >>${_dot_file}": "abs-guide.txt"},{"dump_to_dot address_hits AH": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"echo": "abs-guide.txt"},{">>${_dot_file}": "abs-guide.txt"},{"echo ' *'": "abs-guide.txt"},{">>${_dot_file}": "abs-guide.txt"},{"echo ' * That is a lot of relationships. Happy graphing.' >>${_dot_file}": "abs-guide.txt"},{"echo ' */'": "abs-guide.txt"},{">>${_dot_file}": "abs-guide.txt"},{"echo '}'": "abs-guide.txt"},{">>${_dot_file}": "abs-guide.txt"},{"return 0": "abs-guide.txt"},{"}": "abs-guide.txt"},{"# # # # 'Hunt the Spammer' execution flow # # # #": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"643": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# Execution trace is enabled by setting the": "abs-guide.txt"},{"#+ environment variable SPAMMER_TRACE to the name of a writable file.": "abs-guide.txt"},{"declare -a _trace_log": "abs-guide.txt"},{"declare _log_file": "abs-guide.txt"},{"# Function to fill the trace log": "abs-guide.txt"},{"trace_logger() {": "abs-guide.txt"},{"_trace_log[${#_trace_log[@]}]=${_pend_current_}": "abs-guide.txt"},{"}": "abs-guide.txt"},{"# Dump trace log to file function variable.": "abs-guide.txt"},{"declare -f _log_dump": "abs-guide.txt"},{"_log_dump=pend_dummy": "abs-guide.txt"},{"# Initially a no-op.": "abs-guide.txt"},{"# Dump the trace log to a file.": "abs-guide.txt"},{"dump_log() {": "abs-guide.txt"},{"local -i _dl_cnt": "abs-guide.txt"},{"_dl_cnt=${#_trace_log[@]}": "abs-guide.txt"},{"for (( _dl = 0 ; _dl < _dl_cnt ; _dl++ ))": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo ${_trace_log[${_dl}]} >> ${_log_file}": "abs-guide.txt"},{"done": "abs-guide.txt"},{"_dl_cnt=${#_pending_[@]}": "abs-guide.txt"},{"if [ ${_dl_cnt} -gt 0 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"_dl_cnt=${_dl_cnt}-1": "abs-guide.txt"},{"echo '# # # Operations stack not empty # # #' >> ${_log_file}": "abs-guide.txt"},{"for (( _dl = ${_dl_cnt} ; _dl >= 0 ; _dl-- ))": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo ${_pending_[${_dl}]} >> ${_log_file}": "abs-guide.txt"},{"done": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"}": "abs-guide.txt"},{"# # # Utility program 'dig' wrappers # # #": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# These wrappers are derived from the": "abs-guide.txt"},{"#+ examples shown in dig_wrappers.bash.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# The major difference is these return": "abs-guide.txt"},{"#+ their results as a list in an array.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# See dig_wrappers.bash for details and": "abs-guide.txt"},{"#+ use that script to develop any changes.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# # #": "abs-guide.txt"},{"# Short form answer: 'dig' parses answer.": "abs-guide.txt"},{"# Forward lookup :: Name -> Address": "abs-guide.txt"},{"# short_fwd <domain_name> <array_name>": "abs-guide.txt"},{"short_fwd() {": "abs-guide.txt"},{"local -a _sf_reply": "abs-guide.txt"},{"local -i _sf_rc": "abs-guide.txt"},{"local -i _sf_cnt": "abs-guide.txt"},{"IFS=${NO_WSP}": "abs-guide.txt"},{"echo -n '.'": "abs-guide.txt"},{"# echo 'sfwd: '${1}": "abs-guide.txt"},{"_sf_reply=( $(dig +short ${1} -c in -t a 2>/dev/null) )": "abs-guide.txt"},{"_sf_rc=$?": "abs-guide.txt"},{"if [ ${_sf_rc} -ne 0 ]": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"644": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"then": "abs-guide.txt"},{"_trace_log[${#_trace_log[@]}]='## Lookup error '${_sf_rc}' on '${1}' ##'": "abs-guide.txt"},{"# [ ${_sf_rc} -ne 9 ] && pend_drop": "abs-guide.txt"},{"return ${_sf_rc}": "abs-guide.txt"},{"else": "abs-guide.txt"},{"# Some versions of 'dig' return warnings on stdout.": "abs-guide.txt"},{"_sf_cnt=${#_sf_reply[@]}": "abs-guide.txt"},{"for (( _sf = 0 ; _sf < ${_sf_cnt} ; _sf++ ))": "abs-guide.txt"},{"do": "abs-guide.txt"},{"[ 'x'${_sf_reply[${_sf}]:0:2} == 'x;;' ] &&": "abs-guide.txt"},{"unset _sf_reply[${_sf}]": "abs-guide.txt"},{"done": "abs-guide.txt"},{"eval $2=\\( \\$\\{_sf_reply\\[@\\]\\} \\)": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"return 0": "abs-guide.txt"},{"}": "abs-guide.txt"},{"# Reverse lookup :: Address -> Name": "abs-guide.txt"},{"# short_rev <ip_address> <array_name>": "abs-guide.txt"},{"short_rev() {": "abs-guide.txt"},{"local -a _sr_reply": "abs-guide.txt"},{"local -i _sr_rc": "abs-guide.txt"},{"local -i _sr_cnt": "abs-guide.txt"},{"IFS=${NO_WSP}": "abs-guide.txt"},{"echo -n '.'": "abs-guide.txt"},{"# echo 'srev: '${1}": "abs-guide.txt"},{"_sr_reply=( $(dig +short -x ${1} 2>/dev/null) )": "abs-guide.txt"},{"_sr_rc=$?": "abs-guide.txt"},{"if [ ${_sr_rc} -ne 0 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"_trace_log[${#_trace_log[@]}]='## Lookup error '${_sr_rc}' on '${1}' ##'": "abs-guide.txt"},{"# [ ${_sr_rc} -ne 9 ] && pend_drop": "abs-guide.txt"},{"return ${_sr_rc}": "abs-guide.txt"},{"else": "abs-guide.txt"},{"# Some versions of 'dig' return warnings on stdout.": "abs-guide.txt"},{"_sr_cnt=${#_sr_reply[@]}": "abs-guide.txt"},{"for (( _sr = 0 ; _sr < ${_sr_cnt} ; _sr++ ))": "abs-guide.txt"},{"do": "abs-guide.txt"},{"[ 'x'${_sr_reply[${_sr}]:0:2} == 'x;;' ] &&": "abs-guide.txt"},{"unset _sr_reply[${_sr}]": "abs-guide.txt"},{"done": "abs-guide.txt"},{"eval $2=\\( \\$\\{_sr_reply\\[@\\]\\} \\)": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"return 0": "abs-guide.txt"},{"}": "abs-guide.txt"},{"# Special format lookup used to query blacklist servers.": "abs-guide.txt"},{"# short_text <ip_address> <array_name>": "abs-guide.txt"},{"short_text() {": "abs-guide.txt"},{"local -a _st_reply": "abs-guide.txt"},{"local -i _st_rc": "abs-guide.txt"},{"local -i _st_cnt": "abs-guide.txt"},{"IFS=${NO_WSP}": "abs-guide.txt"},{"# echo 'stxt: '${1}": "abs-guide.txt"},{"_st_reply=( $(dig +short ${1} -c in -t txt 2>/dev/null) )": "abs-guide.txt"},{"_st_rc=$?": "abs-guide.txt"},{"if [ ${_st_rc} -ne 0 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"_trace_log[${#_trace_log[@]}]='##Text lookup error '${_st_rc}' on '${1}'##'": "abs-guide.txt"},{"# [ ${_st_rc} -ne 9 ] && pend_drop": "abs-guide.txt"},{"return ${_st_rc}": "abs-guide.txt"},{"else": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"645": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# Some versions of 'dig' return warnings on stdout.": "abs-guide.txt"},{"_st_cnt=${#_st_reply[@]}": "abs-guide.txt"},{"for (( _st = 0 ; _st < ${#_st_cnt} ; _st++ ))": "abs-guide.txt"},{"do": "abs-guide.txt"},{"[ 'x'${_st_reply[${_st}]:0:2} == 'x;;' ] &&": "abs-guide.txt"},{"unset _st_reply[${_st}]": "abs-guide.txt"},{"done": "abs-guide.txt"},{"eval $2=\\( \\$\\{_st_reply\\[@\\]\\} \\)": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"return 0": "abs-guide.txt"},{"}": "abs-guide.txt"},{"# The long forms, a.k.a., the parse it yourself versions": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"RFC 2782": "abs-guide.txt"},{"Service lookups": "abs-guide.txt"},{"dig +noall +nofail +answer _ldap._tcp.openldap.org -t srv": "abs-guide.txt"},{"_<service>._<protocol>.<domain_name>": "abs-guide.txt"},{"_ldap._tcp.openldap.org. 3600": "abs-guide.txt"},{"IN": "abs-guide.txt"},{"SRV": "abs-guide.txt"},{"0 0 389 ldap.openldap.org.": "abs-guide.txt"},{"domain TTL Class SRV Priority Weight Port Target": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Forward lookup :: Name -> poor man's zone transfer": "abs-guide.txt"},{"# long_fwd <domain_name> <array_name>": "abs-guide.txt"},{"long_fwd() {": "abs-guide.txt"},{"local -a _lf_reply": "abs-guide.txt"},{"local -i _lf_rc": "abs-guide.txt"},{"local -i _lf_cnt": "abs-guide.txt"},{"IFS=${NO_WSP}": "abs-guide.txt"},{"echo -n ':'": "abs-guide.txt"},{"# echo 'lfwd: '${1}": "abs-guide.txt"},{"_lf_reply=( $(": "abs-guide.txt"},{"dig +noall +nofail +answer +authority +additional \\": "abs-guide.txt"},{"${1} -t soa ${1} -t mx ${1} -t any 2>/dev/null) )": "abs-guide.txt"},{"_lf_rc=$?": "abs-guide.txt"},{"if [ ${_lf_rc} -ne 0 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"_trace_log[${#_trace_log[@]}]='# Zone lookup err '${_lf_rc}' on '${1}' #'": "abs-guide.txt"},{"# [ ${_lf_rc} -ne 9 ] && pend_drop": "abs-guide.txt"},{"return ${_lf_rc}": "abs-guide.txt"},{"else": "abs-guide.txt"},{"# Some versions of 'dig' return warnings on stdout.": "abs-guide.txt"},{"_lf_cnt=${#_lf_reply[@]}": "abs-guide.txt"},{"for (( _lf = 0 ; _lf < ${_lf_cnt} ; _lf++ ))": "abs-guide.txt"},{"do": "abs-guide.txt"},{"[ 'x'${_lf_reply[${_lf}]:0:2} == 'x;;' ] &&": "abs-guide.txt"},{"unset _lf_reply[${_lf}]": "abs-guide.txt"},{"done": "abs-guide.txt"},{"eval $2=\\( \\$\\{_lf_reply\\[@\\]\\} \\)": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"return 0": "abs-guide.txt"},{"}": "abs-guide.txt"},{"# The reverse lookup domain name corresponding to the IPv6 address:": "abs-guide.txt"},{"#": "abs-guide.txt"},{"4321:0:1:2:3:4:567:89ab": "abs-guide.txt"},{"# would be (nibble, I.E: Hexdigit) reversed:": "abs-guide.txt"},{"# b.a.9.8.7.6.5.0.4.0.0.0.3.0.0.0.2.0.0.0.1.0.0.0.0.0.0.0.1.2.3.4.IP6.ARPA.": "abs-guide.txt"},{"# Reverse lookup :: Address -> poor man's delegation chain": "abs-guide.txt"},{"# long_rev <rev_ip_address> <array_name>": "abs-guide.txt"},{"long_rev() {": "abs-guide.txt"},{"local -a _lr_reply": "abs-guide.txt"},{"local -i _lr_rc": "abs-guide.txt"},{"local -i _lr_cnt": "abs-guide.txt"},{"local _lr_dns": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"646": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"_lr_dns=${1}'.in-addr.arpa.'": "abs-guide.txt"},{"IFS=${NO_WSP}": "abs-guide.txt"},{"echo -n ':'": "abs-guide.txt"},{"# echo 'lrev: '${1}": "abs-guide.txt"},{"_lr_reply=( $(": "abs-guide.txt"},{"dig +noall +nofail +answer +authority +additional \\": "abs-guide.txt"},{"${_lr_dns} -t soa ${_lr_dns} -t any 2>/dev/null) )": "abs-guide.txt"},{"_lr_rc=$?": "abs-guide.txt"},{"if [ ${_lr_rc} -ne 0 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"_trace_log[${#_trace_log[@]}]='# Deleg lkp error '${_lr_rc}' on '${1}' #'": "abs-guide.txt"},{"# [ ${_lr_rc} -ne 9 ] && pend_drop": "abs-guide.txt"},{"return ${_lr_rc}": "abs-guide.txt"},{"else": "abs-guide.txt"},{"# Some versions of 'dig' return warnings on stdout.": "abs-guide.txt"},{"_lr_cnt=${#_lr_reply[@]}": "abs-guide.txt"},{"for (( _lr = 0 ; _lr < ${_lr_cnt} ; _lr++ ))": "abs-guide.txt"},{"do": "abs-guide.txt"},{"[ 'x'${_lr_reply[${_lr}]:0:2} == 'x;;' ] &&": "abs-guide.txt"},{"unset _lr_reply[${_lr}]": "abs-guide.txt"},{"done": "abs-guide.txt"},{"eval $2=\\( \\$\\{_lr_reply\\[@\\]\\} \\)": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"return 0": "abs-guide.txt"},{"}": "abs-guide.txt"},{"# # # Application specific functions # # #": "abs-guide.txt"},{"# Mung a possible name; suppresses root and TLDs.": "abs-guide.txt"},{"# name_fixup <string>": "abs-guide.txt"},{"name_fixup(){": "abs-guide.txt"},{"local -a _nf_tmp": "abs-guide.txt"},{"local -i _nf_end": "abs-guide.txt"},{"local _nf_str": "abs-guide.txt"},{"local IFS": "abs-guide.txt"},{"_nf_str=$(to_lower ${1})": "abs-guide.txt"},{"_nf_str=$(to_dot ${_nf_str})": "abs-guide.txt"},{"_nf_end=${#_nf_str}-1": "abs-guide.txt"},{"[ ${_nf_str:${_nf_end}} != '.' ] &&": "abs-guide.txt"},{"_nf_str=${_nf_str}'.'": "abs-guide.txt"},{"IFS=${ADR_IFS}": "abs-guide.txt"},{"_nf_tmp=( ${_nf_str} )": "abs-guide.txt"},{"IFS=${WSP_IFS}": "abs-guide.txt"},{"_nf_end=${#_nf_tmp[@]}": "abs-guide.txt"},{"case ${_nf_end} in": "abs-guide.txt"},{"0) # No dots, only dots.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"return 1": "abs-guide.txt"},{";;": "abs-guide.txt"},{"1) # Only a TLD.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"return 1": "abs-guide.txt"},{";;": "abs-guide.txt"},{"2) # Maybe okay.": "abs-guide.txt"},{"echo ${_nf_str}": "abs-guide.txt"},{"return 0": "abs-guide.txt"},{"# Needs a lookup table?": "abs-guide.txt"},{"if [ ${#_nf_tmp[1]} -eq 2 ]": "abs-guide.txt"},{"then # Country coded TLD.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"return 1": "abs-guide.txt"},{"else": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"647": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"echo ${_nf_str}": "abs-guide.txt"},{"return 0": "abs-guide.txt"},{"fi": "abs-guide.txt"},{";;": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"echo ${_nf_str}": "abs-guide.txt"},{"return 0": "abs-guide.txt"},{"}": "abs-guide.txt"},{"# Grope and mung original input(s).": "abs-guide.txt"},{"split_input() {": "abs-guide.txt"},{"[ ${#uc_name[@]} -gt 0 ] || return 0": "abs-guide.txt"},{"local -i _si_cnt": "abs-guide.txt"},{"local -i _si_len": "abs-guide.txt"},{"local _si_str": "abs-guide.txt"},{"unique_lines uc_name uc_name": "abs-guide.txt"},{"_si_cnt=${#uc_name[@]}": "abs-guide.txt"},{"for (( _si = 0 ; _si < _si_cnt ; _si++ ))": "abs-guide.txt"},{"do": "abs-guide.txt"},{"_si_str=${uc_name[$_si]}": "abs-guide.txt"},{"if is_address ${_si_str}": "abs-guide.txt"},{"then": "abs-guide.txt"},{"uc_address[${#uc_address[@]}]=${_si_str}": "abs-guide.txt"},{"unset uc_name[$_si]": "abs-guide.txt"},{"else": "abs-guide.txt"},{"if ! uc_name[$_si]=$(name_fixup ${_si_str})": "abs-guide.txt"},{"then": "abs-guide.txt"},{"unset ucname[$_si]": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"done": "abs-guide.txt"},{"uc_name=( ${uc_name[@]} )": "abs-guide.txt"},{"_si_cnt=${#uc_name[@]}": "abs-guide.txt"},{"_trace_log[${#_trace_log[@]}]='#Input '${_si_cnt}' unchkd name input(s).#'": "abs-guide.txt"},{"_si_cnt=${#uc_address[@]}": "abs-guide.txt"},{"_trace_log[${#_trace_log[@]}]='#Input '${_si_cnt}' unchkd addr input(s).#'": "abs-guide.txt"},{"return 0": "abs-guide.txt"},{"}": "abs-guide.txt"},{"# # # Discovery functions -- recursively interlocked by external data # # #": "abs-guide.txt"},{"# # # The leading 'if list is empty; return 0' in each is required. # # #": "abs-guide.txt"},{"# Recursion limiter": "abs-guide.txt"},{"# limit_chk() <next_level>": "abs-guide.txt"},{"limit_chk() {": "abs-guide.txt"},{"local -i _lc_lmt": "abs-guide.txt"},{"# Check indirection limit.": "abs-guide.txt"},{"if [ ${indirect} -eq 0 ] || [ $# -eq 0 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"# The 'do-forever' choice": "abs-guide.txt"},{"echo 1": "abs-guide.txt"},{"# Any value will do.": "abs-guide.txt"},{"return 0": "abs-guide.txt"},{"# OK to continue.": "abs-guide.txt"},{"else": "abs-guide.txt"},{"# Limiting is in effect.": "abs-guide.txt"},{"if [ ${indirect} -lt ${1} ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo ${1}": "abs-guide.txt"},{"# Whatever.": "abs-guide.txt"},{"return 1": "abs-guide.txt"},{"# Stop here.": "abs-guide.txt"},{"else": "abs-guide.txt"},{"_lc_lmt=${1}+1": "abs-guide.txt"},{"# Bump the given limit.": "abs-guide.txt"},{"echo ${_lc_lmt}": "abs-guide.txt"},{"# Echo it.": "abs-guide.txt"},{"return 0": "abs-guide.txt"},{"# OK to continue.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"648": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"}": "abs-guide.txt"},{"# For each name in uc_name:": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Move name to chk_name.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Add addresses to uc_address.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Pend expand_input_address.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Repeat until nothing new found.": "abs-guide.txt"},{"# expand_input_name <indirection_limit>": "abs-guide.txt"},{"expand_input_name() {": "abs-guide.txt"},{"[ ${#uc_name[@]} -gt 0 ] || return 0": "abs-guide.txt"},{"local -a _ein_addr": "abs-guide.txt"},{"local -a _ein_new": "abs-guide.txt"},{"local -i _ucn_cnt": "abs-guide.txt"},{"local -i _ein_cnt": "abs-guide.txt"},{"local _ein_tst": "abs-guide.txt"},{"_ucn_cnt=${#uc_name[@]}": "abs-guide.txt"},{"if ! _ein_cnt=$(limit_chk ${1})": "abs-guide.txt"},{"then": "abs-guide.txt"},{"return 0": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"for (( _ein = 0 ; _ein < _ucn_cnt ; _ein++ ))": "abs-guide.txt"},{"do": "abs-guide.txt"},{"if short_fwd ${uc_name[${_ein}]} _ein_new": "abs-guide.txt"},{"then": "abs-guide.txt"},{"for (( _ein_cnt = 0 ; _ein_cnt < ${#_ein_new[@]}; _ein_cnt++ ))": "abs-guide.txt"},{"do": "abs-guide.txt"},{"_ein_tst=${_ein_new[${_ein_cnt}]}": "abs-guide.txt"},{"if is_address ${_ein_tst}": "abs-guide.txt"},{"then": "abs-guide.txt"},{"_ein_addr[${#_ein_addr[@]}]=${_ein_tst}": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"done": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"done": "abs-guide.txt"},{"unique_lines _ein_addr _ein_addr": "abs-guide.txt"},{"# Scrub duplicates.": "abs-guide.txt"},{"edit_exact chk_address _ein_addr": "abs-guide.txt"},{"# Scrub pending detail.": "abs-guide.txt"},{"edit_exact known_address _ein_addr": "abs-guide.txt"},{"# Scrub already detailed.": "abs-guide.txt"},{"if [ ${#_ein_addr[@]} -gt 0 ]": "abs-guide.txt"},{"# Anything new?": "abs-guide.txt"},{"then": "abs-guide.txt"},{"uc_address=( ${uc_address[@]} ${_ein_addr[@]} )": "abs-guide.txt"},{"pend_func expand_input_address ${1}": "abs-guide.txt"},{"_trace_log[${#_trace_log[@]}]='#Add '${#_ein_addr[@]}' unchkd addr inp.#'": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"edit_exact chk_name uc_name": "abs-guide.txt"},{"# Scrub pending detail.": "abs-guide.txt"},{"edit_exact known_name uc_name": "abs-guide.txt"},{"# Scrub already detailed.": "abs-guide.txt"},{"if [ ${#uc_name[@]} -gt 0 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"chk_name=( ${chk_name[@]} ${uc_name[@]} )": "abs-guide.txt"},{"pend_func detail_each_name ${1}": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"unset uc_name[@]": "abs-guide.txt"},{"return 0": "abs-guide.txt"},{"}": "abs-guide.txt"},{"# For each address in uc_address:": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Move address to chk_address.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Add names to uc_name.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Pend expand_input_name.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"649": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Repeat until nothing new found.": "abs-guide.txt"},{"# expand_input_address <indirection_limit>": "abs-guide.txt"},{"expand_input_address() {": "abs-guide.txt"},{"[ ${#uc_address[@]} -gt 0 ] || return 0": "abs-guide.txt"},{"local -a _eia_addr": "abs-guide.txt"},{"local -a _eia_name": "abs-guide.txt"},{"local -a _eia_new": "abs-guide.txt"},{"local -i _uca_cnt": "abs-guide.txt"},{"local -i _eia_cnt": "abs-guide.txt"},{"local _eia_tst": "abs-guide.txt"},{"unique_lines uc_address _eia_addr": "abs-guide.txt"},{"unset uc_address[@]": "abs-guide.txt"},{"edit_exact been_there_addr _eia_addr": "abs-guide.txt"},{"_uca_cnt=${#_eia_addr[@]}": "abs-guide.txt"},{"[ ${_uca_cnt} -gt 0 ] &&": "abs-guide.txt"},{"been_there_addr=( ${been_there_addr[@]} ${_eia_addr[@]} )": "abs-guide.txt"},{"for (( _eia = 0 ; _eia < _uca_cnt ; _eia++ ))": "abs-guide.txt"},{"do": "abs-guide.txt"},{"if short_rev ${_eia_addr[${_eia}]} _eia_new": "abs-guide.txt"},{"then": "abs-guide.txt"},{"for (( _eia_cnt = 0 ; _eia_cnt < ${#_eia_new[@]} ; _eia_cnt++ ))": "abs-guide.txt"},{"do": "abs-guide.txt"},{"_eia_tst=${_eia_new[${_eia_cnt}]}": "abs-guide.txt"},{"if _eia_tst=$(name_fixup ${_eia_tst})": "abs-guide.txt"},{"then": "abs-guide.txt"},{"_eia_name[${#_eia_name[@]}]=${_eia_tst}": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"done": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"done": "abs-guide.txt"},{"unique_lines _eia_name _eia_name": "abs-guide.txt"},{"# Scrub duplicates.": "abs-guide.txt"},{"edit_exact chk_name _eia_name": "abs-guide.txt"},{"# Scrub pending detail.": "abs-guide.txt"},{"edit_exact known_name _eia_name": "abs-guide.txt"},{"# Scrub already detailed.": "abs-guide.txt"},{"if [ ${#_eia_name[@]} -gt 0 ]": "abs-guide.txt"},{"# Anything new?": "abs-guide.txt"},{"then": "abs-guide.txt"},{"uc_name=( ${uc_name[@]} ${_eia_name[@]} )": "abs-guide.txt"},{"pend_func expand_input_name ${1}": "abs-guide.txt"},{"_trace_log[${#_trace_log[@]}]='#Add '${#_eia_name[@]}' unchkd name inp.#'": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"edit_exact chk_address _eia_addr": "abs-guide.txt"},{"# Scrub pending detail.": "abs-guide.txt"},{"edit_exact known_address _eia_addr": "abs-guide.txt"},{"# Scrub already detailed.": "abs-guide.txt"},{"if [ ${#_eia_addr[@]} -gt 0 ]": "abs-guide.txt"},{"# Anything new?": "abs-guide.txt"},{"then": "abs-guide.txt"},{"chk_address=( ${chk_address[@]} ${_eia_addr[@]} )": "abs-guide.txt"},{"pend_func detail_each_address ${1}": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"return 0": "abs-guide.txt"},{"}": "abs-guide.txt"},{"# The parse-it-yourself zone reply.": "abs-guide.txt"},{"# The input is the chk_name list.": "abs-guide.txt"},{"# detail_each_name <indirection_limit>": "abs-guide.txt"},{"detail_each_name() {": "abs-guide.txt"},{"[ ${#chk_name[@]} -gt 0 ] || return 0": "abs-guide.txt"},{"local -a _den_chk": "abs-guide.txt"},{"# Names to check": "abs-guide.txt"},{"local -a _den_name": "abs-guide.txt"},{"# Names found here": "abs-guide.txt"},{"local -a _den_address": "abs-guide.txt"},{"# Addresses found here": "abs-guide.txt"},{"local -a _den_pair": "abs-guide.txt"},{"# Pairs found here": "abs-guide.txt"},{"local -a _den_rev": "abs-guide.txt"},{"# Reverse pairs found here": "abs-guide.txt"},{"local -a _den_tmp": "abs-guide.txt"},{"# Line being parsed": "abs-guide.txt"},{"local -a _den_auth": "abs-guide.txt"},{"# SOA contact being parsed": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"650": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"local": "abs-guide.txt"},{"local": "abs-guide.txt"},{"local": "abs-guide.txt"},{"local": "abs-guide.txt"},{"local": "abs-guide.txt"},{"local": "abs-guide.txt"},{"local": "abs-guide.txt"},{"local": "abs-guide.txt"},{"local": "abs-guide.txt"},{"local": "abs-guide.txt"},{"local": "abs-guide.txt"},{"local": "abs-guide.txt"},{"local": "abs-guide.txt"},{"local": "abs-guide.txt"},{"local": "abs-guide.txt"},{"": "abs-guide.txt"},{"-a _den_new": "abs-guide.txt"},{"-a _den_pc": "abs-guide.txt"},{"-a _den_ref": "abs-guide.txt"},{"-a _den_nr": "abs-guide.txt"},{"-a _den_na": "abs-guide.txt"},{"-a _den_ns": "abs-guide.txt"},{"-a _den_achn": "abs-guide.txt"},{"-i _den_cnt": "abs-guide.txt"},{"-i _den_lmt": "abs-guide.txt"},{"_den_who": "abs-guide.txt"},{"_den_rec": "abs-guide.txt"},{"_den_cont": "abs-guide.txt"},{"_den_str": "abs-guide.txt"},{"_den_str2": "abs-guide.txt"},{"IFS=${WSP_IFS}": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"The zone reply": "abs-guide.txt"},{"Parent-Child gets big fast": "abs-guide.txt"},{"So does reference chain": "abs-guide.txt"},{"Name-Resource can be big": "abs-guide.txt"},{"Name-Address": "abs-guide.txt"},{"Name-Service": "abs-guide.txt"},{"Chain of Authority": "abs-guide.txt"},{"Count of names to detail": "abs-guide.txt"},{"Indirection limit": "abs-guide.txt"},{"Named being processed": "abs-guide.txt"},{"Record type being processed": "abs-guide.txt"},{"Contact domain": "abs-guide.txt"},{"Fixed up name string": "abs-guide.txt"},{"Fixed up reverse": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Local, unique copy of names to check": "abs-guide.txt"},{"unique_lines chk_name _den_chk": "abs-guide.txt"},{"unset chk_name[@]": "abs-guide.txt"},{"# Done with globals.": "abs-guide.txt"},{"# Less any names already known": "abs-guide.txt"},{"edit_exact known_name _den_chk": "abs-guide.txt"},{"_den_cnt=${#_den_chk[@]}": "abs-guide.txt"},{"# If anything left, add to known_name.": "abs-guide.txt"},{"[ ${_den_cnt} -gt 0 ] &&": "abs-guide.txt"},{"known_name=( ${known_name[@]} ${_den_chk[@]} )": "abs-guide.txt"},{"# for the list of (previously) unknown names . . .": "abs-guide.txt"},{"for (( _den = 0 ; _den < _den_cnt ; _den++ ))": "abs-guide.txt"},{"do": "abs-guide.txt"},{"_den_who=${_den_chk[${_den}]}": "abs-guide.txt"},{"if long_fwd ${_den_who} _den_new": "abs-guide.txt"},{"then": "abs-guide.txt"},{"unique_lines _den_new _den_new": "abs-guide.txt"},{"if [ ${#_den_new[@]} -eq 0 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"_den_pair[${#_den_pair[@]}]='0.0.0.0 '${_den_who}": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# Parse each line in the reply.": "abs-guide.txt"},{"for (( _line = 0 ; _line < ${#_den_new[@]} ; _line++ ))": "abs-guide.txt"},{"do": "abs-guide.txt"},{"IFS=${NO_WSP}$'\\x09'$'\\x20'": "abs-guide.txt"},{"_den_tmp=( ${_den_new[${_line}]} )": "abs-guide.txt"},{"IFS=${WSP_IFS}": "abs-guide.txt"},{"# If usable record and not a warning message . . .": "abs-guide.txt"},{"if [ ${#_den_tmp[@]} -gt 4 ] && [ 'x'${_den_tmp[0]} != 'x;;' ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"_den_rec=${_den_tmp[3]}": "abs-guide.txt"},{"_den_nr[${#_den_nr[@]}]=${_den_who}' '${_den_rec}": "abs-guide.txt"},{"# Begin at RFC1033 (+++)": "abs-guide.txt"},{"case ${_den_rec} in": "abs-guide.txt"},{"#<name> [<ttl>]": "abs-guide.txt"},{"": "abs-guide.txt"},{"[<class>] SOA <origin> <person>": "abs-guide.txt"},{"SOA) # Start Of Authority": "abs-guide.txt"},{"if _den_str=$(name_fixup ${_den_tmp[0]})": "abs-guide.txt"},{"then": "abs-guide.txt"},{"_den_name[${#_den_name[@]}]=${_den_str}": "abs-guide.txt"},{"_den_achn[${#_den_achn[@]}]=${_den_who}' '${_den_str}' SOA'": "abs-guide.txt"},{"# SOA origin -- domain name of master zone record": "abs-guide.txt"},{"if _den_str2=$(name_fixup ${_den_tmp[4]})": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"651": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"then": "abs-guide.txt"},{"_den_name[${#_den_name[@]}]=${_den_str2}": "abs-guide.txt"},{"_den_achn[${#_den_achn[@]}]=${_den_who}' '${_den_str2}' SOA.O'": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# Responsible party e-mail address (possibly bogus).": "abs-guide.txt"},{"# Possibility of first.last@domain.name ignored.": "abs-guide.txt"},{"set -f": "abs-guide.txt"},{"if _den_str2=$(name_fixup ${_den_tmp[5]})": "abs-guide.txt"},{"then": "abs-guide.txt"},{"IFS=${ADR_IFS}": "abs-guide.txt"},{"_den_auth=( ${_den_str2} )": "abs-guide.txt"},{"IFS=${WSP_IFS}": "abs-guide.txt"},{"if [ ${#_den_auth[@]} -gt 2 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"_den_cont=${_den_auth[1]}": "abs-guide.txt"},{"for (( _auth = 2 ; _auth < ${#_den_auth[@]} ; _auth++ ))": "abs-guide.txt"},{"do": "abs-guide.txt"},{"_den_cont=${_den_cont}'.'${_den_auth[${_auth}]}": "abs-guide.txt"},{"done": "abs-guide.txt"},{"_den_name[${#_den_name[@]}]=${_den_cont}'.'": "abs-guide.txt"},{"_den_achn[${#_den_achn[@]}]=${_den_who}' '${_den_cont}'. SOA.C'": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"set +f": "abs-guide.txt"},{"fi": "abs-guide.txt"},{";;": "abs-guide.txt"},{"": "abs-guide.txt"},{"A) # IP(v4) Address Record": "abs-guide.txt"},{"if _den_str=$(name_fixup ${_den_tmp[0]})": "abs-guide.txt"},{"then": "abs-guide.txt"},{"_den_name[${#_den_name[@]}]=${_den_str}": "abs-guide.txt"},{"_den_pair[${#_den_pair[@]}]=${_den_tmp[4]}' '${_den_str}": "abs-guide.txt"},{"_den_na[${#_den_na[@]}]=${_den_str}' '${_den_tmp[4]}": "abs-guide.txt"},{"_den_ref[${#_den_ref[@]}]=${_den_who}' '${_den_str}' A'": "abs-guide.txt"},{"else": "abs-guide.txt"},{"_den_pair[${#_den_pair[@]}]=${_den_tmp[4]}' unknown.domain'": "abs-guide.txt"},{"_den_na[${#_den_na[@]}]='unknown.domain '${_den_tmp[4]}": "abs-guide.txt"},{"_den_ref[${#_den_ref[@]}]=${_den_who}' unknown.domain A'": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"_den_address[${#_den_address[@]}]=${_den_tmp[4]}": "abs-guide.txt"},{"_den_pc[${#_den_pc[@]}]=${_den_who}' '${_den_tmp[4]}": "abs-guide.txt"},{";;": "abs-guide.txt"},{"NS) # Name Server Record": "abs-guide.txt"},{"# Domain name being serviced (may be other than current)": "abs-guide.txt"},{"if _den_str=$(name_fixup ${_den_tmp[0]})": "abs-guide.txt"},{"then": "abs-guide.txt"},{"_den_name[${#_den_name[@]}]=${_den_str}": "abs-guide.txt"},{"_den_ref[${#_den_ref[@]}]=${_den_who}' '${_den_str}' NS'": "abs-guide.txt"},{"# Domain name of service provider": "abs-guide.txt"},{"if _den_str2=$(name_fixup ${_den_tmp[4]})": "abs-guide.txt"},{"then": "abs-guide.txt"},{"_den_name[${#_den_name[@]}]=${_den_str2}": "abs-guide.txt"},{"_den_ref[${#_den_ref[@]}]=${_den_who}' '${_den_str2}' NSH'": "abs-guide.txt"},{"_den_ns[${#_den_ns[@]}]=${_den_str2}' NS'": "abs-guide.txt"},{"_den_pc[${#_den_pc[@]}]=${_den_str}' '${_den_str2}": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"fi": "abs-guide.txt"},{";;": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"652": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"MX) # Mail Server Record": "abs-guide.txt"},{"# Domain name being serviced (wildcards not handled here)": "abs-guide.txt"},{"if _den_str=$(name_fixup ${_den_tmp[0]})": "abs-guide.txt"},{"then": "abs-guide.txt"},{"_den_name[${#_den_name[@]}]=${_den_str}": "abs-guide.txt"},{"_den_ref[${#_den_ref[@]}]=${_den_who}' '${_den_str}' MX'": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# Domain name of service provider": "abs-guide.txt"},{"if _den_str=$(name_fixup ${_den_tmp[5]})": "abs-guide.txt"},{"then": "abs-guide.txt"},{"_den_name[${#_den_name[@]}]=${_den_str}": "abs-guide.txt"},{"_den_ref[${#_den_ref[@]}]=${_den_who}' '${_den_str}' MXH'": "abs-guide.txt"},{"_den_ns[${#_den_ns[@]}]=${_den_str}' MX'": "abs-guide.txt"},{"_den_pc[${#_den_pc[@]}]=${_den_who}' '${_den_str}": "abs-guide.txt"},{"fi": "abs-guide.txt"},{";;": "abs-guide.txt"},{"PTR) # Reverse address record": "abs-guide.txt"},{"# Special name": "abs-guide.txt"},{"if _den_str=$(name_fixup ${_den_tmp[0]})": "abs-guide.txt"},{"then": "abs-guide.txt"},{"_den_ref[${#_den_ref[@]}]=${_den_who}' '${_den_str}' PTR'": "abs-guide.txt"},{"# Host name (not a CNAME)": "abs-guide.txt"},{"if _den_str2=$(name_fixup ${_den_tmp[4]})": "abs-guide.txt"},{"then": "abs-guide.txt"},{"_den_rev[${#_den_rev[@]}]=${_den_str}' '${_den_str2}": "abs-guide.txt"},{"_den_ref[${#_den_ref[@]}]=${_den_who}' '${_den_str2}' PTRH'": "abs-guide.txt"},{"_den_pc[${#_den_pc[@]}]=${_den_who}' '${_den_str}": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"fi": "abs-guide.txt"},{";;": "abs-guide.txt"},{"AAAA) # IP(v6) Address Record": "abs-guide.txt"},{"if _den_str=$(name_fixup ${_den_tmp[0]})": "abs-guide.txt"},{"then": "abs-guide.txt"},{"_den_name[${#_den_name[@]}]=${_den_str}": "abs-guide.txt"},{"_den_pair[${#_den_pair[@]}]=${_den_tmp[4]}' '${_den_str}": "abs-guide.txt"},{"_den_na[${#_den_na[@]}]=${_den_str}' '${_den_tmp[4]}": "abs-guide.txt"},{"_den_ref[${#_den_ref[@]}]=${_den_who}' '${_den_str}' AAAA'": "abs-guide.txt"},{"else": "abs-guide.txt"},{"_den_pair[${#_den_pair[@]}]=${_den_tmp[4]}' unknown.domain'": "abs-guide.txt"},{"_den_na[${#_den_na[@]}]='unknown.domain '${_den_tmp[4]}": "abs-guide.txt"},{"_den_ref[${#_den_ref[@]}]=${_den_who}' unknown.domain'": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# No processing for IPv6 addresses": "abs-guide.txt"},{"_den_pc[${#_den_pc[@]}]=${_den_who}' '${_den_tmp[4]}": "abs-guide.txt"},{";;": "abs-guide.txt"},{"CNAME) # Alias name record": "abs-guide.txt"},{"# Nickname": "abs-guide.txt"},{"if _den_str=$(name_fixup ${_den_tmp[0]})": "abs-guide.txt"},{"then": "abs-guide.txt"},{"_den_name[${#_den_name[@]}]=${_den_str}": "abs-guide.txt"},{"_den_ref[${#_den_ref[@]}]=${_den_who}' '${_den_str}' CNAME'": "abs-guide.txt"},{"_den_pc[${#_den_pc[@]}]=${_den_who}' '${_den_str}": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# Hostname": "abs-guide.txt"},{"if _den_str=$(name_fixup ${_den_tmp[4]})": "abs-guide.txt"},{"then": "abs-guide.txt"},{"_den_name[${#_den_name[@]}]=${_den_str}": "abs-guide.txt"},{"_den_ref[${#_den_ref[@]}]=${_den_who}' '${_den_str}' CHOST'": "abs-guide.txt"},{"_den_pc[${#_den_pc[@]}]=${_den_who}' '${_den_str}": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"653": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"fi": "abs-guide.txt"},{";;": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"TXT)": "abs-guide.txt"},{";;": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"done": "abs-guide.txt"},{"else # Lookup error == 'A' record 'unknown address'": "abs-guide.txt"},{"_den_pair[${#_den_pair[@]}]='0.0.0.0 '${_den_who}": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"done": "abs-guide.txt"},{"# Control dot array growth.": "abs-guide.txt"},{"unique_lines _den_achn _den_achn": "abs-guide.txt"},{"# Works best, all the same.": "abs-guide.txt"},{"edit_exact auth_chain _den_achn": "abs-guide.txt"},{"# Works best, unique items.": "abs-guide.txt"},{"if [ ${#_den_achn[@]} -gt 0 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"IFS=${NO_WSP}": "abs-guide.txt"},{"auth_chain=( ${auth_chain[@]} ${_den_achn[@]} )": "abs-guide.txt"},{"IFS=${WSP_IFS}": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"unique_lines _den_ref _den_ref": "abs-guide.txt"},{"# Works best, all the same.": "abs-guide.txt"},{"edit_exact ref_chain _den_ref": "abs-guide.txt"},{"# Works best, unique items.": "abs-guide.txt"},{"if [ ${#_den_ref[@]} -gt 0 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"IFS=${NO_WSP}": "abs-guide.txt"},{"ref_chain=( ${ref_chain[@]} ${_den_ref[@]} )": "abs-guide.txt"},{"IFS=${WSP_IFS}": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"unique_lines _den_na _den_na": "abs-guide.txt"},{"edit_exact name_address _den_na": "abs-guide.txt"},{"if [ ${#_den_na[@]} -gt 0 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"IFS=${NO_WSP}": "abs-guide.txt"},{"name_address=( ${name_address[@]} ${_den_na[@]} )": "abs-guide.txt"},{"IFS=${WSP_IFS}": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"unique_lines _den_ns _den_ns": "abs-guide.txt"},{"edit_exact name_srvc _den_ns": "abs-guide.txt"},{"if [ ${#_den_ns[@]} -gt 0 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"IFS=${NO_WSP}": "abs-guide.txt"},{"name_srvc=( ${name_srvc[@]} ${_den_ns[@]} )": "abs-guide.txt"},{"IFS=${WSP_IFS}": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"unique_lines _den_nr _den_nr": "abs-guide.txt"},{"edit_exact name_resource _den_nr": "abs-guide.txt"},{"if [ ${#_den_nr[@]} -gt 0 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"IFS=${NO_WSP}": "abs-guide.txt"},{"name_resource=( ${name_resource[@]} ${_den_nr[@]} )": "abs-guide.txt"},{"IFS=${WSP_IFS}": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"unique_lines _den_pc _den_pc": "abs-guide.txt"},{"edit_exact parent_child _den_pc": "abs-guide.txt"},{"if [ ${#_den_pc[@]} -gt 0 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"654": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"IFS=${NO_WSP}": "abs-guide.txt"},{"parent_child=( ${parent_child[@]} ${_den_pc[@]} )": "abs-guide.txt"},{"IFS=${WSP_IFS}": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# Update list known_pair (Address and Name).": "abs-guide.txt"},{"unique_lines _den_pair _den_pair": "abs-guide.txt"},{"edit_exact known_pair _den_pair": "abs-guide.txt"},{"if [ ${#_den_pair[@]} -gt 0 ] # Anything new?": "abs-guide.txt"},{"then": "abs-guide.txt"},{"IFS=${NO_WSP}": "abs-guide.txt"},{"known_pair=( ${known_pair[@]} ${_den_pair[@]} )": "abs-guide.txt"},{"IFS=${WSP_IFS}": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# Update list of reverse pairs.": "abs-guide.txt"},{"unique_lines _den_rev _den_rev": "abs-guide.txt"},{"edit_exact reverse_pair _den_rev": "abs-guide.txt"},{"if [ ${#_den_rev[@]} -gt 0 ]": "abs-guide.txt"},{"# Anything new?": "abs-guide.txt"},{"then": "abs-guide.txt"},{"IFS=${NO_WSP}": "abs-guide.txt"},{"reverse_pair=( ${reverse_pair[@]} ${_den_rev[@]} )": "abs-guide.txt"},{"IFS=${WSP_IFS}": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# Check indirection limit -- give up if reached.": "abs-guide.txt"},{"if ! _den_lmt=$(limit_chk ${1})": "abs-guide.txt"},{"then": "abs-guide.txt"},{"return 0": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# Execution engine is LIFO. Order of pend operations is important.": "abs-guide.txt"},{"# Did we define any new addresses?": "abs-guide.txt"},{"unique_lines _den_address _den_address": "abs-guide.txt"},{"# Scrub duplicates.": "abs-guide.txt"},{"edit_exact known_address _den_address": "abs-guide.txt"},{"# Scrub already processed.": "abs-guide.txt"},{"edit_exact un_address _den_address": "abs-guide.txt"},{"# Scrub already waiting.": "abs-guide.txt"},{"if [ ${#_den_address[@]} -gt 0 ]": "abs-guide.txt"},{"# Anything new?": "abs-guide.txt"},{"then": "abs-guide.txt"},{"uc_address=( ${uc_address[@]} ${_den_address[@]} )": "abs-guide.txt"},{"pend_func expand_input_address ${_den_lmt}": "abs-guide.txt"},{"_trace_log[${#_trace_log[@]}]='# Add '${#_den_address[@]}' unchkd addr. #'": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# Did we find any new names?": "abs-guide.txt"},{"unique_lines _den_name _den_name": "abs-guide.txt"},{"# Scrub duplicates.": "abs-guide.txt"},{"edit_exact known_name _den_name": "abs-guide.txt"},{"# Scrub already processed.": "abs-guide.txt"},{"edit_exact uc_name _den_name": "abs-guide.txt"},{"# Scrub already waiting.": "abs-guide.txt"},{"if [ ${#_den_name[@]} -gt 0 ]": "abs-guide.txt"},{"# Anything new?": "abs-guide.txt"},{"then": "abs-guide.txt"},{"uc_name=( ${uc_name[@]} ${_den_name[@]} )": "abs-guide.txt"},{"pend_func expand_input_name ${_den_lmt}": "abs-guide.txt"},{"_trace_log[${#_trace_log[@]}]='#Added '${#_den_name[@]}' unchkd name#'": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"return 0": "abs-guide.txt"},{"}": "abs-guide.txt"},{"# The parse-it-yourself delegation reply": "abs-guide.txt"},{"# Input is the chk_address list.": "abs-guide.txt"},{"# detail_each_address <indirection_limit>": "abs-guide.txt"},{"detail_each_address() {": "abs-guide.txt"},{"[ ${#chk_address[@]} -gt 0 ] || return 0": "abs-guide.txt"},{"unique_lines chk_address chk_address": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"655": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"edit_exact known_address chk_address": "abs-guide.txt"},{"if [ ${#chk_address[@]} -gt 0 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"known_address=( ${known_address[@]} ${chk_address[@]} )": "abs-guide.txt"},{"unset chk_address[@]": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"return 0": "abs-guide.txt"},{"}": "abs-guide.txt"},{"# # # Application specific output functions # # #": "abs-guide.txt"},{"# Pretty print the known pairs.": "abs-guide.txt"},{"report_pairs() {": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo 'Known network pairs.'": "abs-guide.txt"},{"col_print known_pair 2 5 30": "abs-guide.txt"},{"if [ ${#auth_chain[@]} -gt 0 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo 'Known chain of authority.'": "abs-guide.txt"},{"col_print auth_chain 2 5 30 55": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"if [ ${#reverse_pair[@]} -gt 0 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo 'Known reverse pairs.'": "abs-guide.txt"},{"col_print reverse_pair 2 5 55": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"return 0": "abs-guide.txt"},{"}": "abs-guide.txt"},{"# Check an address against the list of blacklist servers.": "abs-guide.txt"},{"# A good place to capture for GraphViz: address->status(server(reports))": "abs-guide.txt"},{"# check_lists <ip_address>": "abs-guide.txt"},{"check_lists() {": "abs-guide.txt"},{"[ $# -eq 1 ] || return 1": "abs-guide.txt"},{"local -a _cl_fwd_addr": "abs-guide.txt"},{"local -a _cl_rev_addr": "abs-guide.txt"},{"local -a _cl_reply": "abs-guide.txt"},{"local -i _cl_rc": "abs-guide.txt"},{"local -i _ls_cnt": "abs-guide.txt"},{"local _cl_dns_addr": "abs-guide.txt"},{"local _cl_lkup": "abs-guide.txt"},{"split_ip ${1} _cl_fwd_addr _cl_rev_addr": "abs-guide.txt"},{"_cl_dns_addr=$(dot_array _cl_rev_addr)'.'": "abs-guide.txt"},{"_ls_cnt=${#list_server[@]}": "abs-guide.txt"},{"echo '": "abs-guide.txt"},{"Checking address '${1}": "abs-guide.txt"},{"for (( _cl = 0 ; _cl < _ls_cnt ; _cl++ ))": "abs-guide.txt"},{"do": "abs-guide.txt"},{"_cl_lkup=${_cl_dns_addr}${list_server[${_cl}]}": "abs-guide.txt"},{"if short_text ${_cl_lkup} _cl_reply": "abs-guide.txt"},{"then": "abs-guide.txt"},{"if [ ${#_cl_reply[@]} -gt 0 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo '": "abs-guide.txt"},{"Records from '${list_server[${_cl}]}": "abs-guide.txt"},{"address_hits[${#address_hits[@]}]=${1}' '${list_server[${_cl}]}": "abs-guide.txt"},{"_hs_RC=2": "abs-guide.txt"},{"for (( _clr = 0 ; _clr < ${#_cl_reply[@]} ; _clr++ ))": "abs-guide.txt"},{"do": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"656": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"echo '": "abs-guide.txt"},{"done": "abs-guide.txt"},{"": "abs-guide.txt"},{"'${_cl_reply[${_clr}]}": "abs-guide.txt"},{"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"done": "abs-guide.txt"},{"return 0": "abs-guide.txt"},{"}": "abs-guide.txt"},{"# # # The usual application glue # # #": "abs-guide.txt"},{"# Who did it?": "abs-guide.txt"},{"credits() {": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo 'Advanced Bash Scripting Guide: is_spammer.bash, v2, 2004-msz'": "abs-guide.txt"},{"}": "abs-guide.txt"},{"# How to use it?": "abs-guide.txt"},{"# (See also, \"Quickstart\" at end of script.)": "abs-guide.txt"},{"usage() {": "abs-guide.txt"},{"cat <<-'_usage_statement_'": "abs-guide.txt"},{"The script is_spammer.bash requires either one or two arguments.": "abs-guide.txt"},{"arg 1)": "abs-guide.txt"},{"a)": "abs-guide.txt"},{"b)": "abs-guide.txt"},{"c)": "abs-guide.txt"},{"": "abs-guide.txt"},{"May be one of:": "abs-guide.txt"},{"A domain name": "abs-guide.txt"},{"An IPv4 address": "abs-guide.txt"},{"The name of a file with any mix of names": "abs-guide.txt"},{"and addresses, one per line.": "abs-guide.txt"},{"": "abs-guide.txt"},{"arg 2) May be one of:": "abs-guide.txt"},{"a) A Blacklist server domain name": "abs-guide.txt"},{"b) The name of a file with Blacklist server": "abs-guide.txt"},{"domain names, one per line.": "abs-guide.txt"},{"c) If not present, a default list of (free)": "abs-guide.txt"},{"Blacklist servers is used.": "abs-guide.txt"},{"d) If a filename of an empty, readable, file": "abs-guide.txt"},{"is given,": "abs-guide.txt"},{"Blacklist server lookup is disabled.": "abs-guide.txt"},{"All script output is written to stdout.": "abs-guide.txt"},{"Return codes: 0 -> All OK, 1 -> Script failure,": "abs-guide.txt"},{"2 -> Something is Blacklisted.": "abs-guide.txt"},{"Requires the external program 'dig' from the 'bind-9'": "abs-guide.txt"},{"set of DNS programs. See: http://www.isc.org": "abs-guide.txt"},{"The domain name lookup depth limit defaults to 2 levels.": "abs-guide.txt"},{"Set the environment variable SPAMMER_LIMIT to change.": "abs-guide.txt"},{"SPAMMER_LIMIT=0 means 'unlimited'": "abs-guide.txt"},{"Limit may also be set on the command-line.": "abs-guide.txt"},{"If arg#1 is an integer, the limit is set to that value": "abs-guide.txt"},{"and then the above argument rules are applied.": "abs-guide.txt"},{"Setting the environment variable 'SPAMMER_DATA' to a filename": "abs-guide.txt"},{"will cause the script to write a GraphViz graphic file.": "abs-guide.txt"},{"For the development version;": "abs-guide.txt"},{"Setting the environment variable 'SPAMMER_TRACE' to a filename": "abs-guide.txt"},{"will cause the execution engine to log a function call trace.": "abs-guide.txt"},{"_usage_statement_": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"657": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"}": "abs-guide.txt"},{"# The default list of Blacklist servers:": "abs-guide.txt"},{"# Many choices, see: http://www.spews.org/lists.html": "abs-guide.txt"},{"declare -a default_servers": "abs-guide.txt"},{"# See: http://www.spamhaus.org (Conservative, well maintained)": "abs-guide.txt"},{"default_servers[0]='sbl-xbl.spamhaus.org'": "abs-guide.txt"},{"# See: http://ordb.org (Open mail relays)": "abs-guide.txt"},{"default_servers[1]='relays.ordb.org'": "abs-guide.txt"},{"# See: http://www.spamcop.net/ (You can report spammers here)": "abs-guide.txt"},{"default_servers[2]='bl.spamcop.net'": "abs-guide.txt"},{"# See: http://www.spews.org (An 'early detect' system)": "abs-guide.txt"},{"default_servers[3]='l2.spews.dnsbl.sorbs.net'": "abs-guide.txt"},{"# See: http://www.dnsbl.us.sorbs.net/using.shtml": "abs-guide.txt"},{"default_servers[4]='dnsbl.sorbs.net'": "abs-guide.txt"},{"# See: http://dsbl.org/usage (Various mail relay lists)": "abs-guide.txt"},{"default_servers[5]='list.dsbl.org'": "abs-guide.txt"},{"default_servers[6]='multihop.dsbl.org'": "abs-guide.txt"},{"default_servers[7]='unconfirmed.dsbl.org'": "abs-guide.txt"},{"# User input argument #1": "abs-guide.txt"},{"setup_input() {": "abs-guide.txt"},{"if [ -e ${1} ] && [ -r ${1} ] # Name of readable file": "abs-guide.txt"},{"then": "abs-guide.txt"},{"file_to_array ${1} uc_name": "abs-guide.txt"},{"echo 'Using filename >'${1}'< as input.'": "abs-guide.txt"},{"else": "abs-guide.txt"},{"if is_address ${1}": "abs-guide.txt"},{"# IP address?": "abs-guide.txt"},{"then": "abs-guide.txt"},{"uc_address=( ${1} )": "abs-guide.txt"},{"echo 'Starting with address >'${1}'<'": "abs-guide.txt"},{"else": "abs-guide.txt"},{"# Must be a name.": "abs-guide.txt"},{"uc_name=( ${1} )": "abs-guide.txt"},{"echo 'Starting with domain name >'${1}'<'": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"return 0": "abs-guide.txt"},{"}": "abs-guide.txt"},{"# User input argument #2": "abs-guide.txt"},{"setup_servers() {": "abs-guide.txt"},{"if [ -e ${1} ] && [ -r ${1} ] # Name of a readable file": "abs-guide.txt"},{"then": "abs-guide.txt"},{"file_to_array ${1} list_server": "abs-guide.txt"},{"echo 'Using filename >'${1}'< as blacklist server list.'": "abs-guide.txt"},{"else": "abs-guide.txt"},{"list_server=( ${1} )": "abs-guide.txt"},{"echo 'Using blacklist server >'${1}'<'": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"return 0": "abs-guide.txt"},{"}": "abs-guide.txt"},{"# User environment variable SPAMMER_TRACE": "abs-guide.txt"},{"live_log_die() {": "abs-guide.txt"},{"if [ ${SPAMMER_TRACE:=} ]": "abs-guide.txt"},{"# Wants trace log?": "abs-guide.txt"},{"then": "abs-guide.txt"},{"if [ ! -e ${SPAMMER_TRACE} ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"if ! touch ${SPAMMER_TRACE} 2>/dev/null": "abs-guide.txt"},{"then": "abs-guide.txt"},{"pend_func echo $(printf '%q\\n' \\": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"658": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"'Unable to create log file >'${SPAMMER_TRACE}'<')": "abs-guide.txt"},{"pend_release": "abs-guide.txt"},{"exit 1": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"_log_file=${SPAMMER_TRACE}": "abs-guide.txt"},{"_pend_hook_=trace_logger": "abs-guide.txt"},{"_log_dump=dump_log": "abs-guide.txt"},{"else": "abs-guide.txt"},{"if [ ! -w ${SPAMMER_TRACE} ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"pend_func echo $(printf '%q\\n' \\": "abs-guide.txt"},{"'Unable to write log file >'${SPAMMER_TRACE}'<')": "abs-guide.txt"},{"pend_release": "abs-guide.txt"},{"exit 1": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"_log_file=${SPAMMER_TRACE}": "abs-guide.txt"},{"echo '' > ${_log_file}": "abs-guide.txt"},{"_pend_hook_=trace_logger": "abs-guide.txt"},{"_log_dump=dump_log": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"return 0": "abs-guide.txt"},{"}": "abs-guide.txt"},{"# User environment variable SPAMMER_DATA": "abs-guide.txt"},{"data_capture() {": "abs-guide.txt"},{"if [ ${SPAMMER_DATA:=} ]": "abs-guide.txt"},{"# Wants a data dump?": "abs-guide.txt"},{"then": "abs-guide.txt"},{"if [ ! -e ${SPAMMER_DATA} ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"if ! touch ${SPAMMER_DATA} 2>/dev/null": "abs-guide.txt"},{"then": "abs-guide.txt"},{"pend_func echo $(printf '%q]n' \\": "abs-guide.txt"},{"'Unable to create data output file >'${SPAMMER_DATA}'<')": "abs-guide.txt"},{"pend_release": "abs-guide.txt"},{"exit 1": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"_dot_file=${SPAMMER_DATA}": "abs-guide.txt"},{"_dot_dump=dump_dot": "abs-guide.txt"},{"else": "abs-guide.txt"},{"if [ ! -w ${SPAMMER_DATA} ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"pend_func echo $(printf '%q\\n' \\": "abs-guide.txt"},{"'Unable to write data output file >'${SPAMMER_DATA}'<')": "abs-guide.txt"},{"pend_release": "abs-guide.txt"},{"exit 1": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"_dot_file=${SPAMMER_DATA}": "abs-guide.txt"},{"_dot_dump=dump_dot": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"return 0": "abs-guide.txt"},{"}": "abs-guide.txt"},{"# Grope user specified arguments.": "abs-guide.txt"},{"do_user_args() {": "abs-guide.txt"},{"if [ $# -gt 0 ] && is_number $1": "abs-guide.txt"},{"then": "abs-guide.txt"},{"indirect=$1": "abs-guide.txt"},{"shift": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"659": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"case $# in": "abs-guide.txt"},{"# Did user treat us well?": "abs-guide.txt"},{"1)": "abs-guide.txt"},{"if ! setup_input $1": "abs-guide.txt"},{"# Needs error checking.": "abs-guide.txt"},{"then": "abs-guide.txt"},{"pend_release": "abs-guide.txt"},{"$_log_dump": "abs-guide.txt"},{"exit 1": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"list_server=( ${default_servers[@]} )": "abs-guide.txt"},{"_list_cnt=${#list_server[@]}": "abs-guide.txt"},{"echo 'Using default blacklist server list.'": "abs-guide.txt"},{"echo 'Search depth limit: '${indirect}": "abs-guide.txt"},{";;": "abs-guide.txt"},{"2)": "abs-guide.txt"},{"if ! setup_input $1": "abs-guide.txt"},{"# Needs error checking.": "abs-guide.txt"},{"then": "abs-guide.txt"},{"pend_release": "abs-guide.txt"},{"$_log_dump": "abs-guide.txt"},{"exit 1": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"if ! setup_servers $2 # Needs error checking.": "abs-guide.txt"},{"then": "abs-guide.txt"},{"pend_release": "abs-guide.txt"},{"$_log_dump": "abs-guide.txt"},{"exit 1": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"echo 'Search depth limit: '${indirect}": "abs-guide.txt"},{";;": "abs-guide.txt"},{"*)": "abs-guide.txt"},{"pend_func usage": "abs-guide.txt"},{"pend_release": "abs-guide.txt"},{"$_log_dump": "abs-guide.txt"},{"exit 1": "abs-guide.txt"},{";;": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"return 0": "abs-guide.txt"},{"}": "abs-guide.txt"},{"# A general purpose debug tool.": "abs-guide.txt"},{"# list_array <array_name>": "abs-guide.txt"},{"list_array() {": "abs-guide.txt"},{"[ $# -eq 1 ] || return 1 # One argument required.": "abs-guide.txt"},{"local -a _la_lines": "abs-guide.txt"},{"set -f": "abs-guide.txt"},{"local IFS=${NO_WSP}": "abs-guide.txt"},{"eval _la_lines=\\(\\ \\$\\{$1\\[@\\]\\}\\ \\)": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"Element count \"${#_la_lines[@]}\" array \"${1}": "abs-guide.txt"},{"local _ln_cnt=${#_la_lines[@]}": "abs-guide.txt"},{"for (( _i = 0; _i < ${_ln_cnt}; _i++ ))": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo 'Element '$_i' >'${_la_lines[$_i]}'<'": "abs-guide.txt"},{"done": "abs-guide.txt"},{"set +f": "abs-guide.txt"},{"return 0": "abs-guide.txt"},{"}": "abs-guide.txt"},{"# # # 'Hunt the Spammer' program code # # #": "abs-guide.txt"},{"pend_init": "abs-guide.txt"},{"# Ready stack engine.": "abs-guide.txt"},{"pend_func credits": "abs-guide.txt"},{"# Last thing to print.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"660": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# # # Deal with user # # #": "abs-guide.txt"},{"live_log_die": "abs-guide.txt"},{"data_capture": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"do_user_args $@": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Setup debug trace log.": "abs-guide.txt"},{"# Setup data capture file.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# # # Haven't exited yet - There is some hope # # #": "abs-guide.txt"},{"# Discovery group - Execution engine is LIFO - pend": "abs-guide.txt"},{"# in reverse order of execution.": "abs-guide.txt"},{"_hs_RC=0": "abs-guide.txt"},{"# Hunt the Spammer return code": "abs-guide.txt"},{"pend_mark": "abs-guide.txt"},{"pend_func report_pairs": "abs-guide.txt"},{"# Report name-address pairs.": "abs-guide.txt"},{"# The two detail_* are mutually recursive functions.": "abs-guide.txt"},{"# They also pend expand_* functions as required.": "abs-guide.txt"},{"# These two (the last of ???) exit the recursion.": "abs-guide.txt"},{"pend_func detail_each_address": "abs-guide.txt"},{"# Get all resources of addresses.": "abs-guide.txt"},{"pend_func detail_each_name": "abs-guide.txt"},{"# Get all resources of names.": "abs-guide.txt"},{"# The two expand_* are mutually recursive functions,": "abs-guide.txt"},{"#+ which pend additional detail_* functions as required.": "abs-guide.txt"},{"pend_func expand_input_address 1": "abs-guide.txt"},{"# Expand input names by address.": "abs-guide.txt"},{"pend_func expand_input_name 1": "abs-guide.txt"},{"# #xpand input addresses by name.": "abs-guide.txt"},{"# Start with a unique set of names and addresses.": "abs-guide.txt"},{"pend_func unique_lines uc_address uc_address": "abs-guide.txt"},{"pend_func unique_lines uc_name uc_name": "abs-guide.txt"},{"# Separate mixed input of names and addresses.": "abs-guide.txt"},{"pend_func split_input": "abs-guide.txt"},{"pend_release": "abs-guide.txt"},{"# # # Pairs reported -- Unique list of IP addresses found": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"_ip_cnt=${#known_address[@]}": "abs-guide.txt"},{"if [ ${#list_server[@]} -eq 0 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo 'Blacklist server list empty, none checked.'": "abs-guide.txt"},{"else": "abs-guide.txt"},{"if [ ${_ip_cnt} -eq 0 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo 'Known address list empty, none checked.'": "abs-guide.txt"},{"else": "abs-guide.txt"},{"_ip_cnt=${_ip_cnt}-1": "abs-guide.txt"},{"# Start at top.": "abs-guide.txt"},{"echo 'Checking Blacklist servers.'": "abs-guide.txt"},{"for (( _ip = _ip_cnt ; _ip >= 0 ; _ip-- ))": "abs-guide.txt"},{"do": "abs-guide.txt"},{"pend_func check_lists $( printf '%q\\n' ${known_address[$_ip]} )": "abs-guide.txt"},{"done": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"pend_release": "abs-guide.txt"},{"$_dot_dump": "abs-guide.txt"},{"# Graphics file dump": "abs-guide.txt"},{"$_log_dump": "abs-guide.txt"},{"# Execution trace": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"##############################": "abs-guide.txt"},{"# Example output from script #": "abs-guide.txt"},{"##############################": "abs-guide.txt"},{":<<-'_is_spammer_outputs_'": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"661": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"./is_spammer.bash 0 web4.alojamentos7.com": "abs-guide.txt"},{"Starting with domain name >web4.alojamentos7.com<": "abs-guide.txt"},{"Using default blacklist server list.": "abs-guide.txt"},{"Search depth limit: 0": "abs-guide.txt"},{".:....::::...:::...:::.......::..::...:::.......::": "abs-guide.txt"},{"Known network pairs.": "abs-guide.txt"},{"66.98.208.97": "abs-guide.txt"},{"web4.alojamentos7.com.": "abs-guide.txt"},{"66.98.208.97": "abs-guide.txt"},{"ns1.alojamentos7.com.": "abs-guide.txt"},{"69.56.202.147": "abs-guide.txt"},{"ns2.alojamentos.ws.": "abs-guide.txt"},{"66.98.208.97": "abs-guide.txt"},{"alojamentos7.com.": "abs-guide.txt"},{"66.98.208.97": "abs-guide.txt"},{"web.alojamentos7.com.": "abs-guide.txt"},{"69.56.202.146": "abs-guide.txt"},{"ns1.alojamentos.ws.": "abs-guide.txt"},{"69.56.202.146": "abs-guide.txt"},{"alojamentos.ws.": "abs-guide.txt"},{"66.235.180.113": "abs-guide.txt"},{"ns1.alojamentos.org.": "abs-guide.txt"},{"66.235.181.192": "abs-guide.txt"},{"ns2.alojamentos.org.": "abs-guide.txt"},{"66.235.180.113": "abs-guide.txt"},{"alojamentos.org.": "abs-guide.txt"},{"66.235.180.113": "abs-guide.txt"},{"web6.alojamentos.org.": "abs-guide.txt"},{"216.234.234.30": "abs-guide.txt"},{"ns1.theplanet.com.": "abs-guide.txt"},{"12.96.160.115": "abs-guide.txt"},{"ns2.theplanet.com.": "abs-guide.txt"},{"216.185.111.52": "abs-guide.txt"},{"mail1.theplanet.com.": "abs-guide.txt"},{"69.56.141.4": "abs-guide.txt"},{"spooling.theplanet.com.": "abs-guide.txt"},{"216.185.111.40": "abs-guide.txt"},{"theplanet.com.": "abs-guide.txt"},{"216.185.111.40": "abs-guide.txt"},{"www.theplanet.com.": "abs-guide.txt"},{"216.185.111.52": "abs-guide.txt"},{"mail.theplanet.com.": "abs-guide.txt"},{"Checking Blacklist servers.": "abs-guide.txt"},{"Checking address 66.98.208.97": "abs-guide.txt"},{"Records from dnsbl.sorbs.net": "abs-guide.txt"},{"\"Spam Received See: http://www.dnsbl.sorbs.net/lookup.shtml?66.98.208.97\"": "abs-guide.txt"},{"Checking address 69.56.202.147": "abs-guide.txt"},{"Checking address 69.56.202.146": "abs-guide.txt"},{"Checking address 66.235.180.113": "abs-guide.txt"},{"Checking address 66.235.181.192": "abs-guide.txt"},{"Checking address 216.185.111.40": "abs-guide.txt"},{"Checking address 216.234.234.30": "abs-guide.txt"},{"Checking address 12.96.160.115": "abs-guide.txt"},{"Checking address 216.185.111.52": "abs-guide.txt"},{"Checking address 69.56.141.4": "abs-guide.txt"},{"Advanced Bash Scripting Guide: is_spammer.bash, v2, 2004-msz": "abs-guide.txt"},{"_is_spammer_outputs_": "abs-guide.txt"},{"exit ${_hs_RC}": "abs-guide.txt"},{"####################################################": "abs-guide.txt"},{"# The script ignores everything from here on down #": "abs-guide.txt"},{"#+ because of the 'exit' command, just above.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"####################################################": "abs-guide.txt"},{"": "abs-guide.txt"},{"Quickstart": "abs-guide.txt"},{"==========": "abs-guide.txt"},{"Prerequisites": "abs-guide.txt"},{"Bash version 2.05b or 3.00 (bash --version)": "abs-guide.txt"},{"A version of Bash which supports arrays. Array": "abs-guide.txt"},{"support is included by default Bash configurations.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"662": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"'dig,' version 9.x.x (dig $HOSTNAME, see first line of output)": "abs-guide.txt"},{"A version of dig which supports the +short options.": "abs-guide.txt"},{"See: dig_wrappers.bash for details.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Optional Prerequisites": "abs-guide.txt"},{"'named,' a local DNS caching program. Any flavor will do.": "abs-guide.txt"},{"Do twice: dig $HOSTNAME": "abs-guide.txt"},{"Check near bottom of output for: SERVER: 127.0.0.1#53": "abs-guide.txt"},{"That means you have one running.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Optional Graphics Support": "abs-guide.txt"},{"'date,' a standard *nix thing. (date -R)": "abs-guide.txt"},{"dot Program to convert graphic description file to a": "abs-guide.txt"},{"diagram. (dot -V)": "abs-guide.txt"},{"A part of the Graph-Viz set of programs.": "abs-guide.txt"},{"See: [http://www.research.att.com/sw/tools/graphviz||GraphViz]": "abs-guide.txt"},{"'dotty,' a visual editor for graphic description files.": "abs-guide.txt"},{"Also a part of the Graph-Viz set of programs.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Quick Start": "abs-guide.txt"},{"In the same directory as the is_spammer.bash script;": "abs-guide.txt"},{"Do: ./is_spammer.bash": "abs-guide.txt"},{"Usage Details": "abs-guide.txt"},{"1. Blacklist server choices.": "abs-guide.txt"},{"(a) To use default, built-in list: Do nothing.": "abs-guide.txt"},{"(b) To use your own list:": "abs-guide.txt"},{"i. Create a file with a single Blacklist server": "abs-guide.txt"},{"domain name per line.": "abs-guide.txt"},{"ii. Provide that filename as the last argument to": "abs-guide.txt"},{"the script.": "abs-guide.txt"},{"(c) To use a single Blacklist server: Last argument": "abs-guide.txt"},{"to the script.": "abs-guide.txt"},{"(d) To disable Blacklist lookups:": "abs-guide.txt"},{"i. Create an empty file (touch spammer.nul)": "abs-guide.txt"},{"Your choice of filename.": "abs-guide.txt"},{"ii. Provide the filename of that empty file as the": "abs-guide.txt"},{"last argument to the script.": "abs-guide.txt"},{"2. Search depth limit.": "abs-guide.txt"},{"(a) To use the default value of 2: Do nothing.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"663": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"(b) To set a different limit:": "abs-guide.txt"},{"A limit of 0 means: no limit.": "abs-guide.txt"},{"i. export SPAMMER_LIMIT=1": "abs-guide.txt"},{"or whatever limit you want.": "abs-guide.txt"},{"ii. OR provide the desired limit as the first": "abs-guide.txt"},{"argument to the script.": "abs-guide.txt"},{"3. Optional execution trace log.": "abs-guide.txt"},{"(a) To use the default setting of no log output: Do nothing.": "abs-guide.txt"},{"(b) To write an execution trace log:": "abs-guide.txt"},{"export SPAMMER_TRACE=spammer.log": "abs-guide.txt"},{"or whatever filename you want.": "abs-guide.txt"},{"4. Optional graphic description file.": "abs-guide.txt"},{"(a) To use the default setting of no graphic file: Do nothing.": "abs-guide.txt"},{"(b) To write a Graph-Viz graphic description file:": "abs-guide.txt"},{"export SPAMMER_DATA=spammer.dot": "abs-guide.txt"},{"or whatever filename you want.": "abs-guide.txt"},{"5. Where to start the search.": "abs-guide.txt"},{"(a) Starting with a single domain name:": "abs-guide.txt"},{"i. Without a command-line search limit: First": "abs-guide.txt"},{"argument to script.": "abs-guide.txt"},{"ii. With a command-line search limit: Second": "abs-guide.txt"},{"argument to script.": "abs-guide.txt"},{"(b) Starting with a single IP address:": "abs-guide.txt"},{"i. Without a command-line search limit: First": "abs-guide.txt"},{"argument to script.": "abs-guide.txt"},{"ii. With a command-line search limit: Second": "abs-guide.txt"},{"argument to script.": "abs-guide.txt"},{"(c) Starting with (mixed) multiple name(s) and/or address(es):": "abs-guide.txt"},{"Create a file with one name or address per line.": "abs-guide.txt"},{"Your choice of filename.": "abs-guide.txt"},{"i. Without a command-line search limit: Filename as": "abs-guide.txt"},{"first argument to script.": "abs-guide.txt"},{"ii. With a command-line search limit: Filename as": "abs-guide.txt"},{"second argument to script.": "abs-guide.txt"},{"6. What to do with the display output.": "abs-guide.txt"},{"(a) To view display output on screen: Do nothing.": "abs-guide.txt"},{"(b) To save display output to a file: Redirect stdout to a filename.": "abs-guide.txt"},{"(c) To discard display output: Redirect stdout to /dev/null.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"664": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"7. Temporary end of decision making.": "abs-guide.txt"},{"press RETURN": "abs-guide.txt"},{"wait (optionally, watch the dots and colons).": "abs-guide.txt"},{"8. Optionally check the return code.": "abs-guide.txt"},{"(a) Return code 0: All OK": "abs-guide.txt"},{"(b) Return code 1: Script setup failure": "abs-guide.txt"},{"(c) Return code 2: Something was blacklisted.": "abs-guide.txt"},{"9. Where is my graph (diagram)?": "abs-guide.txt"},{"The script does not directly produce a graph (diagram).": "abs-guide.txt"},{"It only produces a graphic description file. You can": "abs-guide.txt"},{"process the graphic descriptor file that was output": "abs-guide.txt"},{"with the 'dot' program.": "abs-guide.txt"},{"Until you edit that descriptor file, to describe the": "abs-guide.txt"},{"relationships you want shown, all that you will get is": "abs-guide.txt"},{"a bunch of labeled name and address nodes.": "abs-guide.txt"},{"All of the script's discovered relationships are within": "abs-guide.txt"},{"a comment block in the graphic descriptor file, each": "abs-guide.txt"},{"with a descriptive heading.": "abs-guide.txt"},{"The editing required to draw a line between a pair of": "abs-guide.txt"},{"nodes from the information in the descriptor file may": "abs-guide.txt"},{"be done with a text editor.": "abs-guide.txt"},{"Given these lines somewhere in the descriptor file:": "abs-guide.txt"},{"# Known domain name nodes": "abs-guide.txt"},{"N0000 [label=\"guardproof.info.\"] ;": "abs-guide.txt"},{"N0002 [label=\"third.guardproof.info.\"] ;": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Known address nodes": "abs-guide.txt"},{"A0000 [label=\"61.141.32.197\"] ;": "abs-guide.txt"},{"": "abs-guide.txt"},{"/*": "abs-guide.txt"},{"# Known name->address edges": "abs-guide.txt"},{"NA0000 third.guardproof.info. 61.141.32.197": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Known parent->child edges": "abs-guide.txt"},{"PC0000 guardproof.info. third.guardproof.info.": "abs-guide.txt"},{"*/": "abs-guide.txt"},{"Turn that into the following lines by substituting node": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"665": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"identifiers into the relationships:": "abs-guide.txt"},{"# Known domain name nodes": "abs-guide.txt"},{"N0000 [label=\"guardproof.info.\"] ;": "abs-guide.txt"},{"N0002 [label=\"third.guardproof.info.\"] ;": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Known address nodes": "abs-guide.txt"},{"A0000 [label=\"61.141.32.197\"] ;": "abs-guide.txt"},{"": "abs-guide.txt"},{"# PC0000 guardproof.info. third.guardproof.info.": "abs-guide.txt"},{"N0000->N0002 ;": "abs-guide.txt"},{"": "abs-guide.txt"},{"# NA0000 third.guardproof.info. 61.141.32.197": "abs-guide.txt"},{"N0002->A0000 ;": "abs-guide.txt"},{"": "abs-guide.txt"},{"/*": "abs-guide.txt"},{"# Known name->address edges": "abs-guide.txt"},{"NA0000 third.guardproof.info. 61.141.32.197": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Known parent->child edges": "abs-guide.txt"},{"PC0000 guardproof.info. third.guardproof.info.": "abs-guide.txt"},{"*/": "abs-guide.txt"},{"Process that with the 'dot' program, and you have your": "abs-guide.txt"},{"first network diagram.": "abs-guide.txt"},{"In addition to the conventional graphic edges, the": "abs-guide.txt"},{"descriptor file includes similar format pair-data that": "abs-guide.txt"},{"describes services, zone records (sub-graphs?),": "abs-guide.txt"},{"blacklisted addresses, and other things which might be": "abs-guide.txt"},{"interesting to include in your graph. This additional": "abs-guide.txt"},{"information could be displayed as different node": "abs-guide.txt"},{"shapes, colors, line sizes, etc.": "abs-guide.txt"},{"The descriptor file can also be read and edited by a": "abs-guide.txt"},{"Bash script (of course). You should be able to find": "abs-guide.txt"},{"most of the functions required within the": "abs-guide.txt"},{"\"is_spammer.bash\" script.": "abs-guide.txt"},{"# End Quickstart.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"666": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"Additional Note": "abs-guide.txt"},{"========== ====": "abs-guide.txt"},{"Michael Zick points out that there is a \"makeviz.bash\" interactive": "abs-guide.txt"},{"Web site at rediris.es. Can't give the full URL, since this is not": "abs-guide.txt"},{"a publically accessible site.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Another anti-spam script.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example A-29. Spammer Hunt": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# whx.sh: \"whois\" spammer lookup": "abs-guide.txt"},{"# Author: Walter Dnes": "abs-guide.txt"},{"# Slight revisions (first section) by ABS Guide author.": "abs-guide.txt"},{"# Used in ABS Guide with permission.": "abs-guide.txt"},{"# Needs version 3.x or greater of Bash to run (because of =~ operator).": "abs-guide.txt"},{"# Commented by script author and ABS Guide author.": "abs-guide.txt"},{"": "abs-guide.txt"},{"E_BADARGS=85": "abs-guide.txt"},{"E_NOHOST=86": "abs-guide.txt"},{"E_TIMEOUT=87": "abs-guide.txt"},{"E_UNDEF=88": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"HOSTWAIT=10": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Specify up to 10 seconds for host query reply.": "abs-guide.txt"},{"# The actual wait may be a bit longer.": "abs-guide.txt"},{"# Output file.": "abs-guide.txt"},{"": "abs-guide.txt"},{"OUTFILE=whois.txt": "abs-guide.txt"},{"PORT=4321": "abs-guide.txt"},{"": "abs-guide.txt"},{"Missing command-line arg.": "abs-guide.txt"},{"Host not found.": "abs-guide.txt"},{"Host lookup timed out.": "abs-guide.txt"},{"Some other (undefined) error.": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [ -z \"$1\" ]": "abs-guide.txt"},{"# Check for (required) command-line arg.": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Usage: $0 domain name or IP address\"": "abs-guide.txt"},{"exit $E_BADARGS": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [[ \"$1\" =~ [a-zA-Z][a-zA-Z]$ ]]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Ends in two alpha chars?": "abs-guide.txt"},{"# It's a domain name &&": "abs-guide.txt"},{"#+ must do host lookup.": "abs-guide.txt"},{"IPADDR=$(host -W $HOSTWAIT $1 | awk '{print $4}')": "abs-guide.txt"},{"# Doing host lookup": "abs-guide.txt"},{"#+ to get IP address.": "abs-guide.txt"},{"# Extract final field.": "abs-guide.txt"},{"else": "abs-guide.txt"},{"IPADDR=\"$1\"": "abs-guide.txt"},{"# Command-line arg was IP address.": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"echo; echo \"IP Address is: \"$IPADDR\"\"; echo": "abs-guide.txt"},{"if [ -e \"$OUTFILE\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"rm -f \"$OUTFILE\"": "abs-guide.txt"},{"echo \"Stale output file \\\"$OUTFILE\\\" removed.\"; echo": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"667": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# Sanity checks.": "abs-guide.txt"},{"# (This section needs more work.)": "abs-guide.txt"},{"# ===============================": "abs-guide.txt"},{"if [ -z \"$IPADDR\" ]": "abs-guide.txt"},{"# No response.": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Host not found!\"": "abs-guide.txt"},{"exit $E_NOHOST": "abs-guide.txt"},{"# Bail out.": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"if [[ \"$IPADDR\" =~ ^[;;] ]]": "abs-guide.txt"},{"# ;; Connection timed out; no servers could be reached.": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Host lookup timed out!\"": "abs-guide.txt"},{"exit $E_TIMEOUT": "abs-guide.txt"},{"# Bail out.": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"if [[ \"$IPADDR\" =~ [(NXDOMAIN)]$ ]]": "abs-guide.txt"},{"# Host xxxxxxxxx.xxx not found: 3(NXDOMAIN)": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Host not found!\"": "abs-guide.txt"},{"exit $E_NOHOST": "abs-guide.txt"},{"# Bail out.": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"if [[ \"$IPADDR\" =~ [(SERVFAIL)]$ ]]": "abs-guide.txt"},{"# Host xxxxxxxxx.xxx not found: 2(SERVFAIL)": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Host not found!\"": "abs-guide.txt"},{"exit $E_NOHOST": "abs-guide.txt"},{"# Bail out.": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"# ======================== Main body of script ========================": "abs-guide.txt"},{"AFRINICquery() {": "abs-guide.txt"},{"# Define the function that queries AFRINIC. Echo a notification to the": "abs-guide.txt"},{"#+ screen, and then run the actual query, redirecting output to $OUTFILE.": "abs-guide.txt"},{"echo \"Searching for $IPADDR in whois.afrinic.net\"": "abs-guide.txt"},{"whois -h whois.afrinic.net \"$IPADDR\" > $OUTFILE": "abs-guide.txt"},{"# Check for presence of reference to an rwhois.": "abs-guide.txt"},{"# Warn about non-functional rwhois.infosat.net server": "abs-guide.txt"},{"#+ and attempt rwhois query.": "abs-guide.txt"},{"if grep -e \"^remarks: .*rwhois\\.[^ ]\\+\" \"$OUTFILE\"": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \" \" >> $OUTFILE": "abs-guide.txt"},{"echo \"***\" >> $OUTFILE": "abs-guide.txt"},{"echo \"***\" >> $OUTFILE": "abs-guide.txt"},{"echo \"Warning: rwhois.infosat.net was not working \\": "abs-guide.txt"},{"as of 2005/02/02\" >> $OUTFILE": "abs-guide.txt"},{"echo \"": "abs-guide.txt"},{"when this script was written.\" >> $OUTFILE": "abs-guide.txt"},{"echo \"***\" >> $OUTFILE": "abs-guide.txt"},{"echo \"***\" >> $OUTFILE": "abs-guide.txt"},{"echo \" \" >> $OUTFILE": "abs-guide.txt"},{"RWHOIS=`grep \"^remarks: .*rwhois\\.[^ ]\\+\" \"$OUTFILE\" | tail -n 1 |\\": "abs-guide.txt"},{"sed \"s/\\(^.*\\)\\(rwhois\\..*\\)\\(:4.*\\)/\\2/\"`": "abs-guide.txt"},{"whois -h ${RWHOIS}:${PORT} \"$IPADDR\" >> $OUTFILE": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"668": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"}": "abs-guide.txt"},{"APNICquery() {": "abs-guide.txt"},{"echo \"Searching for $IPADDR in whois.apnic.net\"": "abs-guide.txt"},{"whois -h whois.apnic.net \"$IPADDR\" > $OUTFILE": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"Just about every country has its own internet registrar.": "abs-guide.txt"},{"I don't normally bother consulting them, because the regional registry": "abs-guide.txt"},{"usually supplies sufficient information.": "abs-guide.txt"},{"There are a few exceptions, where the regional registry simply": "abs-guide.txt"},{"refers to the national registry for direct data.": "abs-guide.txt"},{"These are Japan and South Korea in APNIC, and Brasil in LACNIC.": "abs-guide.txt"},{"The following if statement checks $OUTFILE (whois.txt) for the presence": "abs-guide.txt"},{"of \"KR\" (South Korea) or \"JP\" (Japan) in the country field.": "abs-guide.txt"},{"If either is found, the query is re-run against the appropriate": "abs-guide.txt"},{"national registry.": "abs-guide.txt"},{"if grep -E \"^country:[ ]+KR$\" \"$OUTFILE\"": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Searching for $IPADDR in whois.krnic.net\"": "abs-guide.txt"},{"whois -h whois.krnic.net \"$IPADDR\" >> $OUTFILE": "abs-guide.txt"},{"elif grep -E \"^country:[ ]+JP$\" \"$OUTFILE\"": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Searching for $IPADDR in whois.nic.ad.jp\"": "abs-guide.txt"},{"whois -h whois.nic.ad.jp \"$IPADDR\"/e >> $OUTFILE": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"ARINquery() {": "abs-guide.txt"},{"echo \"Searching for $IPADDR in whois.arin.net\"": "abs-guide.txt"},{"whois -h whois.arin.net \"$IPADDR\" > $OUTFILE": "abs-guide.txt"},{"# Several large internet providers listed by ARIN have their own": "abs-guide.txt"},{"#+ internal whois service, referred to as \"rwhois\".": "abs-guide.txt"},{"# A large block of IP addresses is listed with the provider": "abs-guide.txt"},{"#+ under the ARIN registry.": "abs-guide.txt"},{"# To get the IP addresses of 2nd-level ISPs or other large customers,": "abs-guide.txt"},{"#+ one has to refer to the rwhois server on port 4321.": "abs-guide.txt"},{"# I originally started with a bunch of \"if\" statements checking for": "abs-guide.txt"},{"#+ the larger providers.": "abs-guide.txt"},{"# This approach is unwieldy, and there's always another rwhois server": "abs-guide.txt"},{"#+ that I didn't know about.": "abs-guide.txt"},{"# A more elegant approach is to check $OUTFILE for a reference": "abs-guide.txt"},{"#+ to a whois server, parse that server name out of the comment section,": "abs-guide.txt"},{"#+ and re-run the query against the appropriate rwhois server.": "abs-guide.txt"},{"# The parsing looks a bit ugly, with a long continued line inside": "abs-guide.txt"},{"#+ backticks.": "abs-guide.txt"},{"# But it only has to be done once, and will work as new servers are added.": "abs-guide.txt"},{"#@": "abs-guide.txt"},{"ABS Guide author comment: it isn't all that ugly, and is, in fact,": "abs-guide.txt"},{"#@+ an instructive use of Regular Expressions.": "abs-guide.txt"},{"if grep -E \"^Comment: .*rwhois.[^ ]+\" \"$OUTFILE\"": "abs-guide.txt"},{"then": "abs-guide.txt"},{"RWHOIS=`grep -e \"^Comment:.*rwhois\\.[^ ]\\+\" \"$OUTFILE\" | tail -n 1 |\\": "abs-guide.txt"},{"sed \"s/^\\(.*\\)\\(rwhois\\.[^ ]\\+\\)\\(.*$\\)/\\2/\"`": "abs-guide.txt"},{"echo \"Searching for $IPADDR in ${RWHOIS}\"": "abs-guide.txt"},{"whois -h ${RWHOIS}:${PORT} \"$IPADDR\" >> $OUTFILE": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"}": "abs-guide.txt"},{"LACNICquery() {": "abs-guide.txt"},{"echo \"Searching for $IPADDR in whois.lacnic.net\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"669": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"whois -h whois.lacnic.net \"$IPADDR\" > $OUTFILE": "abs-guide.txt"},{"# The following if statement checks $OUTFILE (whois.txt) for": "abs-guide.txt"},{"#+ the presence of \"BR\" (Brasil) in the country field.": "abs-guide.txt"},{"# If it is found, the query is re-run against whois.registro.br.": "abs-guide.txt"},{"if grep -E \"^country:[ ]+BR$\" \"$OUTFILE\"": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Searching for $IPADDR in whois.registro.br\"": "abs-guide.txt"},{"whois -h whois.registro.br \"$IPADDR\" >> $OUTFILE": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"}": "abs-guide.txt"},{"RIPEquery() {": "abs-guide.txt"},{"echo \"Searching for $IPADDR in whois.ripe.net\"": "abs-guide.txt"},{"whois -h whois.ripe.net \"$IPADDR\" > $OUTFILE": "abs-guide.txt"},{"}": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Initialize a few variables.": "abs-guide.txt"},{"* slash8 is the most significant octet": "abs-guide.txt"},{"* slash16 consists of the two most significant octets": "abs-guide.txt"},{"* octet2 is the second most significant octet": "abs-guide.txt"},{"": "abs-guide.txt"},{"slash8=`echo $IPADDR | cut -d. -f 1`": "abs-guide.txt"},{"if [ -z \"$slash8\" ] # Yet another sanity check.": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Undefined error!\"": "abs-guide.txt"},{"exit $E_UNDEF": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"slash16=`echo $IPADDR | cut -d. -f 1-2`": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^ Period specified as 'cut\" delimiter.": "abs-guide.txt"},{"if [ -z \"$slash16\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Undefined error!\"": "abs-guide.txt"},{"exit $E_UNDEF": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"octet2=`echo $slash16 | cut -d. -f 2`": "abs-guide.txt"},{"if [ -z \"$octet2\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Undefined error!\"": "abs-guide.txt"},{"exit $E_UNDEF": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Check for various odds and ends of reserved space.": "abs-guide.txt"},{"There is no point in querying for those addresses.": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [ $slash8 == 0 ]; then": "abs-guide.txt"},{"echo $IPADDR is '\"This Network\"' space\\; Not querying": "abs-guide.txt"},{"elif [ $slash8 == 10 ]; then": "abs-guide.txt"},{"echo $IPADDR is RFC1918 space\\; Not querying": "abs-guide.txt"},{"elif [ $slash8 == 14 ]; then": "abs-guide.txt"},{"echo $IPADDR is '\"Public Data Network\"' space\\; Not querying": "abs-guide.txt"},{"elif [ $slash8 == 127 ]; then": "abs-guide.txt"},{"echo $IPADDR is loopback space\\; Not querying": "abs-guide.txt"},{"elif [ $slash16 == 169.254 ]; then": "abs-guide.txt"},{"echo $IPADDR is link-local space\\; Not querying": "abs-guide.txt"},{"elif [ $slash8 == 172 ] && [ $octet2 -ge 16 ] && [ $octet2 -le 31 ];then": "abs-guide.txt"},{"echo $IPADDR is RFC1918 space\\; Not querying": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"670": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"elif [": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"elif [": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"elif [": "abs-guide.txt"},{"elif [": "abs-guide.txt"},{"elif [": "abs-guide.txt"},{"elif [": "abs-guide.txt"},{"": "abs-guide.txt"},{"$slash16 == 192.168 ]; then": "abs-guide.txt"},{"$IPADDR is RFC1918 space\\; Not": "abs-guide.txt"},{"$slash8 -ge 224 ]; then": "abs-guide.txt"},{"$IPADDR is either Multicast or": "abs-guide.txt"},{"$slash8 -ge 200 ] && [ $slash8": "abs-guide.txt"},{"$slash8 -ge 202 ] && [ $slash8": "abs-guide.txt"},{"$slash8 -ge 210 ] && [ $slash8": "abs-guide.txt"},{"$slash8 -ge 218 ] && [ $slash8": "abs-guide.txt"},{"": "abs-guide.txt"},{"querying": "abs-guide.txt"},{"reserved space\\; Not querying": "abs-guide.txt"},{"-le 201 ]; then LACNICquery \"$IPADDR\"": "abs-guide.txt"},{"-le 203 ]; then APNICquery \"$IPADDR\"": "abs-guide.txt"},{"-le 211 ]; then APNICquery \"$IPADDR\"": "abs-guide.txt"},{"-le 223 ]; then APNICquery \"$IPADDR\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# If we got this far without making a decision, query ARIN.": "abs-guide.txt"},{"# If a reference is found in $OUTFILE to APNIC, AFRINIC, LACNIC, or RIPE,": "abs-guide.txt"},{"#+ query the appropriate whois server.": "abs-guide.txt"},{"else": "abs-guide.txt"},{"ARINquery \"$IPADDR\"": "abs-guide.txt"},{"if grep \"whois.afrinic.net\" \"$OUTFILE\"; then": "abs-guide.txt"},{"AFRINICquery \"$IPADDR\"": "abs-guide.txt"},{"elif grep -E \"^OrgID:[ ]+RIPE$\" \"$OUTFILE\"; then": "abs-guide.txt"},{"RIPEquery \"$IPADDR\"": "abs-guide.txt"},{"elif grep -E \"^OrgID:[ ]+APNIC$\" \"$OUTFILE\"; then": "abs-guide.txt"},{"APNICquery \"$IPADDR\"": "abs-guide.txt"},{"elif grep -E \"^OrgID:[ ]+LACNIC$\" \"$OUTFILE\"; then": "abs-guide.txt"},{"LACNICquery \"$IPADDR\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"#@": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#@": "abs-guide.txt"},{"": "abs-guide.txt"},{"--------------------------------------------------------------Try also:": "abs-guide.txt"},{"wget http://logi.cc/nw/whois.php3?ACTION=doQuery&DOMAIN=$IPADDR": "abs-guide.txt"},{"---------------------------------------------------------------": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"We've now finished the querying.": "abs-guide.txt"},{"Echo a copy of the final result to the screen.": "abs-guide.txt"},{"": "abs-guide.txt"},{"cat $OUTFILE": "abs-guide.txt"},{"# Or \"less $OUTFILE\" . . .": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"#@": "abs-guide.txt"},{"#@": "abs-guide.txt"},{"#@": "abs-guide.txt"},{"#@+": "abs-guide.txt"},{"#@+": "abs-guide.txt"},{"#@": "abs-guide.txt"},{"": "abs-guide.txt"},{"ABS Guide author comments:": "abs-guide.txt"},{"Nothing fancy here, but still a very useful tool for hunting spammers.": "abs-guide.txt"},{"Sure, the script can be cleaned up some, and it's still a bit buggy,": "abs-guide.txt"},{"(exercise for reader), but all the same, it's a nice piece of coding": "abs-guide.txt"},{"by Walter Dnes.": "abs-guide.txt"},{"Thank you!": "abs-guide.txt"},{"": "abs-guide.txt"},{"\"Little Monster's\" front end to wget.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example A-30. Making wget easier to use": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# wgetter2.bash": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Author: Little Monster [monster@monstruum.co.uk]": "abs-guide.txt"},{"==> Used in ABS Guide with permission of script author.": "abs-guide.txt"},{"==> This script still needs debugging and fixups (exercise for reader).": "abs-guide.txt"},{"==> It could also use some additional editing in the comments.": "abs-guide.txt"},{"": "abs-guide.txt"},{"This is wgetter2 --": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"671": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"#+ a Bash script to make wget a bit more friendly, and save typing.": "abs-guide.txt"},{"# Carefully crafted by Little Monster.": "abs-guide.txt"},{"# More or less complete on 02/02/2005.": "abs-guide.txt"},{"# If you think this script can be improved,": "abs-guide.txt"},{"#+ email me at: monster@monstruum.co.uk": "abs-guide.txt"},{"# ==> and cc: to the author of the ABS Guide, please.": "abs-guide.txt"},{"# This script is licenced under the GPL.": "abs-guide.txt"},{"# You are free to copy, alter and re-use it,": "abs-guide.txt"},{"#+ but please don't try to claim you wrote it.": "abs-guide.txt"},{"# Log your changes here instead.": "abs-guide.txt"},{"# =======================================================================": "abs-guide.txt"},{"# changelog:": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"07/02/2005.": "abs-guide.txt"},{"02/02/2005.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Fixups by Little Monster.": "abs-guide.txt"},{"Minor additions by Little Monster.": "abs-guide.txt"},{"(See after # +++++++++++ )": "abs-guide.txt"},{"29/01/2005. Minor stylistic edits and cleanups by author of ABS Guide.": "abs-guide.txt"},{"Added exit error codes.": "abs-guide.txt"},{"22/11/2004. Finished initial version of second version of wgetter:": "abs-guide.txt"},{"wgetter2 is born.": "abs-guide.txt"},{"01/12/2004. Changed 'runn' function so it can be run 2 ways -either ask for a file name or have one input on the CL.": "abs-guide.txt"},{"01/12/2004. Made sensible handling of no URL's given.": "abs-guide.txt"},{"01/12/2004. Made loop of main options, so you don't": "abs-guide.txt"},{"have to keep calling wgetter 2 all the time.": "abs-guide.txt"},{"Runs as a session instead.": "abs-guide.txt"},{"01/12/2004. Added looping to 'runn' function.": "abs-guide.txt"},{"Simplified and improved.": "abs-guide.txt"},{"01/12/2004. Added state to recursion setting.": "abs-guide.txt"},{"Enables re-use of previous value.": "abs-guide.txt"},{"05/12/2004. Modified the file detection routine in the 'runn' function": "abs-guide.txt"},{"so it's not fooled by empty values, and is cleaner.": "abs-guide.txt"},{"01/02/2004. Added cookie finding routine from later version (which": "abs-guide.txt"},{"isn't ready yet), so as not to have hard-coded paths.": "abs-guide.txt"},{"=======================================================================": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Error codes for": "abs-guide.txt"},{"E_USAGE=67": "abs-guide.txt"},{"E_NO_OPTS=68": "abs-guide.txt"},{"E_NO_URLS=69": "abs-guide.txt"},{"E_NO_SAVEFILE=70": "abs-guide.txt"},{"E_USER_EXIT=71": "abs-guide.txt"},{"": "abs-guide.txt"},{"abnormal exit.": "abs-guide.txt"},{"# Usage message, then quit.": "abs-guide.txt"},{"# No command-line args entered.": "abs-guide.txt"},{"# No URLs passed to script.": "abs-guide.txt"},{"# No save filename passed to script.": "abs-guide.txt"},{"# User decides to quit.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Basic default wget command we want to use.": "abs-guide.txt"},{"# This is the place to change it, if required.": "abs-guide.txt"},{"# NB: if using a proxy, set http_proxy = yourproxy in .wgetrc.": "abs-guide.txt"},{"# Otherwise delete --proxy=on, below.": "abs-guide.txt"},{"# ====================================================================": "abs-guide.txt"},{"CommandA=\"wget -nc -c -t 5 --progress=bar --random-wait --proxy=on -r\"": "abs-guide.txt"},{"# ====================================================================": "abs-guide.txt"},{"": "abs-guide.txt"},{"# -------------------------------------------------------------------# Set some other variables and explain them.": "abs-guide.txt"},{"pattern=\" -A .jpg,.JPG,.jpeg,.JPEG,.gif,.GIF,.htm,.html,.shtml,.php\"": "abs-guide.txt"},{"# wget's option to only get certain types of file.": "abs-guide.txt"},{"# comment out if not using": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"672": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"today=`date +%F`": "abs-guide.txt"},{"home=$HOME": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Used for a filename.": "abs-guide.txt"},{"# Set HOME to an internal variable.": "abs-guide.txt"},{"# In case some other path is used, change it here.": "abs-guide.txt"},{"depthDefault=3": "abs-guide.txt"},{"# Set a sensible default recursion.": "abs-guide.txt"},{"Depth=$depthDefault # Otherwise user feedback doesn't tie in properly.": "abs-guide.txt"},{"RefA=\"\"": "abs-guide.txt"},{"# Set blank referring page.": "abs-guide.txt"},{"Flag=\"\"": "abs-guide.txt"},{"# Default to not saving anything,": "abs-guide.txt"},{"#+ or whatever else might be wanted in future.": "abs-guide.txt"},{"lister=\"\"": "abs-guide.txt"},{"# Used for passing a list of urls directly to wget.": "abs-guide.txt"},{"Woptions=\"\"": "abs-guide.txt"},{"# Used for passing wget some options for itself.": "abs-guide.txt"},{"inFile=\"\"": "abs-guide.txt"},{"# Used for the run function.": "abs-guide.txt"},{"newFile=\"\"": "abs-guide.txt"},{"# Used for the run function.": "abs-guide.txt"},{"savePath=\"$home/w-save\"": "abs-guide.txt"},{"Config=\"$home/.wgetter2rc\"": "abs-guide.txt"},{"# This is where some variables can be stored,": "abs-guide.txt"},{"#+ if permanently changed from within the script.": "abs-guide.txt"},{"Cookie_List=\"$home/.cookielist\"": "abs-guide.txt"},{"# So we know where the cookies are kept . . .": "abs-guide.txt"},{"cFlag=\"\"": "abs-guide.txt"},{"# Part of the cookie file selection routine.": "abs-guide.txt"},{"# Define the options available. Easy to change letters here if needed.": "abs-guide.txt"},{"# These are the optional options; you don't just wait to be asked.": "abs-guide.txt"},{"save=s": "abs-guide.txt"},{"# Save command instead of executing it.": "abs-guide.txt"},{"cook=c": "abs-guide.txt"},{"# Change cookie file for this session.": "abs-guide.txt"},{"help=h": "abs-guide.txt"},{"# Usage guide.": "abs-guide.txt"},{"list=l": "abs-guide.txt"},{"# Pass wget the -i option and URL list.": "abs-guide.txt"},{"runn=r": "abs-guide.txt"},{"# Run saved commands as an argument to the option.": "abs-guide.txt"},{"inpu=i": "abs-guide.txt"},{"# Run saved commands interactively.": "abs-guide.txt"},{"wopt=w": "abs-guide.txt"},{"# Allow to enter options to pass directly to wget.": "abs-guide.txt"},{"# --------------------------------------------------------------------": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [ -z": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"exit": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"\"$1\" ]; then": "abs-guide.txt"},{"# Make sure we get something for wget to eat.": "abs-guide.txt"},{"\"You must at least enter a URL or option!\"": "abs-guide.txt"},{"\"-$help for usage.\"": "abs-guide.txt"},{"$E_NO_OPTS": "abs-guide.txt"},{"": "abs-guide.txt"},{"# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++": "abs-guide.txt"},{"# added added added added added added added added added added added added": "abs-guide.txt"},{"if [ ! -e \"$Config\" ]; then": "abs-guide.txt"},{"# See if configuration file exists.": "abs-guide.txt"},{"echo \"Creating configuration file, $Config\"": "abs-guide.txt"},{"echo \"# This is the configuration file for wgetter2\" > \"$Config\"": "abs-guide.txt"},{"echo \"# Your customised settings will be saved in this file\" >> \"$Config\"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"source $Config": "abs-guide.txt"},{"# Import variables we set outside the script.": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"if [ ! -e \"$Cookie_List\" ]; then": "abs-guide.txt"},{"# Set up a list of cookie files, if there isn't one.": "abs-guide.txt"},{"echo \"Hunting for cookies . . .\"": "abs-guide.txt"},{"find -name cookies.txt >> $Cookie_List # Create the list of cookie files.": "abs-guide.txt"},{"fi # Isolate this in its own 'if' statement,": "abs-guide.txt"},{"#+ in case we got interrupted while searching.": "abs-guide.txt"},{"if [ -z \"$cFlag\" ]; then # If we haven't already done this . . .": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"# Make a nice space after the command prompt.": "abs-guide.txt"},{"echo \"Looks like you haven't set up your source of cookies yet.\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"673": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"n=0": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Make sure the counter": "abs-guide.txt"},{"#+ doesn't contain random values.": "abs-guide.txt"},{"": "abs-guide.txt"},{"while read; do": "abs-guide.txt"},{"Cookies[$n]=$REPLY # Put the cookie files we found into an array.": "abs-guide.txt"},{"echo \"$n) ${Cookies[$n]}\" # Create a menu.": "abs-guide.txt"},{"n=$(( n + 1 ))": "abs-guide.txt"},{"# Increment the counter.": "abs-guide.txt"},{"done < $Cookie_List": "abs-guide.txt"},{"# Feed the read statement.": "abs-guide.txt"},{"echo \"Enter the number of the cookie file you want to use.\"": "abs-guide.txt"},{"echo \"If you won't be using cookies, just press RETURN.\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"I won't be asking this again. Edit $Config\"": "abs-guide.txt"},{"echo \"If you decide to change at a later date\"": "abs-guide.txt"},{"echo \"or use the -${cook} option for per session changes.\"": "abs-guide.txt"},{"read": "abs-guide.txt"},{"if [ ! -z $REPLY ]; then": "abs-guide.txt"},{"# User didn't just press return.": "abs-guide.txt"},{"Cookie=\" --load-cookies ${Cookies[$REPLY]}\"": "abs-guide.txt"},{"# Set the variable here as well as in the config file.": "abs-guide.txt"},{"echo \"Cookie=\\\" --load-cookies ${Cookies[$REPLY]}\\\"\" >> $Config": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"echo \"cFlag=1\" >> $Config # So we know not to ask again.": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# end added section end added section end added section end added section": "abs-guide.txt"},{"# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Another variable.": "abs-guide.txt"},{"# This one may or may not be subject": "abs-guide.txt"},{"# A bit like the small print.": "abs-guide.txt"},{"CookiesON=$Cookie": "abs-guide.txt"},{"# echo \"cookie file is $CookiesON\" #": "abs-guide.txt"},{"# echo \"home is ${home}\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"to variation.": "abs-guide.txt"},{"": "abs-guide.txt"},{"For debugging.": "abs-guide.txt"},{"For debugging.": "abs-guide.txt"},{"Got caught with this one!": "abs-guide.txt"},{"": "abs-guide.txt"},{"wopts()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"echo \"Enter options to pass to wget.\"": "abs-guide.txt"},{"echo \"It is assumed you know what you're doing.\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"You can pass their arguments here too.\"": "abs-guide.txt"},{"# That is to say, everything passed here is passed to wget.": "abs-guide.txt"},{"read Wopts": "abs-guide.txt"},{"# Read in the options to be passed to wget.": "abs-guide.txt"},{"Woptions=\" $Wopts\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^ Why the leading space?": "abs-guide.txt"},{"# Assign to another variable.": "abs-guide.txt"},{"# Just for fun, or something . . .": "abs-guide.txt"},{"echo \"passing options ${Wopts} to wget\"": "abs-guide.txt"},{"# Mainly for debugging.": "abs-guide.txt"},{"# Is cute.": "abs-guide.txt"},{"return": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"save_func()": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"674": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"{": "abs-guide.txt"},{"echo \"Settings will be saved.\"": "abs-guide.txt"},{"if [ ! -d $savePath ]; then # See if directory exists.": "abs-guide.txt"},{"mkdir $savePath": "abs-guide.txt"},{"# Create the directory to save things in": "abs-guide.txt"},{"#+ if it isn't already there.": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"Flag=S": "abs-guide.txt"},{"# Tell the final bit of code what to do.": "abs-guide.txt"},{"# Set a flag since stuff is done in main.": "abs-guide.txt"},{"return": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"usage() # Tell them how it works.": "abs-guide.txt"},{"{": "abs-guide.txt"},{"echo \"Welcome to wgetter. This is a front end to wget.\"": "abs-guide.txt"},{"echo \"It will always run wget with these options:\"": "abs-guide.txt"},{"echo \"$CommandA\"": "abs-guide.txt"},{"echo \"and the pattern to match: $pattern \\": "abs-guide.txt"},{"(which you can change at the top of this script).\"": "abs-guide.txt"},{"echo \"It will also ask you for recursion depth, \\": "abs-guide.txt"},{"and if you want to use a referring page.\"": "abs-guide.txt"},{"echo \"Wgetter accepts the following options:\"": "abs-guide.txt"},{"echo \"\"": "abs-guide.txt"},{"echo \"-$help : Display this help.\"": "abs-guide.txt"},{"echo \"-$save : Save the command to a file $savePath/wget-($today) \\": "abs-guide.txt"},{"instead of running it.\"": "abs-guide.txt"},{"echo \"-$runn : Run saved wget commands instead of starting a new one -\"": "abs-guide.txt"},{"echo \"Enter filename as argument to this option.\"": "abs-guide.txt"},{"echo \"-$inpu : Run saved wget commands interactively --\"": "abs-guide.txt"},{"echo \"The script will ask you for the filename.\"": "abs-guide.txt"},{"echo \"-$cook : Change the cookies file for this session.\"": "abs-guide.txt"},{"echo \"-$list : Tell wget to use URL's from a list instead of \\": "abs-guide.txt"},{"from the command-line.\"": "abs-guide.txt"},{"echo \"-$wopt : Pass any other options direct to wget.\"": "abs-guide.txt"},{"echo \"\"": "abs-guide.txt"},{"echo \"See the wget man page for additional options \\": "abs-guide.txt"},{"you can pass to wget.\"": "abs-guide.txt"},{"echo \"\"": "abs-guide.txt"},{"exit $E_USAGE": "abs-guide.txt"},{"": "abs-guide.txt"},{"# End here. Don't process anything else.": "abs-guide.txt"},{"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"list_func() # Gives the user the option to use the -i option to wget,": "abs-guide.txt"},{"#+ and a list of URLs.": "abs-guide.txt"},{"{": "abs-guide.txt"},{"while [ 1 ]; do": "abs-guide.txt"},{"echo \"Enter the name of the file containing URL's (press q to change": "abs-guide.txt"},{"your mind).\"": "abs-guide.txt"},{"read urlfile": "abs-guide.txt"},{"if [ ! -e \"$urlfile\" ] && [ \"$urlfile\" != q ]; then": "abs-guide.txt"},{"# Look for a file, or the quit option.": "abs-guide.txt"},{"echo \"That file does not exist!\"": "abs-guide.txt"},{"elif [ \"$urlfile\" = q ]; then # Check quit option.": "abs-guide.txt"},{"echo \"Not using a url list.\"": "abs-guide.txt"},{"return": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo \"using $urlfile.\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"675": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"echo \"If you gave url's on the command-line, I'll use those first.\"": "abs-guide.txt"},{"# Report wget standard behaviour to the user.": "abs-guide.txt"},{"lister=\" -i $urlfile\" # This is what we want to pass to wget.": "abs-guide.txt"},{"return": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"done": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"cookie_func() # Give the user the option to use a different cookie file.": "abs-guide.txt"},{"{": "abs-guide.txt"},{"while [ 1 ]; do": "abs-guide.txt"},{"echo \"Change the cookies file. Press return if you don't want to change": "abs-guide.txt"},{"it.\"": "abs-guide.txt"},{"read Cookies": "abs-guide.txt"},{"# NB: this is not the same as Cookie, earlier.": "abs-guide.txt"},{"# There is an 's' on the end.": "abs-guide.txt"},{"# Bit like chocolate chips.": "abs-guide.txt"},{"if [ -z \"$Cookies\" ]; then": "abs-guide.txt"},{"# Escape clause for wusses.": "abs-guide.txt"},{"return": "abs-guide.txt"},{"elif [ ! -e \"$Cookies\" ]; then": "abs-guide.txt"},{"echo \"File does not exist. Try again.\" # Keep em going . . .": "abs-guide.txt"},{"else": "abs-guide.txt"},{"CookiesON=\" --load-cookies $Cookies\"": "abs-guide.txt"},{"# File is good -- use it!": "abs-guide.txt"},{"return": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"done": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"run_func()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"if [ -z \"$OPTARG\" ]; then": "abs-guide.txt"},{"# Test to see if we used the in-line option or the query one.": "abs-guide.txt"},{"if [ ! -d \"$savePath\" ]; then": "abs-guide.txt"},{"# If directory doesn't exist . . .": "abs-guide.txt"},{"echo \"$savePath does not appear to exist.\"": "abs-guide.txt"},{"echo \"Please supply path and filename of saved wget commands:\"": "abs-guide.txt"},{"read newFile": "abs-guide.txt"},{"until [ -f \"$newFile\" ]; do # Keep going till we get something.": "abs-guide.txt"},{"echo \"Sorry, that file does not exist. Please try again.\"": "abs-guide.txt"},{"# Try really hard to get something.": "abs-guide.txt"},{"read newFile": "abs-guide.txt"},{"done": "abs-guide.txt"},{"": "abs-guide.txt"},{"# ----------------------------------------------------------------------#": "abs-guide.txt"},{"if [ -z ( grep wget ${newfile} ) ]; then": "abs-guide.txt"},{"# Assume they haven't got the right file and bail out.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"echo \"Sorry, that file does not contain wget commands. Aborting.\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"exit": "abs-guide.txt"},{"#": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# This is bogus code.": "abs-guide.txt"},{"# It doesn't actually work.": "abs-guide.txt"},{"# If anyone wants to fix it, feel free!": "abs-guide.txt"},{"# -----------------------------------------------------------------------": "abs-guide.txt"},{"": "abs-guide.txt"},{"filePath=\"${newFile}\"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo \"Save path is $savePath\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"676": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"echo \"Please enter name of the file which you want to use.\"": "abs-guide.txt"},{"echo \"You have a choice of:\"": "abs-guide.txt"},{"ls $savePath": "abs-guide.txt"},{"# Give them a choice.": "abs-guide.txt"},{"read inFile": "abs-guide.txt"},{"until [ -f \"$savePath/$inFile\" ]; do": "abs-guide.txt"},{"# Keep going till": "abs-guide.txt"},{"#+ we get something.": "abs-guide.txt"},{"if [ ! -f \"${savePath}/${inFile}\" ]; then # If file doesn't exist.": "abs-guide.txt"},{"echo \"Sorry, that file does not exist. Please choose from:\"": "abs-guide.txt"},{"ls $savePath": "abs-guide.txt"},{"# If a mistake is made.": "abs-guide.txt"},{"read inFile": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"done": "abs-guide.txt"},{"filePath=\"${savePath}/${inFile}\" # Make one variable . . .": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"else filePath=\"${savePath}/${OPTARG}\"": "abs-guide.txt"},{"# Which can be many things . . .": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"if [ ! -f \"$filePath\" ]; then": "abs-guide.txt"},{"# If a bogus file got through.": "abs-guide.txt"},{"echo \"You did not specify a suitable file.\"": "abs-guide.txt"},{"echo \"Run this script with the -${save} option first.\"": "abs-guide.txt"},{"echo \"Aborting.\"": "abs-guide.txt"},{"exit $E_NO_SAVEFILE": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"echo \"Using: $filePath\"": "abs-guide.txt"},{"while read; do": "abs-guide.txt"},{"eval $REPLY": "abs-guide.txt"},{"echo \"Completed: $REPLY\"": "abs-guide.txt"},{"done < $filePath # Feed the actual file we are using into a 'while' loop.": "abs-guide.txt"},{"exit": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Fish out any options we are using for the script.": "abs-guide.txt"},{"# This is based on the demo in \"Learning The Bash Shell\" (O'Reilly).": "abs-guide.txt"},{"while getopts \":$save$cook$help$list$runn:$inpu$wopt\" opt": "abs-guide.txt"},{"do": "abs-guide.txt"},{"case $opt in": "abs-guide.txt"},{"$save) save_func;;": "abs-guide.txt"},{"# Save some wgetter sessions for later.": "abs-guide.txt"},{"$cook) cookie_func;; # Change cookie file.": "abs-guide.txt"},{"$help) usage;;": "abs-guide.txt"},{"# Get help.": "abs-guide.txt"},{"$list) list_func;;": "abs-guide.txt"},{"# Allow wget to use a list of URLs.": "abs-guide.txt"},{"$runn) run_func;;": "abs-guide.txt"},{"# Useful if you are calling wgetter from,": "abs-guide.txt"},{"#+ for example, a cron script.": "abs-guide.txt"},{"$inpu) run_func;;": "abs-guide.txt"},{"# When you don't know what your files are named.": "abs-guide.txt"},{"$wopt) wopts;;": "abs-guide.txt"},{"# Pass options directly to wget.": "abs-guide.txt"},{"\\?) echo \"Not a valid option.\"": "abs-guide.txt"},{"echo \"Use -${wopt} to pass options directly to wget,\"": "abs-guide.txt"},{"echo \"or -${help} for help\";;": "abs-guide.txt"},{"# Catch anything else.": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"done": "abs-guide.txt"},{"shift $((OPTIND - 1))": "abs-guide.txt"},{"# Do funky magic stuff with $#.": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [ -z \"$1\" ] && [ -z \"$lister\" ]; then": "abs-guide.txt"},{"# We should be left with at least one URL": "abs-guide.txt"},{"#+ on the command-line, unless a list is": "abs-guide.txt"},{"#+ being used -- catch empty CL's.": "abs-guide.txt"},{"echo \"No URL's given! You must enter them on the same line as wgetter2.\"": "abs-guide.txt"},{"echo \"E.g., wgetter2 http://somesite http://anothersite.\"": "abs-guide.txt"},{"echo \"Use $help option for more information.\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"677": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"exit $E_NO_URLS": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Bail out, with appropriate error code.": "abs-guide.txt"},{"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"URLS=\" $@\"": "abs-guide.txt"},{"# Use this so that URL list can be changed if we stay in the option loop.": "abs-guide.txt"},{"while [ 1 ]; do": "abs-guide.txt"},{"# This is where we ask for the most used options.": "abs-guide.txt"},{"# (Mostly unchanged from version 1 of wgetter)": "abs-guide.txt"},{"if [ -z $curDepth ]; then": "abs-guide.txt"},{"Current=\"\"": "abs-guide.txt"},{"else Current=\" Current value is $curDepth\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"echo \"How deep should I go? \\": "abs-guide.txt"},{"(integer: Default is $depthDefault.$Current)\"": "abs-guide.txt"},{"read Depth": "abs-guide.txt"},{"# Recursion -- how far should we go?": "abs-guide.txt"},{"inputB=\"\"": "abs-guide.txt"},{"# Reset this to blank on each pass of the loop.": "abs-guide.txt"},{"echo \"Enter the name of the referring page (default is none).\"": "abs-guide.txt"},{"read inputB # Need this for some sites.": "abs-guide.txt"},{"echo \"Do you want to have the output logged to the terminal\"": "abs-guide.txt"},{"echo \"(y/n, default is yes)?\"": "abs-guide.txt"},{"read noHide # Otherwise wget will just log it to a file.": "abs-guide.txt"},{"case $noHide in": "abs-guide.txt"},{"# Now you see me, now you don't.": "abs-guide.txt"},{"y|Y ) hide=\"\";;": "abs-guide.txt"},{"n|N ) hide=\" -b\";;": "abs-guide.txt"},{"* ) hide=\"\";;": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"if [ -z ${Depth} ]; then": "abs-guide.txt"},{"# User accepted either default or current depth,": "abs-guide.txt"},{"#+ in which case Depth is now empty.": "abs-guide.txt"},{"if [ -z ${curDepth} ]; then": "abs-guide.txt"},{"# See if a depth was set on a previous iteration.": "abs-guide.txt"},{"Depth=\"$depthDefault\"": "abs-guide.txt"},{"# Set the default recursion depth if nothing": "abs-guide.txt"},{"#+ else to use.": "abs-guide.txt"},{"else Depth=\"$curDepth\" # Otherwise, set the one we used before.": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"Recurse=\" -l $Depth\"": "abs-guide.txt"},{"# Set how deep we want to go.": "abs-guide.txt"},{"curDepth=$Depth": "abs-guide.txt"},{"# Remember setting for next time.": "abs-guide.txt"},{"if [ ! -z $inputB ]; then": "abs-guide.txt"},{"RefA=\" --referer=$inputB\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Option to use referring page.": "abs-guide.txt"},{"": "abs-guide.txt"},{"WGETTER=\"${CommandA}${pattern}${hide}${RefA}${Recurse}\\": "abs-guide.txt"},{"${CookiesON}${lister}${Woptions}${URLS}\"": "abs-guide.txt"},{"# Just string the whole lot together . . .": "abs-guide.txt"},{"# NB: no embedded spaces.": "abs-guide.txt"},{"# They are in the individual elements so that if any are empty,": "abs-guide.txt"},{"#+ we don't get an extra space.": "abs-guide.txt"},{"if [ -z \"${CookiesON}\" ] && [ \"$cFlag\" = \"1\" ] ; then": "abs-guide.txt"},{"echo \"Warning -- can't find cookie file\"": "abs-guide.txt"},{"# This should be changed,": "abs-guide.txt"},{"#+ in case the user has opted to not use cookies.": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"if [ \"$Flag\" = \"S\" ]; then": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"678": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"echo \"$WGETTER\" >> $savePath/wget-${today}": "abs-guide.txt"},{"# Create a unique filename for today, or append to it if it exists.": "abs-guide.txt"},{"echo \"$inputB\" >> $savePath/site-list-${today}": "abs-guide.txt"},{"# Make a list, so it's easy to refer back to,": "abs-guide.txt"},{"#+ since the whole command is a bit confusing to look at.": "abs-guide.txt"},{"echo \"Command saved to the file $savePath/wget-${today}\"": "abs-guide.txt"},{"# Tell the user.": "abs-guide.txt"},{"echo \"Referring page URL saved to the file$ \\": "abs-guide.txt"},{"savePath/site-list-${today}\"": "abs-guide.txt"},{"# Tell the user.": "abs-guide.txt"},{"Saver=\" with save option\"": "abs-guide.txt"},{"# Stick this somewhere, so it appears in the loop if set.": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo \"*****************\"": "abs-guide.txt"},{"echo \"*****Getting*****\"": "abs-guide.txt"},{"echo \"*****************\"": "abs-guide.txt"},{"echo \"\"": "abs-guide.txt"},{"echo \"$WGETTER\"": "abs-guide.txt"},{"echo \"\"": "abs-guide.txt"},{"echo \"*****************\"": "abs-guide.txt"},{"eval \"$WGETTER\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"echo \"\"": "abs-guide.txt"},{"echo \"Starting over$Saver.\"": "abs-guide.txt"},{"echo \"If you want to stop, press q.\"": "abs-guide.txt"},{"echo \"Otherwise, enter some URL's:\"": "abs-guide.txt"},{"# Let them go again. Tell about save option being set.": "abs-guide.txt"},{"read": "abs-guide.txt"},{"case $REPLY in": "abs-guide.txt"},{"# Need to change this to a 'trap' clause.": "abs-guide.txt"},{"q|Q ) exit $E_USER_EXIT;; # Exercise for the reader?": "abs-guide.txt"},{"* ) URLS=\" $REPLY\";;": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"echo \"\"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example A-31. A podcasting script": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"bashpodder.sh:": "abs-guide.txt"},{"By Linc 10/1/2004": "abs-guide.txt"},{"Find the latest script at": "abs-guide.txt"},{"http://linc.homeunix.org:8080/scripts/bashpodder": "abs-guide.txt"},{"Last revision 12/14/2004 - Many Contributors!": "abs-guide.txt"},{"If you use this and have made improvements or have comments": "abs-guide.txt"},{"drop me an email at linc dot fessenden at gmail dot com": "abs-guide.txt"},{"I'd appreciate it!": "abs-guide.txt"},{"": "abs-guide.txt"},{"# ==>": "abs-guide.txt"},{"": "abs-guide.txt"},{"ABS Guide extra comments.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# ==> Author of this script has kindly granted permission": "abs-guide.txt"},{"# ==>+ for inclusion in ABS Guide.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"679": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# ==> ################################################################": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# ==> What is \"podcasting\"?": "abs-guide.txt"},{"# ==> It's broadcasting \"radio shows\" over the Internet.": "abs-guide.txt"},{"# ==> These shows can be played on iPods and other music file players.": "abs-guide.txt"},{"# ==> This script makes it possible.": "abs-guide.txt"},{"# ==> See documentation at the script author's site, above.": "abs-guide.txt"},{"# ==> ################################################################": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Make script crontab friendly:": "abs-guide.txt"},{"cd $(dirname $0)": "abs-guide.txt"},{"# ==> Change to directory where this script lives.": "abs-guide.txt"},{"# datadir is the directory you want podcasts saved to:": "abs-guide.txt"},{"datadir=$(date +%Y-%m-%d)": "abs-guide.txt"},{"# ==> Will create a date-labeled directory, named: YYYY-MM-DD": "abs-guide.txt"},{"# Check for and create datadir if necessary:": "abs-guide.txt"},{"if test ! -d $datadir": "abs-guide.txt"},{"then": "abs-guide.txt"},{"mkdir $datadir": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# Delete any temp file:": "abs-guide.txt"},{"rm -f temp.log": "abs-guide.txt"},{"# Read the bp.conf file and wget any url not already": "abs-guide.txt"},{"#+ in the podcast.log file:": "abs-guide.txt"},{"while read podcast": "abs-guide.txt"},{"do # ==> Main action follows.": "abs-guide.txt"},{"file=$(wget -q $podcast -O - | tr '\\r' '\\n' | tr \\' \\\" | \\": "abs-guide.txt"},{"sed -n 's/.*url=\"\\([^\"]*\\)\".*/\\1/p')": "abs-guide.txt"},{"for url in $file": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo $url >> temp.log": "abs-guide.txt"},{"if ! grep \"$url\" podcast.log > /dev/null": "abs-guide.txt"},{"then": "abs-guide.txt"},{"wget -q -P $datadir \"$url\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"done": "abs-guide.txt"},{"done < bp.conf": "abs-guide.txt"},{"# Move dynamically created log file to permanent log file:": "abs-guide.txt"},{"cat podcast.log >> temp.log": "abs-guide.txt"},{"sort temp.log | uniq > podcast.log": "abs-guide.txt"},{"rm temp.log": "abs-guide.txt"},{"# Create an m3u playlist:": "abs-guide.txt"},{"ls $datadir | grep -v m3u > $datadir/podcast.m3u": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"#################################################": "abs-guide.txt"},{"For a different scripting approach to Podcasting,": "abs-guide.txt"},{"see Phil Salkie's article,": "abs-guide.txt"},{"\"Internet Radio to Podcast with Shell Tools\"": "abs-guide.txt"},{"in the September, 2005 issue of LINUX JOURNAL,": "abs-guide.txt"},{"http://www.linuxjournal.com/article/8171": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"680": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"#################################################": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example A-32. Nightly backup to a firewire HD": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# nightly-backup.sh": "abs-guide.txt"},{"# http://www.richardneill.org/source.php#nightly-backup-rsync": "abs-guide.txt"},{"# Copyright (c) 2005 Richard Neill <backup@richardneill.org>.": "abs-guide.txt"},{"# This is Free Software licensed under the GNU GPL.": "abs-guide.txt"},{"# ==> Included in ABS Guide with script author's kind permission.": "abs-guide.txt"},{"# ==> (Thanks!)": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"This does a backup from the host computer to a locally connected": "abs-guide.txt"},{"firewire HDD using rsync and ssh.": "abs-guide.txt"},{"(Script should work with USB-connected device (see lines 40-43).": "abs-guide.txt"},{"It then rotates the backups.": "abs-guide.txt"},{"Run it via cron every night at 5am.": "abs-guide.txt"},{"This only backs up the home directory.": "abs-guide.txt"},{"If ownerships (other than the user's) should be preserved,": "abs-guide.txt"},{"then run the rsync process as root (and re-instate the -o).": "abs-guide.txt"},{"We save every day for 7 days, then every week for 4 weeks,": "abs-guide.txt"},{"then every month for 3 months.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# See: http://www.mikerubel.org/computers/rsync_snapshots/": "abs-guide.txt"},{"#+ for more explanation of the theory.": "abs-guide.txt"},{"# Save as: $HOME/bin/nightly-backup_firewire-hdd.sh": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Known bugs:": "abs-guide.txt"},{"---------i) Ideally, we want to exclude ~/.tmp and the browser caches.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# ii) If the user is sitting at the computer at 5am,": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"and files are modified while the rsync is occurring,": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"then the BACKUP_JUSTINCASE branch gets triggered.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"To some extent, this is a": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"feature, but it also causes a \"disk-space leak\".": "abs-guide.txt"},{"": "abs-guide.txt"},{"##### BEGIN CONFIGURATION SECTION ############################################": "abs-guide.txt"},{"LOCAL_USER=rjn": "abs-guide.txt"},{"# User whose home directory should be backed up.": "abs-guide.txt"},{"MOUNT_POINT=/backup": "abs-guide.txt"},{"# Mountpoint of backup drive.": "abs-guide.txt"},{"# NO trailing slash!": "abs-guide.txt"},{"# This must be unique (eg using a udev symlink)": "abs-guide.txt"},{"# MOUNT_POINT=/media/disk": "abs-guide.txt"},{"# For USB-connected device.": "abs-guide.txt"},{"SOURCE_DIR=/home/$LOCAL_USER # NO trailing slash - it DOES matter to rsync.": "abs-guide.txt"},{"BACKUP_DEST_DIR=$MOUNT_POINT/backup/`hostname -s`.${LOCAL_USER}.nightly_backup": "abs-guide.txt"},{"DRY_RUN=false": "abs-guide.txt"},{"#If true, invoke rsync with -n, to do a dry run.": "abs-guide.txt"},{"# Comment out or set to false for normal use.": "abs-guide.txt"},{"VERBOSE=false": "abs-guide.txt"},{"# If true, make rsync verbose.": "abs-guide.txt"},{"# Comment out or set to false otherwise.": "abs-guide.txt"},{"COMPRESS=false": "abs-guide.txt"},{"# If true, compress.": "abs-guide.txt"},{"# Good for internet, bad on LAN.": "abs-guide.txt"},{"# Comment out or set to false otherwise.": "abs-guide.txt"},{"### Exit Codes ###": "abs-guide.txt"},{"E_VARS_NOT_SET=64": "abs-guide.txt"},{"E_COMMANDLINE=65": "abs-guide.txt"},{"E_MOUNT_FAIL=70": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"681": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"E_NOSOURCEDIR=71": "abs-guide.txt"},{"E_UNMOUNTED=72": "abs-guide.txt"},{"E_BACKUP=73": "abs-guide.txt"},{"##### END CONFIGURATION SECTION ##############################################": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Check": "abs-guide.txt"},{"if [ -z": "abs-guide.txt"},{"[ -z": "abs-guide.txt"},{"[ -z": "abs-guide.txt"},{"[ -z": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"exit": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"that all the important variables have been set:": "abs-guide.txt"},{"\"$LOCAL_USER\" ] ||": "abs-guide.txt"},{"\"$SOURCE_DIR\" ] ||": "abs-guide.txt"},{"\"$MOUNT_POINT\" ] ||": "abs-guide.txt"},{"\"$BACKUP_DEST_DIR\" ]": "abs-guide.txt"},{"'One of the variables is not set! Edit the file: $0. BACKUP FAILED.'": "abs-guide.txt"},{"$E_VARS_NOT_SET": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [ \"$#\" != 0 ] # If command-line param(s) . . .": "abs-guide.txt"},{"then": "abs-guide.txt"},{"# Here document(ation).": "abs-guide.txt"},{"cat <<-ENDOFTEXT": "abs-guide.txt"},{"Automatic Nightly backup run from cron.": "abs-guide.txt"},{"Read the source for more details: $0": "abs-guide.txt"},{"The backup directory is $BACKUP_DEST_DIR .": "abs-guide.txt"},{"It will be created if necessary; initialisation is no longer required.": "abs-guide.txt"},{"WARNING: Contents of $BACKUP_DEST_DIR are rotated.": "abs-guide.txt"},{"Directories named 'backup.\\$i' will eventually be DELETED.": "abs-guide.txt"},{"We keep backups from every day for 7 days (1-8),": "abs-guide.txt"},{"then every week for 4 weeks (9-12),": "abs-guide.txt"},{"then every month for 3 months (13-15).": "abs-guide.txt"},{"You may wish to add this to your crontab using 'crontab -e'": "abs-guide.txt"},{"# Back up files: $SOURCE_DIR to $BACKUP_DEST_DIR": "abs-guide.txt"},{"#+ every night at 3:15 am": "abs-guide.txt"},{"15 03 * * * /home/$LOCAL_USER/bin/nightly-backup_firewire-hdd.sh": "abs-guide.txt"},{"Don't forget to verify the backups are working,": "abs-guide.txt"},{"especially if you don't read cron's mail!\"": "abs-guide.txt"},{"ENDOFTEXT": "abs-guide.txt"},{"exit $E_COMMANDLINE": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Parse the options.": "abs-guide.txt"},{"# ==================": "abs-guide.txt"},{"if [ \"$DRY_RUN\" == \"true\" ]; then": "abs-guide.txt"},{"DRY_RUN=\"-n\"": "abs-guide.txt"},{"echo \"WARNING:\"": "abs-guide.txt"},{"echo \"THIS IS A 'DRY RUN'!\"": "abs-guide.txt"},{"echo \"No data will actually be transferred!\"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"DRY_RUN=\"\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"if [ \"$VERBOSE\" == \"true\" ]; then": "abs-guide.txt"},{"VERBOSE=\"-v\"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"VERBOSE=\"\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"if [ \"$COMPRESS\" == \"true\" ]; then": "abs-guide.txt"},{"COMPRESS=\"-z\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"682": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"else": "abs-guide.txt"},{"COMPRESS=\"\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Every week (actually of 8 days) and every month,": "abs-guide.txt"},{"#+ extra backups are preserved.": "abs-guide.txt"},{"DAY_OF_MONTH=`date +%d`": "abs-guide.txt"},{"# Day of month (01..31).": "abs-guide.txt"},{"if [ $DAY_OF_MONTH = 01 ]; then": "abs-guide.txt"},{"# First of month.": "abs-guide.txt"},{"MONTHSTART=true": "abs-guide.txt"},{"elif [ $DAY_OF_MONTH = 08 \\": "abs-guide.txt"},{"-o $DAY_OF_MONTH = 16 \\": "abs-guide.txt"},{"-o $DAY_OF_MONTH = 24 ]; then": "abs-guide.txt"},{"# Day 8,16,24 (use 8, not 7 to better handle 31-day months)": "abs-guide.txt"},{"WEEKSTART=true": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Check that the HDD is mounted.": "abs-guide.txt"},{"# At least, check that *something* is mounted here!": "abs-guide.txt"},{"# We can use something unique to the device, rather than just guessing": "abs-guide.txt"},{"#+ the scsi-id by having an appropriate udev rule in": "abs-guide.txt"},{"#+ /etc/udev/rules.d/10-rules.local": "abs-guide.txt"},{"#+ and by putting a relevant entry in /etc/fstab.": "abs-guide.txt"},{"# Eg: this udev rule:": "abs-guide.txt"},{"# BUS=\"scsi\", KERNEL=\"sd*\", SYSFS{vendor}=\"WDC WD16\",": "abs-guide.txt"},{"# SYSFS{model}=\"00JB-00GVA0": "abs-guide.txt"},{"\", NAME=\"%k\", SYMLINK=\"lacie_1394d%n\"": "abs-guide.txt"},{"if mount | grep $MOUNT_POINT >/dev/null; then": "abs-guide.txt"},{"echo \"Mount point $MOUNT_POINT is indeed mounted. OK\"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo -n \"Attempting to mount $MOUNT_POINT...\"": "abs-guide.txt"},{"# If it isn't mounted, try to mount it.": "abs-guide.txt"},{"sudo mount $MOUNT_POINT 2>/dev/null": "abs-guide.txt"},{"if mount | grep $MOUNT_POINT >/dev/null; then": "abs-guide.txt"},{"UNMOUNT_LATER=TRUE": "abs-guide.txt"},{"echo \"OK\"": "abs-guide.txt"},{"# Note: Ensure that this is also unmounted": "abs-guide.txt"},{"#+ if we exit prematurely with failure.": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo \"FAILED\"": "abs-guide.txt"},{"echo -e \"Nothing is mounted at $MOUNT_POINT. BACKUP FAILED!\"": "abs-guide.txt"},{"exit $E_MOUNT_FAIL": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Check that source dir exists and is readable.": "abs-guide.txt"},{"if [ ! -r $SOURCE_DIR ] ; then": "abs-guide.txt"},{"echo \"$SOURCE_DIR does not exist, or cannot be read. BACKUP FAILED.\"": "abs-guide.txt"},{"exit $E_NOSOURCEDIR": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Check that the backup directory structure is as it should be.": "abs-guide.txt"},{"If not, create it.": "abs-guide.txt"},{"Create the subdirectories.": "abs-guide.txt"},{"Note that backup.0 will be created as needed by rsync.": "abs-guide.txt"},{"": "abs-guide.txt"},{"for ((i=1;i<=15;i++)); do": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"683": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"if [ ! -d $BACKUP_DEST_DIR/backup.$i ]; then": "abs-guide.txt"},{"if /bin/mkdir -p $BACKUP_DEST_DIR/backup.$i ; then": "abs-guide.txt"},{"# ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ No [ ] test brackets. Why?": "abs-guide.txt"},{"echo \"Warning: directory $BACKUP_DEST_DIR/backup.$i is missing,\"": "abs-guide.txt"},{"echo \"or was not initialised. (Re-)creating it.\"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo \"ERROR: directory $BACKUP_DEST_DIR/backup.$i\"": "abs-guide.txt"},{"echo \"is missing and could not be created.\"": "abs-guide.txt"},{"if [ \"$UNMOUNT_LATER\" == \"TRUE\" ]; then": "abs-guide.txt"},{"# Before we exit, unmount the mount point if necessary.": "abs-guide.txt"},{"cd": "abs-guide.txt"},{"sudo umount $MOUNT_POINT &&": "abs-guide.txt"},{"echo \"Unmounted $MOUNT_POINT again. Giving up.\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"exit $E_UNMOUNTED": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"done": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Set the permission to 700 for security": "abs-guide.txt"},{"#+ on an otherwise permissive multi-user system.": "abs-guide.txt"},{"if ! /bin/chmod 700 $BACKUP_DEST_DIR ; then": "abs-guide.txt"},{"echo \"ERROR: Could not set permissions on $BACKUP_DEST_DIR to 700.\"": "abs-guide.txt"},{"if [ \"$UNMOUNT_LATER\" == \"TRUE\" ]; then": "abs-guide.txt"},{"# Before we exit, unmount the mount point if necessary.": "abs-guide.txt"},{"cd ; sudo umount $MOUNT_POINT \\": "abs-guide.txt"},{"&& echo \"Unmounted $MOUNT_POINT again. Giving up.\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"exit $E_UNMOUNTED": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# Create the symlink: current -> backup.1 if required.": "abs-guide.txt"},{"# A failure here is not critical.": "abs-guide.txt"},{"cd $BACKUP_DEST_DIR": "abs-guide.txt"},{"if [ ! -h current ] ; then": "abs-guide.txt"},{"if ! /bin/ln -s backup.1 current ; then": "abs-guide.txt"},{"echo \"WARNING: could not create symlink current -> backup.1\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Now, do the rsync.": "abs-guide.txt"},{"echo \"Now doing backup with rsync...\"": "abs-guide.txt"},{"echo \"Source dir: $SOURCE_DIR\"": "abs-guide.txt"},{"echo -e \"Backup destination dir: $BACKUP_DEST_DIR\\n\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"/usr/bin/rsync $DRY_RUN $VERBOSE -a -S --delete --modify-window=60 \\": "abs-guide.txt"},{"--link-dest=../backup.1 $SOURCE_DIR $BACKUP_DEST_DIR/backup.0/": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"Only warn, rather than exit if the rsync": "abs-guide.txt"},{"since it may only be a minor problem.": "abs-guide.txt"},{"E.g., if one file is not readable, rsync": "abs-guide.txt"},{"This shouldn't prevent the rotation.": "abs-guide.txt"},{"Not using, e.g., `date +%a` since these": "abs-guide.txt"},{"are just full of links and don't consume": "abs-guide.txt"},{"": "abs-guide.txt"},{"failed,": "abs-guide.txt"},{"will fail.": "abs-guide.txt"},{"directories": "abs-guide.txt"},{"*that much* space.": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [ $? != 0 ]; then": "abs-guide.txt"},{"BACKUP_JUSTINCASE=backup.`date +%F_%T`.justincase": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"684": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"\"WARNING: the rsync process did not entirely succeed.\"": "abs-guide.txt"},{"\"Something might be wrong.\"": "abs-guide.txt"},{"\"Saving an extra copy at: $BACKUP_JUSTINCASE\"": "abs-guide.txt"},{"\"WARNING: if this occurs regularly, a LOT of space will be consumed,\"": "abs-guide.txt"},{"\"even though these are just hard-links!\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# Save a readme in the backup parent directory.": "abs-guide.txt"},{"# Save another one in the recent subdirectory.": "abs-guide.txt"},{"echo \"Backup of $SOURCE_DIR on `hostname` was last run on \\": "abs-guide.txt"},{"`date`\" > $BACKUP_DEST_DIR/README.txt": "abs-guide.txt"},{"echo \"This backup of $SOURCE_DIR on `hostname` was created on \\": "abs-guide.txt"},{"`date`\" > $BACKUP_DEST_DIR/backup.0/README.txt": "abs-guide.txt"},{"# If we are not in a dry run, rotate the backups.": "abs-guide.txt"},{"[ -z \"$DRY_RUN\" ] &&": "abs-guide.txt"},{"# Check how full the backup disk is.": "abs-guide.txt"},{"# Warn if 90%. if 98% or more, we'll probably fail, so give up.": "abs-guide.txt"},{"# (Note: df can output to more than one line.)": "abs-guide.txt"},{"# We test this here, rather than before": "abs-guide.txt"},{"#+ so that rsync may possibly have a chance.": "abs-guide.txt"},{"DISK_FULL_PERCENT=`/bin/df $BACKUP_DEST_DIR |": "abs-guide.txt"},{"tr \"\\n\" ' ' | awk '{print $12}' | grep -oE [0-9]+ `": "abs-guide.txt"},{"echo \"Disk space check on backup partition \\": "abs-guide.txt"},{"$MOUNT_POINT $DISK_FULL_PERCENT% full.\"": "abs-guide.txt"},{"if [ $DISK_FULL_PERCENT -gt 90 ]; then": "abs-guide.txt"},{"echo \"Warning: Disk is greater than 90% full.\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"if [ $DISK_FULL_PERCENT -gt 98 ]; then": "abs-guide.txt"},{"echo \"Error: Disk is full! Giving up.\"": "abs-guide.txt"},{"if [ \"$UNMOUNT_LATER\" == \"TRUE\" ]; then": "abs-guide.txt"},{"# Before we exit, unmount the mount point if necessary.": "abs-guide.txt"},{"cd; sudo umount $MOUNT_POINT &&": "abs-guide.txt"},{"echo \"Unmounted $MOUNT_POINT again. Giving up.\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"exit $E_UNMOUNTED": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Create an extra backup.": "abs-guide.txt"},{"# If this copy fails, give up.": "abs-guide.txt"},{"if [ -n \"$BACKUP_JUSTINCASE\" ]; then": "abs-guide.txt"},{"if ! /bin/cp -al $BACKUP_DEST_DIR/backup.0 \\": "abs-guide.txt"},{"$BACKUP_DEST_DIR/$BACKUP_JUSTINCASE": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"ERROR: Failed to create extra copy \\": "abs-guide.txt"},{"$BACKUP_DEST_DIR/$BACKUP_JUSTINCASE\"": "abs-guide.txt"},{"if [ \"$UNMOUNT_LATER\" == \"TRUE\" ]; then": "abs-guide.txt"},{"# Before we exit, unmount the mount point if necessary.": "abs-guide.txt"},{"cd ;sudo umount $MOUNT_POINT &&": "abs-guide.txt"},{"echo \"Unmounted $MOUNT_POINT again. Giving up.\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"exit $E_UNMOUNTED": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"# At start of month, rotate the oldest 8.": "abs-guide.txt"},{"if [ \"$MONTHSTART\" == \"true\" ]; then": "abs-guide.txt"},{"echo -e \"\\nStart of month. \\": "abs-guide.txt"},{"Removing oldest backup: $BACKUP_DEST_DIR/backup.15\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"&&": "abs-guide.txt"},{"": "abs-guide.txt"},{"685": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"/bin/rm -rf $BACKUP_DEST_DIR/backup.15 &&": "abs-guide.txt"},{"echo \"Rotating monthly,weekly backups: \\": "abs-guide.txt"},{"$BACKUP_DEST_DIR/backup.[8-14] -> $BACKUP_DEST_DIR/backup.[9-15]\" &&": "abs-guide.txt"},{"/bin/mv $BACKUP_DEST_DIR/backup.14 $BACKUP_DEST_DIR/backup.15 &&": "abs-guide.txt"},{"/bin/mv $BACKUP_DEST_DIR/backup.13 $BACKUP_DEST_DIR/backup.14 &&": "abs-guide.txt"},{"/bin/mv $BACKUP_DEST_DIR/backup.12 $BACKUP_DEST_DIR/backup.13 &&": "abs-guide.txt"},{"/bin/mv $BACKUP_DEST_DIR/backup.11 $BACKUP_DEST_DIR/backup.12 &&": "abs-guide.txt"},{"/bin/mv $BACKUP_DEST_DIR/backup.10 $BACKUP_DEST_DIR/backup.11 &&": "abs-guide.txt"},{"/bin/mv $BACKUP_DEST_DIR/backup.9 $BACKUP_DEST_DIR/backup.10 &&": "abs-guide.txt"},{"/bin/mv $BACKUP_DEST_DIR/backup.8 $BACKUP_DEST_DIR/backup.9": "abs-guide.txt"},{"# At start of week, rotate the second-oldest 4.": "abs-guide.txt"},{"elif [ \"$WEEKSTART\" == \"true\" ]; then": "abs-guide.txt"},{"echo -e \"\\nStart of week. \\": "abs-guide.txt"},{"Removing oldest weekly backup: $BACKUP_DEST_DIR/backup.12\"": "abs-guide.txt"},{"/bin/rm -rf $BACKUP_DEST_DIR/backup.12 &&": "abs-guide.txt"},{"": "abs-guide.txt"},{"&&": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo \"Rotating weekly backups: \\": "abs-guide.txt"},{"$BACKUP_DEST_DIR/backup.[8-11] -> $BACKUP_DEST_DIR/backup.[9-12]\" &&": "abs-guide.txt"},{"/bin/mv $BACKUP_DEST_DIR/backup.11 $BACKUP_DEST_DIR/backup.12 &&": "abs-guide.txt"},{"/bin/mv $BACKUP_DEST_DIR/backup.10 $BACKUP_DEST_DIR/backup.11 &&": "abs-guide.txt"},{"/bin/mv $BACKUP_DEST_DIR/backup.9 $BACKUP_DEST_DIR/backup.10 &&": "abs-guide.txt"},{"/bin/mv $BACKUP_DEST_DIR/backup.8 $BACKUP_DEST_DIR/backup.9": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo -e \"\\nRemoving oldest daily backup: $BACKUP_DEST_DIR/backup.8\"": "abs-guide.txt"},{"/bin/rm -rf $BACKUP_DEST_DIR/backup.8": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"&&": "abs-guide.txt"},{"": "abs-guide.txt"},{"&&": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Every day, rotate the newest 8.": "abs-guide.txt"},{"echo \"Rotating daily backups: \\": "abs-guide.txt"},{"$BACKUP_DEST_DIR/backup.[1-7] -> $BACKUP_DEST_DIR/backup.[2-8]\"": "abs-guide.txt"},{"/bin/mv $BACKUP_DEST_DIR/backup.7 $BACKUP_DEST_DIR/backup.8": "abs-guide.txt"},{"/bin/mv $BACKUP_DEST_DIR/backup.6 $BACKUP_DEST_DIR/backup.7": "abs-guide.txt"},{"/bin/mv $BACKUP_DEST_DIR/backup.5 $BACKUP_DEST_DIR/backup.6": "abs-guide.txt"},{"/bin/mv $BACKUP_DEST_DIR/backup.4 $BACKUP_DEST_DIR/backup.5": "abs-guide.txt"},{"/bin/mv $BACKUP_DEST_DIR/backup.3 $BACKUP_DEST_DIR/backup.4": "abs-guide.txt"},{"/bin/mv $BACKUP_DEST_DIR/backup.2 $BACKUP_DEST_DIR/backup.3": "abs-guide.txt"},{"/bin/mv $BACKUP_DEST_DIR/backup.1 $BACKUP_DEST_DIR/backup.2": "abs-guide.txt"},{"/bin/mv $BACKUP_DEST_DIR/backup.0 $BACKUP_DEST_DIR/backup.1": "abs-guide.txt"},{"": "abs-guide.txt"},{"&&": "abs-guide.txt"},{"&&": "abs-guide.txt"},{"&&": "abs-guide.txt"},{"&&": "abs-guide.txt"},{"&&": "abs-guide.txt"},{"&&": "abs-guide.txt"},{"&&": "abs-guide.txt"},{"&&": "abs-guide.txt"},{"&&": "abs-guide.txt"},{"": "abs-guide.txt"},{"SUCCESS=true": "abs-guide.txt"},{"": "abs-guide.txt"},{"if": "abs-guide.txt"},{"": "abs-guide.txt"},{"[ \"$UNMOUNT_LATER\" == \"TRUE\" ]; then": "abs-guide.txt"},{"# Unmount the mount point if it wasn't mounted to begin with.": "abs-guide.txt"},{"cd ; sudo umount $MOUNT_POINT && echo \"Unmounted $MOUNT_POINT again.\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [ \"$SUCCESS\" == \"true\" ]; then": "abs-guide.txt"},{"echo 'SUCCESS!'": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# Should have already exited if backup worked.": "abs-guide.txt"},{"echo 'BACKUP FAILED! Is this just a dry run? Is the disk full?) '": "abs-guide.txt"},{"exit $E_BACKUP": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example A-33. An expanded cd command": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"686": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"###########################################################################": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"cdll": "abs-guide.txt"},{"#": "abs-guide.txt"},{"by Phil Braham": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"############################################": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Latest version of this script available from": "abs-guide.txt"},{"#": "abs-guide.txt"},{"http://freshmeat.net/projects/cd/": "abs-guide.txt"},{"#": "abs-guide.txt"},{"############################################": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{".cd_new": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"An enhancement of the Unix cd command": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"There are unlimited stack entries and special entries. The stack": "abs-guide.txt"},{"#": "abs-guide.txt"},{"entries keep the last cd_maxhistory": "abs-guide.txt"},{"#": "abs-guide.txt"},{"directories that have been used. The special entries can be": "abs-guide.txt"},{"#": "abs-guide.txt"},{"assigned to commonly used directories.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"The special entries may be pre-assigned by setting the environment": "abs-guide.txt"},{"#": "abs-guide.txt"},{"variables CDSn or by using the -u or -U command.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"The following is a suggestion for the .profile file:": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{". cdll": "abs-guide.txt"},{"# Set up the cd command": "abs-guide.txt"},{"#": "abs-guide.txt"},{"alias cd='cd_new'": "abs-guide.txt"},{"# Replace the cd command": "abs-guide.txt"},{"#": "abs-guide.txt"},{"cd -U": "abs-guide.txt"},{"# Upload pre-assigned entries for": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+ the stack and special entries": "abs-guide.txt"},{"#": "abs-guide.txt"},{"cd -D": "abs-guide.txt"},{"# Set non-default mode": "abs-guide.txt"},{"#": "abs-guide.txt"},{"alias @=\"cd_new @\" # Allow @ to be used to get history": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"For help type:": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"cd -h or": "abs-guide.txt"},{"#": "abs-guide.txt"},{"cd -H": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"###########################################################################": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Version 1.2.1": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Written by Phil Braham - Realtime Software Pty Ltd": "abs-guide.txt"},{"#": "abs-guide.txt"},{"(realtime@mpx.com.au)": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Please send any suggestions or enhancements to the author (also at": "abs-guide.txt"},{"#": "abs-guide.txt"},{"phil@braham.net)": "abs-guide.txt"},{"#": "abs-guide.txt"},{"############################################################################": "abs-guide.txt"},{"cd_hm ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"${PRINTF} \"%s\" \"cd [dir] [0-9] [@[s|h] [-g [<dir>]] [-d] \\": "abs-guide.txt"},{"[-D] [-r<n>] [dir|0-9] [-R<n>] [<dir>|0-9]": "abs-guide.txt"},{"[-s<n>] [-S<n>] [-u] [-U] [-f] [-F] [-h] [-H] [-v]": "abs-guide.txt"},{"<dir> Go to directory": "abs-guide.txt"},{"0-n": "abs-guide.txt"},{"Go to previous directory (0 is previous, 1 is last but 1 etc)": "abs-guide.txt"},{"n is up to max history (default is 50)": "abs-guide.txt"},{"@": "abs-guide.txt"},{"List history and special entries": "abs-guide.txt"},{"@h": "abs-guide.txt"},{"List history entries": "abs-guide.txt"},{"@s": "abs-guide.txt"},{"List special entries": "abs-guide.txt"},{"-g [<dir>] Go to literal name (bypass special names)": "abs-guide.txt"},{"This is to allow access to dirs called '0','1','-h' etc": "abs-guide.txt"},{"-d": "abs-guide.txt"},{"Change default action - verbose. (See note)": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"687": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"-D": "abs-guide.txt"},{"Change default action - silent. (See note)": "abs-guide.txt"},{"-s<n> Go to the special entry <n>*": "abs-guide.txt"},{"-S<n> Go to the special entry <n>": "abs-guide.txt"},{"and replace it with the current dir*": "abs-guide.txt"},{"-r<n> [<dir>] Go to directory <dir>": "abs-guide.txt"},{"and then put it on special entry <n>*": "abs-guide.txt"},{"-R<n> [<dir>] Go to directory <dir>": "abs-guide.txt"},{"and put current dir on special entry <n>*": "abs-guide.txt"},{"-a<n>": "abs-guide.txt"},{"Alternative suggested directory. See note below.": "abs-guide.txt"},{"-f [<file>] File entries to <file>.": "abs-guide.txt"},{"-u [<file>] Update entries from <file>.": "abs-guide.txt"},{"If no filename supplied then default file": "abs-guide.txt"},{"(${CDPath}${2:-\"$CDFile\"}) is used": "abs-guide.txt"},{"-F and -U are silent versions": "abs-guide.txt"},{"-v": "abs-guide.txt"},{"Print version number": "abs-guide.txt"},{"-h": "abs-guide.txt"},{"Help": "abs-guide.txt"},{"-H": "abs-guide.txt"},{"Detailed help": "abs-guide.txt"},{"*The special entries (0 - 9) are held until log off, replaced by another": "abs-guide.txt"},{"entry or updated with the -u command": "abs-guide.txt"},{"Alternative suggested directories:": "abs-guide.txt"},{"If a directory is not found then CD will suggest any": "abs-guide.txt"},{"possibilities. These are directories starting with the same letters": "abs-guide.txt"},{"and if any are found they are listed prefixed with -a<n>": "abs-guide.txt"},{"where <n> is a number.": "abs-guide.txt"},{"It's possible to go to the directory by entering cd -a<n>": "abs-guide.txt"},{"on the command line.": "abs-guide.txt"},{"The directory for -r<n> or -R<n> may be a number.": "abs-guide.txt"},{"For example:": "abs-guide.txt"},{"$ cd -r3 4 Go to history entry 4 and put it on special entry 3": "abs-guide.txt"},{"$ cd -R3 4 Put current dir on the special entry 3": "abs-guide.txt"},{"and go to history entry 4": "abs-guide.txt"},{"$ cd -s3": "abs-guide.txt"},{"Go to special entry 3": "abs-guide.txt"},{"Note that commands R,r,S and s may be": "abs-guide.txt"},{"and refer to 0:": "abs-guide.txt"},{"$ cd -s": "abs-guide.txt"},{"Go to special entry 0": "abs-guide.txt"},{"$ cd -S": "abs-guide.txt"},{"Go to special entry 0": "abs-guide.txt"},{"entry 0 current dir": "abs-guide.txt"},{"$ cd -r 1": "abs-guide.txt"},{"Go to history entry 1": "abs-guide.txt"},{"$ cd -r": "abs-guide.txt"},{"Go to history entry 0": "abs-guide.txt"},{"\"": "abs-guide.txt"},{"if ${TEST} \"$CD_MODE\" = \"PREV\"": "abs-guide.txt"},{"then": "abs-guide.txt"},{"${PRINTF} \"$cd_mnset\"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"${PRINTF} \"$cd_mset\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"used without a number": "abs-guide.txt"},{"": "abs-guide.txt"},{"and make special": "abs-guide.txt"},{"and put it on special entry 0": "abs-guide.txt"},{"and put it on special entry 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"cd_Hm ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"cd_hm": "abs-guide.txt"},{"${PRINTF} \"%s\" \"": "abs-guide.txt"},{"The previous directories (0-$cd_maxhistory) are stored in the": "abs-guide.txt"},{"environment variables CD[0] - CD[$cd_maxhistory]": "abs-guide.txt"},{"Similarly the special directories S0 - $cd_maxspecial are in": "abs-guide.txt"},{"the environment variable CDS[0] - CDS[$cd_maxspecial]": "abs-guide.txt"},{"and may be accessed from the command line": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"688": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"The default pathname for the -f and -u commands is $CDPath": "abs-guide.txt"},{"The default filename for the -f and -u commands is $CDFile": "abs-guide.txt"},{"Set the following environment variables:": "abs-guide.txt"},{"CDL_PROMPTLEN - Set to the length of prompt you require.": "abs-guide.txt"},{"Prompt string is set to the right characters of the": "abs-guide.txt"},{"current directory.": "abs-guide.txt"},{"If not set then prompt is left unchanged": "abs-guide.txt"},{"CDL_PROMPT_PRE - Set to the string to prefix the prompt.": "abs-guide.txt"},{"Default is:": "abs-guide.txt"},{"non-root: \\\"\\\\[\\\\e[01;34m\\\\]\\\" (sets colour to blue).": "abs-guide.txt"},{"root:": "abs-guide.txt"},{"\\\"\\\\[\\\\e[01;31m\\\\]\\\" (sets colour to red).": "abs-guide.txt"},{"CDL_PROMPT_POST": "abs-guide.txt"},{"- Set to the string to suffix the prompt.": "abs-guide.txt"},{"Default is:": "abs-guide.txt"},{"non-root: \\\"\\\\[\\\\e[00m\\\\]$\\\"": "abs-guide.txt"},{"(resets colour and displays $).": "abs-guide.txt"},{"root:": "abs-guide.txt"},{"\\\"\\\\[\\\\e[00m\\\\]#\\\"": "abs-guide.txt"},{"(resets colour and displays #).": "abs-guide.txt"},{"CDPath - Set the default path for the -f & -u options.": "abs-guide.txt"},{"Default is home directory": "abs-guide.txt"},{"CDFile - Set the default filename for the -f & -u options.": "abs-guide.txt"},{"Default is cdfile": "abs-guide.txt"},{"\"": "abs-guide.txt"},{"cd_version": "abs-guide.txt"},{"}": "abs-guide.txt"},{"cd_version ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"printf \"Version: ${VERSION_MAJOR}.${VERSION_MINOR} Date: ${VERSION_DATE}\\n\"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Truncate right.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# params:": "abs-guide.txt"},{"#": "abs-guide.txt"},{"p1 - string": "abs-guide.txt"},{"#": "abs-guide.txt"},{"p2 - length to truncate to": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# returns string in tcd": "abs-guide.txt"},{"#": "abs-guide.txt"},{"cd_right_trunc ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"local tlen=${2}": "abs-guide.txt"},{"local plen=${#1}": "abs-guide.txt"},{"local str=\"${1}\"": "abs-guide.txt"},{"local diff": "abs-guide.txt"},{"local filler=\"<--\"": "abs-guide.txt"},{"if ${TEST} ${plen} -le ${tlen}": "abs-guide.txt"},{"then": "abs-guide.txt"},{"tcd=\"${str}\"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"let diff=${plen}-${tlen}": "abs-guide.txt"},{"elen=3": "abs-guide.txt"},{"if ${TEST} ${diff} -le 2": "abs-guide.txt"},{"then": "abs-guide.txt"},{"let elen=${diff}": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"tlen=-${tlen}": "abs-guide.txt"},{"let tlen=${tlen}+${elen}": "abs-guide.txt"},{"tcd=${filler:0:elen}${str:tlen}": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"689": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"}": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Three versions of do history:": "abs-guide.txt"},{"#": "abs-guide.txt"},{"cd_dohistory - packs history and specials side by side": "abs-guide.txt"},{"#": "abs-guide.txt"},{"cd_dohistoryH - Shows only hstory": "abs-guide.txt"},{"#": "abs-guide.txt"},{"cd_dohistoryS - Shows only specials": "abs-guide.txt"},{"#": "abs-guide.txt"},{"cd_dohistory ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"cd_getrc": "abs-guide.txt"},{"${PRINTF} \"History:\\n\"": "abs-guide.txt"},{"local -i count=${cd_histcount}": "abs-guide.txt"},{"while ${TEST} ${count} -ge 0": "abs-guide.txt"},{"do": "abs-guide.txt"},{"cd_right_trunc \"${CD[count]}\" ${cd_lchar}": "abs-guide.txt"},{"${PRINTF} \"%2d %-${cd_lchar}.${cd_lchar}s \" ${count} \"${tcd}\"": "abs-guide.txt"},{"cd_right_trunc \"${CDS[count]}\" ${cd_rchar}": "abs-guide.txt"},{"${PRINTF} \"S%d %-${cd_rchar}.${cd_rchar}s\\n\" ${count} \"${tcd}\"": "abs-guide.txt"},{"count=${count}-1": "abs-guide.txt"},{"done": "abs-guide.txt"},{"}": "abs-guide.txt"},{"cd_dohistoryH ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"cd_getrc": "abs-guide.txt"},{"${PRINTF} \"History:\\n\"": "abs-guide.txt"},{"local -i count=${cd_maxhistory}": "abs-guide.txt"},{"while ${TEST} ${count} -ge 0": "abs-guide.txt"},{"do": "abs-guide.txt"},{"${PRINTF} \"${count} %-${cd_flchar}.${cd_flchar}s\\n\" ${CD[$count]}": "abs-guide.txt"},{"count=${count}-1": "abs-guide.txt"},{"done": "abs-guide.txt"},{"}": "abs-guide.txt"},{"cd_dohistoryS ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"cd_getrc": "abs-guide.txt"},{"${PRINTF} \"Specials:\\n\"": "abs-guide.txt"},{"local -i count=${cd_maxspecial}": "abs-guide.txt"},{"while ${TEST} ${count} -ge 0": "abs-guide.txt"},{"do": "abs-guide.txt"},{"${PRINTF} \"S${count} %-${cd_flchar}.${cd_flchar}s\\n\" ${CDS[$count]}": "abs-guide.txt"},{"count=${count}-1": "abs-guide.txt"},{"done": "abs-guide.txt"},{"}": "abs-guide.txt"},{"cd_getrc ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"cd_flchar=$(stty -a | awk -F \\;": "abs-guide.txt"},{"'/rows/ { print $2 $3 }' | awk -F \\ '{ print $4 }')": "abs-guide.txt"},{"if ${TEST} ${cd_flchar} -ne 0": "abs-guide.txt"},{"then": "abs-guide.txt"},{"cd_lchar=${cd_flchar}/2-5": "abs-guide.txt"},{"cd_rchar=${cd_flchar}/2-5": "abs-guide.txt"},{"cd_flchar=${cd_flchar}-5": "abs-guide.txt"},{"else": "abs-guide.txt"},{"cd_flchar=${FLCHAR:=75}": "abs-guide.txt"},{"# cd_flchar is used for for the @s & @h history": "abs-guide.txt"},{"cd_lchar=${LCHAR:=35}": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"690": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"cd_rchar=${RCHAR:=35}": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"}": "abs-guide.txt"},{"cd_doselection ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"local -i nm=0": "abs-guide.txt"},{"cd_doflag=\"TRUE\"": "abs-guide.txt"},{"if ${TEST} \"${CD_MODE}\" = \"PREV\"": "abs-guide.txt"},{"then": "abs-guide.txt"},{"if ${TEST} -z \"$cd_npwd\"": "abs-guide.txt"},{"then": "abs-guide.txt"},{"cd_npwd=0": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"tm=$(echo \"${cd_npwd}\" | cut -b 1)": "abs-guide.txt"},{"if ${TEST} \"${tm}\" = \"-\"": "abs-guide.txt"},{"then": "abs-guide.txt"},{"pm=$(echo \"${cd_npwd}\" | cut -b 2)": "abs-guide.txt"},{"nm=$(echo \"${cd_npwd}\" | cut -d $pm -f2)": "abs-guide.txt"},{"case \"${pm}\" in": "abs-guide.txt"},{"a) cd_npwd=${cd_sugg[$nm]} ;;": "abs-guide.txt"},{"s) cd_npwd=\"${CDS[$nm]}\" ;;": "abs-guide.txt"},{"S) cd_npwd=\"${CDS[$nm]}\" ; CDS[$nm]=`pwd` ;;": "abs-guide.txt"},{"r) cd_npwd=\"$2\" ; cd_specDir=$nm ; cd_doselection \"$1\" \"$2\";;": "abs-guide.txt"},{"R) cd_npwd=\"$2\" ; CDS[$nm]=`pwd` ; cd_doselection \"$1\" \"$2\";;": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"if ${TEST} \"${cd_npwd}\" != \".\" -a \"${cd_npwd}\" \\": "abs-guide.txt"},{"!= \"..\" -a \"${cd_npwd}\" -le ${cd_maxhistory} >>/dev/null 2>&1": "abs-guide.txt"},{"then": "abs-guide.txt"},{"cd_npwd=${CD[$cd_npwd]}": "abs-guide.txt"},{"else": "abs-guide.txt"},{"case \"$cd_npwd\" in": "abs-guide.txt"},{"@) cd_dohistory ; cd_doflag=\"FALSE\" ;;": "abs-guide.txt"},{"@h) cd_dohistoryH ; cd_doflag=\"FALSE\" ;;": "abs-guide.txt"},{"@s) cd_dohistoryS ; cd_doflag=\"FALSE\" ;;": "abs-guide.txt"},{"-h) cd_hm ; cd_doflag=\"FALSE\" ;;": "abs-guide.txt"},{"-H) cd_Hm ; cd_doflag=\"FALSE\" ;;": "abs-guide.txt"},{"-f) cd_fsave \"SHOW\" $2 ; cd_doflag=\"FALSE\" ;;": "abs-guide.txt"},{"-u) cd_upload \"SHOW\" $2 ; cd_doflag=\"FALSE\" ;;": "abs-guide.txt"},{"-F) cd_fsave \"NOSHOW\" $2 ; cd_doflag=\"FALSE\" ;;": "abs-guide.txt"},{"-U) cd_upload \"NOSHOW\" $2 ; cd_doflag=\"FALSE\" ;;": "abs-guide.txt"},{"-g) cd_npwd=\"$2\" ;;": "abs-guide.txt"},{"-d) cd_chdefm 1; cd_doflag=\"FALSE\" ;;": "abs-guide.txt"},{"-D) cd_chdefm 0; cd_doflag=\"FALSE\" ;;": "abs-guide.txt"},{"-r) cd_npwd=\"$2\" ; cd_specDir=0 ; cd_doselection \"$1\" \"$2\";;": "abs-guide.txt"},{"-R) cd_npwd=\"$2\" ; CDS[0]=`pwd` ; cd_doselection \"$1\" \"$2\";;": "abs-guide.txt"},{"-s) cd_npwd=\"${CDS[0]}\" ;;": "abs-guide.txt"},{"-S) cd_npwd=\"${CDS[0]}\" ; CDS[0]=`pwd` ;;": "abs-guide.txt"},{"-v) cd_version ; cd_doflag=\"FALSE\";;": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"}": "abs-guide.txt"},{"cd_chdefm ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"if ${TEST} \"${CD_MODE}\" = \"PREV\"": "abs-guide.txt"},{"then": "abs-guide.txt"},{"CD_MODE=\"\"": "abs-guide.txt"},{"if ${TEST} $1 -eq 1": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"691": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"then": "abs-guide.txt"},{"${PRINTF} \"${cd_mset}\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"else": "abs-guide.txt"},{"CD_MODE=\"PREV\"": "abs-guide.txt"},{"if ${TEST} $1 -eq 1": "abs-guide.txt"},{"then": "abs-guide.txt"},{"${PRINTF} \"${cd_mnset}\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"}": "abs-guide.txt"},{"cd_fsave ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"local sfile=${CDPath}${2:-\"$CDFile\"}": "abs-guide.txt"},{"if ${TEST} \"$1\" = \"SHOW\"": "abs-guide.txt"},{"then": "abs-guide.txt"},{"${PRINTF} \"Saved to %s\\n\" $sfile": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"${RM} -f ${sfile}": "abs-guide.txt"},{"local -i count=0": "abs-guide.txt"},{"while ${TEST} ${count} -le ${cd_maxhistory}": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo \"CD[$count]=\\\"${CD[$count]}\\\"\" >> ${sfile}": "abs-guide.txt"},{"count=${count}+1": "abs-guide.txt"},{"done": "abs-guide.txt"},{"count=0": "abs-guide.txt"},{"while ${TEST} ${count} -le ${cd_maxspecial}": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo \"CDS[$count]=\\\"${CDS[$count]}\\\"\" >> ${sfile}": "abs-guide.txt"},{"count=${count}+1": "abs-guide.txt"},{"done": "abs-guide.txt"},{"}": "abs-guide.txt"},{"cd_upload ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"local sfile=${CDPath}${2:-\"$CDFile\"}": "abs-guide.txt"},{"if ${TEST} \"${1}\" = \"SHOW\"": "abs-guide.txt"},{"then": "abs-guide.txt"},{"${PRINTF} \"Loading from %s\\n\" ${sfile}": "abs-guide.txt"},{"fi": "abs-guide.txt"},{". ${sfile}": "abs-guide.txt"},{"}": "abs-guide.txt"},{"cd_new ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"local -i count": "abs-guide.txt"},{"local -i choose=0": "abs-guide.txt"},{"cd_npwd=\"${1}\"": "abs-guide.txt"},{"cd_specDir=-1": "abs-guide.txt"},{"cd_doselection \"${1}\" \"${2}\"": "abs-guide.txt"},{"if ${TEST} ${cd_doflag} = \"TRUE\"": "abs-guide.txt"},{"then": "abs-guide.txt"},{"if ${TEST} \"${CD[0]}\" != \"`pwd`\"": "abs-guide.txt"},{"then": "abs-guide.txt"},{"count=$cd_maxhistory": "abs-guide.txt"},{"while ${TEST} $count -gt 0": "abs-guide.txt"},{"do": "abs-guide.txt"},{"CD[$count]=${CD[$count-1]}": "abs-guide.txt"},{"count=${count}-1": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"692": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"done": "abs-guide.txt"},{"CD[0]=`pwd`": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"command cd \"${cd_npwd}\" 2>/dev/null": "abs-guide.txt"},{"if ${TEST} $? -eq 1": "abs-guide.txt"},{"then": "abs-guide.txt"},{"${PRINTF} \"Unknown dir: %s\\n\" \"${cd_npwd}\"": "abs-guide.txt"},{"local -i ftflag=0": "abs-guide.txt"},{"for i in \"${cd_npwd}\"*": "abs-guide.txt"},{"do": "abs-guide.txt"},{"if ${TEST} -d \"${i}\"": "abs-guide.txt"},{"then": "abs-guide.txt"},{"if ${TEST} ${ftflag} -eq 0": "abs-guide.txt"},{"then": "abs-guide.txt"},{"${PRINTF} \"Suggest:\\n\"": "abs-guide.txt"},{"ftflag=1": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"${PRINTF} \"\\t-a${choose} %s\\n\" \"$i\"": "abs-guide.txt"},{"cd_sugg[$choose]=\"${i}\"": "abs-guide.txt"},{"choose=${choose}+1": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"done": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"if ${TEST} ${cd_specDir} -ne -1": "abs-guide.txt"},{"then": "abs-guide.txt"},{"CDS[${cd_specDir}]=`pwd`": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"if ${TEST} ! -z \"${CDL_PROMPTLEN}\"": "abs-guide.txt"},{"then": "abs-guide.txt"},{"cd_right_trunc \"${PWD}\" ${CDL_PROMPTLEN}": "abs-guide.txt"},{"cd_rp=${CDL_PROMPT_PRE}${tcd}${CDL_PROMPT_POST}": "abs-guide.txt"},{"export PS1=\"$(echo -ne ${cd_rp})\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"}": "abs-guide.txt"},{"#########################################################################": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Initialisation here": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#########################################################################": "abs-guide.txt"},{"#": "abs-guide.txt"},{"VERSION_MAJOR=\"1\"": "abs-guide.txt"},{"VERSION_MINOR=\"2.1\"": "abs-guide.txt"},{"VERSION_DATE=\"24-MAY-2003\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"alias cd=cd_new": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Set up commands": "abs-guide.txt"},{"RM=/bin/rm": "abs-guide.txt"},{"TEST=test": "abs-guide.txt"},{"PRINTF=printf": "abs-guide.txt"},{"# Use builtin printf": "abs-guide.txt"},{"#########################################################################": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Change this to modify the default pre- and post prompt strings.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# These only come into effect if CDL_PROMPTLEN is set.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#########################################################################": "abs-guide.txt"},{"if ${TEST} ${EUID} -eq 0": "abs-guide.txt"},{"then": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"693": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"CDL_PROMPT_PRE=${CDL_PROMPT_PRE:=\"$HOSTNAME@\"}": "abs-guide.txt"},{"CDL_PROMPT_PRE=${CDL_PROMPT_PRE:=\"\\\\[\\\\e[01;31m\\\\]\"} # Root is in red": "abs-guide.txt"},{"CDL_PROMPT_POST=${CDL_PROMPT_POST:=\"\\\\[\\\\e[00m\\\\]#\"}": "abs-guide.txt"},{"else": "abs-guide.txt"},{"CDL_PROMPT_PRE=${CDL_PROMPT_PRE:=\"\\\\[\\\\e[01;34m\\\\]\"} # Users in blue": "abs-guide.txt"},{"CDL_PROMPT_POST=${CDL_PROMPT_POST:=\"\\\\[\\\\e[00m\\\\]$\"}": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"#########################################################################": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# cd_maxhistory defines the max number of history entries allowed.": "abs-guide.txt"},{"typeset -i cd_maxhistory=50": "abs-guide.txt"},{"#########################################################################": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# cd_maxspecial defines the number of special entries.": "abs-guide.txt"},{"typeset -i cd_maxspecial=9": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#########################################################################": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# cd_histcount defines the number of entries displayed in": "abs-guide.txt"},{"#+ the history command.": "abs-guide.txt"},{"typeset -i cd_histcount=9": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#########################################################################": "abs-guide.txt"},{"export CDPath=${HOME}/": "abs-guide.txt"},{"# Change these to use a different": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+ default path and filename": "abs-guide.txt"},{"#": "abs-guide.txt"},{"export CDFile=${CDFILE:=cdfile}": "abs-guide.txt"},{"# for the -u and -f commands #": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#########################################################################": "abs-guide.txt"},{"#": "abs-guide.txt"},{"typeset -i cd_lchar cd_rchar cd_flchar": "abs-guide.txt"},{"# This is the number of chars to allow for the #": "abs-guide.txt"},{"cd_flchar=${FLCHAR:=75} #+ cd_flchar is used for for the @s & @h history#": "abs-guide.txt"},{"typeset -ax CD CDS": "abs-guide.txt"},{"#": "abs-guide.txt"},{"cd_mset=\"\\n\\tDefault mode is now set - entering cd with no parameters \\": "abs-guide.txt"},{"has the default action\\n\\tUse cd -d or -D for cd to go to \\": "abs-guide.txt"},{"previous directory with no parameters\\n\"": "abs-guide.txt"},{"cd_mnset=\"\\n\\tNon-default mode is now set - entering cd with no \\": "abs-guide.txt"},{"parameters is the same as entering cd 0\\n\\tUse cd -d or \\": "abs-guide.txt"},{"-D to change default cd action\\n\"": "abs-guide.txt"},{"# ==================================================================== #": "abs-guide.txt"},{"": "abs-guide.txt"},{": <<DOCUMENTATION": "abs-guide.txt"},{"Written by Phil Braham. Realtime Software Pty Ltd.": "abs-guide.txt"},{"Released under GNU license. Free to use. Please pass any modifications": "abs-guide.txt"},{"or comments to the author Phil Braham:": "abs-guide.txt"},{"realtime@mpx.com.au": "abs-guide.txt"},{"=======================================================================": "abs-guide.txt"},{"cdll is a replacement for cd and incorporates similar functionality to": "abs-guide.txt"},{"the bash pushd and popd commands but is independent of them.": "abs-guide.txt"},{"This version of cdll has been tested on Linux using Bash. It will work": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"694": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"on most Linux versions but will probably not work on other shells without": "abs-guide.txt"},{"modification.": "abs-guide.txt"},{"Introduction": "abs-guide.txt"},{"============": "abs-guide.txt"},{"cdll allows easy moving about between directories. When changing to a new": "abs-guide.txt"},{"directory the current one is automatically put onto a stack. By default": "abs-guide.txt"},{"50 entries are kept, but this is configurable. Special directories can be": "abs-guide.txt"},{"kept for easy access - by default up to 10, but this is configurable. The": "abs-guide.txt"},{"most recent stack entries and the special entries can be easily viewed.": "abs-guide.txt"},{"The directory stack and special entries can be saved to, and loaded from,": "abs-guide.txt"},{"a file. This allows them to be set up on login, saved before logging out": "abs-guide.txt"},{"or changed when moving project to project.": "abs-guide.txt"},{"In addition, cdll provides a flexible command prompt facility that allows,": "abs-guide.txt"},{"for example, a directory name in colour that is truncated from the left": "abs-guide.txt"},{"if it gets too long.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Setting up cdll": "abs-guide.txt"},{"===============": "abs-guide.txt"},{"Copy cdll to either your local home directory or a central directory": "abs-guide.txt"},{"such as /usr/bin (this will require root access).": "abs-guide.txt"},{"Copy the file cdfile to your home directory. It will require read and": "abs-guide.txt"},{"write access. This a default file that contains a directory stack and": "abs-guide.txt"},{"special entries.": "abs-guide.txt"},{"To replace the cd command you must add commands to your login script.": "abs-guide.txt"},{"The login script is one or more of:": "abs-guide.txt"},{"/etc/profile": "abs-guide.txt"},{"~/.bash_profile": "abs-guide.txt"},{"~/.bash_login": "abs-guide.txt"},{"~/.profile": "abs-guide.txt"},{"~/.bashrc": "abs-guide.txt"},{"/etc/bash.bashrc.local": "abs-guide.txt"},{"To setup your login, ~/.bashrc is recommended, for global (and root) setup": "abs-guide.txt"},{"add the commands to /etc/bash.bashrc.local": "abs-guide.txt"},{"To set up on login, add the command:": "abs-guide.txt"},{". <dir>/cdll": "abs-guide.txt"},{"For example if cdll is in your local home directory:": "abs-guide.txt"},{". ~/cdll": "abs-guide.txt"},{"If in /usr/bin then:": "abs-guide.txt"},{". /usr/bin/cdll": "abs-guide.txt"},{"If you want to use this instead of the buitin cd command then add:": "abs-guide.txt"},{"alias cd='cd_new'": "abs-guide.txt"},{"We would also recommend the following commands:": "abs-guide.txt"},{"alias @='cd_new @'": "abs-guide.txt"},{"cd -U": "abs-guide.txt"},{"cd -D": "abs-guide.txt"},{"If you want to use cdll's prompt facilty then add the following:": "abs-guide.txt"},{"CDL_PROMPTLEN=nn": "abs-guide.txt"},{"Where nn is a number described below. Initially 99 would be suitable": "abs-guide.txt"},{"number.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"695": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"Thus the script looks something like this:": "abs-guide.txt"},{"######################################################################": "abs-guide.txt"},{"# CD Setup": "abs-guide.txt"},{"######################################################################": "abs-guide.txt"},{"CDL_PROMPTLEN=21": "abs-guide.txt"},{"# Allow a prompt length of up to 21 characters": "abs-guide.txt"},{". /usr/bin/cdll": "abs-guide.txt"},{"# Initialise cdll": "abs-guide.txt"},{"alias cd='cd_new'": "abs-guide.txt"},{"# Replace the built in cd command": "abs-guide.txt"},{"alias @='cd_new @'": "abs-guide.txt"},{"# Allow @ at the prompt to display history": "abs-guide.txt"},{"cd -U": "abs-guide.txt"},{"# Upload directories": "abs-guide.txt"},{"cd -D": "abs-guide.txt"},{"# Set default action to non-posix": "abs-guide.txt"},{"######################################################################": "abs-guide.txt"},{"The full meaning of these commands will become clear later.": "abs-guide.txt"},{"There are a couple of caveats. If another program changes the directory": "abs-guide.txt"},{"without calling cdll, then the directory won't be put on the stack and": "abs-guide.txt"},{"also if the prompt facility is used then this will not be updated. Two": "abs-guide.txt"},{"programs that can do this are pushd and popd. To update the prompt and": "abs-guide.txt"},{"stack simply enter:": "abs-guide.txt"},{"cd .": "abs-guide.txt"},{"Note that if the previous entry on the stack is the current directory": "abs-guide.txt"},{"then the stack is not updated.": "abs-guide.txt"},{"Usage": "abs-guide.txt"},{"=====": "abs-guide.txt"},{"cd [dir] [0-9] [@[s|h] [-g <dir>] [-d] [-D] [-r<n>]": "abs-guide.txt"},{"[dir|0-9] [-R<n>] [<dir>|0-9] [-s<n>] [-S<n>]": "abs-guide.txt"},{"[-u] [-U] [-f] [-F] [-h] [-H] [-v]": "abs-guide.txt"},{"<dir>": "abs-guide.txt"},{"0-n": "abs-guide.txt"},{"": "abs-guide.txt"},{"Go to directory": "abs-guide.txt"},{"Goto previous directory (0 is previous,": "abs-guide.txt"},{"1 is last but 1, etc.)": "abs-guide.txt"},{"n is up to max history (default is 50)": "abs-guide.txt"},{"@": "abs-guide.txt"},{"List history and special entries (Usually available as $ @)": "abs-guide.txt"},{"@h": "abs-guide.txt"},{"List history entries": "abs-guide.txt"},{"@s": "abs-guide.txt"},{"List special entries": "abs-guide.txt"},{"-g [<dir>] Go to literal name (bypass special names)": "abs-guide.txt"},{"This is to allow access to dirs called '0','1','-h' etc": "abs-guide.txt"},{"-d": "abs-guide.txt"},{"Change default action - verbose. (See note)": "abs-guide.txt"},{"-D": "abs-guide.txt"},{"Change default action - silent. (See note)": "abs-guide.txt"},{"-s<n>": "abs-guide.txt"},{"Go to the special entry <n>": "abs-guide.txt"},{"-S<n>": "abs-guide.txt"},{"Go to the special entry <n>": "abs-guide.txt"},{"and replace it with the current dir": "abs-guide.txt"},{"-r<n> [<dir>] Go to directory <dir>": "abs-guide.txt"},{"and then put it on special entry <n>": "abs-guide.txt"},{"-R<n> [<dir>] Go to directory <dir>": "abs-guide.txt"},{"and put current dir on special entry <n>": "abs-guide.txt"},{"-a<n>": "abs-guide.txt"},{"Alternative suggested directory. See note below.": "abs-guide.txt"},{"-f [<file>] File entries to <file>.": "abs-guide.txt"},{"-u [<file>] Update entries from <file>.": "abs-guide.txt"},{"If no filename supplied then default file (~/cdfile) is used": "abs-guide.txt"},{"-F and -U are silent versions": "abs-guide.txt"},{"-v": "abs-guide.txt"},{"Print version number": "abs-guide.txt"},{"-h": "abs-guide.txt"},{"Help": "abs-guide.txt"},{"-H": "abs-guide.txt"},{"Detailed help": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"696": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"Examples": "abs-guide.txt"},{"========": "abs-guide.txt"},{"These examples assume non-default mode is set (that is, cd with no": "abs-guide.txt"},{"parameters will go to the most recent stack directory), that aliases": "abs-guide.txt"},{"have been set up for cd and @ as described above and that cd's prompt": "abs-guide.txt"},{"facility is active and the prompt length is 21 characters.": "abs-guide.txt"},{"/home/phil$ @": "abs-guide.txt"},{"# List the entries with the @": "abs-guide.txt"},{"History:": "abs-guide.txt"},{"# Output of the @ command": "abs-guide.txt"},{".....": "abs-guide.txt"},{"# Skipped these entries for brevity": "abs-guide.txt"},{"1 /home/phil/ummdev": "abs-guide.txt"},{"S1 /home/phil/perl": "abs-guide.txt"},{"# Most recent two history entries": "abs-guide.txt"},{"0 /home/phil/perl/eg": "abs-guide.txt"},{"S0 /home/phil/umm/ummdev": "abs-guide.txt"},{"# and two special entries are shown": "abs-guide.txt"},{"/home/phil$ cd /home/phil/utils/Cdll": "abs-guide.txt"},{"# Now change directories": "abs-guide.txt"},{"/home/phil/utils/Cdll$ @": "abs-guide.txt"},{"# Prompt reflects the directory.": "abs-guide.txt"},{"History:": "abs-guide.txt"},{"# New history": "abs-guide.txt"},{".....": "abs-guide.txt"},{"1 /home/phil/perl/eg": "abs-guide.txt"},{"S1 /home/phil/perl": "abs-guide.txt"},{"# History entry 0 has moved to 1": "abs-guide.txt"},{"0 /home/phil": "abs-guide.txt"},{"S0 /home/phil/umm/ummdev": "abs-guide.txt"},{"# and the most recent has entered": "abs-guide.txt"},{"To go to a history entry:": "abs-guide.txt"},{"/home/phil/utils/Cdll$ cd 1": "abs-guide.txt"},{"# Go to history entry 1.": "abs-guide.txt"},{"/home/phil/perl/eg$": "abs-guide.txt"},{"# Current directory is now what was 1": "abs-guide.txt"},{"To go to a special entry:": "abs-guide.txt"},{"/home/phil/perl/eg$ cd -s1": "abs-guide.txt"},{"# Go to special entry 1": "abs-guide.txt"},{"/home/phil/umm/ummdev$": "abs-guide.txt"},{"# Current directory is S1": "abs-guide.txt"},{"To go to a directory called, for example, 1:": "abs-guide.txt"},{"/home/phil$ cd -g 1": "abs-guide.txt"},{"# -g ignores the special meaning of 1": "abs-guide.txt"},{"/home/phil/1$": "abs-guide.txt"},{"To put current directory on the special list as S1:": "abs-guide.txt"},{"cd -r1 .": "abs-guide.txt"},{"# OR": "abs-guide.txt"},{"cd -R1 .": "abs-guide.txt"},{"# These have the same effect if the directory is": "abs-guide.txt"},{"#+ . (the current directory)": "abs-guide.txt"},{"To go to a directory and add it as a special": "abs-guide.txt"},{"The directory for -r<n> or -R<n> may be a number.": "abs-guide.txt"},{"For example:": "abs-guide.txt"},{"$ cd -r3 4 Go to history entry 4 and put it on special entry 3": "abs-guide.txt"},{"$ cd -R3 4 Put current dir on the special entry 3 and go to": "abs-guide.txt"},{"history entry 4": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"697": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"$ cd -s3": "abs-guide.txt"},{"": "abs-guide.txt"},{"Go to special entry 3": "abs-guide.txt"},{"": "abs-guide.txt"},{"Note that commands R,r,S and s may be": "abs-guide.txt"},{"refer to 0:": "abs-guide.txt"},{"$ cd -s": "abs-guide.txt"},{"Go to special entry 0": "abs-guide.txt"},{"$ cd -S": "abs-guide.txt"},{"Go to special entry 0": "abs-guide.txt"},{"current dir": "abs-guide.txt"},{"$ cd -r 1": "abs-guide.txt"},{"Go to history entry 1": "abs-guide.txt"},{"$ cd -r": "abs-guide.txt"},{"Go to history entry 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"used without a number and": "abs-guide.txt"},{"": "abs-guide.txt"},{"and make special entry 0": "abs-guide.txt"},{"and put it on special entry 0": "abs-guide.txt"},{"and put it on special entry 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Alternative suggested directories:": "abs-guide.txt"},{"If a directory": "abs-guide.txt"},{"possibilities.": "abs-guide.txt"},{"and if any are": "abs-guide.txt"},{"where <n> is a": "abs-guide.txt"},{"by entering cd": "abs-guide.txt"},{"": "abs-guide.txt"},{"is not found, then CD will suggest any": "abs-guide.txt"},{"These are directories starting with the same letters": "abs-guide.txt"},{"found they are listed prefixed with -a<n>": "abs-guide.txt"},{"number. It's possible to go to the directory": "abs-guide.txt"},{"-a<n> on the command line.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Use cd -d or -D to change default cd action. cd -H will show": "abs-guide.txt"},{"current action.": "abs-guide.txt"},{"The history entries (0-n) are stored in the environment variables": "abs-guide.txt"},{"CD[0] - CD[n]": "abs-guide.txt"},{"Similarly the special directories S0 - 9 are in the environment": "abs-guide.txt"},{"variable CDS[0] - CDS[9]": "abs-guide.txt"},{"and may be accessed from the command line, for example:": "abs-guide.txt"},{"ls -l ${CDS[3]}": "abs-guide.txt"},{"cat ${CD[8]}/file.txt": "abs-guide.txt"},{"The default pathname for the -f and -u commands is ~": "abs-guide.txt"},{"The default filename for the -f and -u commands is cdfile": "abs-guide.txt"},{"": "abs-guide.txt"},{"Configuration": "abs-guide.txt"},{"=============": "abs-guide.txt"},{"The following environment variables can be set:": "abs-guide.txt"},{"CDL_PROMPTLEN - Set to the length of prompt you require.": "abs-guide.txt"},{"Prompt string is set to the right characters of the current": "abs-guide.txt"},{"directory. If not set, then prompt is left unchanged. Note": "abs-guide.txt"},{"that this is the number of characters that the directory is": "abs-guide.txt"},{"shortened to, not the total characters in the prompt.": "abs-guide.txt"},{"CDL_PROMPT_PRE - Set to the string to prefix the prompt.": "abs-guide.txt"},{"Default is:": "abs-guide.txt"},{"non-root: \"\\\\[\\\\e[01;34m\\\\]\" (sets colour to blue).": "abs-guide.txt"},{"root:": "abs-guide.txt"},{"\"\\\\[\\\\e[01;31m\\\\]\" (sets colour to red).": "abs-guide.txt"},{"CDL_PROMPT_POST": "abs-guide.txt"},{"Default is:": "abs-guide.txt"},{"non-root:": "abs-guide.txt"},{"root:": "abs-guide.txt"},{"": "abs-guide.txt"},{"- Set to the string to suffix the prompt.": "abs-guide.txt"},{"\"\\\\[\\\\e[00m\\\\]$\"": "abs-guide.txt"},{"(resets colour and displays $).": "abs-guide.txt"},{"\"\\\\[\\\\e[00m\\\\]#\"": "abs-guide.txt"},{"(resets colour and displays #).": "abs-guide.txt"},{"": "abs-guide.txt"},{"Note:": "abs-guide.txt"},{"CDL_PROMPT_PRE & _POST only t": "abs-guide.txt"},{"CDPath - Set the default path for the -f & -u options.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"698": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"Default is home directory": "abs-guide.txt"},{"CDFile - Set the default filename for the -f & -u options.": "abs-guide.txt"},{"Default is cdfile": "abs-guide.txt"},{"": "abs-guide.txt"},{"There are three variables defined in the file cdll which control the": "abs-guide.txt"},{"number of entries stored or displayed. They are in the section labeled": "abs-guide.txt"},{"'Initialisation here' towards the end of the file.": "abs-guide.txt"},{"cd_maxhistory": "abs-guide.txt"},{"cd_maxspecial": "abs-guide.txt"},{"cd_histcount": "abs-guide.txt"},{"": "abs-guide.txt"},{"- The number": "abs-guide.txt"},{"Default is": "abs-guide.txt"},{"- The number": "abs-guide.txt"},{"Default is": "abs-guide.txt"},{"- The number": "abs-guide.txt"},{"displayed.": "abs-guide.txt"},{"": "abs-guide.txt"},{"of history": "abs-guide.txt"},{"50.": "abs-guide.txt"},{"of special": "abs-guide.txt"},{"9.": "abs-guide.txt"},{"of history": "abs-guide.txt"},{"Default is": "abs-guide.txt"},{"": "abs-guide.txt"},{"entries stored.": "abs-guide.txt"},{"entries allowed.": "abs-guide.txt"},{"and special entries": "abs-guide.txt"},{"9.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Note that cd_maxspecial should be >= cd_histcount to avoid displaying": "abs-guide.txt"},{"special entries that can't be set.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Version: 1.2.1 Date: 24-MAY-2003": "abs-guide.txt"},{"DOCUMENTATION": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example A-34. A soundcard setup script": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# soundcard-on.sh": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"Script author: Mkarcher": "abs-guide.txt"},{"http://www.thinkwiki.org/wiki ...": "abs-guide.txt"},{"/Script_for_configuring_the_CS4239_sound_chip_in_PnP_mode": "abs-guide.txt"},{"ABS Guide author made minor changes and added comments.": "abs-guide.txt"},{"Couldn't contact script author to ask for permission to use, but ...": "abs-guide.txt"},{"the script was released under the FDL,": "abs-guide.txt"},{"so its use here should be both legal and ethical.": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"Sound-via-pnp-script for Thinkpad 600E": "abs-guide.txt"},{"and possibly other computers with onboard CS4239/CS4610": "abs-guide.txt"},{"that do not work with the PCI driver": "abs-guide.txt"},{"and are not recognized by the PnP code of snd-cs4236.": "abs-guide.txt"},{"Also for some 770-series Thinkpads, such as the 770x.": "abs-guide.txt"},{"Run as root user, of course.": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Search for sound card pnp device:": "abs-guide.txt"},{"": "abs-guide.txt"},{"These are old and very obsolete laptop computers,": "abs-guide.txt"},{"but this particular script is very instructive,": "abs-guide.txt"},{"as it shows how to set up and hack device files.": "abs-guide.txt"},{"": "abs-guide.txt"},{"for dev in /sys/bus/pnp/devices/*": "abs-guide.txt"},{"do": "abs-guide.txt"},{"grep CSC0100 $dev/id > /dev/null && WSSDEV=$dev": "abs-guide.txt"},{"grep CSC0110 $dev/id > /dev/null && CTLDEV=$dev": "abs-guide.txt"},{"done": "abs-guide.txt"},{"# On 770x:": "abs-guide.txt"},{"# WSSDEV = /sys/bus/pnp/devices/00:07": "abs-guide.txt"},{"# CTLDEV = /sys/bus/pnp/devices/00:06": "abs-guide.txt"},{"# These are symbolic links to /sys/devices/pnp0/ ...": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"699": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Activate devices:": "abs-guide.txt"},{"# Thinkpad boots with devices disabled unless \"fast boot\" is turned off": "abs-guide.txt"},{"#+ (in BIOS).": "abs-guide.txt"},{"echo activate > $WSSDEV/resources": "abs-guide.txt"},{"echo activate > $CTLDEV/resources": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Parse resource settings.": "abs-guide.txt"},{"{ read # Discard \"state = active\" (see below).": "abs-guide.txt"},{"read bla port1": "abs-guide.txt"},{"read bla port2": "abs-guide.txt"},{"read bla port3": "abs-guide.txt"},{"read bla irq": "abs-guide.txt"},{"read bla dma1": "abs-guide.txt"},{"read bla dma2": "abs-guide.txt"},{"# The \"bla's\" are labels in the first field: \"io,\" \"state,\" etc.": "abs-guide.txt"},{"# These are discarded.": "abs-guide.txt"},{"# Hack: with PnPBIOS: ports are: port1: WSS, port2:": "abs-guide.txt"},{"#+ OPL, port3: sb (unneeded)": "abs-guide.txt"},{"#": "abs-guide.txt"},{"with ACPI-PnP:ports are: port1: OPL, port2: sb, port3: WSS": "abs-guide.txt"},{"# (ACPI bios seems to be wrong here, the PnP-card-code in snd-cs4236.c": "abs-guide.txt"},{"#+ uses the PnPBIOS port order)": "abs-guide.txt"},{"# Detect port order using the fixed OPL port as reference.": "abs-guide.txt"},{"if [ ${port2%%-*} = 0x388 ]": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^^^^ Strip out everything following hyphen in port address.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"So, if port1 is 0x530-0x537": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"we're left with 0x530 -- the start address of the port.": "abs-guide.txt"},{"then": "abs-guide.txt"},{"# PnPBIOS: usual order": "abs-guide.txt"},{"port=${port1%%-*}": "abs-guide.txt"},{"oplport=${port2%%-*}": "abs-guide.txt"},{"else": "abs-guide.txt"},{"# ACPI: mixed-up order": "abs-guide.txt"},{"port=${port3%%-*}": "abs-guide.txt"},{"oplport=${port1%%-*}": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"} < $WSSDEV/resources": "abs-guide.txt"},{"# To see what's going on here:": "abs-guide.txt"},{"# --------------------------#": "abs-guide.txt"},{"cat /sys/devices/pnp0/00:07/resources": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"state = active": "abs-guide.txt"},{"#": "abs-guide.txt"},{"io 0x530-0x537": "abs-guide.txt"},{"#": "abs-guide.txt"},{"io 0x388-0x38b": "abs-guide.txt"},{"#": "abs-guide.txt"},{"io 0x220-0x233": "abs-guide.txt"},{"#": "abs-guide.txt"},{"irq 5": "abs-guide.txt"},{"#": "abs-guide.txt"},{"dma 1": "abs-guide.txt"},{"#": "abs-guide.txt"},{"dma 0": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^^^": "abs-guide.txt"},{"\"bla\" labels in first field (discarded).": "abs-guide.txt"},{"": "abs-guide.txt"},{"{ read # Discard first line, as above.": "abs-guide.txt"},{"read bla port1": "abs-guide.txt"},{"cport=${port1%%-*}": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^^^^": "abs-guide.txt"},{"# Just want _start_ address of port.": "abs-guide.txt"},{"} < $CTLDEV/resources": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"700": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Load the module:": "abs-guide.txt"},{"modprobe --ignore-install snd-cs4236 port=$port cport=$cport\\": "abs-guide.txt"},{"fm_port=$oplport irq=$irq dma1=$dma1 dma2=$dma2 isapnp=0 index=0": "abs-guide.txt"},{"# See the modprobe manpage.": "abs-guide.txt"},{"exit $?": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example A-35. Locating split paragraphs in a text file": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# find-splitpara.sh": "abs-guide.txt"},{"# Finds split paragraphs in a text file,": "abs-guide.txt"},{"#+ and tags the line numbers.": "abs-guide.txt"},{"": "abs-guide.txt"},{"ARGCOUNT=1": "abs-guide.txt"},{"OFF=0": "abs-guide.txt"},{"ON=1": "abs-guide.txt"},{"E_WRONGARGS=85": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Expect one arg.": "abs-guide.txt"},{"# Flag states.": "abs-guide.txt"},{"": "abs-guide.txt"},{"file=\"$1\"": "abs-guide.txt"},{"lineno=1": "abs-guide.txt"},{"Flag=$OFF": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Target filename.": "abs-guide.txt"},{"# Line number. Start at 1.": "abs-guide.txt"},{"# Blank line flag.": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [ $# -ne \"$ARGCOUNT\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Usage: `basename $0` FILENAME\"": "abs-guide.txt"},{"exit $E_WRONGARGS": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"file_read ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"while read line": "abs-guide.txt"},{"do": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Scan file for pattern, then print line.": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [[ \"$line\" =~ ^[a-z] && $Flag -eq $ON ]]": "abs-guide.txt"},{"then # Line begins with lowercase character, following blank line.": "abs-guide.txt"},{"echo -n \"$lineno::": "abs-guide.txt"},{"\"": "abs-guide.txt"},{"echo \"$line\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [[ \"$line\" =~ ^$ ]]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"# If blank line,": "abs-guide.txt"},{"Flag=$ON": "abs-guide.txt"},{"#+ set flag.": "abs-guide.txt"},{"else": "abs-guide.txt"},{"Flag=$OFF": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"((lineno++))": "abs-guide.txt"},{"done": "abs-guide.txt"},{"} < $file": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Redirect file into function's stdin.": "abs-guide.txt"},{"": "abs-guide.txt"},{"file_read": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"701": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"exit $?": "abs-guide.txt"},{"": "abs-guide.txt"},{"# ---------------------------------------------------------------This is line one of an example paragraph, bla, bla, bla.": "abs-guide.txt"},{"This is line two, and line three should follow on next line, but": "abs-guide.txt"},{"there is a blank line separating the two parts of the paragraph.": "abs-guide.txt"},{"# ---------------------------------------------------------------Running this script on a file containing the above paragraph": "abs-guide.txt"},{"yields:": "abs-guide.txt"},{"4::": "abs-guide.txt"},{"": "abs-guide.txt"},{"there is a blank line separating the two parts of the paragraph.": "abs-guide.txt"},{"": "abs-guide.txt"},{"There will be additional output for all the other split paragraphs": "abs-guide.txt"},{"in the target file.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example A-36. Insertion sort": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# insertion-sort.bash: Insertion sort implementation in Bash": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Heavy use of Bash array features:": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"(string) slicing, merging, etc": "abs-guide.txt"},{"# URL: http://www.lugmen.org.ar/~jjo/jjotip/insertion-sort.bash.d": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"/insertion-sort.bash.sh": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Author: JuanJo Ciarlante <jjo@irrigacion.gov.ar>": "abs-guide.txt"},{"# Lightly reformatted by ABS Guide author.": "abs-guide.txt"},{"# License: GPLv2": "abs-guide.txt"},{"# Used in ABS Guide with author's permission (thanks!).": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Test with:": "abs-guide.txt"},{"./insertion-sort.bash -t": "abs-guide.txt"},{"# Or:": "abs-guide.txt"},{"bash insertion-sort.bash -t": "abs-guide.txt"},{"# The following *doesn't* work:": "abs-guide.txt"},{"#": "abs-guide.txt"},{"sh insertion-sort.bash -t": "abs-guide.txt"},{"# Why not? Hint: which Bash-specific features are disabled": "abs-guide.txt"},{"#+ when running a script by 'sh script.sh'?": "abs-guide.txt"},{"#": "abs-guide.txt"},{": ${DEBUG:=0} # Debug, override with: DEBUG=1 ./scriptname . . .": "abs-guide.txt"},{"# Parameter substitution -- set DEBUG to 0 if not previously set.": "abs-guide.txt"},{"# Global array: \"list\"": "abs-guide.txt"},{"typeset -a list": "abs-guide.txt"},{"# Load whitespace-separated numbers from stdin.": "abs-guide.txt"},{"if [ \"$1\" = \"-t\" ]; then": "abs-guide.txt"},{"DEBUG=1": "abs-guide.txt"},{"read -a list < <( od -Ad -w24 -t u2 /dev/urandom ) # Random list.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^ ^ process substition": "abs-guide.txt"},{"else": "abs-guide.txt"},{"read -a list": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"numelem=${#list[*]}": "abs-guide.txt"},{"# Shows the list, marking the element whose index is $1": "abs-guide.txt"},{"#+ by surrounding it with the two chars passed as $2.": "abs-guide.txt"},{"# Whole line prefixed with $3.": "abs-guide.txt"},{"showlist()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"702": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"echo \"$3\"${list[@]:0:$1} ${2:0:1}${list[$1]}${2:1:1} ${list[@]:$1+1};": "abs-guide.txt"},{"}": "abs-guide.txt"},{"# Loop _pivot_ -- from second element to end of list.": "abs-guide.txt"},{"for(( i=1; i<numelem; i++ )) do": "abs-guide.txt"},{"((DEBUG))&&showlist i \"[]\" \" \"": "abs-guide.txt"},{"# From current _pivot_, back to first element.": "abs-guide.txt"},{"for(( j=i; j; j-- )) do": "abs-guide.txt"},{"# Search for the 1st elem. less than current \"pivot\" . . .": "abs-guide.txt"},{"[[ \"${list[j-1]}\" -le \"${list[i]}\" ]] && break": "abs-guide.txt"},{"done": "abs-guide.txt"},{"(( i==j )) && continue ## No insertion was needed for this element.": "abs-guide.txt"},{"# . . . Move list[i] (pivot) to the left of list[j]:": "abs-guide.txt"},{"list=(${list[@]:0:j} ${list[i]} ${list[j]}\\": "abs-guide.txt"},{"#": "abs-guide.txt"},{"{0,j-1}": "abs-guide.txt"},{"{i}": "abs-guide.txt"},{"{j}": "abs-guide.txt"},{"${list[@]:j+1:i-(j+1)} ${list[@]:i+1})": "abs-guide.txt"},{"#": "abs-guide.txt"},{"{j+1,i-1}": "abs-guide.txt"},{"{i+1,last}": "abs-guide.txt"},{"((DEBUG))&&showlist j \"<>\" \"*\"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"------\"": "abs-guide.txt"},{"echo $'Result:\\n'${list[@]}": "abs-guide.txt"},{"exit $?": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example A-37. Standard Deviation": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# sd.sh: Standard Deviation": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"The Standard Deviation indicates how consistent a set of data is.": "abs-guide.txt"},{"It shows to what extent the individual data points deviate from the": "abs-guide.txt"},{"arithmetic mean, i.e., how much they \"bounce around\" (or cluster).": "abs-guide.txt"},{"It is essentially the average deviation-distance of the": "abs-guide.txt"},{"data points from the mean.": "abs-guide.txt"},{"=========================================================== #": "abs-guide.txt"},{"To calculate the Standard Deviation:": "abs-guide.txt"},{"1": "abs-guide.txt"},{"2": "abs-guide.txt"},{"": "abs-guide.txt"},{"Find the arithmetic mean (average) of all the data points.": "abs-guide.txt"},{"Subtract each data point from the arithmetic mean,": "abs-guide.txt"},{"and square that difference.": "abs-guide.txt"},{"3 Add all of the individual difference-squares in # 2.": "abs-guide.txt"},{"4 Divide the sum in # 3 by the number of data points.": "abs-guide.txt"},{"This is known as the \"variance.\"": "abs-guide.txt"},{"5 The square root of # 4 gives the Standard Deviation.": "abs-guide.txt"},{"=========================================================== #": "abs-guide.txt"},{"": "abs-guide.txt"},{"count=0": "abs-guide.txt"},{"SC=9": "abs-guide.txt"},{"E_DATAFILE=90": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Number of data points; global.": "abs-guide.txt"},{"# Scale to be used by bc. Nine decimal places.": "abs-guide.txt"},{"# Data file error.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# ----------------- Set data file --------------------if [ ! -z \"$1\" ] # Specify filename as cmd-line arg?": "abs-guide.txt"},{"then": "abs-guide.txt"},{"datafile=\"$1\" # ASCII text file,": "abs-guide.txt"},{"else": "abs-guide.txt"},{"#+ one (numerical) data point per line!": "abs-guide.txt"},{"datafile=sample.dat": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# See example data file, below.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"703": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"if [ ! -e \"$datafile\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"\\\"\"$datafile\"\\\" does not exist!\"": "abs-guide.txt"},{"exit $E_DATAFILE": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# -----------------------------------------------------": "abs-guide.txt"},{"": "abs-guide.txt"},{"arith_mean ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"local rt=0": "abs-guide.txt"},{"local am=0": "abs-guide.txt"},{"local ct=0": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Running total.": "abs-guide.txt"},{"# Arithmetic mean.": "abs-guide.txt"},{"# Number of data points.": "abs-guide.txt"},{"": "abs-guide.txt"},{"while read value": "abs-guide.txt"},{"# Read one data point at a time.": "abs-guide.txt"},{"do": "abs-guide.txt"},{"rt=$(echo \"scale=$SC; $rt + $value\" | bc)": "abs-guide.txt"},{"(( ct++ ))": "abs-guide.txt"},{"done": "abs-guide.txt"},{"am=$(echo \"scale=$SC; $rt / $ct\" | bc)": "abs-guide.txt"},{"echo $am; return $ct": "abs-guide.txt"},{"# This function \"returns\" TWO values!": "abs-guide.txt"},{"# Caution: This little trick will not work if $ct > 255!": "abs-guide.txt"},{"# To handle a larger number of data points,": "abs-guide.txt"},{"#+ simply comment out the \"return $ct\" above.": "abs-guide.txt"},{"} <\"$datafile\"": "abs-guide.txt"},{"# Feed in data file.": "abs-guide.txt"},{"sd ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"mean1=$1": "abs-guide.txt"},{"n=$2": "abs-guide.txt"},{"sum2=0": "abs-guide.txt"},{"avg2=0": "abs-guide.txt"},{"sdev=0": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Arithmetic mean (passed to function).": "abs-guide.txt"},{"How many data points.": "abs-guide.txt"},{"Sum of squared differences (\"variance\").": "abs-guide.txt"},{"Average of $sum2.": "abs-guide.txt"},{"Standard Deviation.": "abs-guide.txt"},{"": "abs-guide.txt"},{"while read value": "abs-guide.txt"},{"# Read one line at a time.": "abs-guide.txt"},{"do": "abs-guide.txt"},{"diff=$(echo \"scale=$SC; $mean1 - $value\" | bc)": "abs-guide.txt"},{"# Difference between arith. mean and data point.": "abs-guide.txt"},{"dif2=$(echo \"scale=$SC; $diff * $diff\" | bc) # Squared.": "abs-guide.txt"},{"sum2=$(echo \"scale=$SC; $sum2 + $dif2\" | bc) # Sum of squares.": "abs-guide.txt"},{"done": "abs-guide.txt"},{"avg2=$(echo \"scale=$SC; $sum2 / $n\" | bc) # Avg. of sum of squares.": "abs-guide.txt"},{"sdev=$(echo \"scale=$SC; sqrt($avg2)\" | bc) # Square root =": "abs-guide.txt"},{"echo $sdev": "abs-guide.txt"},{"# Standard Deviation.": "abs-guide.txt"},{"} <\"$datafile\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Rewinds data file.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# ======================================================= #": "abs-guide.txt"},{"mean=$(arith_mean); count=$?": "abs-guide.txt"},{"# Two returns from function!": "abs-guide.txt"},{"std_dev=$(sd $mean $count)": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"Number of data points in \\\"\"$datafile\"\\\" = $count\"": "abs-guide.txt"},{"echo \"Arithmetic mean (average) = $mean\"": "abs-guide.txt"},{"echo \"Standard Deviation = $std_dev\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"# ======================================================= #": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"704": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"exit": "abs-guide.txt"},{"# This script could stand some drastic streamlining,": "abs-guide.txt"},{"#+ but not at the cost of reduced legibility, please.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# ++++++++++++++++++++++++++++++++++++++++ #": "abs-guide.txt"},{"# A sample data file (sample1.dat):": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"18.35": "abs-guide.txt"},{"19.0": "abs-guide.txt"},{"18.88": "abs-guide.txt"},{"18.91": "abs-guide.txt"},{"18.64": "abs-guide.txt"},{"": "abs-guide.txt"},{"# $ sh sd.sh sample1.dat": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Number of data points in \"sample1.dat\" = 5": "abs-guide.txt"},{"Arithmetic mean (average) = 18.756000000": "abs-guide.txt"},{"Standard Deviation = .235338054": "abs-guide.txt"},{"++++++++++++++++++++++++++++++++++++++++ #": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example A-38. A pad file generator for shareware authors": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# pad.sh": "abs-guide.txt"},{"#######################################################": "abs-guide.txt"},{"#": "abs-guide.txt"},{"PAD (xml) file creator": "abs-guide.txt"},{"#+ Written by Mendel Cooper <thegrendel.abs@gmail.com>.": "abs-guide.txt"},{"#+ Released to the Public Domain.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Generates a \"PAD\" descriptor file for shareware": "abs-guide.txt"},{"#+ packages, according to the specifications": "abs-guide.txt"},{"#+ of the ASP.": "abs-guide.txt"},{"# http://www.asp-shareware.org/pad": "abs-guide.txt"},{"#######################################################": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Accepts (optional) save filename as a command-line argument.": "abs-guide.txt"},{"if [ -n \"$1\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"savefile=$1": "abs-guide.txt"},{"else": "abs-guide.txt"},{"savefile=save_file.xml": "abs-guide.txt"},{"# Default save_file name.": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"# ===== PAD file headers =====": "abs-guide.txt"},{"HDR1=\"<?xml version=\\\"1.0\\\" encoding=\\\"Windows-1252\\\" ?>\"": "abs-guide.txt"},{"HDR2=\"<XML_DIZ_INFO>\"": "abs-guide.txt"},{"HDR3=\"<MASTER_PAD_VERSION_INFO>\"": "abs-guide.txt"},{"HDR4=\"\\t<MASTER_PAD_VERSION>1.15</MASTER_PAD_VERSION>\"": "abs-guide.txt"},{"HDR5=\"\\t<MASTER_PAD_INFO>Portable Application Description, or PAD": "abs-guide.txt"},{"for short, is a data set that is used by shareware authors to": "abs-guide.txt"},{"disseminate information to anyone interested in their software products.": "abs-guide.txt"},{"To find out more go to http://www.asp-shareware.org/pad</MASTER_PAD_INFO>\"": "abs-guide.txt"},{"HDR6=\"</MASTER_PAD_VERSION_INFO>\"": "abs-guide.txt"},{"# ============================": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"705": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"": "abs-guide.txt"},{"fill_in ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"if [ -z \"$2\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo -n \"$1? \"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo -n \"$1 $2? \"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"read var": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Get user input.": "abs-guide.txt"},{"# Additional query?": "abs-guide.txt"},{"": "abs-guide.txt"},{"# May paste to fill in field.": "abs-guide.txt"},{"# This shows how flexible \"read\" can be.": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [ -z \"$var\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo -e \"\\t\\t<$1 />\" >>$savefile": "abs-guide.txt"},{"# Indent with 2 tabs.": "abs-guide.txt"},{"return": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo -e \"\\t\\t<$1>$var</$1>\" >>$savefile": "abs-guide.txt"},{"return ${#var}": "abs-guide.txt"},{"# Return length of input string.": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"}": "abs-guide.txt"},{"check_field_length () # Check length of program description fields.": "abs-guide.txt"},{"{": "abs-guide.txt"},{"# $1 = maximum field length": "abs-guide.txt"},{"# $2 = actual field length": "abs-guide.txt"},{"if [ \"$2\" -gt \"$1\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Warning: Maximum field length of $1 characters exceeded!\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"}": "abs-guide.txt"},{"clear": "abs-guide.txt"},{"# Clear screen.": "abs-guide.txt"},{"echo \"PAD File Creator\"": "abs-guide.txt"},{"echo \"--- ---- -------\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"# Write File Headers to file.": "abs-guide.txt"},{"echo $HDR1 >$savefile": "abs-guide.txt"},{"echo $HDR2 >>$savefile": "abs-guide.txt"},{"echo $HDR3 >>$savefile": "abs-guide.txt"},{"echo -e $HDR4 >>$savefile": "abs-guide.txt"},{"echo -e $HDR5 >>$savefile": "abs-guide.txt"},{"echo $HDR6 >>$savefile": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Company_Info": "abs-guide.txt"},{"echo \"COMPANY INFO\"": "abs-guide.txt"},{"CO_HDR=\"Company_Info\"": "abs-guide.txt"},{"echo \"<$CO_HDR>\" >>$savefile": "abs-guide.txt"},{"fill_in": "abs-guide.txt"},{"fill_in": "abs-guide.txt"},{"fill_in": "abs-guide.txt"},{"fill_in": "abs-guide.txt"},{"fill_in": "abs-guide.txt"},{"fill_in": "abs-guide.txt"},{"fill_in": "abs-guide.txt"},{"": "abs-guide.txt"},{"Company_Name": "abs-guide.txt"},{"Address_1": "abs-guide.txt"},{"Address_2": "abs-guide.txt"},{"City_Town": "abs-guide.txt"},{"State_Province": "abs-guide.txt"},{"Zip_Postal_Code": "abs-guide.txt"},{"Country": "abs-guide.txt"},{"": "abs-guide.txt"},{"# If applicable:": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"706": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# fill_in ASP_Member \"[Y/N]\"": "abs-guide.txt"},{"# fill_in ASP_Member_Number": "abs-guide.txt"},{"# fill_in ESC_Member \"[Y/N]\"": "abs-guide.txt"},{"fill_in Company_WebSite_URL": "abs-guide.txt"},{"clear": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Clear screen between sections.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Contact_Info": "abs-guide.txt"},{"echo \"CONTACT INFO\"": "abs-guide.txt"},{"CONTACT_HDR=\"Contact_Info\"": "abs-guide.txt"},{"echo \"<$CONTACT_HDR>\" >>$savefile": "abs-guide.txt"},{"fill_in Author_First_Name": "abs-guide.txt"},{"fill_in Author_Last_Name": "abs-guide.txt"},{"fill_in Author_Email": "abs-guide.txt"},{"fill_in Contact_First_Name": "abs-guide.txt"},{"fill_in Contact_Last_Name": "abs-guide.txt"},{"fill_in Contact_Email": "abs-guide.txt"},{"echo -e \"\\t</$CONTACT_HDR>\" >>$savefile": "abs-guide.txt"},{"# END Contact_Info": "abs-guide.txt"},{"clear": "abs-guide.txt"},{"# Support_Info": "abs-guide.txt"},{"echo \"SUPPORT INFO\"": "abs-guide.txt"},{"SUPPORT_HDR=\"Support_Info\"": "abs-guide.txt"},{"echo \"<$SUPPORT_HDR>\" >>$savefile": "abs-guide.txt"},{"fill_in Sales_Email": "abs-guide.txt"},{"fill_in Support_Email": "abs-guide.txt"},{"fill_in General_Email": "abs-guide.txt"},{"fill_in Sales_Phone": "abs-guide.txt"},{"fill_in Support_Phone": "abs-guide.txt"},{"fill_in General_Phone": "abs-guide.txt"},{"fill_in Fax_Phone": "abs-guide.txt"},{"echo -e \"\\t</$SUPPORT_HDR>\" >>$savefile": "abs-guide.txt"},{"# END Support_Info": "abs-guide.txt"},{"echo \"</$CO_HDR>\" >>$savefile": "abs-guide.txt"},{"# END Company_Info": "abs-guide.txt"},{"clear": "abs-guide.txt"},{"# Program_Info": "abs-guide.txt"},{"echo \"PROGRAM INFO\"": "abs-guide.txt"},{"PROGRAM_HDR=\"Program_Info\"": "abs-guide.txt"},{"echo \"<$PROGRAM_HDR>\" >>$savefile": "abs-guide.txt"},{"fill_in Program_Name": "abs-guide.txt"},{"fill_in Program_Version": "abs-guide.txt"},{"fill_in Program_Release_Month": "abs-guide.txt"},{"fill_in Program_Release_Day": "abs-guide.txt"},{"fill_in Program_Release_Year": "abs-guide.txt"},{"fill_in Program_Cost_Dollars": "abs-guide.txt"},{"fill_in Program_Cost_Other": "abs-guide.txt"},{"fill_in Program_Type \"[Shareware/Freeware/GPL]\"": "abs-guide.txt"},{"fill_in Program_Release_Status \"[Beta, Major Upgrade, etc.]\"": "abs-guide.txt"},{"fill_in Program_Install_Support": "abs-guide.txt"},{"fill_in Program_OS_Support \"[Win9x/Win2k/Linux/etc.]\"": "abs-guide.txt"},{"fill_in Program_Language \"[English/Spanish/etc.]\"": "abs-guide.txt"},{"echo; echo": "abs-guide.txt"},{"# File_Info": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"707": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"echo \"FILE INFO\"": "abs-guide.txt"},{"FILEINFO_HDR=\"File_Info\"": "abs-guide.txt"},{"echo \"<$FILEINFO_HDR>\" >>$savefile": "abs-guide.txt"},{"fill_in Filename_Versioned": "abs-guide.txt"},{"fill_in Filename_Previous": "abs-guide.txt"},{"fill_in Filename_Generic": "abs-guide.txt"},{"fill_in Filename_Long": "abs-guide.txt"},{"fill_in File_Size_Bytes": "abs-guide.txt"},{"fill_in File_Size_K": "abs-guide.txt"},{"fill_in File_Size_MB": "abs-guide.txt"},{"echo -e \"\\t</$FILEINFO_HDR>\" >>$savefile": "abs-guide.txt"},{"# END File_Info": "abs-guide.txt"},{"clear": "abs-guide.txt"},{"# Expire_Info": "abs-guide.txt"},{"echo \"EXPIRE INFO\"": "abs-guide.txt"},{"EXPIRE_HDR=\"Expire_Info\"": "abs-guide.txt"},{"echo \"<$EXPIRE_HDR>\" >>$savefile": "abs-guide.txt"},{"fill_in Has_Expire_Info \"Y/N\"": "abs-guide.txt"},{"fill_in Expire_Count": "abs-guide.txt"},{"fill_in Expire_Based_On": "abs-guide.txt"},{"fill_in Expire_Other_Info": "abs-guide.txt"},{"fill_in Expire_Month": "abs-guide.txt"},{"fill_in Expire_Day": "abs-guide.txt"},{"fill_in Expire_Year": "abs-guide.txt"},{"echo -e \"\\t</$EXPIRE_HDR>\" >>$savefile": "abs-guide.txt"},{"# END Expire_Info": "abs-guide.txt"},{"clear": "abs-guide.txt"},{"# More Program_Info": "abs-guide.txt"},{"echo \"ADDITIONAL PROGRAM INFO\"": "abs-guide.txt"},{"fill_in Program_Change_Info": "abs-guide.txt"},{"fill_in Program_Specific_Category": "abs-guide.txt"},{"fill_in Program_Categories": "abs-guide.txt"},{"fill_in Includes_JAVA_VM \"[Y/N]\"": "abs-guide.txt"},{"fill_in Includes_VB_Runtime \"[Y/N]\"": "abs-guide.txt"},{"fill_in Includes_DirectX \"[Y/N]\"": "abs-guide.txt"},{"# END More Program_Info": "abs-guide.txt"},{"echo \"</$PROGRAM_HDR>\" >>$savefile": "abs-guide.txt"},{"# END Program_Info": "abs-guide.txt"},{"clear": "abs-guide.txt"},{"# Program Description": "abs-guide.txt"},{"echo \"PROGRAM DESCRIPTIONS\"": "abs-guide.txt"},{"PROGDESC_HDR=\"Program_Descriptions\"": "abs-guide.txt"},{"echo \"<$PROGDESC_HDR>\" >>$savefile": "abs-guide.txt"},{"LANG=\"English\"": "abs-guide.txt"},{"echo \"<$LANG>\" >>$savefile": "abs-guide.txt"},{"fill_in Keywords \"[comma + space separated]\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"45, 80, 250, 450, 2000 word program descriptions\"": "abs-guide.txt"},{"echo \"(may cut and paste into field)\"": "abs-guide.txt"},{"# It would be highly appropriate to compose the following": "abs-guide.txt"},{"#+ \"Char_Desc\" fields with a text editor,": "abs-guide.txt"},{"#+ then cut-and-paste the text into the answer fields.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"708": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"echo \"": "abs-guide.txt"},{"|---------------45 characters---------------|\"": "abs-guide.txt"},{"fill_in Char_Desc_45": "abs-guide.txt"},{"check_field_length 45 \"$?\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"fill_in Char_Desc_80": "abs-guide.txt"},{"check_field_length 80 \"$?\"": "abs-guide.txt"},{"fill_in Char_Desc_250": "abs-guide.txt"},{"check_field_length 250 \"$?\"": "abs-guide.txt"},{"fill_in Char_Desc_450": "abs-guide.txt"},{"fill_in Char_Desc_2000": "abs-guide.txt"},{"echo \"</$LANG>\" >>$savefile": "abs-guide.txt"},{"echo \"</$PROGDESC_HDR>\" >>$savefile": "abs-guide.txt"},{"# END Program Description": "abs-guide.txt"},{"clear": "abs-guide.txt"},{"echo \"Done.\"; echo; echo": "abs-guide.txt"},{"echo \"Save file is: \\\"\"$savefile\"\\\"\"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example A-39. A man page editor": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# maned.sh": "abs-guide.txt"},{"# A rudimentary man page editor": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Version: 0.1 (Alpha, probably buggy)": "abs-guide.txt"},{"Author: Mendel Cooper <thegrendel.abs@gmail.com>": "abs-guide.txt"},{"Reldate: 16 June 2008": "abs-guide.txt"},{"License: GPL3": "abs-guide.txt"},{"": "abs-guide.txt"},{"savefile=": "abs-guide.txt"},{"E_NOINPUT=90": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Global, used in multiple functions.": "abs-guide.txt"},{"# User input missing (error). May or may not be critical.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# =========== Markup Tags ============ #": "abs-guide.txt"},{"TopHeader=\".TH\"": "abs-guide.txt"},{"NameHeader=\".SH NAME\"": "abs-guide.txt"},{"SyntaxHeader=\".SH SYNTAX\"": "abs-guide.txt"},{"SynopsisHeader=\".SH SYNOPSIS\"": "abs-guide.txt"},{"InstallationHeader=\".SH INSTALLATION\"": "abs-guide.txt"},{"DescHeader=\".SH DESCRIPTION\"": "abs-guide.txt"},{"OptHeader=\".SH OPTIONS\"": "abs-guide.txt"},{"FilesHeader=\".SH FILES\"": "abs-guide.txt"},{"EnvHeader=\".SH ENVIRONMENT\"": "abs-guide.txt"},{"AuthHeader=\".SH AUTHOR\"": "abs-guide.txt"},{"BugsHeader=\".SH BUGS\"": "abs-guide.txt"},{"SeeAlsoHeader=\".SH SEE ALSO\"": "abs-guide.txt"},{"BOLD=\".B\"": "abs-guide.txt"},{"# Add more tags, as needed.": "abs-guide.txt"},{"# See groff docs for markup meanings.": "abs-guide.txt"},{"# ==================================== #": "abs-guide.txt"},{"start ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"clear": "abs-guide.txt"},{"echo \"ManEd\"": "abs-guide.txt"},{"echo \"-----\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Clear screen.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"709": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"Simple man page creator\"": "abs-guide.txt"},{"echo \"Author: Mendel Cooper\"": "abs-guide.txt"},{"echo \"License: GPL3\"": "abs-guide.txt"},{"echo; echo; echo": "abs-guide.txt"},{"}": "abs-guide.txt"},{"progname ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"echo -n \"Program name? \"": "abs-guide.txt"},{"read name": "abs-guide.txt"},{"echo -n \"Manpage section? [Hit RETURN for default (\\\"1\\\") ]": "abs-guide.txt"},{"read section": "abs-guide.txt"},{"if [ -z \"$section\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"section=1": "abs-guide.txt"},{"# Most man pages are in section 1.": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"if [ -n \"$name\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"savefile=\"\"$name\".\"$section\"\"": "abs-guide.txt"},{"echo -n \"$1 \" >>$savefile": "abs-guide.txt"},{"name1=$(echo \"$name\" | tr a-z A-Z)": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"Filename suffix = section.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Change to uppercase,": "abs-guide.txt"},{"#+ per man page convention.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo -n \"$name1\" >>$savefile": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo \"Error! No input.\"": "abs-guide.txt"},{"# Mandatory input.": "abs-guide.txt"},{"exit $E_NOINPUT": "abs-guide.txt"},{"# Critical!": "abs-guide.txt"},{"# Exercise: The script-abort if no filename input is a bit clumsy.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Rewrite this section so a default filename is used": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"if no input.": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"echo -n \"": "abs-guide.txt"},{"": "abs-guide.txt"},{"\\\"$section\\\"\">>$savefile": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Append, always append.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"read": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"-n \"Version? \"": "abs-guide.txt"},{"ver": "abs-guide.txt"},{"-n \" \\\"Version $ver \\\"\">>$savefile": "abs-guide.txt"},{">>$savefile": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"read": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"-n \"Short description [0 - 5 words]? \"": "abs-guide.txt"},{"sdesc": "abs-guide.txt"},{"\"$NameHeader\">>$savefile": "abs-guide.txt"},{"\"\"$BOLD\" \"$name\"\">>$savefile": "abs-guide.txt"},{"\"\\- \"$sdesc\"\">>$savefile": "abs-guide.txt"},{"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"fill_in ()": "abs-guide.txt"},{"{ # This function more or less copied from \"pad.sh\" script.": "abs-guide.txt"},{"echo -n \"$2? \"": "abs-guide.txt"},{"# Get user input.": "abs-guide.txt"},{"read var": "abs-guide.txt"},{"# May paste (a single line only!) to fill in field.": "abs-guide.txt"},{"if [ -n \"$var\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"$1 \" >>$savefile": "abs-guide.txt"},{"echo -n \"$var\" >>$savefile": "abs-guide.txt"},{"else": "abs-guide.txt"},{"# Don't append empty field to file.": "abs-guide.txt"},{"return $E_NOINPUT # Not critical here.": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"710": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"echo >>$savefile": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"end ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"clear": "abs-guide.txt"},{"echo -n \"Would you like to view the saved man page (y/n)? \"": "abs-guide.txt"},{"read ans": "abs-guide.txt"},{"if [ \"$ans\" = \"n\" -o \"$ans\" = \"N\" ]; then exit; fi": "abs-guide.txt"},{"exec less \"$savefile\" # Exit script and hand off control to \"less\" ...": "abs-guide.txt"},{"#+ ... which formats for viewing man page source.": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"# ---------------------------------------- #": "abs-guide.txt"},{"start": "abs-guide.txt"},{"progname \"$TopHeader\"": "abs-guide.txt"},{"fill_in \"$SynopsisHeader\" \"Synopsis\"": "abs-guide.txt"},{"fill_in \"$DescHeader\" \"Long description\"": "abs-guide.txt"},{"# May paste in *single line* of text.": "abs-guide.txt"},{"fill_in \"$OptHeader\" \"Options\"": "abs-guide.txt"},{"fill_in \"$FilesHeader\" \"Files\"": "abs-guide.txt"},{"fill_in \"$AuthHeader\" \"Author\"": "abs-guide.txt"},{"fill_in \"$BugsHeader\" \"Bugs\"": "abs-guide.txt"},{"fill_in \"$SeeAlsoHeader\" \"See also\"": "abs-guide.txt"},{"# fill_in \"$OtherHeader\" ... as necessary.": "abs-guide.txt"},{"end": "abs-guide.txt"},{"# ... exit not needed.": "abs-guide.txt"},{"# ---------------------------------------- #": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"Note that the generated man page will usually": "abs-guide.txt"},{"require manual fine-tuning with a text editor.": "abs-guide.txt"},{"However, it's a distinct improvement upon": "abs-guide.txt"},{"writing man source from scratch": "abs-guide.txt"},{"or even editing a blank man page template.": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"The main deficiency of the script is that it permits": "abs-guide.txt"},{"pasting only a single text line into the input fields.": "abs-guide.txt"},{"This may be a long, cobbled-together line, which groff": "abs-guide.txt"},{"will automatically wrap and hyphenate.": "abs-guide.txt"},{"However, if you want multiple (newline-separated) paragraphs,": "abs-guide.txt"},{"these must be inserted by manual text editing on the": "abs-guide.txt"},{"script-generated man page.": "abs-guide.txt"},{"Exercise (difficult): Fix this!": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"This script is not nearly as elaborate as the": "abs-guide.txt"},{"full-featured \"manedit\" package": "abs-guide.txt"},{"http://freshmeat.net/projects/manedit/": "abs-guide.txt"},{"but it's much easier to use.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example A-40. Petals Around the Rose": "abs-guide.txt"},{"#!/bin/bash -i": "abs-guide.txt"},{"# petals.sh": "abs-guide.txt"},{"#########################################################################": "abs-guide.txt"},{"# Petals Around the Rose": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Version 0.1 Created by Serghey Rodin": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Version 0.2 Modded by ABS Guide Author": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"711": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# License: GPL3": "abs-guide.txt"},{"# Used in ABS Guide with permission.": "abs-guide.txt"},{"# #####################################################################": "abs-guide.txt"},{"hits=0": "abs-guide.txt"},{"WIN=6": "abs-guide.txt"},{"ALMOST=5": "abs-guide.txt"},{"EXIT=exit": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"RANDOM=$$": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Seeds the random number generator from PID of script.": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Correct guesses.": "abs-guide.txt"},{"Mastered the game.": "abs-guide.txt"},{"One short of mastery.": "abs-guide.txt"},{"Give up early?": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Bones (ASCII graphics for dice)": "abs-guide.txt"},{"bone1[1]=\"|": "abs-guide.txt"},{"|\"": "abs-guide.txt"},{"bone1[2]=\"|": "abs-guide.txt"},{"o |\"": "abs-guide.txt"},{"bone1[3]=\"|": "abs-guide.txt"},{"o |\"": "abs-guide.txt"},{"bone1[4]=\"| o": "abs-guide.txt"},{"o |\"": "abs-guide.txt"},{"bone1[5]=\"| o": "abs-guide.txt"},{"o |\"": "abs-guide.txt"},{"bone1[6]=\"| o": "abs-guide.txt"},{"o |\"": "abs-guide.txt"},{"bone2[1]=\"|": "abs-guide.txt"},{"o": "abs-guide.txt"},{"|\"": "abs-guide.txt"},{"bone2[2]=\"|": "abs-guide.txt"},{"|\"": "abs-guide.txt"},{"bone2[3]=\"|": "abs-guide.txt"},{"o": "abs-guide.txt"},{"|\"": "abs-guide.txt"},{"bone2[4]=\"|": "abs-guide.txt"},{"|\"": "abs-guide.txt"},{"bone2[5]=\"|": "abs-guide.txt"},{"o": "abs-guide.txt"},{"|\"": "abs-guide.txt"},{"bone2[6]=\"| o": "abs-guide.txt"},{"o |\"": "abs-guide.txt"},{"bone3[1]=\"|": "abs-guide.txt"},{"|\"": "abs-guide.txt"},{"bone3[2]=\"| o": "abs-guide.txt"},{"|\"": "abs-guide.txt"},{"bone3[3]=\"| o": "abs-guide.txt"},{"|\"": "abs-guide.txt"},{"bone3[4]=\"| o": "abs-guide.txt"},{"o |\"": "abs-guide.txt"},{"bone3[5]=\"| o": "abs-guide.txt"},{"o |\"": "abs-guide.txt"},{"bone3[6]=\"| o": "abs-guide.txt"},{"o |\"": "abs-guide.txt"},{"bone=\"+---------+\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Functions": "abs-guide.txt"},{"instructions () {": "abs-guide.txt"},{"clear": "abs-guide.txt"},{"echo -n \"Do you need instructions? (y/n) \"; read ans": "abs-guide.txt"},{"if [ \"$ans\" = \"y\" -o \"$ans\" = \"Y\" ]; then": "abs-guide.txt"},{"clear": "abs-guide.txt"},{"echo -e '\\E[34;47m' # Blue type.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"\"cat document\"": "abs-guide.txt"},{"cat <<INSTRUCTIONSZZZ": "abs-guide.txt"},{"The name of the game is Petals Around the Rose,": "abs-guide.txt"},{"and that name is significant.": "abs-guide.txt"},{"Five dice will roll and you must guess the \"answer\" for each roll.": "abs-guide.txt"},{"It will be zero or an even number.": "abs-guide.txt"},{"After your guess, you will be told the answer for the roll, but . . .": "abs-guide.txt"},{"that's ALL the information you will get.": "abs-guide.txt"},{"Six consecutive correct guesses admits you to the": "abs-guide.txt"},{"Fellowship of the Rose.": "abs-guide.txt"},{"INSTRUCTIONSZZZ": "abs-guide.txt"},{"echo -e \"\\033[0m\"": "abs-guide.txt"},{"else clear": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Turn off blue.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"712": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"fortune ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"RANGE=7": "abs-guide.txt"},{"FLOOR=0": "abs-guide.txt"},{"number=0": "abs-guide.txt"},{"while [ \"$number\" -le $FLOOR ]": "abs-guide.txt"},{"do": "abs-guide.txt"},{"number=$RANDOM": "abs-guide.txt"},{"let \"number %= $RANGE\"": "abs-guide.txt"},{"# 1 - 6.": "abs-guide.txt"},{"done": "abs-guide.txt"},{"return $number": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"throw () {": "abs-guide.txt"},{"fortune;": "abs-guide.txt"},{"fortune;": "abs-guide.txt"},{"fortune;": "abs-guide.txt"},{"fortune;": "abs-guide.txt"},{"fortune;": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Calculate each individual die.": "abs-guide.txt"},{"B1=$?": "abs-guide.txt"},{"B2=$?": "abs-guide.txt"},{"B3=$?": "abs-guide.txt"},{"B4=$?": "abs-guide.txt"},{"B5=$?": "abs-guide.txt"},{"": "abs-guide.txt"},{"calc () { # Function embedded within a function!": "abs-guide.txt"},{"case \"$1\" in": "abs-guide.txt"},{"3": "abs-guide.txt"},{") rose=2;;": "abs-guide.txt"},{"5": "abs-guide.txt"},{") rose=4;;": "abs-guide.txt"},{"*": "abs-guide.txt"},{") rose=0;;": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"# Simplified algorithm.": "abs-guide.txt"},{"# Doesn't really get to the heart of the matter.": "abs-guide.txt"},{"return $rose": "abs-guide.txt"},{"}": "abs-guide.txt"},{"answer=0": "abs-guide.txt"},{"calc \"$B1\";": "abs-guide.txt"},{"calc \"$B2\";": "abs-guide.txt"},{"calc \"$B3\";": "abs-guide.txt"},{"calc \"$B4\";": "abs-guide.txt"},{"calc \"$B5\";": "abs-guide.txt"},{"": "abs-guide.txt"},{"answer=$(expr": "abs-guide.txt"},{"answer=$(expr": "abs-guide.txt"},{"answer=$(expr": "abs-guide.txt"},{"answer=$(expr": "abs-guide.txt"},{"answer=$(expr": "abs-guide.txt"},{"": "abs-guide.txt"},{"$answer": "abs-guide.txt"},{"$answer": "abs-guide.txt"},{"$answer": "abs-guide.txt"},{"$answer": "abs-guide.txt"},{"$answer": "abs-guide.txt"},{"": "abs-guide.txt"},{"+": "abs-guide.txt"},{"+": "abs-guide.txt"},{"+": "abs-guide.txt"},{"+": "abs-guide.txt"},{"+": "abs-guide.txt"},{"": "abs-guide.txt"},{"$(echo": "abs-guide.txt"},{"$(echo": "abs-guide.txt"},{"$(echo": "abs-guide.txt"},{"$(echo": "abs-guide.txt"},{"$(echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"$?))": "abs-guide.txt"},{"$?))": "abs-guide.txt"},{"$?))": "abs-guide.txt"},{"$?))": "abs-guide.txt"},{"$?))": "abs-guide.txt"},{"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"game ()": "abs-guide.txt"},{"{ # Generate graphic display of dice throw.": "abs-guide.txt"},{"throw": "abs-guide.txt"},{"echo -e \"\\033[1m\"": "abs-guide.txt"},{"# Bold.": "abs-guide.txt"},{"echo -e \"\\n\"": "abs-guide.txt"},{"echo -e \"$bone\\t$bone\\t$bone\\t$bone\\t$bone\"": "abs-guide.txt"},{"echo -e \\": "abs-guide.txt"},{"\"${bone1[$B1]}\\t${bone1[$B2]}\\t${bone1[$B3]}\\t${bone1[$B4]}\\t${bone1[$B5]}\"": "abs-guide.txt"},{"echo -e \\": "abs-guide.txt"},{"\"${bone2[$B1]}\\t${bone2[$B2]}\\t${bone2[$B3]}\\t${bone2[$B4]}\\t${bone2[$B5]}\"": "abs-guide.txt"},{"echo -e \\": "abs-guide.txt"},{"\"${bone3[$B1]}\\t${bone3[$B2]}\\t${bone3[$B3]}\\t${bone3[$B4]}\\t${bone3[$B5]}\"": "abs-guide.txt"},{"echo -e \"$bone\\t$bone\\t$bone\\t$bone\\t$bone\"": "abs-guide.txt"},{"echo -e \"\\n\\n\\t\\t\"": "abs-guide.txt"},{"echo -e \"\\033[0m\"": "abs-guide.txt"},{"# Turn off bold.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"713": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"echo -n \"There are how many petals around the rose? \"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"# ============================================================== #": "abs-guide.txt"},{"instructions": "abs-guide.txt"},{"while [ \"$petal\" != \"$EXIT\" ]": "abs-guide.txt"},{"# Main loop.": "abs-guide.txt"},{"do": "abs-guide.txt"},{"game": "abs-guide.txt"},{"read petal": "abs-guide.txt"},{"echo \"$petal\" | grep [0-9] >/dev/null # Filter response for digit.": "abs-guide.txt"},{"# Otherwise just roll dice again.": "abs-guide.txt"},{"if [ \"$?\" -eq 0 ]": "abs-guide.txt"},{"# If-loop #1.": "abs-guide.txt"},{"then": "abs-guide.txt"},{"if [ \"$petal\" == \"$answer\" ]; then": "abs-guide.txt"},{"# If-loop #2.": "abs-guide.txt"},{"echo -e \"\\nCorrect. There are $petal petals around the rose.\\n\"": "abs-guide.txt"},{"(( hits++ ))": "abs-guide.txt"},{"if [ \"$hits\" -eq \"$WIN\" ]; then": "abs-guide.txt"},{"# If-loop #3.": "abs-guide.txt"},{"echo -e '\\E[31;47m' # Red type.": "abs-guide.txt"},{"echo -e \"\\033[1m\"": "abs-guide.txt"},{"# Bold.": "abs-guide.txt"},{"echo \"You have unraveled the mystery of the Rose Petals!\"": "abs-guide.txt"},{"echo \"Welcome to the Fellowship of the Rose!!!\"": "abs-guide.txt"},{"echo \"(You are herewith sworn to secrecy.)\"; echo": "abs-guide.txt"},{"echo -e \"\\033[0m\"": "abs-guide.txt"},{"# Turn off red & bold.": "abs-guide.txt"},{"break": "abs-guide.txt"},{"# Exit!": "abs-guide.txt"},{"else echo \"You have $hits correct so far.\"; echo": "abs-guide.txt"},{"if [ \"$hits\" -eq \"$ALMOST\" ]; then": "abs-guide.txt"},{"echo \"Just one more gets you to the heart of the mystery!\"; echo": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Close if-loop #3.": "abs-guide.txt"},{"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo -e \"\\nWrong. There are $answer petals around the rose.\\n\"": "abs-guide.txt"},{"hits=0": "abs-guide.txt"},{"# Reset number of correct guesses.": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# Close if-loop #2.": "abs-guide.txt"},{"echo -n \"Hit ENTER for the next roll, or type \\\"exit\\\" to end. \"": "abs-guide.txt"},{"read": "abs-guide.txt"},{"if [ \"$REPLY\" = \"$EXIT\" ]; then exit": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"clear": "abs-guide.txt"},{"done": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Close if-loop #1.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# End of main (while) loop.": "abs-guide.txt"},{"": "abs-guide.txt"},{"###": "abs-guide.txt"},{"exit $?": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Resources:": "abs-guide.txt"},{"--------1) http://en.wikipedia.org/wiki/Petals_Around_the_Rose": "abs-guide.txt"},{"(Wikipedia entry.)": "abs-guide.txt"},{"2) http://www.borrett.id.au/computing/petals-bg.htm": "abs-guide.txt"},{"(How Bill Gates coped with the Petals Around the Rose challenge.)": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"714": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"Example A-41. Quacky: a Perquackey-type word game": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# qky.sh": "abs-guide.txt"},{"##############################################################": "abs-guide.txt"},{"# QUACKEY: a somewhat simplified version of Perquackey [TM]. #": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Author: Mendel Cooper <thegrendel.abs@gmail.com>": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# version 0.1.02": "abs-guide.txt"},{"03 May, 2008": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# License: GPL3": "abs-guide.txt"},{"#": "abs-guide.txt"},{"##############################################################": "abs-guide.txt"},{"WLIST=/usr/share/dict/word.lst": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^^^^^^^^ Word list file found here.": "abs-guide.txt"},{"# ASCII word list, one word per line, UNIX format.": "abs-guide.txt"},{"# A suggested list is the script author's \"yawl\" word list package.": "abs-guide.txt"},{"# http://bash.deta.in/yawl-0.3.2.tar.gz": "abs-guide.txt"},{"#": "abs-guide.txt"},{"or": "abs-guide.txt"},{"# http://ibiblio.org/pub/Linux/libs/yawl-0.3.2.tar.gz": "abs-guide.txt"},{"NONCONS=0": "abs-guide.txt"},{"CONS=1": "abs-guide.txt"},{"SUCCESS=0": "abs-guide.txt"},{"NG=1": "abs-guide.txt"},{"FAILURE=''": "abs-guide.txt"},{"NULL=0": "abs-guide.txt"},{"MINWLEN=3": "abs-guide.txt"},{"MAXCAT=5": "abs-guide.txt"},{"PENALTY=200": "abs-guide.txt"},{"total=": "abs-guide.txt"},{"E_DUP=70": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Word not constructable from letter set.": "abs-guide.txt"},{"# Constructable.": "abs-guide.txt"},{"": "abs-guide.txt"},{"TIMEOUT=10": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Time for word input.": "abs-guide.txt"},{"": "abs-guide.txt"},{"NVLET=10": "abs-guide.txt"},{"VULET=13": "abs-guide.txt"},{"": "abs-guide.txt"},{"# 10 letters for non-vulnerable.": "abs-guide.txt"},{"# 13 letters for vulnerable (not yet implemented!).": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Zero out value of letter (if found).": "abs-guide.txt"},{"Minimum word length.": "abs-guide.txt"},{"Maximum number of words in a given category.": "abs-guide.txt"},{"General-purpose penalty for unacceptable words.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Duplicate word error.": "abs-guide.txt"},{"": "abs-guide.txt"},{"declare -a Words": "abs-guide.txt"},{"declare -a Status": "abs-guide.txt"},{"declare -a Score=( 0 0 0 0 0 0 0 0 0 0 0 )": "abs-guide.txt"},{"": "abs-guide.txt"},{"letters=( a n s r t m l k p r b c i d s i d z e w u e t f": "abs-guide.txt"},{"e y e r e f e g t g h h i t r s c i t i d i j a t a o l a": "abs-guide.txt"},{"m n a n o v n w o s e l n o s p a q e e r a b r s a o d s": "abs-guide.txt"},{"t g t i t l u e u v n e o x y m r k )": "abs-guide.txt"},{"# Letter distribution table shamelessly borrowed from \"Wordy\" game,": "abs-guide.txt"},{"#+ ca. 1992, written by a certain fine fellow named Mendel Cooper.": "abs-guide.txt"},{"declare -a LS": "abs-guide.txt"},{"numelements=${#letters[@]}": "abs-guide.txt"},{"randseed=\"$1\"": "abs-guide.txt"},{"instructions ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"clear": "abs-guide.txt"},{"echo \"Welcome to QUACKEY, the anagramming word construction game.\"; echo": "abs-guide.txt"},{"echo -n \"Do you need instructions? (y/n) \"; read ans": "abs-guide.txt"},{"if [ \"$ans\" = \"y\" -o \"$ans\" = \"Y\" ]; then": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"715": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"clear": "abs-guide.txt"},{"echo -e '\\E[31;47m'": "abs-guide.txt"},{"cat <<INSTRUCTION1": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Red foreground. '\\E[34;47m' for blue.": "abs-guide.txt"},{"": "abs-guide.txt"},{"QUACKEY is a variant of Perquackey [TM].": "abs-guide.txt"},{"The rules are the same, but the scoring is simplified": "abs-guide.txt"},{"and plurals of previously played words are allowed.": "abs-guide.txt"},{"\"Vulnerable\" play is not yet implemented,": "abs-guide.txt"},{"but it is otherwise feature-complete.": "abs-guide.txt"},{"As the game begins, the player gets 10 letters.": "abs-guide.txt"},{"The object is to construct valid dictionary words": "abs-guide.txt"},{"of at least 3-letter length from the letterset.": "abs-guide.txt"},{"Each word-length category": "abs-guide.txt"},{"-- 3-letter, 4-letter, 5-letter, ... -fills up with the fifth word entered,": "abs-guide.txt"},{"and no further words in that category are accepted.": "abs-guide.txt"},{"The penalty for too-short (two-letter), duplicate, unconstructable,": "abs-guide.txt"},{"and invalid (not in dictionary) words is -200. The same penalty applies": "abs-guide.txt"},{"to attempts to enter a word in a filled-up category.": "abs-guide.txt"},{"INSTRUCTION1": "abs-guide.txt"},{"echo -n \"Hit ENTER for next page of instructions. \"; read az1": "abs-guide.txt"},{"cat <<INSTRUCTION2": "abs-guide.txt"},{"The": "abs-guide.txt"},{"The": "abs-guide.txt"},{"The": "abs-guide.txt"},{"The": "abs-guide.txt"},{"The": "abs-guide.txt"},{"The": "abs-guide.txt"},{"The": "abs-guide.txt"},{"The": "abs-guide.txt"},{"The": "abs-guide.txt"},{"": "abs-guide.txt"},{"scoring mostly corresponds to classic Perquackey:": "abs-guide.txt"},{"first 3-letter word scores": "abs-guide.txt"},{"60, plus": "abs-guide.txt"},{"10 for each": "abs-guide.txt"},{"first 4-letter word scores": "abs-guide.txt"},{"120, plus": "abs-guide.txt"},{"20 for each": "abs-guide.txt"},{"first 5-letter word scores": "abs-guide.txt"},{"200, plus": "abs-guide.txt"},{"50 for each": "abs-guide.txt"},{"first 6-letter word scores": "abs-guide.txt"},{"300, plus 100 for each": "abs-guide.txt"},{"first 7-letter word scores": "abs-guide.txt"},{"500, plus 150 for each": "abs-guide.txt"},{"first 8-letter word scores": "abs-guide.txt"},{"750, plus 250 for each": "abs-guide.txt"},{"first 9-letter word scores 1000, plus 500 for each": "abs-guide.txt"},{"first 10-letter word scores 2000, plus 2000 for each": "abs-guide.txt"},{"": "abs-guide.txt"},{"additional": "abs-guide.txt"},{"additional": "abs-guide.txt"},{"additional": "abs-guide.txt"},{"additional": "abs-guide.txt"},{"additional": "abs-guide.txt"},{"additional": "abs-guide.txt"},{"additional": "abs-guide.txt"},{"additional": "abs-guide.txt"},{"": "abs-guide.txt"},{"one.": "abs-guide.txt"},{"one.": "abs-guide.txt"},{"one.": "abs-guide.txt"},{"one.": "abs-guide.txt"},{"one.": "abs-guide.txt"},{"one.": "abs-guide.txt"},{"one.": "abs-guide.txt"},{"one.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Category completion bonuses are:": "abs-guide.txt"},{"3-letter words": "abs-guide.txt"},{"100": "abs-guide.txt"},{"4-letter words": "abs-guide.txt"},{"200": "abs-guide.txt"},{"5-letter words": "abs-guide.txt"},{"400": "abs-guide.txt"},{"6-letter words": "abs-guide.txt"},{"800": "abs-guide.txt"},{"7-letter words 2000": "abs-guide.txt"},{"8-letter words 10000": "abs-guide.txt"},{"This is a simplification of the absurdly baroque Perquackey bonus": "abs-guide.txt"},{"scoring system.": "abs-guide.txt"},{"INSTRUCTION2": "abs-guide.txt"},{"echo -n \"Hit ENTER for final page of instructions. \"; read az1": "abs-guide.txt"},{"cat <<INSTRUCTION3": "abs-guide.txt"},{"": "abs-guide.txt"},{"Hitting just ENTER for a word entry ends the game.": "abs-guide.txt"},{"Individual word entry is timed to a maximum of 10 seconds.": "abs-guide.txt"},{"*** Timing out on an entry ends the game. ***": "abs-guide.txt"},{"Aside from that, the game is untimed.": "abs-guide.txt"},{"--------------------------------------------------": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"716": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"Game statistics are automatically saved to a file.": "abs-guide.txt"},{"-------------------------------------------------For competitive (\"duplicate\") play, a previous letterset": "abs-guide.txt"},{"may be duplicated by repeating the script's random seed,": "abs-guide.txt"},{"command-line parameter \\$1.": "abs-guide.txt"},{"For example, \"qky 7633\" specifies the letterset": "abs-guide.txt"},{"c a d i f r h u s k ...": "abs-guide.txt"},{"INSTRUCTION3": "abs-guide.txt"},{"echo; echo -n \"Hit ENTER to begin game. \"; read az1": "abs-guide.txt"},{"echo -e \"\\033[0m\"": "abs-guide.txt"},{"else clear": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Turn off red.": "abs-guide.txt"},{"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"clear": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"seed_random ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"if [ -n \"$randseed\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"#": "abs-guide.txt"},{"RANDOM=\"$randseed\"": "abs-guide.txt"},{"echo \"RANDOM seed set": "abs-guide.txt"},{"else": "abs-guide.txt"},{"randseed=\"$$\"": "abs-guide.txt"},{"echo \"RANDOM seed not": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Seed random number generator.": "abs-guide.txt"},{"# Can specify random seed.": "abs-guide.txt"},{"#+ for play in competitive mode.": "abs-guide.txt"},{"to \"$randseed\"\"": "abs-guide.txt"},{"# Or get random seed from process ID.": "abs-guide.txt"},{"specified, set to Process ID of script ($$).\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"RANDOM=\"$randseed\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"get_letset ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"element=0": "abs-guide.txt"},{"echo -n \"Letterset:\"": "abs-guide.txt"},{"for lset in $(seq $NVLET)": "abs-guide.txt"},{"do # Pick random letters to fill out letterset.": "abs-guide.txt"},{"LS[element]=\"${letters[$((RANDOM%numelements))]}\"": "abs-guide.txt"},{"((element++))": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"${LS[@]}\"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"add_word ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"wrd=\"$1\"": "abs-guide.txt"},{"local idx=0": "abs-guide.txt"},{"Status[0]=\"\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"717": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"Status[3]=\"\"": "abs-guide.txt"},{"Status[4]=\"\"": "abs-guide.txt"},{"while [ \"${Words[idx]}\" != '' ]": "abs-guide.txt"},{"do": "abs-guide.txt"},{"if [ \"${Words[idx]}\" = \"$wrd\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"Status[3]=\"Duplicate-word-PENALTY\"": "abs-guide.txt"},{"let \"Score[0]= 0 - $PENALTY\"": "abs-guide.txt"},{"let \"Score[1]-=$PENALTY\"": "abs-guide.txt"},{"return $E_DUP": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"((idx++))": "abs-guide.txt"},{"done": "abs-guide.txt"},{"Words[idx]=\"$wrd\"": "abs-guide.txt"},{"get_score": "abs-guide.txt"},{"}": "abs-guide.txt"},{"get_score()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"local wlen=0": "abs-guide.txt"},{"local score=0": "abs-guide.txt"},{"local bonus=0": "abs-guide.txt"},{"local first_word=0": "abs-guide.txt"},{"local add_word=0": "abs-guide.txt"},{"local numwords=0": "abs-guide.txt"},{"wlen=${#wrd}": "abs-guide.txt"},{"numwords=${Score[wlen]}": "abs-guide.txt"},{"Score[2]=0": "abs-guide.txt"},{"Status[4]=\"\"": "abs-guide.txt"},{"# Initialize \"bonus\" to 0.": "abs-guide.txt"},{"case \"$wlen\" in": "abs-guide.txt"},{"3) first_word=60": "abs-guide.txt"},{"add_word=10;;": "abs-guide.txt"},{"4) first_word=120": "abs-guide.txt"},{"add_word=20;;": "abs-guide.txt"},{"5) first_word=200": "abs-guide.txt"},{"add_word=50;;": "abs-guide.txt"},{"6) first_word=300": "abs-guide.txt"},{"add_word=100;;": "abs-guide.txt"},{"7) first_word=500": "abs-guide.txt"},{"add_word=150;;": "abs-guide.txt"},{"8) first_word=750": "abs-guide.txt"},{"add_word=250;;": "abs-guide.txt"},{"9) first_word=1000": "abs-guide.txt"},{"add_word=500;;": "abs-guide.txt"},{"10) first_word=2000": "abs-guide.txt"},{"add_word=2000;;": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"": "abs-guide.txt"},{"# This category modified from original rules!": "abs-guide.txt"},{"": "abs-guide.txt"},{"((Score[wlen]++))": "abs-guide.txt"},{"if [ ${Score[wlen]} -eq $MAXCAT ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"# Category completion bonus scoring simplified!": "abs-guide.txt"},{"case $wlen in": "abs-guide.txt"},{"3 ) bonus=100;;": "abs-guide.txt"},{"4 ) bonus=200;;": "abs-guide.txt"},{"5 ) bonus=400;;": "abs-guide.txt"},{"6 ) bonus=800;;": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"718": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"7 ) bonus=2000;;": "abs-guide.txt"},{"8 ) bonus=10000;;": "abs-guide.txt"},{"esac # Needn't worry about 9's and 10's.": "abs-guide.txt"},{"Status[4]=\"Category-$wlen-completion***BONUS***\"": "abs-guide.txt"},{"Score[2]=$bonus": "abs-guide.txt"},{"else": "abs-guide.txt"},{"Status[4]=\"\"": "abs-guide.txt"},{"# Erase it.": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"let \"score = $first_word +": "abs-guide.txt"},{"$add_word * $numwords\"": "abs-guide.txt"},{"if [ \"$numwords\" -eq 0 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"Score[0]=$score": "abs-guide.txt"},{"else": "abs-guide.txt"},{"Score[0]=$add_word": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# All this to distinguish last-word score": "abs-guide.txt"},{"#+ from total running score.": "abs-guide.txt"},{"let \"Score[1] += ${Score[0]}\"": "abs-guide.txt"},{"let \"Score[1] += ${Score[2]}\"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"get_word ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"local wrd=''": "abs-guide.txt"},{"read -t $TIMEOUT wrd": "abs-guide.txt"},{"echo $wrd": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Timed read.": "abs-guide.txt"},{"": "abs-guide.txt"},{"is_constructable ()": "abs-guide.txt"},{"{ # This is the most complex and difficult-to-write function.": "abs-guide.txt"},{"local -a local_LS=( \"${LS[@]}\" ) # Local copy of letter set.": "abs-guide.txt"},{"local is_found=0": "abs-guide.txt"},{"local idx=0": "abs-guide.txt"},{"local pos": "abs-guide.txt"},{"local strlen": "abs-guide.txt"},{"local local_word=( \"$1\" )": "abs-guide.txt"},{"strlen=${#local_word}": "abs-guide.txt"},{"while [ \"$idx\" -lt \"$strlen\" ]": "abs-guide.txt"},{"do": "abs-guide.txt"},{"is_found=$(expr index \"${local_LS[*]}\" \"${local_word:idx:1}\")": "abs-guide.txt"},{"if [ \"$is_found\" -eq \"$NONCONS\" ] # Not constructable!": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"$FAILURE\"; return": "abs-guide.txt"},{"else": "abs-guide.txt"},{"((pos = ($is_found - 1) / 2))": "abs-guide.txt"},{"# Compensate for spaces betw. letters!": "abs-guide.txt"},{"local_LS[pos]=$NULL": "abs-guide.txt"},{"# Zero out used letters.": "abs-guide.txt"},{"((idx++))": "abs-guide.txt"},{"# Bump index.": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo \"$SUCCESS\"": "abs-guide.txt"},{"return": "abs-guide.txt"},{"}": "abs-guide.txt"},{"is_valid ()": "abs-guide.txt"},{"{ # Surprisingly easy to check if word in dictionary ...": "abs-guide.txt"},{"fgrep -qw \"$1\" \"$WLIST\"": "abs-guide.txt"},{"# ... courtesy of 'grep' ...": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"719": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"echo $?": "abs-guide.txt"},{"}": "abs-guide.txt"},{"check_word ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"if [ -z \"$1\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"return": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"Status[1]=\"\"": "abs-guide.txt"},{"Status[2]=\"\"": "abs-guide.txt"},{"Status[3]=\"\"": "abs-guide.txt"},{"Status[4]=\"\"": "abs-guide.txt"},{"iscons=$(is_constructable \"$1\")": "abs-guide.txt"},{"if [ \"$iscons\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"Status[1]=\"constructable\"": "abs-guide.txt"},{"v=$(is_valid \"$1\")": "abs-guide.txt"},{"if [ \"$v\" -eq \"$SUCCESS\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"Status[2]=\"valid\"": "abs-guide.txt"},{"strlen=${#1}": "abs-guide.txt"},{"if [ ${Score[strlen]} -eq \"$MAXCAT\" ]": "abs-guide.txt"},{"# Category full!": "abs-guide.txt"},{"then": "abs-guide.txt"},{"Status[3]=\"Category-$strlen-overflow-PENALTY\"": "abs-guide.txt"},{"return $NG": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"case \"$strlen\" in": "abs-guide.txt"},{"1 | 2 )": "abs-guide.txt"},{"Status[3]=\"Two-letter-word-PENALTY\"": "abs-guide.txt"},{"return $NG;;": "abs-guide.txt"},{"* )": "abs-guide.txt"},{"Status[3]=\"\"": "abs-guide.txt"},{"return $SUCCESS;;": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"else": "abs-guide.txt"},{"Status[3]=\"Not-valid-PENALTY\"": "abs-guide.txt"},{"return $NG": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"else": "abs-guide.txt"},{"Status[3]=\"Not-constructable-PENALTY\"": "abs-guide.txt"},{"return $NG": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"### FIXME: Streamline the above code block.": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"display_words ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"local idx=0": "abs-guide.txt"},{"local wlen0": "abs-guide.txt"},{"clear": "abs-guide.txt"},{"echo \"Letterset:": "abs-guide.txt"},{"${LS[@]}\"": "abs-guide.txt"},{"echo \"Threes:": "abs-guide.txt"},{"Fours:": "abs-guide.txt"},{"Fives:": "abs-guide.txt"},{"Sixes:": "abs-guide.txt"},{"Sevens:": "abs-guide.txt"},{"Eights:\"": "abs-guide.txt"},{"echo \"------------------------------------------------------------\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"720": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"": "abs-guide.txt"},{"while [ \"${Words[idx]}\" != '' ]": "abs-guide.txt"},{"do": "abs-guide.txt"},{"wlen0=${#Words[idx]}": "abs-guide.txt"},{"case \"$wlen0\" in": "abs-guide.txt"},{"3) ;;": "abs-guide.txt"},{"4) echo -n \"": "abs-guide.txt"},{"\" ;;": "abs-guide.txt"},{"5) echo -n \"": "abs-guide.txt"},{"6) echo -n \"": "abs-guide.txt"},{"7) echo -n \"": "abs-guide.txt"},{"8) echo -n \"": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"echo \"${Words[idx]}\"": "abs-guide.txt"},{"((idx++))": "abs-guide.txt"},{"done": "abs-guide.txt"},{"": "abs-guide.txt"},{"\" ;;": "abs-guide.txt"},{"\" ;;": "abs-guide.txt"},{"\" ;;": "abs-guide.txt"},{"\" ;;": "abs-guide.txt"},{"": "abs-guide.txt"},{"### FIXME: The word display is pretty crude.": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"play ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"word=\"Start game\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Dummy word, to start ...": "abs-guide.txt"},{"": "abs-guide.txt"},{"while [ \"$word\" ]": "abs-guide.txt"},{"# If player just hits return (null word),": "abs-guide.txt"},{"do": "abs-guide.txt"},{"#+ then game ends.": "abs-guide.txt"},{"echo \"$word: \"${Status[@]}\"\"": "abs-guide.txt"},{"echo -n \"Last score: [${Score[0]}]": "abs-guide.txt"},{"TOTAL score: [${Score[1]}]:": "abs-guide.txt"},{"total=${Score[1]}": "abs-guide.txt"},{"word=$(get_word)": "abs-guide.txt"},{"check_word \"$word\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"Next word: \"": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [ \"$?\" -eq \"$SUCCESS\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"add_word \"$word\"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"let \"Score[0]= 0 - $PENALTY\"": "abs-guide.txt"},{"let \"Score[1]-=$PENALTY\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"display_words": "abs-guide.txt"},{"done": "abs-guide.txt"},{"# Exit game.": "abs-guide.txt"},{"### FIXME: The play () function calls too many other functions.": "abs-guide.txt"},{"### This verges on \"spaghetti code\" !!!": "abs-guide.txt"},{"}": "abs-guide.txt"},{"end_of_game ()": "abs-guide.txt"},{"{ # Save and display stats.": "abs-guide.txt"},{"#######################Autosave##########################": "abs-guide.txt"},{"savefile=qky.save.$$": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^^ PID of script": "abs-guide.txt"},{"echo `date` >> $savefile": "abs-guide.txt"},{"echo \"Letterset # $randseed (random seed) \">> $savefile": "abs-guide.txt"},{"echo -n \"Letterset: \" >> $savefile": "abs-guide.txt"},{"echo \"${LS[@]}\" >> $savefile": "abs-guide.txt"},{"echo \"---------\" >> $savefile": "abs-guide.txt"},{"echo \"Words constructed:\" >> $savefile": "abs-guide.txt"},{"echo \"${Words[@]}\" >> $savefile": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"721": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"echo >> $savefile": "abs-guide.txt"},{"echo \"Score: $total\" >> $savefile": "abs-guide.txt"},{"echo \"Statistics for this round saved in \\\"\"$savefile\"\\\"\"": "abs-guide.txt"},{"#########################################################": "abs-guide.txt"},{"echo \"Score for this round: $total\"": "abs-guide.txt"},{"echo \"Words: ${Words[@]}\"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"# ---------#": "abs-guide.txt"},{"instructions": "abs-guide.txt"},{"seed_random": "abs-guide.txt"},{"get_letset": "abs-guide.txt"},{"play": "abs-guide.txt"},{"end_of_game": "abs-guide.txt"},{"# ---------#": "abs-guide.txt"},{"exit $?": "abs-guide.txt"},{"# TODO:": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# 1) Clean up code!": "abs-guide.txt"},{"# 2) Prettify the display_words () function (maybe with widgets?).": "abs-guide.txt"},{"# 3) Improve the time-out ... maybe change to untimed entry,": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"but with a time limit for the overall round.": "abs-guide.txt"},{"# 4) An on-screen countdown timer would be nice.": "abs-guide.txt"},{"# 5) Implement \"vulnerable\" mode of play for compatibility with classic": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"version of the game.": "abs-guide.txt"},{"# 6) Improve save-to-file capability (and maybe make it optional).": "abs-guide.txt"},{"# 7) Fix bugs!!!": "abs-guide.txt"},{"# For more info, reference:": "abs-guide.txt"},{"# http://bash.deta.in/qky.README.html": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example A-42. Nim": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# nim.sh: Game of Nim": "abs-guide.txt"},{"# Author: Mendel Cooper": "abs-guide.txt"},{"# Reldate: 15 July 2008": "abs-guide.txt"},{"# License: GPL3": "abs-guide.txt"},{"ROWS=5": "abs-guide.txt"},{"# Five rows of pegs (or matchsticks).": "abs-guide.txt"},{"WON=91": "abs-guide.txt"},{"# Exit codes to keep track of wins/losses.": "abs-guide.txt"},{"LOST=92": "abs-guide.txt"},{"# Possibly useful if running in batch mode.": "abs-guide.txt"},{"QUIT=99": "abs-guide.txt"},{"peg_msg=": "abs-guide.txt"},{"# Peg/Pegs?": "abs-guide.txt"},{"Rows=( 0 5 4 3 2 1 )": "abs-guide.txt"},{"# Array holding play info.": "abs-guide.txt"},{"# ${Rows[0]} holds total number of pegs, updated after each turn.": "abs-guide.txt"},{"# Other array elements hold number of pegs in corresponding row.": "abs-guide.txt"},{"instructions ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"clear": "abs-guide.txt"},{"tput bold": "abs-guide.txt"},{"echo \"Welcome to the game of Nim.\"; echo": "abs-guide.txt"},{"echo -n \"Do you need instructions? (y/n) \"; read ans": "abs-guide.txt"},{"if [ \"$ans\" = \"y\" -o \"$ans\" = \"Y\" ]; then": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"722": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"clear": "abs-guide.txt"},{"echo -e '\\E[33;41m'": "abs-guide.txt"},{"cat <<INSTRUCTIONS": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Yellow fg., over red bg.; bold.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Nim is a game with roots in the distant past.": "abs-guide.txt"},{"This particular variant starts with five rows of pegs.": "abs-guide.txt"},{"1:": "abs-guide.txt"},{"2:": "abs-guide.txt"},{"3:": "abs-guide.txt"},{"4:": "abs-guide.txt"},{"5:": "abs-guide.txt"},{"": "abs-guide.txt"},{"| | | | |": "abs-guide.txt"},{"| | | |": "abs-guide.txt"},{"| | |": "abs-guide.txt"},{"| |": "abs-guide.txt"},{"|": "abs-guide.txt"},{"": "abs-guide.txt"},{"The number at the left identifies the row.": "abs-guide.txt"},{"The human player moves first, and alternates turns with the bot.": "abs-guide.txt"},{"A turn consists of removing at least one peg from a single row.": "abs-guide.txt"},{"It is permissable to remove ALL the pegs from a row.": "abs-guide.txt"},{"For example, in row 2, above, the player can remove 1, 2, 3, or 4 pegs.": "abs-guide.txt"},{"The player who removes the last peg loses.": "abs-guide.txt"},{"The strategy consists of trying to be the one who removes": "abs-guide.txt"},{"the next-to-last peg(s), leaving the loser with the final peg.": "abs-guide.txt"},{"To exit the game early, hit ENTER during your turn.": "abs-guide.txt"},{"INSTRUCTIONS": "abs-guide.txt"},{"echo; echo -n \"Hit ENTER to begin game. \"; read azx": "abs-guide.txt"},{"echo -e \"\\033[0m\"": "abs-guide.txt"},{"# Restore display.": "abs-guide.txt"},{"else tput sgr0; clear": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"clear": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"tally_up ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"let \"Rows[0] = ${Rows[1]} + ${Rows[2]} + ${Rows[3]} + ${Rows[4]} + \\": "abs-guide.txt"},{"${Rows[5]}\"": "abs-guide.txt"},{"# Add up how many pegs remaining.": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"display ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"index=1": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Start with top row.": "abs-guide.txt"},{"": "abs-guide.txt"},{"while [ \"$index\" -le \"$ROWS\" ]": "abs-guide.txt"},{"do": "abs-guide.txt"},{"p=${Rows[index]}": "abs-guide.txt"},{"echo -n \"$index:": "abs-guide.txt"},{"\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Show row number.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# -----------------------------------------------# Two concurrent inner loops.": "abs-guide.txt"},{"indent=$index": "abs-guide.txt"},{"while [ \"$indent\" -gt 0 ]": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo -n \" \"": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Staggered rows.": "abs-guide.txt"},{"": "abs-guide.txt"},{"723": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"((indent--))": "abs-guide.txt"},{"done": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Spacing between pegs.": "abs-guide.txt"},{"": "abs-guide.txt"},{"while [ \"$p\" -gt 0 ]": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo -n \"| \"": "abs-guide.txt"},{"((p--))": "abs-guide.txt"},{"done": "abs-guide.txt"},{"# ----------------------------------------------echo": "abs-guide.txt"},{"((index++))": "abs-guide.txt"},{"done": "abs-guide.txt"},{"tally_up": "abs-guide.txt"},{"rp=${Rows[0]}": "abs-guide.txt"},{"if [ \"$rp\" -eq 1 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"peg_msg=peg": "abs-guide.txt"},{"final_msg=\"Game over.\"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"# Game not yet over . . .": "abs-guide.txt"},{"peg_msg=pegs": "abs-guide.txt"},{"final_msg=\"\"": "abs-guide.txt"},{"# . . . So \"final message\" is blank.": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"echo \"": "abs-guide.txt"},{"echo \"": "abs-guide.txt"},{"": "abs-guide.txt"},{"$rp $peg_msg remaining.\"": "abs-guide.txt"},{"\"$final_msg\"\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"}": "abs-guide.txt"},{"player_move ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"echo \"Your move:\"": "abs-guide.txt"},{"echo -n \"Which row? \"": "abs-guide.txt"},{"while read idx": "abs-guide.txt"},{"do": "abs-guide.txt"},{"# Validity check, etc.": "abs-guide.txt"},{"if [ -z \"$idx\" ]": "abs-guide.txt"},{"# Hitting return quits.": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Premature exit.\"; echo": "abs-guide.txt"},{"tput sgr0": "abs-guide.txt"},{"# Restore display.": "abs-guide.txt"},{"exit $QUIT": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"if [ \"$idx\" -gt \"$ROWS\" -o \"$idx\" -lt 1 ]": "abs-guide.txt"},{"# Bounds check.": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Invalid row number!\"": "abs-guide.txt"},{"echo -n \"Which row? \"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"break": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# TODO:": "abs-guide.txt"},{"# Add check for non-numeric input.": "abs-guide.txt"},{"# Also, script crashes on input outside of range of long double.": "abs-guide.txt"},{"# Fix this.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"724": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo -n \"Remove how many? \"": "abs-guide.txt"},{"while read num": "abs-guide.txt"},{"do": "abs-guide.txt"},{"# Validity check.": "abs-guide.txt"},{"if [ -z \"$num\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Premature exit.\"; echo": "abs-guide.txt"},{"tput sgr0": "abs-guide.txt"},{"# Restore display.": "abs-guide.txt"},{"exit $QUIT": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"if [ \"$num\" -gt ${Rows[idx]} -o \"$num\" -lt 1 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"Cannot remove $num!\"": "abs-guide.txt"},{"echo -n \"Remove how many? \"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"break": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"done": "abs-guide.txt"},{"# TODO:": "abs-guide.txt"},{"# Add check for non-numeric input.": "abs-guide.txt"},{"# Also, script crashes on input outside of range of long double.": "abs-guide.txt"},{"# Fix this.": "abs-guide.txt"},{"let \"Rows[idx] -= $num\"": "abs-guide.txt"},{"display": "abs-guide.txt"},{"tally_up": "abs-guide.txt"},{"if [ ${Rows[0]} -eq 1 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"": "abs-guide.txt"},{"Human wins!\"": "abs-guide.txt"},{"echo \"": "abs-guide.txt"},{"Congratulations!\"": "abs-guide.txt"},{"tput sgr0": "abs-guide.txt"},{"# Restore display.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"exit $WON": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"if [ ${Rows[0]} -eq 0 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"# Snatching defeat from the jaws of victory . . .": "abs-guide.txt"},{"echo \"": "abs-guide.txt"},{"Fool!\"": "abs-guide.txt"},{"echo \"": "abs-guide.txt"},{"You just removed the last peg!\"": "abs-guide.txt"},{"echo \"": "abs-guide.txt"},{"Bot wins!\"": "abs-guide.txt"},{"tput sgr0": "abs-guide.txt"},{"# Restore display.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"exit $LOST": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"bot_move ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"row_b=0": "abs-guide.txt"},{"while [[ $row_b -eq 0 || ${Rows[row_b]} -eq 0 ]]": "abs-guide.txt"},{"do": "abs-guide.txt"},{"row_b=$RANDOM": "abs-guide.txt"},{"# Choose random row.": "abs-guide.txt"},{"let \"row_b %= $ROWS\"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"725": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"num_b=0": "abs-guide.txt"},{"r0=${Rows[row_b]}": "abs-guide.txt"},{"if [ \"$r0\" -eq 1 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"num_b=1": "abs-guide.txt"},{"else": "abs-guide.txt"},{"let \"num_b = $r0 - 1\"": "abs-guide.txt"},{"# Leave only a single peg in the row.": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# Not a very strong strategy,": "abs-guide.txt"},{"#+ but probably a bit better than totally random.": "abs-guide.txt"},{"let \"Rows[row_b] -= $num_b\"": "abs-guide.txt"},{"echo -n \"Bot: \"": "abs-guide.txt"},{"echo \"Removing from row $row_b ... \"": "abs-guide.txt"},{"if [ \"$num_b\" -eq 1 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"peg_msg=peg": "abs-guide.txt"},{"else": "abs-guide.txt"},{"peg_msg=pegs": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"echo \"": "abs-guide.txt"},{"": "abs-guide.txt"},{"$num_b $peg_msg.\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"display": "abs-guide.txt"},{"tally_up": "abs-guide.txt"},{"if [ ${Rows[0]} -eq 1 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"": "abs-guide.txt"},{"Bot wins!\"": "abs-guide.txt"},{"tput sgr0": "abs-guide.txt"},{"# Restore display.": "abs-guide.txt"},{"exit $WON": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"# ================================================== #": "abs-guide.txt"},{"instructions": "abs-guide.txt"},{"# If human player needs them . . .": "abs-guide.txt"},{"tput bold": "abs-guide.txt"},{"# Bold characters for easier viewing.": "abs-guide.txt"},{"display": "abs-guide.txt"},{"# Show game board.": "abs-guide.txt"},{"while [ true ]": "abs-guide.txt"},{"# Main loop.": "abs-guide.txt"},{"do": "abs-guide.txt"},{"# Alternate human and bot turns.": "abs-guide.txt"},{"player_move": "abs-guide.txt"},{"bot_move": "abs-guide.txt"},{"done": "abs-guide.txt"},{"# ================================================== #": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"Exercise:": "abs-guide.txt"},{"-------Improve the bot's strategy.": "abs-guide.txt"},{"There is, in fact, a Nim strategy that can force a win.": "abs-guide.txt"},{"See the Wikipedia article on Nim: http://en.wikipedia.org/wiki/Nim": "abs-guide.txt"},{"Recode the bot to use this strategy (rather difficult).": "abs-guide.txt"},{"Curiosities:": "abs-guide.txt"},{"----------Nim played a prominent role in Alain Resnais' 1961 New Wave film,": "abs-guide.txt"},{"Last Year at Marienbad.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"726": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# In 1978, Leo Christopherson wrote an animated version of Nim,": "abs-guide.txt"},{"#+ Android Nim, for the TRS-80 Model I.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example A-43. A command-line stopwatch": "abs-guide.txt"},{"#!/bin/sh": "abs-guide.txt"},{"# sw.sh": "abs-guide.txt"},{"# A command-line Stopwatch": "abs-guide.txt"},{"# Author: P\u00e1draig Brady": "abs-guide.txt"},{"#": "abs-guide.txt"},{"http://www.pixelbeat.org/scripts/sw": "abs-guide.txt"},{"#": "abs-guide.txt"},{"(Minor reformatting by ABS Guide author.)": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Used in ABS Guide with script author's permission.": "abs-guide.txt"},{"# Notes:": "abs-guide.txt"},{"#": "abs-guide.txt"},{"This script starts a few processes per lap, in addition to": "abs-guide.txt"},{"#": "abs-guide.txt"},{"the shell loop processing, so the assumption is made that": "abs-guide.txt"},{"#": "abs-guide.txt"},{"this takes an insignificant amount of time compared to": "abs-guide.txt"},{"#": "abs-guide.txt"},{"the response time of humans (~.1s) (or the keyboard": "abs-guide.txt"},{"#": "abs-guide.txt"},{"interrupt rate (~.05s)).": "abs-guide.txt"},{"#": "abs-guide.txt"},{"'?' for splits must be entered twice if characters": "abs-guide.txt"},{"#": "abs-guide.txt"},{"(erroneously) entered before it (on the same line).": "abs-guide.txt"},{"#": "abs-guide.txt"},{"'?' since not generating a signal may be slightly delayed": "abs-guide.txt"},{"#": "abs-guide.txt"},{"on heavily loaded systems.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Lap timings on ubuntu may be slightly delayed due to:": "abs-guide.txt"},{"#": "abs-guide.txt"},{"https://bugs.launchpad.net/bugs/62511": "abs-guide.txt"},{"# Changes:": "abs-guide.txt"},{"#": "abs-guide.txt"},{"V1.0, 23 Aug 2005, Initial release": "abs-guide.txt"},{"#": "abs-guide.txt"},{"V1.1, 26 Jul 2007, Allow both splits and laps from single invocation.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Only start timer after a key is pressed.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Indicate lap number": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Cache programs at startup so there is less error": "abs-guide.txt"},{"#": "abs-guide.txt"},{"due to startup delays.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"V1.2, 01 Aug 2007, Work around `date` commands that don't have": "abs-guide.txt"},{"#": "abs-guide.txt"},{"nanoseconds.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Use stty to change interrupt keys to space for": "abs-guide.txt"},{"#": "abs-guide.txt"},{"laps etc.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Ignore other input as it causes problems.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"V1.3, 01 Aug 2007, Testing release.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"V1.4, 02 Aug 2007, Various tweaks to get working under ubuntu": "abs-guide.txt"},{"#": "abs-guide.txt"},{"and Mac OS X.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"V1.5, 27 Jun 2008, set LANG=C as got vague bug report about it.": "abs-guide.txt"},{"export LANG=C": "abs-guide.txt"},{"ulimit -c 0": "abs-guide.txt"},{"# No coredumps from SIGQUIT.": "abs-guide.txt"},{"trap '' TSTP # Ignore Ctrl-Z just in case.": "abs-guide.txt"},{"save_tty=`stty -g` && trap \"stty $save_tty\" EXIT # Restore tty on exit.": "abs-guide.txt"},{"stty quit ' ' # Space for laps rather than Ctrl-\\.": "abs-guide.txt"},{"stty eof '?' # ? for splits rather than Ctrl-D.": "abs-guide.txt"},{"stty -echo": "abs-guide.txt"},{"# Don't echo input.": "abs-guide.txt"},{"cache_progs() {": "abs-guide.txt"},{"stty > /dev/null": "abs-guide.txt"},{"date > /dev/null": "abs-guide.txt"},{"grep . < /dev/null": "abs-guide.txt"},{"(echo \"import time\" | python) 2> /dev/null": "abs-guide.txt"},{"bc < /dev/null": "abs-guide.txt"},{"sed '' < /dev/null": "abs-guide.txt"},{"printf '1' > /dev/null": "abs-guide.txt"},{"/usr/bin/time false 2> /dev/null": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"727": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"cat < /dev/null": "abs-guide.txt"},{"}": "abs-guide.txt"},{"cache_progs": "abs-guide.txt"},{"# To minimise startup delay.": "abs-guide.txt"},{"date +%s.%N | grep -qF 'N' && use_python=1 # If `date` lacks nanoseconds.": "abs-guide.txt"},{"now() {": "abs-guide.txt"},{"if [ \"$use_python\" ]; then": "abs-guide.txt"},{"echo \"import time; print time.time()\" 2>/dev/null | python": "abs-guide.txt"},{"else": "abs-guide.txt"},{"printf \"%.2f\" `date +%s.%N`": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"}": "abs-guide.txt"},{"fmt_seconds() {": "abs-guide.txt"},{"seconds=$1": "abs-guide.txt"},{"mins=`echo $seconds/60 | bc`": "abs-guide.txt"},{"if [ \"$mins\" != \"0\" ]; then": "abs-guide.txt"},{"seconds=`echo \"$seconds - ($mins*60)\" | bc`": "abs-guide.txt"},{"echo \"$mins:$seconds\"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo \"$seconds\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"}": "abs-guide.txt"},{"total() {": "abs-guide.txt"},{"end=`now`": "abs-guide.txt"},{"total=`echo \"$end - $start\" | bc`": "abs-guide.txt"},{"fmt_seconds $total": "abs-guide.txt"},{"}": "abs-guide.txt"},{"stop() {": "abs-guide.txt"},{"[ \"$lapped\" ] && lap \"$laptime\" \"display\"": "abs-guide.txt"},{"total": "abs-guide.txt"},{"exit": "abs-guide.txt"},{"}": "abs-guide.txt"},{"lap() {": "abs-guide.txt"},{"laptime=`echo \"$1\" | sed -n 's/.*real[^0-9.]*\\(.*\\)/\\1/p'`": "abs-guide.txt"},{"[ ! \"$laptime\" -o \"$laptime\" = \"0.00\" ] && return": "abs-guide.txt"},{"# Signals too frequent.": "abs-guide.txt"},{"laptotal=`echo $laptime+0$laptotal | bc`": "abs-guide.txt"},{"if [ \"$2\" = \"display\" ]; then": "abs-guide.txt"},{"lapcount=`echo 0$lapcount+1 | bc`": "abs-guide.txt"},{"laptime=`fmt_seconds $laptotal`": "abs-guide.txt"},{"echo $laptime \"($lapcount)\"": "abs-guide.txt"},{"lapped=\"true\"": "abs-guide.txt"},{"laptotal=\"0\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"}": "abs-guide.txt"},{"echo -n \"Space for lap | ? for split | Ctrl-C to stop | Space to start...\">&2": "abs-guide.txt"},{"while true; do": "abs-guide.txt"},{"trap true INT QUIT # Set signal handlers.": "abs-guide.txt"},{"laptime=`/usr/bin/time -p 2>&1 cat >/dev/null`": "abs-guide.txt"},{"ret=$?": "abs-guide.txt"},{"trap '' INT QUIT": "abs-guide.txt"},{"# Ignore signals within this script.": "abs-guide.txt"},{"if [ $ret -eq 1 -o $ret -eq 2 -o $ret -eq 130 ]; then # SIGINT = stop": "abs-guide.txt"},{"[ ! \"$start\" ] && { echo >&2; exit; }": "abs-guide.txt"},{"stop": "abs-guide.txt"},{"elif [ $ret -eq 3 -o $ret -eq 131 ]; then": "abs-guide.txt"},{"# SIGQUIT = lap": "abs-guide.txt"},{"if [ ! \"$start\" ]; then": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"728": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"start=`now` || exit 1": "abs-guide.txt"},{"echo >&2": "abs-guide.txt"},{"continue": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"lap \"$laptime\" \"display\"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"# eof = split": "abs-guide.txt"},{"[ ! \"$start\" ] && continue": "abs-guide.txt"},{"total": "abs-guide.txt"},{"lap \"$laptime\" # Update laptotal.": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"done": "abs-guide.txt"},{"exit $?": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example A-44. An all-purpose shell scripting homework assignment solution": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# homework.sh: All-purpose homework assignment solution.": "abs-guide.txt"},{"# Author: M. Leo Cooper": "abs-guide.txt"},{"# If you substitute your own name as author, then it is plagiarism,": "abs-guide.txt"},{"#+ possibly a lesser sin than cheating on your homework!": "abs-guide.txt"},{"# License: Public Domain": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"This script may be turned in to your instructor": "abs-guide.txt"},{"in fulfillment of ALL shell scripting homework assignments.": "abs-guide.txt"},{"It's sparsely commented, but you, the student, can easily remedy that.": "abs-guide.txt"},{"The script author repudiates all responsibility!": "abs-guide.txt"},{"": "abs-guide.txt"},{"DLA=1": "abs-guide.txt"},{"P1=2": "abs-guide.txt"},{"P2=4": "abs-guide.txt"},{"P3=7": "abs-guide.txt"},{"PP1=0": "abs-guide.txt"},{"PP2=8": "abs-guide.txt"},{"MAXL=9": "abs-guide.txt"},{"E_LZY=99": "abs-guide.txt"},{"declare -a L": "abs-guide.txt"},{"L[0]=\"3 4 0 17 29 8 13 18 19 17 20 2 19 14 17 28\"": "abs-guide.txt"},{"L[1]=\"8 29 12 14 18 19 29 4 12 15 7 0 19 8 2 0 11 11 24 29 17 4 6 17 4 19\"": "abs-guide.txt"},{"L[2]=\"29 19 7 0 19 29 8 29 7 0 21 4 29 13 4 6 11 4 2 19 4 3\"": "abs-guide.txt"},{"L[3]=\"19 14 29 2 14 12 15 11 4 19 4 29 19 7 8 18 29\"": "abs-guide.txt"},{"L[4]=\"18 2 7 14 14 11 22 14 17 10 29 0 18 18 8 6 13 12 4 13 19 26\"": "abs-guide.txt"},{"L[5]=\"15 11 4 0 18 4 29 0 2 2 4 15 19 29 12 24 29 7 20 12 1 11 4 29\"": "abs-guide.txt"},{"L[6]=\"4 23 2 20 18 4 29 14 5 29 4 6 17 4 6 8 14 20 18 29\"": "abs-guide.txt"},{"L[7]=\"11 0 25 8 13 4 18 18 27\"": "abs-guide.txt"},{"L[8]=\"0 13 3 29 6 17 0 3 4 29 12 4 29 0 2 2 14 17 3 8 13 6 11 24 26\"": "abs-guide.txt"},{"L[9]=\"19 7 0 13 10 29 24 14 20 26\"": "abs-guide.txt"},{"declare -a \\": "abs-guide.txt"},{"alph=( A B C D E F G H I J K L M N O P Q R S T U V W X Y Z . , : ' ' )": "abs-guide.txt"},{"": "abs-guide.txt"},{"pt_lt ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"echo -n \"${alph[$1]}\"": "abs-guide.txt"},{"echo -n -e \"\\a\"": "abs-guide.txt"},{"sleep $DLA": "abs-guide.txt"},{"}": "abs-guide.txt"},{"b_r ()": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"729": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"{": "abs-guide.txt"},{"echo -e '\\E[31;48m\\033[1m'": "abs-guide.txt"},{"}": "abs-guide.txt"},{"cr ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"echo -e \"\\a\"": "abs-guide.txt"},{"sleep $DLA": "abs-guide.txt"},{"}": "abs-guide.txt"},{"restore ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"echo -e '\\033[0m'": "abs-guide.txt"},{"tput sgr0": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Bold off.": "abs-guide.txt"},{"# Normal.": "abs-guide.txt"},{"": "abs-guide.txt"},{"p_l ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"for ltr in $1": "abs-guide.txt"},{"do": "abs-guide.txt"},{"pt_lt \"$ltr\"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"}": "abs-guide.txt"},{"# ---------------------b_r": "abs-guide.txt"},{"for i in $(seq 0 $MAXL)": "abs-guide.txt"},{"do": "abs-guide.txt"},{"p_l \"${L[i]}\"": "abs-guide.txt"},{"if [[ \"$i\" -eq \"$P1\" || \"$i\" -eq \"$P2\" || \"$i\" -eq \"$P3\" ]]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"cr": "abs-guide.txt"},{"elif [[ \"$i\" -eq \"$PP1\" || \"$i\" -eq \"$PP2\" ]]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"cr; cr": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"done": "abs-guide.txt"},{"restore": "abs-guide.txt"},{"# ---------------------echo": "abs-guide.txt"},{"exit $E_LZY": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"A typical example of an obfuscated script that is difficult": "abs-guide.txt"},{"to understand, and frustrating to maintain.": "abs-guide.txt"},{"In your career as a sysadmin, you'll run into these critters": "abs-guide.txt"},{"all too often.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example A-45. The Knight's Tour": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# ktour.sh": "abs-guide.txt"},{"# author: mendel cooper": "abs-guide.txt"},{"# reldate: 12 Jan 2009": "abs-guide.txt"},{"# license: public domain": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"730": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# (Not much sense GPLing something that's pretty much in the common": "abs-guide.txt"},{"#+ domain anyhow.)": "abs-guide.txt"},{"###################################################################": "abs-guide.txt"},{"#": "abs-guide.txt"},{"The Knight's Tour, a classic problem.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"=====================================": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# The knight must move onto every square of the chess board,": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# but cannot revisit any square he has already visited.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# And just why is Sir Knight unwelcome for a return visit?": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Could it be that he has a habit of partying into the wee hours #": "abs-guide.txt"},{"#+ of the morning?": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Possibly he leaves pizza crusts in the bed, empty beer bottles #": "abs-guide.txt"},{"#+ all over the floor, and clogs the plumbing. . . .": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# ------------------------------------------------------------- #": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Usage: ktour.sh [start-square] [stupid]": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Note that start-square can be a square number": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+ in the range 0 - 63 ... or": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# a square designator in conventional chess notation,": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# such as a1, f5, h3, etc.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# If start-square-number not supplied,": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+ then starts on a random square somewhere on the board.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# \"stupid\" as second parameter sets the stupid strategy.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Examples:": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# ktour.sh 23": "abs-guide.txt"},{"starts on square #23 (h3)": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# ktour.sh g6 stupid": "abs-guide.txt"},{"starts on square #46,": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"using \"stupid\" (non-Warnsdorff) strategy. #": "abs-guide.txt"},{"###################################################################": "abs-guide.txt"},{"DEBUG=": "abs-guide.txt"},{"# Set this to echo debugging info to stdout.": "abs-guide.txt"},{"SUCCESS=0": "abs-guide.txt"},{"FAIL=99": "abs-guide.txt"},{"BADMOVE=-999": "abs-guide.txt"},{"FAILURE=1": "abs-guide.txt"},{"LINELEN=21 # How many moves to display per line.": "abs-guide.txt"},{"# ---------------------------------------- #": "abs-guide.txt"},{"# Board array params": "abs-guide.txt"},{"ROWS=8": "abs-guide.txt"},{"# 8 x 8 board.": "abs-guide.txt"},{"COLS=8": "abs-guide.txt"},{"let \"SQUARES = $ROWS * $COLS\"": "abs-guide.txt"},{"let \"MAX = $SQUARES - 1\"": "abs-guide.txt"},{"MIN=0": "abs-guide.txt"},{"# 64 squares on board, indexed from 0 to 63.": "abs-guide.txt"},{"VISITED=1": "abs-guide.txt"},{"UNVISITED=-1": "abs-guide.txt"},{"UNVSYM=\"##\"": "abs-guide.txt"},{"# ---------------------------------------- #": "abs-guide.txt"},{"# Global variables.": "abs-guide.txt"},{"startpos=": "abs-guide.txt"},{"# Starting position (square #, 0 - 63).": "abs-guide.txt"},{"currpos=": "abs-guide.txt"},{"# Current position.": "abs-guide.txt"},{"movenum=": "abs-guide.txt"},{"# Move number.": "abs-guide.txt"},{"CRITPOS=37": "abs-guide.txt"},{"# Have to patch for f5 starting position!": "abs-guide.txt"},{"declare -i board": "abs-guide.txt"},{"# Use a one-dimensional array to simulate a two-dimensional one.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"731": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# This can make life difficult and result in ugly kludges; see below.": "abs-guide.txt"},{"declare -i moves # Offsets from current knight position.": "abs-guide.txt"},{"": "abs-guide.txt"},{"initialize_board ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"local idx": "abs-guide.txt"},{"for idx in {0..63}": "abs-guide.txt"},{"do": "abs-guide.txt"},{"board[$idx]=$UNVISITED": "abs-guide.txt"},{"done": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"print_board ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"local idx": "abs-guide.txt"},{"echo \"": "abs-guide.txt"},{"_____________________________________\"": "abs-guide.txt"},{"for row in {7..0}": "abs-guide.txt"},{"# Reverse order of rows ...": "abs-guide.txt"},{"do": "abs-guide.txt"},{"#+ so it prints in chessboard order.": "abs-guide.txt"},{"let \"rownum = $row + 1\"": "abs-guide.txt"},{"# Start numbering rows at 1.": "abs-guide.txt"},{"echo -n \"$rownum |\"": "abs-guide.txt"},{"# Mark board edge with border and": "abs-guide.txt"},{"for column in {0..7}": "abs-guide.txt"},{"#+ \"algebraic notation.\"": "abs-guide.txt"},{"do": "abs-guide.txt"},{"let \"idx = $ROWS*$row + $column\"": "abs-guide.txt"},{"if [ ${board[idx]} -eq $UNVISITED ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo -n \"$UNVSYM": "abs-guide.txt"},{"\"": "abs-guide.txt"},{"##": "abs-guide.txt"},{"else": "abs-guide.txt"},{"# Mark square with move number.": "abs-guide.txt"},{"printf \"%02d \" \"${board[idx]}\"; echo -n \" \"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo -e -n \"\\b\\b\\b|\" # \\b is a backspace.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"# -e enables echoing escaped chars.": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo \"": "abs-guide.txt"},{"echo \"": "abs-guide.txt"},{"": "abs-guide.txt"},{"-------------------------------------\"": "abs-guide.txt"},{"a": "abs-guide.txt"},{"b": "abs-guide.txt"},{"c": "abs-guide.txt"},{"d": "abs-guide.txt"},{"e": "abs-guide.txt"},{"f": "abs-guide.txt"},{"g": "abs-guide.txt"},{"h\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"failure()": "abs-guide.txt"},{"{ # Whine, then bail out.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"print_board": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"\"": "abs-guide.txt"},{"Waah!!! Ran out of squares to move to!\"": "abs-guide.txt"},{"echo -n \"": "abs-guide.txt"},{"Knight's Tour attempt ended\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"\" on $(to_algebraic $currpos) [square #$currpos]\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"\"": "abs-guide.txt"},{"after just $movenum moves!\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"exit $FAIL": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"xlat_coords ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Translate x/y coordinates to board position": "abs-guide.txt"},{"#+ (board-array element #).": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"732": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# For user input of starting board position as x/y coords.": "abs-guide.txt"},{"# This function not used in initial release of ktour.sh.": "abs-guide.txt"},{"# May be used in an updated version, for compatibility with": "abs-guide.txt"},{"#+ standard implementation of the Knight's Tour in C, Python, etc.": "abs-guide.txt"},{"if [ -z \"$1\" -o -z \"$2\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"return $FAIL": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"local xc=$1": "abs-guide.txt"},{"local yc=$2": "abs-guide.txt"},{"let \"board_index = $xc * $ROWS + yc\"": "abs-guide.txt"},{"if [ $board_index -lt $MIN -o $board_index -gt $MAX ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"return $FAIL": "abs-guide.txt"},{"# Strayed off the board!": "abs-guide.txt"},{"else": "abs-guide.txt"},{"return $board_index": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"to_algebraic ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"if [ -z \"$1\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"return $FAIL": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Translate board position (board-array element #)": "abs-guide.txt"},{"#+ to standard algebraic notation used by chess players.": "abs-guide.txt"},{"": "abs-guide.txt"},{"local element_no=$1": "abs-guide.txt"},{"# Numerical board position.": "abs-guide.txt"},{"local col_arr=( a b c d e f g h )": "abs-guide.txt"},{"local row_arr=( 1 2 3 4 5 6 7 8 )": "abs-guide.txt"},{"let \"row_no = $element_no / $ROWS\"": "abs-guide.txt"},{"let \"col_no = $element_no % $ROWS\"": "abs-guide.txt"},{"t1=${col_arr[col_no]}; t2=${row_arr[row_no]}": "abs-guide.txt"},{"local apos=$t1$t2": "abs-guide.txt"},{"# Concatenate.": "abs-guide.txt"},{"echo $apos": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"from_algebraic ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Translate standard algebraic chess notation": "abs-guide.txt"},{"#+ to numerical board position (board-array element #).": "abs-guide.txt"},{"# Or recognize numerical input & return it unchanged.": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [ -z \"$1\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"return $FAIL": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# If no command-line arg, then will default to random start pos.": "abs-guide.txt"},{"local": "abs-guide.txt"},{"local": "abs-guide.txt"},{"local": "abs-guide.txt"},{"local": "abs-guide.txt"},{"": "abs-guide.txt"},{"ix": "abs-guide.txt"},{"ix_count=0": "abs-guide.txt"},{"b_index": "abs-guide.txt"},{"alpos=\"$1\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Board index [0-63]": "abs-guide.txt"},{"": "abs-guide.txt"},{"arow=${alpos:0:1} # position = 0, length = 1": "abs-guide.txt"},{"acol=${alpos:1:1}": "abs-guide.txt"},{"if [[ $arow =~ [[:digit:]] ]]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"# POSIX char class": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Numerical input?": "abs-guide.txt"},{"": "abs-guide.txt"},{"733": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"if [[ $acol =~ [[:alpha:]] ]]": "abs-guide.txt"},{"then return $FAIL": "abs-guide.txt"},{"else if [ $alpos -gt $MAX ]": "abs-guide.txt"},{"then return $FAIL": "abs-guide.txt"},{"else return $alpos": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Number followed by a letter? Illegal!": "abs-guide.txt"},{"# Off board?": "abs-guide.txt"},{"# Return digit(s) unchanged . . .": "abs-guide.txt"},{"#+ if within range.": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [[ $acol -eq $MIN || $acol -gt $ROWS ]]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"# Outside of range 1 - 8?": "abs-guide.txt"},{"return $FAIL": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"for ix in a b c d e f g h": "abs-guide.txt"},{"do # Convert column letter to column number.": "abs-guide.txt"},{"if [ \"$arow\" = \"$ix\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"break": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"((ix_count++))": "abs-guide.txt"},{"# Find index count.": "abs-guide.txt"},{"done": "abs-guide.txt"},{"((acol--))": "abs-guide.txt"},{"# Decrementing converts to zero-based array.": "abs-guide.txt"},{"let \"b_index = $ix_count + $acol * $ROWS\"": "abs-guide.txt"},{"if [ $b_index -gt $MAX ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"return $FAIL": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Off board?": "abs-guide.txt"},{"": "abs-guide.txt"},{"return $b_index": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"generate_moves ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"local": "abs-guide.txt"},{"local": "abs-guide.txt"},{"local": "abs-guide.txt"},{"local": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Calculate all valid knight moves,": "abs-guide.txt"},{"#+ relative to current position ($1),": "abs-guide.txt"},{"#+ and store in ${moves} array.": "abs-guide.txt"},{"kt_hop=1": "abs-guide.txt"},{"# One square :: short leg of knight move.": "abs-guide.txt"},{"kt_skip=2": "abs-guide.txt"},{"# Two squares :: long leg of knight move.": "abs-guide.txt"},{"valmov=0": "abs-guide.txt"},{"# Valid moves.": "abs-guide.txt"},{"row_pos; let \"row_pos = $1 % $COLS\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"let \"move1 = -$kt_skip + $ROWS\"": "abs-guide.txt"},{"# 2 sideways to-the-left, 1 up": "abs-guide.txt"},{"if [[ `expr $row_pos - $kt_skip` -lt $MIN ]]": "abs-guide.txt"},{"# An ugly, ugly kludge!": "abs-guide.txt"},{"then": "abs-guide.txt"},{"# Can't move off board.": "abs-guide.txt"},{"move1=$BADMOVE": "abs-guide.txt"},{"# Not even temporarily.": "abs-guide.txt"},{"else": "abs-guide.txt"},{"((valmov++))": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"let \"move2 = -$kt_hop + $kt_skip * $ROWS\" # 1 sideways to-the-left, 2 up": "abs-guide.txt"},{"if [[ `expr $row_pos - $kt_hop` -lt $MIN ]]": "abs-guide.txt"},{"# Kludge continued ...": "abs-guide.txt"},{"then": "abs-guide.txt"},{"move2=$BADMOVE": "abs-guide.txt"},{"else": "abs-guide.txt"},{"((valmov++))": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"let \"move3 = $kt_hop + $kt_skip * $ROWS\" # 1 sideways to-the-right, 2 up": "abs-guide.txt"},{"if [[ `expr $row_pos + $kt_hop` -ge $COLS ]]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"734": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"move3=$BADMOVE": "abs-guide.txt"},{"else": "abs-guide.txt"},{"((valmov++))": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"let \"move4 = $kt_skip + $ROWS\"": "abs-guide.txt"},{"# 2 sideways": "abs-guide.txt"},{"if [[ `expr $row_pos + $kt_skip` -ge $COLS ]]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"move4=$BADMOVE": "abs-guide.txt"},{"else": "abs-guide.txt"},{"((valmov++))": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"let \"move5 = $kt_skip - $ROWS\"": "abs-guide.txt"},{"# 2 sideways": "abs-guide.txt"},{"if [[ `expr $row_pos + $kt_skip` -ge $COLS ]]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"move5=$BADMOVE": "abs-guide.txt"},{"else": "abs-guide.txt"},{"((valmov++))": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"let \"move6 = $kt_hop - $kt_skip * $ROWS\" # 1 sideways": "abs-guide.txt"},{"if [[ `expr $row_pos + $kt_hop` -ge $COLS ]]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"move6=$BADMOVE": "abs-guide.txt"},{"else": "abs-guide.txt"},{"((valmov++))": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"let \"move7 = -$kt_hop - $kt_skip * $ROWS\" # 1 sideways": "abs-guide.txt"},{"if [[ `expr $row_pos - $kt_hop` -lt $MIN ]]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"move7=$BADMOVE": "abs-guide.txt"},{"else": "abs-guide.txt"},{"((valmov++))": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"let \"move8 = -$kt_skip - $ROWS\"": "abs-guide.txt"},{"# 2 sideways": "abs-guide.txt"},{"if [[ `expr $row_pos - $kt_skip` -lt $MIN ]]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"move8=$BADMOVE": "abs-guide.txt"},{"else": "abs-guide.txt"},{"((valmov++))": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# There must be a better way to do this.": "abs-guide.txt"},{"local m=( $valmov $move1 $move2": "abs-guide.txt"},{"# ${moves[0]} = number of valid": "abs-guide.txt"},{"# ${moves[1]} ... ${moves[8]} =": "abs-guide.txt"},{"echo \"${m[*]}\"": "abs-guide.txt"},{"# Elements of": "abs-guide.txt"},{"": "abs-guide.txt"},{"to-the-right, 1 up": "abs-guide.txt"},{"": "abs-guide.txt"},{"to-the-right, 1 dn": "abs-guide.txt"},{"": "abs-guide.txt"},{"to-the-right, 2 dn": "abs-guide.txt"},{"": "abs-guide.txt"},{"to-the-left,": "abs-guide.txt"},{"": "abs-guide.txt"},{"2 dn": "abs-guide.txt"},{"": "abs-guide.txt"},{"to-the-left,": "abs-guide.txt"},{"": "abs-guide.txt"},{"1 dn": "abs-guide.txt"},{"": "abs-guide.txt"},{"$move3 $move4 $move5 $move6 $move7 $move8 )": "abs-guide.txt"},{"moves.": "abs-guide.txt"},{"possible moves.": "abs-guide.txt"},{"array to stdout for capture in a var.": "abs-guide.txt"},{"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"is_on_board () # Is position actually on the board?": "abs-guide.txt"},{"{": "abs-guide.txt"},{"if [[ \"$1\" -lt \"$MIN\" || \"$1\" -gt \"$MAX\" ]]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"return $FAILURE": "abs-guide.txt"},{"else": "abs-guide.txt"},{"return $SUCCESS": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"do_move ()": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Move the knight!": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"735": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"{": "abs-guide.txt"},{"local valid_moves=0": "abs-guide.txt"},{"local aapos": "abs-guide.txt"},{"currposl=\"$1\"": "abs-guide.txt"},{"lmin=$ROWS": "abs-guide.txt"},{"iex=0": "abs-guide.txt"},{"squarel=": "abs-guide.txt"},{"mpm=": "abs-guide.txt"},{"mov=": "abs-guide.txt"},{"declare -a p_moves": "abs-guide.txt"},{"########################## DECIDE-MOVE #############################": "abs-guide.txt"},{"if [ $startpos -ne $CRITPOS ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"# CRITPOS = square #37": "abs-guide.txt"},{"decide_move": "abs-guide.txt"},{"else": "abs-guide.txt"},{"# Needs a special patch for startpos=37 !!!": "abs-guide.txt"},{"decide_move_patched": "abs-guide.txt"},{"# Why this particular move and no other ???": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"####################################################################": "abs-guide.txt"},{"(( ++movenum ))": "abs-guide.txt"},{"# Increment move count.": "abs-guide.txt"},{"let \"square = $currposl + ${moves[iex]}\"": "abs-guide.txt"},{"##################": "abs-guide.txt"},{"DEBUG": "abs-guide.txt"},{"###############": "abs-guide.txt"},{"if [ \"$DEBUG\" ]": "abs-guide.txt"},{"then debug": "abs-guide.txt"},{"# Echo debugging information.": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"##############################################": "abs-guide.txt"},{"if [[ \"$square\" -gt $MAX || \"$square\" -lt $MIN ||": "abs-guide.txt"},{"${board[square]} -ne $UNVISITED ]]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"(( --movenum ))": "abs-guide.txt"},{"# Decrement move count,": "abs-guide.txt"},{"echo \"RAN OUT OF SQUARES!!!\" #+ since previous one was invalid.": "abs-guide.txt"},{"return $FAIL": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"board[square]=$movenum": "abs-guide.txt"},{"currpos=$square": "abs-guide.txt"},{"# Update current position.": "abs-guide.txt"},{"((valid_moves++));": "abs-guide.txt"},{"# moves[0]=$valid_moves": "abs-guide.txt"},{"aapos=$(to_algebraic $square)": "abs-guide.txt"},{"echo -n \"$aapos \"": "abs-guide.txt"},{"test $(( $Moves % $LINELEN )) -eq 0 && echo": "abs-guide.txt"},{"# Print LINELEN=21 moves per line. A valid tour shows 3 complete lines.": "abs-guide.txt"},{"return $valid_moves": "abs-guide.txt"},{"# Found a square to move to!": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"do_move_stupid()": "abs-guide.txt"},{"# Dingbat algorithm,": "abs-guide.txt"},{"{": "abs-guide.txt"},{"#+ courtesy of script author, *not* Warnsdorff.": "abs-guide.txt"},{"local valid_moves=0": "abs-guide.txt"},{"local movloc": "abs-guide.txt"},{"local squareloc": "abs-guide.txt"},{"local aapos": "abs-guide.txt"},{"local cposloc=\"$1\"": "abs-guide.txt"},{"for movloc in {1..8}": "abs-guide.txt"},{"do": "abs-guide.txt"},{"# Move to first-found unvisited square.": "abs-guide.txt"},{"let \"squareloc = $cposloc + ${moves[movloc]}\"": "abs-guide.txt"},{"is_on_board $squareloc": "abs-guide.txt"},{"if [ $? -eq $SUCCESS ] && [ ${board[squareloc]} -eq $UNVISITED ]": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"736": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"then": "abs-guide.txt"},{"# Add conditions to above if-test to improve algorithm.": "abs-guide.txt"},{"(( ++movenum ))": "abs-guide.txt"},{"board[squareloc]=$movenum": "abs-guide.txt"},{"currpos=$squareloc": "abs-guide.txt"},{"# Update current position.": "abs-guide.txt"},{"((valid_moves++));": "abs-guide.txt"},{"# moves[0]=$valid_moves": "abs-guide.txt"},{"aapos=$(to_algebraic $squareloc)": "abs-guide.txt"},{"echo -n \"$aapos \"": "abs-guide.txt"},{"test $(( $Moves % $LINELEN )) -eq 0 && echo": "abs-guide.txt"},{"# Print 21 moves/line.": "abs-guide.txt"},{"return $valid_moves": "abs-guide.txt"},{"# Found a square to move to!": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"done": "abs-guide.txt"},{"return $FAIL": "abs-guide.txt"},{"# If no square found in all 8 loop iterations,": "abs-guide.txt"},{"#+ then Knight's Tour attempt ends in failure.": "abs-guide.txt"},{"# Dingbat algorithm will typically fail after about 30 - 40 moves,": "abs-guide.txt"},{"#+ but executes _much_ faster than Warnsdorff's in do_move() function.": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"decide_move ()": "abs-guide.txt"},{"# Which move will we make?": "abs-guide.txt"},{"{": "abs-guide.txt"},{"# But, fails on startpos=37 !!!": "abs-guide.txt"},{"for mov in {1..8}": "abs-guide.txt"},{"do": "abs-guide.txt"},{"let \"squarel = $currposl + ${moves[mov]}\"": "abs-guide.txt"},{"is_on_board $squarel": "abs-guide.txt"},{"if [[ $? -eq $SUCCESS && ${board[squarel]} -eq $UNVISITED ]]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"# Find accessible square with least possible future moves.": "abs-guide.txt"},{"# This is Warnsdorff's algorithm.": "abs-guide.txt"},{"# What happens is that the knight wanders toward the outer edge": "abs-guide.txt"},{"#+ of the board, then pretty much spirals inward.": "abs-guide.txt"},{"# Given two or more possible moves with same value of": "abs-guide.txt"},{"#+ least-possible-future-moves, this implementation chooses": "abs-guide.txt"},{"#+ the _first_ of those moves.": "abs-guide.txt"},{"# This means that there is not necessarily a unique solution": "abs-guide.txt"},{"#+ for any given starting position.": "abs-guide.txt"},{"possible_moves $squarel": "abs-guide.txt"},{"mpm=$?": "abs-guide.txt"},{"p_moves[mov]=$mpm": "abs-guide.txt"},{"if [ $mpm -lt $lmin ]": "abs-guide.txt"},{"then #": "abs-guide.txt"},{"^^": "abs-guide.txt"},{"lmin=$mpm": "abs-guide.txt"},{"iex=$mov": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"# If less than previous minimum ...": "abs-guide.txt"},{"# Update minimum.": "abs-guide.txt"},{"# Save index.": "abs-guide.txt"},{"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"done": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"decide_move_patched ()": "abs-guide.txt"},{"# Decide which move to make,": "abs-guide.txt"},{"{ #": "abs-guide.txt"},{"^^^^^^^": "abs-guide.txt"},{"#+ but only if startpos=37 !!!": "abs-guide.txt"},{"for mov in {1..8}": "abs-guide.txt"},{"do": "abs-guide.txt"},{"let \"squarel = $currposl + ${moves[mov]}\"": "abs-guide.txt"},{"is_on_board $squarel": "abs-guide.txt"},{"if [[ $? -eq $SUCCESS && ${board[squarel]} -eq $UNVISITED ]]": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"737": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"then": "abs-guide.txt"},{"possible_moves $squarel": "abs-guide.txt"},{"mpm=$?": "abs-guide.txt"},{"p_moves[mov]=$mpm": "abs-guide.txt"},{"if [ $mpm -le $lmin ]": "abs-guide.txt"},{"then #": "abs-guide.txt"},{"^^": "abs-guide.txt"},{"lmin=$mpm": "abs-guide.txt"},{"iex=$mov": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"done": "abs-guide.txt"},{"": "abs-guide.txt"},{"# If less-than-or equal to prev. minimum!": "abs-guide.txt"},{"": "abs-guide.txt"},{"# There has to be a better way to do this.": "abs-guide.txt"},{"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"possible_moves ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Calculate number of possible moves,": "abs-guide.txt"},{"#+ given the current position.": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [ -z \"$1\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"return $FAIL": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"local curr_pos=$1": "abs-guide.txt"},{"local valid_movl=0": "abs-guide.txt"},{"local icx=0": "abs-guide.txt"},{"local movl": "abs-guide.txt"},{"local sq": "abs-guide.txt"},{"declare -a movesloc": "abs-guide.txt"},{"movesloc=( $(generate_moves $curr_pos) )": "abs-guide.txt"},{"for movl in {1..8}": "abs-guide.txt"},{"do": "abs-guide.txt"},{"let \"sq = $curr_pos + ${movesloc[movl]}\"": "abs-guide.txt"},{"is_on_board $sq": "abs-guide.txt"},{"if [ $? -eq $SUCCESS ] && [ ${board[sq]} -eq $UNVISITED ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"((valid_movl++));": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"done": "abs-guide.txt"},{"return $valid_movl": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Found a square to move to!": "abs-guide.txt"},{"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"strategy ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"if [ -n \"$STUPID\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"for Moves in {1..63}": "abs-guide.txt"},{"do": "abs-guide.txt"},{"cposl=$1": "abs-guide.txt"},{"moves=( $(generate_moves $currpos) )": "abs-guide.txt"},{"do_move_stupid \"$currpos\"": "abs-guide.txt"},{"if [ $? -eq $FAIL ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"failure": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"738": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"done": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# Don't need an \"else\" clause here,": "abs-guide.txt"},{"#+ because Stupid Strategy will always fail and exit!": "abs-guide.txt"},{"for Moves in {1..63}": "abs-guide.txt"},{"do": "abs-guide.txt"},{"cposl=$1": "abs-guide.txt"},{"moves=( $(generate_moves $currpos) )": "abs-guide.txt"},{"do_move \"$currpos\"": "abs-guide.txt"},{"if [ $? -eq $FAIL ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"failure": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Could have condensed above two do-loops into a single one,": "abs-guide.txt"},{"#+ but this would have slowed execution.": "abs-guide.txt"},{"": "abs-guide.txt"},{"print_board": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"Knight's Tour ends on $(to_algebraic $currpos) [square #$currpos].\"": "abs-guide.txt"},{"return $SUCCESS": "abs-guide.txt"},{"}": "abs-guide.txt"},{"debug ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"# Enable this by setting DEBUG=1 near beginning of script.": "abs-guide.txt"},{"local n": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"# echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"\"=================================\"": "abs-guide.txt"},{"\" At move number $movenum:\"": "abs-guide.txt"},{"\" *** possible moves = $mpm ***\"": "abs-guide.txt"},{"\"### square = $square ###\"": "abs-guide.txt"},{"\"lmin = $lmin\"": "abs-guide.txt"},{"\"${moves[@]}\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"for n in {1..8}": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo -n \"($n):${p_moves[n]} \"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"iex = $iex :: moves[iex] = ${moves[iex]}\"": "abs-guide.txt"},{"echo \"square = $square\"": "abs-guide.txt"},{"echo \"=================================\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"} # Gives pretty complete status after ea. move.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# =============================================================== #": "abs-guide.txt"},{"# int main () {": "abs-guide.txt"},{"from_algebraic \"$1\"": "abs-guide.txt"},{"startpos=$?": "abs-guide.txt"},{"if [ \"$startpos\" -eq \"$FAIL\" ]": "abs-guide.txt"},{"# Okay even if no $1.": "abs-guide.txt"},{"then": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^^^^^^^^^^^": "abs-guide.txt"},{"Okay even if input -lt 0.": "abs-guide.txt"},{"echo \"No starting square specified (or illegal input).\"": "abs-guide.txt"},{"let \"startpos = $RANDOM % $SQUARES\"": "abs-guide.txt"},{"# 0 - 63 permissable range.": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"739": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"if [ \"$2\" = \"stupid\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"STUPID=1": "abs-guide.txt"},{"echo -n \"": "abs-guide.txt"},{"### Stupid Strategy ###\"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"STUPID=''": "abs-guide.txt"},{"echo -n \" *** Warnsdorff's Algorithm ***\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"initialize_board": "abs-guide.txt"},{"movenum=0": "abs-guide.txt"},{"board[startpos]=$movenum": "abs-guide.txt"},{"# Mark each board square with move number.": "abs-guide.txt"},{"currpos=$startpos": "abs-guide.txt"},{"algpos=$(to_algebraic $startpos)": "abs-guide.txt"},{"echo; echo \"Starting from $algpos [square #$startpos] ...\"; echo": "abs-guide.txt"},{"echo -n \"Moves:\"": "abs-guide.txt"},{"strategy \"$currpos\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"# return 0;": "abs-guide.txt"},{"": "abs-guide.txt"},{"# }": "abs-guide.txt"},{"# End of main() pseudo-function.": "abs-guide.txt"},{"# =============================================================== #": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Exercises:": "abs-guide.txt"},{"# --------#": "abs-guide.txt"},{"# 1) Extend this example to a 10 x 10 board or larger.": "abs-guide.txt"},{"# 2) Improve the \"stupid strategy\" by modifying the": "abs-guide.txt"},{"#": "abs-guide.txt"},{"do_move_stupid function.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Hint: Prevent straying into corner squares in early moves": "abs-guide.txt"},{"#": "abs-guide.txt"},{"(the exact opposite of Warnsdorff's algorithm!).": "abs-guide.txt"},{"# 3) This script could stand considerable improvement and": "abs-guide.txt"},{"#": "abs-guide.txt"},{"streamlining, especially in the poorly-written": "abs-guide.txt"},{"#": "abs-guide.txt"},{"generate_moves() function": "abs-guide.txt"},{"#": "abs-guide.txt"},{"and in the DECIDE-MOVE patch in the do_move() function.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Must figure out why standard algorithm fails for startpos=37 ...": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"but _not_ on any other, including symmetrical startpos=26.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Possibly, when calculating possible moves, counts the move back": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"to the originating square. If so, it might be a relatively easy fix.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example A-46. Magic Squares": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# msquare.sh": "abs-guide.txt"},{"# Magic Square generator (odd-order squares only!)": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Author: mendel cooper": "abs-guide.txt"},{"reldate: 19 Jan. 2009": "abs-guide.txt"},{"License: Public Domain": "abs-guide.txt"},{"A C-program by the very talented Kwon Young Shin inspired this script.": "abs-guide.txt"},{"http://user.chollian.net/~brainstm/MagicSquare.htm": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Definition: A \"magic square\" is a two-dimensional array": "abs-guide.txt"},{"#": "abs-guide.txt"},{"of integers in which all the rows, columns,": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"740": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"#": "abs-guide.txt"},{"and *long* diagonals add up to the same number.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Being \"square,\" the array has the same number": "abs-guide.txt"},{"#": "abs-guide.txt"},{"of rows and columns. That number is the \"order.\"": "abs-guide.txt"},{"# An example of a magic square of order 3 is:": "abs-guide.txt"},{"#": "abs-guide.txt"},{"8 1 6": "abs-guide.txt"},{"#": "abs-guide.txt"},{"3 5 7": "abs-guide.txt"},{"#": "abs-guide.txt"},{"4 9 2": "abs-guide.txt"},{"# All the rows, columns, and the two long diagonals add up to 15.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Globals": "abs-guide.txt"},{"EVEN=2": "abs-guide.txt"},{"MAXSIZE=31": "abs-guide.txt"},{"# 31 rows x 31 cols.": "abs-guide.txt"},{"E_usage=90": "abs-guide.txt"},{"# Invocation error.": "abs-guide.txt"},{"dimension=": "abs-guide.txt"},{"declare -i square": "abs-guide.txt"},{"usage_message ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"echo \"Usage: $0 order\"": "abs-guide.txt"},{"echo \"": "abs-guide.txt"},{"... where \\\"order\\\" (square size) is an ODD integer\"": "abs-guide.txt"},{"echo \"": "abs-guide.txt"},{"in the range 3 - 31.\"": "abs-guide.txt"},{"# Actually works for squares up to order 159,": "abs-guide.txt"},{"#+ but large squares will not display pretty-printed in a term window.": "abs-guide.txt"},{"# Try increasing MAXSIZE, above.": "abs-guide.txt"},{"exit $E_usage": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"calculate ()": "abs-guide.txt"},{"# Here's where the actual work gets done.": "abs-guide.txt"},{"{": "abs-guide.txt"},{"local row col index dimadj j k cell_val=1": "abs-guide.txt"},{"dimension=$1": "abs-guide.txt"},{"let \"dimadj = $dimension * 3\"; let \"dimadj /= 2\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# x 1.5, then truncate.": "abs-guide.txt"},{"": "abs-guide.txt"},{"for ((j=0; j < dimension; j++))": "abs-guide.txt"},{"do": "abs-guide.txt"},{"for ((k=0; k < dimension; k++))": "abs-guide.txt"},{"do # Calculate indices, then convert to 1-dim. array index.": "abs-guide.txt"},{"# Bash doesn't support multidimensional arrays. Pity.": "abs-guide.txt"},{"let \"col = $k - $j + $dimadj\"; let \"col %= $dimension\"": "abs-guide.txt"},{"let \"row = $j * 2 - $k + $dimension\"; let \"row %= $dimension\"": "abs-guide.txt"},{"let \"index = $row*($dimension) + $col\"": "abs-guide.txt"},{"square[$index]=cell_val; ((cell_val++))": "abs-guide.txt"},{"done": "abs-guide.txt"},{"done": "abs-guide.txt"},{"}": "abs-guide.txt"},{"# Plain math, visualization not required.": "abs-guide.txt"},{"": "abs-guide.txt"},{"print_square ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"local row col idx d1": "abs-guide.txt"},{"let \"d1 = $dimension - 1\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Output square, one row at a time.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Adjust for zero-indexed array.": "abs-guide.txt"},{"": "abs-guide.txt"},{"for row in $(seq 0 $d1)": "abs-guide.txt"},{"do": "abs-guide.txt"},{"for col in $(seq 0 $d1)": "abs-guide.txt"},{"do": "abs-guide.txt"},{"let \"idx = $row * $dimension + $col\"": "abs-guide.txt"},{"printf \"%3d \" \"${square[idx]}\"; echo -n \"": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"741": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"done": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Displays up to 13th order neatly in 80-column term window.": "abs-guide.txt"},{"# Newline after each row.": "abs-guide.txt"},{"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"#################################################": "abs-guide.txt"},{"if [[ -z \"$1\" ]] || [[ \"$1\" -gt $MAXSIZE ]]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"usage_message": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"let \"test_even = $1 % $EVEN\"": "abs-guide.txt"},{"if [ $test_even -eq 0 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"# Can't handle even-order squares.": "abs-guide.txt"},{"usage_message": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"calculate $1": "abs-guide.txt"},{"print_square": "abs-guide.txt"},{"": "abs-guide.txt"},{"# echo \"${square[@]}\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# DEBUG": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit $?": "abs-guide.txt"},{"#################################################": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Exercises:": "abs-guide.txt"},{"--------1) Add a function to calculate the sum of each row, column,": "abs-guide.txt"},{"and *long* diagonal. The sums must match.": "abs-guide.txt"},{"This is the \"magic constant\" of that particular order square.": "abs-guide.txt"},{"2) Have the print_square function auto-calculate how much space": "abs-guide.txt"},{"to allot between square elements for optimized display.": "abs-guide.txt"},{"This might require parameterizing the \"printf\" line.": "abs-guide.txt"},{"3) Add appropriate functions for generating magic squares": "abs-guide.txt"},{"with an *even* number of rows/columns.": "abs-guide.txt"},{"This is non-trivial(!).": "abs-guide.txt"},{"See the URL for Kwon Young Shin, above, for help.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example A-47. Fifteen Puzzle": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# fifteen.sh": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Classic": "abs-guide.txt"},{"Author:": "abs-guide.txt"},{"Lightly": "abs-guide.txt"},{"Used in": "abs-guide.txt"},{"": "abs-guide.txt"},{"\"Fifteen Puzzle\"": "abs-guide.txt"},{"Antonio Macchi": "abs-guide.txt"},{"edited and commented by ABS Guide author.": "abs-guide.txt"},{"ABS Guide with permission. (Thanks!)": "abs-guide.txt"},{"": "abs-guide.txt"},{"# The invention of the Fifteen Puzzle is attributed to either": "abs-guide.txt"},{"#+ Sam Loyd or Noyes Palmer Chapman.": "abs-guide.txt"},{"# The puzzle was wildly popular in the late 19th-century.": "abs-guide.txt"},{"# Object: Rearrange the numbers so they read in order,": "abs-guide.txt"},{"#+ from 1 - 15:": "abs-guide.txt"},{"________________": "abs-guide.txt"},{"#": "abs-guide.txt"},{"| 1": "abs-guide.txt"},{"2": "abs-guide.txt"},{"3": "abs-guide.txt"},{"4 |": "abs-guide.txt"},{"#": "abs-guide.txt"},{"| 5": "abs-guide.txt"},{"6": "abs-guide.txt"},{"7": "abs-guide.txt"},{"8 |": "abs-guide.txt"},{"#": "abs-guide.txt"},{"| 9 10 11 12 |": "abs-guide.txt"},{"#": "abs-guide.txt"},{"| 13 14 15": "abs-guide.txt"},{"|": "abs-guide.txt"},{"#": "abs-guide.txt"},{"----------------": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"742": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"#######################": "abs-guide.txt"},{"# Constants": "abs-guide.txt"},{"#": "abs-guide.txt"},{"SQUARES=16": "abs-guide.txt"},{"#": "abs-guide.txt"},{"FAIL=70": "abs-guide.txt"},{"#": "abs-guide.txt"},{"E_PREMATURE_EXIT=80 #": "abs-guide.txt"},{"#######################": "abs-guide.txt"},{"": "abs-guide.txt"},{"########": "abs-guide.txt"},{"# Data #": "abs-guide.txt"},{"########": "abs-guide.txt"},{"Puzzle=( 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 \" \" )": "abs-guide.txt"},{"": "abs-guide.txt"},{"#############": "abs-guide.txt"},{"# Functions #": "abs-guide.txt"},{"#############": "abs-guide.txt"},{"function swap": "abs-guide.txt"},{"{": "abs-guide.txt"},{"local tmp": "abs-guide.txt"},{"tmp=${Puzzle[$1]}": "abs-guide.txt"},{"Puzzle[$1]=${Puzzle[$2]}": "abs-guide.txt"},{"Puzzle[$2]=$tmp": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"function Jumble": "abs-guide.txt"},{"{ # Scramble the pieces at beginning of round.": "abs-guide.txt"},{"local i pos1 pos2": "abs-guide.txt"},{"for i in {1..100}": "abs-guide.txt"},{"do": "abs-guide.txt"},{"pos1=$(( $RANDOM % $SQUARES))": "abs-guide.txt"},{"pos2=$(( $RANDOM % $SQUARES ))": "abs-guide.txt"},{"swap $pos1 $pos2": "abs-guide.txt"},{"done": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"function PrintPuzzle": "abs-guide.txt"},{"{": "abs-guide.txt"},{"local i1 i2 puzpos": "abs-guide.txt"},{"puzpos=0": "abs-guide.txt"},{"clear": "abs-guide.txt"},{"echo \"Enter": "abs-guide.txt"},{"": "abs-guide.txt"},{"quit": "abs-guide.txt"},{"": "abs-guide.txt"},{"to exit.\"; echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Better that than Ctl-C.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo \",----.----.----.----.\"": "abs-guide.txt"},{"# Top border.": "abs-guide.txt"},{"for i1 in {1..4}": "abs-guide.txt"},{"do": "abs-guide.txt"},{"for i2 in {1..4}": "abs-guide.txt"},{"do": "abs-guide.txt"},{"printf \"| %2s \" \"${Puzzle[$puzpos]}\"": "abs-guide.txt"},{"(( puzpos++ ))": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo \"|\"": "abs-guide.txt"},{"# Right-side border.": "abs-guide.txt"},{"test $i1 = 4 || echo \"+----+----+----+----+\"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"743": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"echo \"'----'----'----'----'\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Bottom border.": "abs-guide.txt"},{"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"function GetNum": "abs-guide.txt"},{"{ # Test for valid input.": "abs-guide.txt"},{"local puznum garbage": "abs-guide.txt"},{"while true": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo \"Moves: $moves\" # Also counts invalid moves.": "abs-guide.txt"},{"read -p \"Number to move: \" puznum garbage": "abs-guide.txt"},{"if [ \"$puznum\" = \"quit\" ]; then echo; exit $E_PREMATURE_EXIT; fi": "abs-guide.txt"},{"test -z \"$puznum\" -o -n \"${puznum//[0-9]/}\" && continue": "abs-guide.txt"},{"test $puznum -gt 0 -a $puznum -lt $SQUARES && break": "abs-guide.txt"},{"done": "abs-guide.txt"},{"return $puznum": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"function GetPosFromNum": "abs-guide.txt"},{"{ # $1 = puzzle-number": "abs-guide.txt"},{"local puzpos": "abs-guide.txt"},{"for puzpos in {0..15}": "abs-guide.txt"},{"do": "abs-guide.txt"},{"test \"${Puzzle[$puzpos]}\" = \"$1\" && break": "abs-guide.txt"},{"done": "abs-guide.txt"},{"return $puzpos": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"function Move": "abs-guide.txt"},{"{ # $1=Puzzle-pos": "abs-guide.txt"},{"test $1 -gt 3 && test \"${Puzzle[$(( $1 - 4 ))]}\" = \" \"\\": "abs-guide.txt"},{"&& swap $1 $(( $1 - 4 )) && return 0": "abs-guide.txt"},{"test $(( $1%4 )) -ne 3 && test \"${Puzzle[$(( $1 + 1 ))]}\" = \" \"\\": "abs-guide.txt"},{"&& swap $1 $(( $1 + 1 )) && return 0": "abs-guide.txt"},{"test $1 -lt 12 && test \"${Puzzle[$(( $1 + 4 ))]}\" = \" \"\\": "abs-guide.txt"},{"&& swap $1 $(( $1 + 4 )) && return 0": "abs-guide.txt"},{"test $(( $1%4 )) -ne 0 && test \"${Puzzle[$(( $1 - 1 ))]}\" = \" \" &&\\": "abs-guide.txt"},{"swap $1 $(( $1 - 1 )) && return 0": "abs-guide.txt"},{"return 1": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"function Solved": "abs-guide.txt"},{"{": "abs-guide.txt"},{"local pos": "abs-guide.txt"},{"for pos in {0..14}": "abs-guide.txt"},{"do": "abs-guide.txt"},{"test \"${Puzzle[$pos]}\" = $(( $pos + 1 )) || return $FAIL": "abs-guide.txt"},{"# Check whether number in each square = square number.": "abs-guide.txt"},{"done": "abs-guide.txt"},{"return 0": "abs-guide.txt"},{"# Successful solution.": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"################### MAIN () #######################{": "abs-guide.txt"},{"moves=0": "abs-guide.txt"},{"Jumble": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"744": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"while true": "abs-guide.txt"},{"# Loop continuously until puzzle solved.": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo; echo": "abs-guide.txt"},{"PrintPuzzle": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"while true": "abs-guide.txt"},{"do": "abs-guide.txt"},{"GetNum": "abs-guide.txt"},{"puznum=$?": "abs-guide.txt"},{"GetPosFromNum $puznum": "abs-guide.txt"},{"puzpos=$?": "abs-guide.txt"},{"((moves++))": "abs-guide.txt"},{"Move $puzpos && break": "abs-guide.txt"},{"done": "abs-guide.txt"},{"Solved && break": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo;echo": "abs-guide.txt"},{"PrintPuzzle": "abs-guide.txt"},{"echo; echo \"BRAVO!\"; echo": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"###################################################}": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"Exercise:": "abs-guide.txt"},{"-------Rewrite the script to display the letters A - O,": "abs-guide.txt"},{"rather than the numbers 1 - 15.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example A-48. The Towers of Hanoi, graphic version": "abs-guide.txt"},{"#! /bin/bash": "abs-guide.txt"},{"# The Towers Of Hanoi": "abs-guide.txt"},{"# Original script (hanoi.bash) copyright (C) 2000 Amit Singh.": "abs-guide.txt"},{"# All Rights Reserved.": "abs-guide.txt"},{"# http://hanoi.kernelthread.com": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"###": "abs-guide.txt"},{"": "abs-guide.txt"},{"hanoi2.bash": "abs-guide.txt"},{"Version 2.00: modded for ASCII-graphic display.": "abs-guide.txt"},{"Version 2.01: fixed no command-line param bug.": "abs-guide.txt"},{"Uses code contributed by Antonio Macchi,": "abs-guide.txt"},{"with heavy editing by ABS Guide author.": "abs-guide.txt"},{"This variant falls under the original copyright, see above.": "abs-guide.txt"},{"Used in ABS Guide with Amit Singh's permission (thanks!).": "abs-guide.txt"},{"": "abs-guide.txt"},{"Variables && sanity check": "abs-guide.txt"},{"": "abs-guide.txt"},{"E_NOPARAM=86": "abs-guide.txt"},{"E_BADPARAM=87": "abs-guide.txt"},{"E_NOEXIT=88": "abs-guide.txt"},{"DISKS=${1:-$E_NOPARAM}": "abs-guide.txt"},{"Moves=0": "abs-guide.txt"},{"": "abs-guide.txt"},{"###": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Illegal no. of disks passed to script.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Must specify how many disks.": "abs-guide.txt"},{"": "abs-guide.txt"},{"MWIDTH=7": "abs-guide.txt"},{"MARGIN=2": "abs-guide.txt"},{"# Arbitrary \"magic\" constants; work okay for relatively small # of disks.": "abs-guide.txt"},{"# BASEWIDTH=51": "abs-guide.txt"},{"# Original code.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"745": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"let \"basewidth = $MWIDTH * $DISKS + $MARGIN\"": "abs-guide.txt"},{"# \"Base\" beneath rods.": "abs-guide.txt"},{"# Above \"algorithm\" could likely stand improvement.": "abs-guide.txt"},{"###": "abs-guide.txt"},{"Display variables": "abs-guide.txt"},{"###": "abs-guide.txt"},{"let \"disks1 = $DISKS - 1\"": "abs-guide.txt"},{"let \"spaces1 = $DISKS\"": "abs-guide.txt"},{"let \"spaces2 = 2 * $DISKS\"": "abs-guide.txt"},{"let \"lastmove_t = $DISKS - 1\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Final move?": "abs-guide.txt"},{"": "abs-guide.txt"},{"declare -a Rod1 Rod2 Rod3": "abs-guide.txt"},{"###": "abs-guide.txt"},{"": "abs-guide.txt"},{"#########################": "abs-guide.txt"},{"": "abs-guide.txt"},{"function repeat": "abs-guide.txt"},{"local n": "abs-guide.txt"},{"": "abs-guide.txt"},{"{": "abs-guide.txt"},{"": "abs-guide.txt"},{"###": "abs-guide.txt"},{"": "abs-guide.txt"},{"# $1=char $2=number of repetitions": "abs-guide.txt"},{"# Repeat-print a character.": "abs-guide.txt"},{"": "abs-guide.txt"},{"for (( n=0; n<$2; n++ )); do": "abs-guide.txt"},{"echo -n \"$1\"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"}": "abs-guide.txt"},{"function FromRod {": "abs-guide.txt"},{"local rod summit weight sequence": "abs-guide.txt"},{"while true; do": "abs-guide.txt"},{"rod=$1": "abs-guide.txt"},{"test ${rod/[^123]/} || continue": "abs-guide.txt"},{"sequence=$(echo $(seq 0 $disks1 | tac))": "abs-guide.txt"},{"for summit in $sequence; do": "abs-guide.txt"},{"eval weight=\\${Rod${rod}[$summit]}": "abs-guide.txt"},{"test $weight -ne 0 &&": "abs-guide.txt"},{"{ echo \"$rod $summit $weight\"; return; }": "abs-guide.txt"},{"done": "abs-guide.txt"},{"done": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"function ToRod { # $1=previous (FromRod) weight": "abs-guide.txt"},{"local rod firstfree weight sequence": "abs-guide.txt"},{"while true; do": "abs-guide.txt"},{"rod=$2": "abs-guide.txt"},{"test ${rod/[^123]} || continue": "abs-guide.txt"},{"sequence=$(echo $(seq 0 $disks1 | tac))": "abs-guide.txt"},{"for firstfree in $sequence; do": "abs-guide.txt"},{"eval weight=\\${Rod${rod}[$firstfree]}": "abs-guide.txt"},{"test $weight -gt 0 && { (( firstfree++ )); break; }": "abs-guide.txt"},{"done": "abs-guide.txt"},{"test $weight -gt $1 -o $firstfree = 0 &&": "abs-guide.txt"},{"{ echo \"$rod $firstfree\"; return; }": "abs-guide.txt"},{"done": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"function PrintRods {": "abs-guide.txt"},{"local disk rod empty fill sp sequence": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"746": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"repeat \" \" $spaces1": "abs-guide.txt"},{"echo -n \"|\"": "abs-guide.txt"},{"repeat \" \" $spaces2": "abs-guide.txt"},{"echo -n \"|\"": "abs-guide.txt"},{"repeat \" \" $spaces2": "abs-guide.txt"},{"echo \"|\"": "abs-guide.txt"},{"sequence=$(echo $(seq 0 $disks1 | tac))": "abs-guide.txt"},{"for disk in $sequence; do": "abs-guide.txt"},{"for rod in {1..3}; do": "abs-guide.txt"},{"eval empty=$(( $DISKS - (Rod${rod}[$disk] / 2) ))": "abs-guide.txt"},{"eval fill=\\${Rod${rod}[$disk]}": "abs-guide.txt"},{"repeat \" \" $empty": "abs-guide.txt"},{"test $fill -gt 0 && repeat \"*\" $fill || echo -n \"|\"": "abs-guide.txt"},{"repeat \" \" $empty": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"done": "abs-guide.txt"},{"repeat \"=\" $basewidth": "abs-guide.txt"},{"# Print \"base\" beneath rods.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"display ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"PrintRods": "abs-guide.txt"},{"# Get rod-number, summit and weight": "abs-guide.txt"},{"first=( `FromRod $1` )": "abs-guide.txt"},{"eval Rod${first[0]}[${first[1]}]=0": "abs-guide.txt"},{"# Get rod-number and first-free position": "abs-guide.txt"},{"second=( `ToRod ${first[2]} $2` )": "abs-guide.txt"},{"eval Rod${second[0]}[${second[1]}]=${first[2]}": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo; echo; echo": "abs-guide.txt"},{"if [ \"${Rod3[lastmove_t]}\" = 1 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"# Last move? If yes, then display final position.": "abs-guide.txt"},{"echo \"+ Final Position: $Moves moves\"; echo": "abs-guide.txt"},{"PrintRods": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"# From here down, almost the same as original (hanoi.bash) script.": "abs-guide.txt"},{"dohanoi() {": "abs-guide.txt"},{"# Recursive function.": "abs-guide.txt"},{"case $1 in": "abs-guide.txt"},{"0)": "abs-guide.txt"},{";;": "abs-guide.txt"},{"*)": "abs-guide.txt"},{"dohanoi \"$(($1-1))\" $2 $4 $3": "abs-guide.txt"},{"if [ \"$Moves\" -ne 0 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \"+ Position after move $Moves\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"((Moves++))": "abs-guide.txt"},{"echo -n \"": "abs-guide.txt"},{"Next move will be: \"": "abs-guide.txt"},{"echo $2 \"-->\" $3": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"747": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"display $2 $3": "abs-guide.txt"},{"dohanoi \"$(($1-1))\" $4 $3 $2": "abs-guide.txt"},{";;": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"setup_arrays ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"local dim n elem": "abs-guide.txt"},{"let \"dim1 = $1 - 1\"": "abs-guide.txt"},{"elem=$dim1": "abs-guide.txt"},{"for n in $(seq 0 $dim1)": "abs-guide.txt"},{"do": "abs-guide.txt"},{"let \"Rod1[$elem] = 2 * $n + 1\"": "abs-guide.txt"},{"Rod2[$n]=0": "abs-guide.txt"},{"Rod3[$n]=0": "abs-guide.txt"},{"((elem--))": "abs-guide.txt"},{"done": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"###": "abs-guide.txt"},{"": "abs-guide.txt"},{"Main": "abs-guide.txt"},{"": "abs-guide.txt"},{"###": "abs-guide.txt"},{"": "abs-guide.txt"},{"setup_arrays $DISKS": "abs-guide.txt"},{"echo; echo \"+ Start Position\"": "abs-guide.txt"},{"case $# in": "abs-guide.txt"},{"1) case $(($1>0)) in": "abs-guide.txt"},{"# Must have at least one disk.": "abs-guide.txt"},{"1)": "abs-guide.txt"},{"disks=$1": "abs-guide.txt"},{"dohanoi $1 1 3 2": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Total moves = 2^n - 1, where n = number of disks.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"exit 0;": "abs-guide.txt"},{";;": "abs-guide.txt"},{"*)": "abs-guide.txt"},{"echo \"$0: Illegal value for number of disks\";": "abs-guide.txt"},{"exit $E_BADPARAM;": "abs-guide.txt"},{";;": "abs-guide.txt"},{"esac": "abs-guide.txt"},{";;": "abs-guide.txt"},{"*)": "abs-guide.txt"},{"clear": "abs-guide.txt"},{"echo \"usage: $0 N\"": "abs-guide.txt"},{"echo \"": "abs-guide.txt"},{"Where \\\"N\\\" is the number of disks.\"": "abs-guide.txt"},{"exit $E_NOPARAM;": "abs-guide.txt"},{";;": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"exit $E_NOEXIT": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Shouldn't exit here.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Note:": "abs-guide.txt"},{"# Redirect script output to a file, otherwise it scrolls off display.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example A-49. The Towers of Hanoi, alternate graphic version": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"748": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"#! /bin/bash": "abs-guide.txt"},{"# The Towers Of Hanoi": "abs-guide.txt"},{"# Original script (hanoi.bash) copyright (C) 2000 Amit Singh.": "abs-guide.txt"},{"# All Rights Reserved.": "abs-guide.txt"},{"# http://hanoi.kernelthread.com": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"hanoi2.bash": "abs-guide.txt"},{"Version 2: modded for ASCII-graphic display.": "abs-guide.txt"},{"Uses code contributed by Antonio Macchi,": "abs-guide.txt"},{"with heavy editing by ABS Guide author.": "abs-guide.txt"},{"This variant also falls under the original copyright, see above.": "abs-guide.txt"},{"Used in ABS Guide with Amit Singh's permission (thanks!).": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Variables": "abs-guide.txt"},{"E_NOPARAM=86": "abs-guide.txt"},{"E_BADPARAM=87": "abs-guide.txt"},{"E_NOEXIT=88": "abs-guide.txt"},{"DELAY=2": "abs-guide.txt"},{"DISKS=$1": "abs-guide.txt"},{"Moves=0": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Illegal no. of disks passed to script.": "abs-guide.txt"},{"# Interval, in seconds, between moves. Change, if desired.": "abs-guide.txt"},{"": "abs-guide.txt"},{"MWIDTH=7": "abs-guide.txt"},{"MARGIN=2": "abs-guide.txt"},{"# Arbitrary \"magic\" constants, work okay for relatively small # of disks.": "abs-guide.txt"},{"# BASEWIDTH=51": "abs-guide.txt"},{"# Original code.": "abs-guide.txt"},{"let \"basewidth = $MWIDTH * $DISKS + $MARGIN\" # \"Base\" beneath rods.": "abs-guide.txt"},{"# Above \"algorithm\" could likely stand improvement.": "abs-guide.txt"},{"# Display variables.": "abs-guide.txt"},{"let \"disks1 = $DISKS - 1\"": "abs-guide.txt"},{"let \"spaces1 = $DISKS\"": "abs-guide.txt"},{"let \"spaces2 = 2 * $DISKS\"": "abs-guide.txt"},{"let \"lastmove_t = $DISKS - 1\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Final move?": "abs-guide.txt"},{"": "abs-guide.txt"},{"declare -a Rod1 Rod2 Rod3": "abs-guide.txt"},{"#################": "abs-guide.txt"},{"": "abs-guide.txt"},{"function repeat": "abs-guide.txt"},{"local n": "abs-guide.txt"},{"": "abs-guide.txt"},{"{": "abs-guide.txt"},{"": "abs-guide.txt"},{"# $1=char $2=number of repetitions": "abs-guide.txt"},{"# Repeat-print a character.": "abs-guide.txt"},{"": "abs-guide.txt"},{"for (( n=0; n<$2; n++ )); do": "abs-guide.txt"},{"echo -n \"$1\"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"}": "abs-guide.txt"},{"function FromRod {": "abs-guide.txt"},{"local rod summit weight sequence": "abs-guide.txt"},{"while true; do": "abs-guide.txt"},{"rod=$1": "abs-guide.txt"},{"test ${rod/[^123]/} || continue": "abs-guide.txt"},{"sequence=$(echo $(seq 0 $disks1 | tac))": "abs-guide.txt"},{"for summit in $sequence; do": "abs-guide.txt"},{"eval weight=\\${Rod${rod}[$summit]}": "abs-guide.txt"},{"test $weight -ne 0 &&": "abs-guide.txt"},{"{ echo \"$rod $summit $weight\"; return; }": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"749": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"done": "abs-guide.txt"},{"done": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"function ToRod { # $1=previous (FromRod) weight": "abs-guide.txt"},{"local rod firstfree weight sequence": "abs-guide.txt"},{"while true; do": "abs-guide.txt"},{"rod=$2": "abs-guide.txt"},{"test ${rod/[^123]} || continue": "abs-guide.txt"},{"sequence=$(echo $(seq 0 $disks1 | tac))": "abs-guide.txt"},{"for firstfree in $sequence; do": "abs-guide.txt"},{"eval weight=\\${Rod${rod}[$firstfree]}": "abs-guide.txt"},{"test $weight -gt 0 && { (( firstfree++ )); break; }": "abs-guide.txt"},{"done": "abs-guide.txt"},{"test $weight -gt $1 -o $firstfree = 0 &&": "abs-guide.txt"},{"{ echo \"$rod $firstfree\"; return; }": "abs-guide.txt"},{"done": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"function PrintRods {": "abs-guide.txt"},{"local disk rod empty fill sp sequence": "abs-guide.txt"},{"tput cup 5 0": "abs-guide.txt"},{"repeat \" \" $spaces1": "abs-guide.txt"},{"echo -n \"|\"": "abs-guide.txt"},{"repeat \" \" $spaces2": "abs-guide.txt"},{"echo -n \"|\"": "abs-guide.txt"},{"repeat \" \" $spaces2": "abs-guide.txt"},{"echo \"|\"": "abs-guide.txt"},{"sequence=$(echo $(seq 0 $disks1 | tac))": "abs-guide.txt"},{"for disk in $sequence; do": "abs-guide.txt"},{"for rod in {1..3}; do": "abs-guide.txt"},{"eval empty=$(( $DISKS - (Rod${rod}[$disk] / 2) ))": "abs-guide.txt"},{"eval fill=\\${Rod${rod}[$disk]}": "abs-guide.txt"},{"repeat \" \" $empty": "abs-guide.txt"},{"test $fill -gt 0 && repeat \"*\" $fill || echo -n \"|\"": "abs-guide.txt"},{"repeat \" \" $empty": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"done": "abs-guide.txt"},{"repeat \"=\" $basewidth": "abs-guide.txt"},{"# Print \"base\" beneath rods.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"display ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"PrintRods": "abs-guide.txt"},{"# Get rod-number, summit and weight": "abs-guide.txt"},{"first=( `FromRod $1` )": "abs-guide.txt"},{"eval Rod${first[0]}[${first[1]}]=0": "abs-guide.txt"},{"# Get rod-number and first-free position": "abs-guide.txt"},{"second=( `ToRod ${first[2]} $2` )": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"750": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"eval Rod${second[0]}[${second[1]}]=${first[2]}": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [ \"${Rod3[lastmove_t]}\" = 1 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"# Last move? If yes, then display final position.": "abs-guide.txt"},{"tput cup 0 0": "abs-guide.txt"},{"echo; echo \"+ Final Position: $Moves moves\"": "abs-guide.txt"},{"PrintRods": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"sleep $DELAY": "abs-guide.txt"},{"}": "abs-guide.txt"},{"# From here down, almost the same as original (hanoi.bash) script.": "abs-guide.txt"},{"dohanoi() {": "abs-guide.txt"},{"# Recursive function.": "abs-guide.txt"},{"case $1 in": "abs-guide.txt"},{"0)": "abs-guide.txt"},{";;": "abs-guide.txt"},{"*)": "abs-guide.txt"},{"dohanoi \"$(($1-1))\" $2 $4 $3": "abs-guide.txt"},{"if [ \"$Moves\" -ne 0 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"tput cup 0 0": "abs-guide.txt"},{"echo; echo \"+ Position after move $Moves\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"((Moves++))": "abs-guide.txt"},{"echo -n \"": "abs-guide.txt"},{"Next move will be: \"": "abs-guide.txt"},{"echo $2 \"-->\" $3": "abs-guide.txt"},{"display $2 $3": "abs-guide.txt"},{"dohanoi \"$(($1-1))\" $4 $3 $2": "abs-guide.txt"},{";;": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"}": "abs-guide.txt"},{"setup_arrays ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"local dim n elem": "abs-guide.txt"},{"let \"dim1 = $1 - 1\"": "abs-guide.txt"},{"elem=$dim1": "abs-guide.txt"},{"for n in $(seq 0 $dim1)": "abs-guide.txt"},{"do": "abs-guide.txt"},{"let \"Rod1[$elem] = 2 * $n + 1\"": "abs-guide.txt"},{"Rod2[$n]=0": "abs-guide.txt"},{"Rod3[$n]=0": "abs-guide.txt"},{"((elem--))": "abs-guide.txt"},{"done": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"###": "abs-guide.txt"},{"": "abs-guide.txt"},{"Main": "abs-guide.txt"},{"": "abs-guide.txt"},{"###": "abs-guide.txt"},{"": "abs-guide.txt"},{"trap \"tput cnorm\" 0": "abs-guide.txt"},{"tput civis": "abs-guide.txt"},{"clear": "abs-guide.txt"},{"setup_arrays $DISKS": "abs-guide.txt"},{"tput cup 0 0": "abs-guide.txt"},{"echo; echo \"+": "abs-guide.txt"},{"": "abs-guide.txt"},{"Start Position\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"751": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"case $# in": "abs-guide.txt"},{"1) case $(($1>0)) in": "abs-guide.txt"},{"# Must have at least one disk.": "abs-guide.txt"},{"1)": "abs-guide.txt"},{"disks=$1": "abs-guide.txt"},{"dohanoi $1 1 3 2": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Total moves = 2^n - 1, where n = # of disks.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"exit 0;": "abs-guide.txt"},{";;": "abs-guide.txt"},{"*)": "abs-guide.txt"},{"echo \"$0: Illegal value for number of disks\";": "abs-guide.txt"},{"exit $E_BADPARAM;": "abs-guide.txt"},{";;": "abs-guide.txt"},{"esac": "abs-guide.txt"},{";;": "abs-guide.txt"},{"*)": "abs-guide.txt"},{"echo \"usage: $0 N\"": "abs-guide.txt"},{"echo \"": "abs-guide.txt"},{"Where \\\"N\\\" is the number of disks.\"": "abs-guide.txt"},{"exit $E_NOPARAM;": "abs-guide.txt"},{";;": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"exit $E_NOEXIT": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Shouldn't exit here.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Exercise:": "abs-guide.txt"},{"-------There is a minor bug in the script that causes the display of": "abs-guide.txt"},{"the next-to-last move to be skipped.": "abs-guide.txt"},{"Fix this.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example A-50. An alternate version of the getopt-simple.sh script": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# UseGetOpt.sh": "abs-guide.txt"},{"# Author: Peggy Russell <prusselltechgroup@gmail.com>": "abs-guide.txt"},{"UseGetOpt": "abs-guide.txt"},{"declare": "abs-guide.txt"},{"declare": "abs-guide.txt"},{"declare": "abs-guide.txt"},{"declare": "abs-guide.txt"},{"declare": "abs-guide.txt"},{"": "abs-guide.txt"},{"() {": "abs-guide.txt"},{"inputOptions": "abs-guide.txt"},{"-r E_OPTERR=85": "abs-guide.txt"},{"-r ScriptName=${0##*/}": "abs-guide.txt"},{"-r ShortOpts=\"adf:hlt\"": "abs-guide.txt"},{"-r LongOpts=\"aoption,debug,file:,help,log,test\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"DoSomething () {": "abs-guide.txt"},{"echo \"The function name is '${FUNCNAME}'\"": "abs-guide.txt"},{"# Recall that $FUNCNAME is an internal variable": "abs-guide.txt"},{"#+ holding the name of the function it is in.": "abs-guide.txt"},{"}": "abs-guide.txt"},{"inputOptions=$(getopt -o \"${ShortOpts}\" --long \\": "abs-guide.txt"},{"\"${LongOpts}\" --name \"${ScriptName}\" -- \"${@}\")": "abs-guide.txt"},{"if [[ ($? -ne 0) || ($# -eq 0) ]]; then": "abs-guide.txt"},{"echo \"Usage: ${ScriptName} [-dhlt] {OPTION...}\"": "abs-guide.txt"},{"exit $E_OPTERR": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"eval set -- \"${inputOptions}\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"752": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# Only for educational purposes. Can be removed.": "abs-guide.txt"},{"#----------------------------------------------echo \"++ Test: Number of arguments: [$#]\"": "abs-guide.txt"},{"echo '++ Test: Looping through \"$@\"'": "abs-guide.txt"},{"for a in \"$@\"; do": "abs-guide.txt"},{"echo \" ++ [$a]\"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"#----------------------------------------------while true; do": "abs-guide.txt"},{"case \"${1}\" in": "abs-guide.txt"},{"--aoption | -a) # Argument found.": "abs-guide.txt"},{"echo \"Option [$1]\"": "abs-guide.txt"},{";;": "abs-guide.txt"},{"--debug | -d)": "abs-guide.txt"},{"# Enable informational messages.": "abs-guide.txt"},{"echo \"Option [$1] Debugging enabled\"": "abs-guide.txt"},{";;": "abs-guide.txt"},{"--file | -f)": "abs-guide.txt"},{"# Check for optional argument.": "abs-guide.txt"},{"case \"$2\" in": "abs-guide.txt"},{"#+ Double colon is optional argument.": "abs-guide.txt"},{"\"\")": "abs-guide.txt"},{"# Not there.": "abs-guide.txt"},{"echo \"Option [$1] Use default\"": "abs-guide.txt"},{"shift": "abs-guide.txt"},{";;": "abs-guide.txt"},{"*) # Got it": "abs-guide.txt"},{"echo \"Option [$1] Using input [$2]\"": "abs-guide.txt"},{"shift": "abs-guide.txt"},{";;": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"DoSomething": "abs-guide.txt"},{";;": "abs-guide.txt"},{"--log | -l) # Enable Logging.": "abs-guide.txt"},{"echo \"Option [$1] Logging enabled\"": "abs-guide.txt"},{";;": "abs-guide.txt"},{"--test | -t) # Enable testing.": "abs-guide.txt"},{"echo \"Option [$1] Testing enabled\"": "abs-guide.txt"},{";;": "abs-guide.txt"},{"--help | -h)": "abs-guide.txt"},{"echo \"Option [$1] Display help\"": "abs-guide.txt"},{"break": "abs-guide.txt"},{";;": "abs-guide.txt"},{"--)": "abs-guide.txt"},{"# Done! $# is argument number for \"--\", $@ is \"--\"": "abs-guide.txt"},{"echo \"Option [$1] Dash Dash\"": "abs-guide.txt"},{"break": "abs-guide.txt"},{";;": "abs-guide.txt"},{"*)": "abs-guide.txt"},{"echo \"Major internal error!\"": "abs-guide.txt"},{"exit 8": "abs-guide.txt"},{";;": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"echo \"Number of arguments: [$#]\"": "abs-guide.txt"},{"shift": "abs-guide.txt"},{"done": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"753": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"shift": "abs-guide.txt"},{"# Only for educational purposes. Can be removed.": "abs-guide.txt"},{"#---------------------------------------------------------------------echo \"++ Test: Number of arguments after \\\"--\\\" is [$#] They are: [$@]\"": "abs-guide.txt"},{"echo '++ Test: Looping through \"$@\"'": "abs-guide.txt"},{"for a in \"$@\"; do": "abs-guide.txt"},{"echo \" ++ [$a]\"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"#---------------------------------------------------------------------}": "abs-guide.txt"},{"################################### M A I N ########################": "abs-guide.txt"},{"# If you remove \"function UseGetOpt () {\" and corresponding \"}\",": "abs-guide.txt"},{"#+ you can uncomment the \"exit 0\" line below, and invoke this script": "abs-guide.txt"},{"#+ with the various options from the command-line.": "abs-guide.txt"},{"#------------------------------------------------------------------# exit 0": "abs-guide.txt"},{"echo \"Test 1\"": "abs-guide.txt"},{"UseGetOpt -f myfile one \"two three\" four": "abs-guide.txt"},{"echo;echo \"Test 2\"": "abs-guide.txt"},{"UseGetOpt -h": "abs-guide.txt"},{"echo;echo \"Test 3 - Short Options\"": "abs-guide.txt"},{"UseGetOpt -adltf myfile anotherfile": "abs-guide.txt"},{"echo;echo \"Test 4 - Long Options\"": "abs-guide.txt"},{"UseGetOpt --aoption --debug --log --test --file myfile anotherfile": "abs-guide.txt"},{"exit": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example A-51. The version of the UseGetOpt.sh example used in the Tab Expansion appendix": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"UseGetOpt-2.sh": "abs-guide.txt"},{"Modified version of the script for illustrating tab-expansion": "abs-guide.txt"},{"of command-line options.": "abs-guide.txt"},{"See the \"Introduction to Tab Expansion\" appendix.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Possible options: -a -d -f -l -t -h": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"--aoption, --debug --file --log --test -- help -#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Author of original script: Peggy Russell <prusselltechgroup@gmail.com>": "abs-guide.txt"},{"": "abs-guide.txt"},{"# UseGetOpt () {": "abs-guide.txt"},{"declare inputOptions": "abs-guide.txt"},{"declare -r E_OPTERR=85": "abs-guide.txt"},{"declare -r ScriptName=${0##*/}": "abs-guide.txt"},{"declare -r ShortOpts=\"adf:hlt\"": "abs-guide.txt"},{"declare -r LongOpts=\"aoption,debug,file:,help,log,test\"": "abs-guide.txt"},{"DoSomething () {": "abs-guide.txt"},{"echo \"The function name is '${FUNCNAME}'\"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"inputOptions=$(getopt -o \"${ShortOpts}\" --long \\": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"754": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"\"${LongOpts}\" --name \"${ScriptName}\" -- \"${@}\")": "abs-guide.txt"},{"if [[ ($? -ne 0) || ($# -eq 0) ]]; then": "abs-guide.txt"},{"echo \"Usage: ${ScriptName} [-dhlt] {OPTION...}\"": "abs-guide.txt"},{"exit $E_OPTERR": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"eval set -- \"${inputOptions}\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"while true; do": "abs-guide.txt"},{"case \"${1}\" in": "abs-guide.txt"},{"--aoption | -a) # Argument found.": "abs-guide.txt"},{"echo \"Option [$1]\"": "abs-guide.txt"},{";;": "abs-guide.txt"},{"--debug | -d)": "abs-guide.txt"},{"# Enable informational messages.": "abs-guide.txt"},{"echo \"Option [$1] Debugging enabled\"": "abs-guide.txt"},{";;": "abs-guide.txt"},{"--file | -f)": "abs-guide.txt"},{"# Check for optional argument.": "abs-guide.txt"},{"case \"$2\" in": "abs-guide.txt"},{"#+ Double colon is optional argument.": "abs-guide.txt"},{"\"\")": "abs-guide.txt"},{"# Not there.": "abs-guide.txt"},{"echo \"Option [$1] Use default\"": "abs-guide.txt"},{"shift": "abs-guide.txt"},{";;": "abs-guide.txt"},{"*) # Got it": "abs-guide.txt"},{"echo \"Option [$1] Using input [$2]\"": "abs-guide.txt"},{"shift": "abs-guide.txt"},{";;": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"DoSomething": "abs-guide.txt"},{";;": "abs-guide.txt"},{"--log | -l) # Enable Logging.": "abs-guide.txt"},{"echo \"Option [$1] Logging enabled\"": "abs-guide.txt"},{";;": "abs-guide.txt"},{"--test | -t) # Enable testing.": "abs-guide.txt"},{"echo \"Option [$1] Testing enabled\"": "abs-guide.txt"},{";;": "abs-guide.txt"},{"--help | -h)": "abs-guide.txt"},{"echo \"Option [$1] Display help\"": "abs-guide.txt"},{"break": "abs-guide.txt"},{";;": "abs-guide.txt"},{"--)": "abs-guide.txt"},{"# Done! $# is argument number for \"--\", $@ is \"--\"": "abs-guide.txt"},{"echo \"Option [$1] Dash Dash\"": "abs-guide.txt"},{"break": "abs-guide.txt"},{";;": "abs-guide.txt"},{"*)": "abs-guide.txt"},{"echo \"Major internal error!\"": "abs-guide.txt"},{"exit 8": "abs-guide.txt"},{";;": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"echo \"Number of arguments: [$#]\"": "abs-guide.txt"},{"shift": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"755": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"done": "abs-guide.txt"},{"shift": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example A-52. Cycling through all the possible color backgrounds": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"show-all-colors.sh": "abs-guide.txt"},{"Displays all 256 possible background colors, using ANSI escape sequences.": "abs-guide.txt"},{"Author: Chetankumar Phulpagare": "abs-guide.txt"},{"Used in ABS Guide with permission.": "abs-guide.txt"},{"": "abs-guide.txt"},{"T1=8": "abs-guide.txt"},{"T2=6": "abs-guide.txt"},{"T3=36": "abs-guide.txt"},{"offset=0": "abs-guide.txt"},{"for num1 in {0..7}": "abs-guide.txt"},{"do {": "abs-guide.txt"},{"for num2 in {0,1}": "abs-guide.txt"},{"do {": "abs-guide.txt"},{"shownum=`echo \"$offset + $T1 * ${num2} + $num1\" | bc`": "abs-guide.txt"},{"echo -en \"\\E[0;48;5;${shownum}m color ${shownum} \\E[0m\"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"}": "abs-guide.txt"},{"done": "abs-guide.txt"},{"offset=16": "abs-guide.txt"},{"for num1 in {0..5}": "abs-guide.txt"},{"do {": "abs-guide.txt"},{"for num2 in {0..5}": "abs-guide.txt"},{"do {": "abs-guide.txt"},{"for num3 in {0..5}": "abs-guide.txt"},{"do {": "abs-guide.txt"},{"shownum=`echo \"$offset + $T2 * ${num3} \\": "abs-guide.txt"},{"+ $num2 + $T3 * ${num1}\" | bc`": "abs-guide.txt"},{"echo -en \"\\E[0;48;5;${shownum}m color ${shownum} \\E[0m\"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"}": "abs-guide.txt"},{"done": "abs-guide.txt"},{"}": "abs-guide.txt"},{"done": "abs-guide.txt"},{"offset=232": "abs-guide.txt"},{"for num1 in {0..23}": "abs-guide.txt"},{"do {": "abs-guide.txt"},{"shownum=`expr $offset + $num1`": "abs-guide.txt"},{"echo -en \"\\E[0;48;5;${shownum}m ${shownum}\\E[0m\"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"756": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"Example A-53. Morse Code Practice": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# sam.sh, v. .01a": "abs-guide.txt"},{"# Still Another Morse (code training script)": "abs-guide.txt"},{"# With profuse apologies to Sam (F.B.) Morse.": "abs-guide.txt"},{"# Author: Mendel Cooper": "abs-guide.txt"},{"# License: GPL3": "abs-guide.txt"},{"# Reldate: 05/25/11": "abs-guide.txt"},{"# Morse code training script.": "abs-guide.txt"},{"# Converts arguments to audible dots and dashes.": "abs-guide.txt"},{"# Note: lowercase input only at this time.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Get the wav files from the source tarball:": "abs-guide.txt"},{"# http://bash.deta.in/abs-guide-latest.tar.bz2": "abs-guide.txt"},{"DOT='soundfiles/dot.wav'": "abs-guide.txt"},{"DASH='soundfiles/dash.wav'": "abs-guide.txt"},{"# Maybe move soundfiles to /usr/local/sounds?": "abs-guide.txt"},{"LETTERSPACE=300000 # Microseconds.": "abs-guide.txt"},{"WORDSPACE=980000": "abs-guide.txt"},{"# Nice and slow, for beginners. Maybe 5 wpm?": "abs-guide.txt"},{"EXIT_MSG=\"May the Morse be with you!\"": "abs-guide.txt"},{"E_NOARGS=75": "abs-guide.txt"},{"# No command-line args?": "abs-guide.txt"},{"": "abs-guide.txt"},{"declare -A morse": "abs-guide.txt"},{"# Associative array!": "abs-guide.txt"},{"# ======================================= #": "abs-guide.txt"},{"morse[a]=\"dot; dash\"": "abs-guide.txt"},{"morse[b]=\"dash; dot; dot; dot\"": "abs-guide.txt"},{"morse[c]=\"dash; dot; dash; dot\"": "abs-guide.txt"},{"morse[d]=\"dash; dot; dot\"": "abs-guide.txt"},{"morse[e]=\"dot\"": "abs-guide.txt"},{"morse[f]=\"dot; dot; dash; dot\"": "abs-guide.txt"},{"morse[g]=\"dash; dash; dot\"": "abs-guide.txt"},{"morse[h]=\"dot; dot; dot; dot\"": "abs-guide.txt"},{"morse[i]=\"dot; dot;\"": "abs-guide.txt"},{"morse[j]=\"dot; dash; dash; dash\"": "abs-guide.txt"},{"morse[k]=\"dash; dot; dash\"": "abs-guide.txt"},{"morse[l]=\"dot; dash; dot; dot\"": "abs-guide.txt"},{"morse[m]=\"dash; dash\"": "abs-guide.txt"},{"morse[n]=\"dash; dot\"": "abs-guide.txt"},{"morse[o]=\"dash; dash; dash\"": "abs-guide.txt"},{"morse[p]=\"dot; dash; dash; dot\"": "abs-guide.txt"},{"morse[q]=\"dash; dash; dot; dash\"": "abs-guide.txt"},{"morse[r]=\"dot; dash; dot\"": "abs-guide.txt"},{"morse[s]=\"dot; dot; dot\"": "abs-guide.txt"},{"morse[t]=\"dash\"": "abs-guide.txt"},{"morse[u]=\"dot; dot; dash\"": "abs-guide.txt"},{"morse[v]=\"dot; dot; dot; dash\"": "abs-guide.txt"},{"morse[w]=\"dot; dash; dash\"": "abs-guide.txt"},{"morse[x]=\"dash; dot; dot; dash\"": "abs-guide.txt"},{"morse[y]=\"dash; dot; dash; dash\"": "abs-guide.txt"},{"morse[z]=\"dash; dash; dot; dot\"": "abs-guide.txt"},{"morse[0]=\"dash; dash; dash; dash; dash\"": "abs-guide.txt"},{"morse[1]=\"dot; dash; dash; dash; dash\"": "abs-guide.txt"},{"morse[2]=\"dot; dot; dash; dash; dash\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"757": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"morse[3]=\"dot; dot; dot; dash; dash\"": "abs-guide.txt"},{"morse[4]=\"dot; dot; dot; dot; dash\"": "abs-guide.txt"},{"morse[5]=\"dot; dot; dot; dot; dot\"": "abs-guide.txt"},{"morse[6]=\"dash; dot; dot; dot; dot\"": "abs-guide.txt"},{"morse[7]=\"dash; dash; dot; dot; dot\"": "abs-guide.txt"},{"morse[8]=\"dash; dash; dash; dot; dot\"": "abs-guide.txt"},{"morse[9]=\"dash; dash; dash; dash; dot\"": "abs-guide.txt"},{"# The following must be escaped or quoted.": "abs-guide.txt"},{"morse[?]=\"dot; dot; dash; dash; dot; dot\"": "abs-guide.txt"},{"morse[.]=\"dot; dash; dot; dash; dot; dash\"": "abs-guide.txt"},{"morse[,]=\"dash; dash; dot; dot; dash; dash\"": "abs-guide.txt"},{"morse[/]=\"dash; dot; dot; dash; dot\"": "abs-guide.txt"},{"morse[\\@]=\"dot; dash; dash; dot; dash; dot\"": "abs-guide.txt"},{"# ======================================= #": "abs-guide.txt"},{"play_letter ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"eval ${morse[$1]}": "abs-guide.txt"},{"# Play dots, dashes from appropriate sound files.": "abs-guide.txt"},{"# Why is 'eval' necessary here?": "abs-guide.txt"},{"usleep $LETTERSPACE # Pause in between letters.": "abs-guide.txt"},{"}": "abs-guide.txt"},{"extract_letters ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"local pos=0": "abs-guide.txt"},{"local len=1": "abs-guide.txt"},{"strlen=${#1}": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Slice string apart, letter by letter.": "abs-guide.txt"},{"# Starting at left end of string.": "abs-guide.txt"},{"# One letter at a time.": "abs-guide.txt"},{"": "abs-guide.txt"},{"while [ $pos -lt $strlen ]": "abs-guide.txt"},{"do": "abs-guide.txt"},{"letter=${1:pos:len}": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^^^^^^^^^^^^": "abs-guide.txt"},{"See Chapter 10.1.": "abs-guide.txt"},{"play_letter $letter": "abs-guide.txt"},{"echo -n \"*\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Mark letter just played.": "abs-guide.txt"},{"((pos++))": "abs-guide.txt"},{"done": "abs-guide.txt"},{"}": "abs-guide.txt"},{"######### Play the sounds ############": "abs-guide.txt"},{"dot() { aplay \"$DOT\" 2&>/dev/null; }": "abs-guide.txt"},{"dash() { aplay \"$DASH\" 2&>/dev/null; }": "abs-guide.txt"},{"######################################": "abs-guide.txt"},{"no_args ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"declare -a usage": "abs-guide.txt"},{"usage=( $0 word1 word2 ... )": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo \"Usage:\"; echo": "abs-guide.txt"},{"echo ${usage[*]}": "abs-guide.txt"},{"for index in 0 1 2 3": "abs-guide.txt"},{"do": "abs-guide.txt"},{"extract_letters ${usage[index]}": "abs-guide.txt"},{"usleep $WORDSPACE": "abs-guide.txt"},{"echo -n \" \"": "abs-guide.txt"},{"# Print space between words.": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo \"Usage: $0 word1 word2 ... \"": "abs-guide.txt"},{"echo; echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"# int main()": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"758": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# {": "abs-guide.txt"},{"clear": "abs-guide.txt"},{"# Clear the terminal screen.": "abs-guide.txt"},{"echo \"": "abs-guide.txt"},{"SAM\"": "abs-guide.txt"},{"echo \"Still Another Morse code trainer\"": "abs-guide.txt"},{"echo \"": "abs-guide.txt"},{"Author: Mendel Cooper\"": "abs-guide.txt"},{"echo; echo;": "abs-guide.txt"},{"if [ -z \"$1\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"no_args": "abs-guide.txt"},{"echo; echo; echo \"$EXIT_MSG\"; echo": "abs-guide.txt"},{"exit $E_NOARGS": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"echo; echo \"$*\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Print text that will be played.": "abs-guide.txt"},{"": "abs-guide.txt"},{"until [ -z \"$1\" ]": "abs-guide.txt"},{"do": "abs-guide.txt"},{"extract_letters $1": "abs-guide.txt"},{"shift": "abs-guide.txt"},{"# On to next word.": "abs-guide.txt"},{"usleep $WORDSPACE": "abs-guide.txt"},{"echo -n \" \"": "abs-guide.txt"},{"# Print space between words.": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo; echo; echo \"$EXIT_MSG\"; echo": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"# }": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Exercises:": "abs-guide.txt"},{"--------1) Have the script accept either lowercase or uppercase words": "abs-guide.txt"},{"as arguments. Hint: Use 'tr' . . .": "abs-guide.txt"},{"2) Have the script optionally accept input from a text file.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example A-54. Base64 encoding/decoding": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# base64.sh: Bash implementation of Base64 encoding and decoding.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Copyright (c) 2011 vladz <vladz@devzero.fr>": "abs-guide.txt"},{"# Used in ABSG with permission (thanks!).": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Encode or decode original Base64 (and also Base64url)": "abs-guide.txt"},{"#+ from STDIN to STDOUT.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Usage:": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Encode": "abs-guide.txt"},{"#": "abs-guide.txt"},{"$ ./base64.sh < binary-file > binary-file.base64": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Decode": "abs-guide.txt"},{"#": "abs-guide.txt"},{"$ ./base64.sh -d < binary-file.base64 > binary-file": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Reference:": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"[1] RFC4648 - \"The Base16, Base32, and Base64 Data Encodings\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"http://tools.ietf.org/html/rfc4648#section-5": "abs-guide.txt"},{"": "abs-guide.txt"},{"# The base64_charset[] array contains entire base64 charset,": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"759": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# and additionally the character \"=\" ...": "abs-guide.txt"},{"base64_charset=( {A..Z} {a..z} {0..9} + / = )": "abs-guide.txt"},{"# Nice illustration of brace expansion.": "abs-guide.txt"},{"# Uncomment the ### line below to use base64url encoding instead of": "abs-guide.txt"},{"#+ original base64.": "abs-guide.txt"},{"### base64_charset=( {A..Z} {a..z} {0..9} - _ = )": "abs-guide.txt"},{"# Output text width when encoding": "abs-guide.txt"},{"#+ (64 characters, just like openssl output).": "abs-guide.txt"},{"text_width=64": "abs-guide.txt"},{"function display_base64_char {": "abs-guide.txt"},{"# Convert a 6-bit number (between 0 and 63) into its corresponding values": "abs-guide.txt"},{"#+ in Base64, then display the result with the specified text width.": "abs-guide.txt"},{"printf \"${base64_charset[$1]}\"; (( width++ ))": "abs-guide.txt"},{"(( width % text_width == 0 )) && printf \"\\n\"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"function encode_base64 {": "abs-guide.txt"},{"# Encode three 8-bit hexadecimal codes into four 6-bit numbers.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"We need two local int array variables:": "abs-guide.txt"},{"#": "abs-guide.txt"},{"c8[]: to store the codes of the 8-bit characters to encode": "abs-guide.txt"},{"#": "abs-guide.txt"},{"c6[]: to store the corresponding encoded values on 6-bit": "abs-guide.txt"},{"declare -a -i c8 c6": "abs-guide.txt"},{"# Convert hexadecimal to decimal.": "abs-guide.txt"},{"c8=( $(printf \"ibase=16; ${1:0:2}\\n${1:2:2}\\n${1:4:2}\\n\" | bc) )": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"((": "abs-guide.txt"},{"((": "abs-guide.txt"},{"": "abs-guide.txt"},{"Let's play with bitwise operators": "abs-guide.txt"},{"(3x8-bit into 4x6-bits conversion).": "abs-guide.txt"},{"c6[0] = c8[0] >> 2 ))": "abs-guide.txt"},{"c6[1] = ((c8[0] & 3) << 4) | (c8[1] >> 4) ))": "abs-guide.txt"},{"": "abs-guide.txt"},{"# The following operations depend on the c8 element number.": "abs-guide.txt"},{"case ${#c8[*]} in": "abs-guide.txt"},{"3) (( c6[2] = ((c8[1] & 15) << 2) | (c8[2] >> 6) ))": "abs-guide.txt"},{"(( c6[3] = c8[2] & 63 )) ;;": "abs-guide.txt"},{"2) (( c6[2] = (c8[1] & 15) << 2 ))": "abs-guide.txt"},{"(( c6[3] = 64 )) ;;": "abs-guide.txt"},{"1) (( c6[2] = c6[3] = 64 )) ;;": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"for char in ${c6[@]}; do": "abs-guide.txt"},{"display_base64_char ${char}": "abs-guide.txt"},{"done": "abs-guide.txt"},{"}": "abs-guide.txt"},{"function decode_base64 {": "abs-guide.txt"},{"# Decode four base64 characters into three hexadecimal ASCII characters.": "abs-guide.txt"},{"# c8[]: to store the codes of the 8-bit characters": "abs-guide.txt"},{"# c6[]: to store the corresponding Base64 values on 6-bit": "abs-guide.txt"},{"declare -a -i c8 c6": "abs-guide.txt"},{"# Find decimal value corresponding to the current base64 character.": "abs-guide.txt"},{"for current_char in ${1:0:1} ${1:1:1} ${1:2:1} ${1:3:1}; do": "abs-guide.txt"},{"[ \"${current_char}\" = \"=\" ] && break": "abs-guide.txt"},{"position=0": "abs-guide.txt"},{"while [ \"${current_char}\" != \"${base64_charset[${position}]}\" ]; do": "abs-guide.txt"},{"(( position++ ))": "abs-guide.txt"},{"done": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"760": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"c6=( ${c6[*]} ${position} )": "abs-guide.txt"},{"done": "abs-guide.txt"},{"# Let's play with bitwise operators": "abs-guide.txt"},{"#+ (4x8-bit into 3x6-bits conversion).": "abs-guide.txt"},{"(( c8[0] = (c6[0] << 2) | (c6[1] >> 4) ))": "abs-guide.txt"},{"# The next operations depends on the": "abs-guide.txt"},{"case ${#c6[*]} in": "abs-guide.txt"},{"3) (( c8[1] = ( (c6[1] & 15) << 4)": "abs-guide.txt"},{"(( c8[2] = (c6[2] & 3) << 6 ));": "abs-guide.txt"},{"4) (( c8[1] = ( (c6[1] & 15) << 4)": "abs-guide.txt"},{"(( c8[2] = ( (c6[2] & 3) << 6)": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"": "abs-guide.txt"},{"c6 elements number.": "abs-guide.txt"},{"| (c6[2] >>": "abs-guide.txt"},{"unset c8[2]": "abs-guide.txt"},{"| (c6[2] >>": "abs-guide.txt"},{"| c6[3] ))": "abs-guide.txt"},{"": "abs-guide.txt"},{"2) ))": "abs-guide.txt"},{";;": "abs-guide.txt"},{"2) ))": "abs-guide.txt"},{";;": "abs-guide.txt"},{"": "abs-guide.txt"},{"for char in ${c8[*]}; do": "abs-guide.txt"},{"printf \"\\x$(printf \"%x\" ${char})\"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"# main ()": "abs-guide.txt"},{"if [ \"$1\" = \"-d\" ]; then": "abs-guide.txt"},{"": "abs-guide.txt"},{"# decode": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Reformat STDIN in pseudo 4x6-bit groups.": "abs-guide.txt"},{"content=$(cat - | tr -d \"\\n\" | sed -r \"s/(.{4})/\\1 /g\")": "abs-guide.txt"},{"for chars in ${content}; do decode_base64 ${chars}; done": "abs-guide.txt"},{"else": "abs-guide.txt"},{"# Make a hexdump of stdin and reformat in 3-byte groups.": "abs-guide.txt"},{"content=$(cat - | xxd -ps -u | sed -r \"s/(\\w{6})/\\1 /g\" |": "abs-guide.txt"},{"tr -d \"\\n\")": "abs-guide.txt"},{"for chars in ${content}; do encode_base64 ${chars}; done": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example A-55. Inserting text in a file using sed": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# Prepends a string at a specified line": "abs-guide.txt"},{"#+ in files with names ending in \"sample\"": "abs-guide.txt"},{"#+ in the current working directory.": "abs-guide.txt"},{"# 000000000000000000000000000000000000": "abs-guide.txt"},{"# This script overwrites files!": "abs-guide.txt"},{"# Be careful running it in a directory": "abs-guide.txt"},{"#+ where you have important files!!!": "abs-guide.txt"},{"# 000000000000000000000000000000000000": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Create a couple of files to operate on ...": "abs-guide.txt"},{"01sample": "abs-guide.txt"},{"02sample": "abs-guide.txt"},{"... etc.": "abs-guide.txt"},{"These files must not be empty, else the prepend will not work.": "abs-guide.txt"},{"": "abs-guide.txt"},{"lineno=1": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Append at line 1 (prepend).": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"761": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"filespec=\"*sample\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Filename pattern to operate on.": "abs-guide.txt"},{"": "abs-guide.txt"},{"string=$(whoami)": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Will set your username as string to insert.": "abs-guide.txt"},{"# It could just as easily be any other string.": "abs-guide.txt"},{"": "abs-guide.txt"},{"for file in $filespec # Specify which files to alter.": "abs-guide.txt"},{"do #": "abs-guide.txt"},{"^^^^^^^^^": "abs-guide.txt"},{"sed -i \"\"$lineno\"i \"$string\"\" $file": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^^ -i option edits files in-place.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^ Insert (i) command.": "abs-guide.txt"},{"echo \"\"$file\" altered!\"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo \"Warning: files possibly clobbered!\"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"# Exercise:": "abs-guide.txt"},{"# Add error checking to this script.": "abs-guide.txt"},{"# It needs it badly.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example A-56. The Gronsfeld Cipher": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# gronsfeld.bash": "abs-guide.txt"},{"# License: GPL3": "abs-guide.txt"},{"# Reldate 06/23/11": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"This is an implementation of the Gronsfeld Cipher.": "abs-guide.txt"},{"It's essentially a stripped-down variant of the": "abs-guide.txt"},{"polyalphabetic Vigen\u00e8re Tableau, but with only 10 alphabets.": "abs-guide.txt"},{"The classic Gronsfeld has a numeric sequence as the key word,": "abs-guide.txt"},{"but here we substitute a letter string, for ease of use.": "abs-guide.txt"},{"Allegedly, this cipher was invented by the eponymous Count Gronsfeld": "abs-guide.txt"},{"in the 17th Century. It was at one time considered to be unbreakable.": "abs-guide.txt"},{"Note that this is ###not### a secure cipher by modern standards.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Global Variables": "abs-guide.txt"},{"Enc_suffix=\"29379\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Encrypted text output with this 5-digit suffix.": "abs-guide.txt"},{"# This functions as a decryption flag,": "abs-guide.txt"},{"#+ and when used to generate passwords adds security.": "abs-guide.txt"},{"Default_key=\"gronsfeldk\"": "abs-guide.txt"},{"# The script uses this if key not entered below": "abs-guide.txt"},{"# (at \"Keychain\").": "abs-guide.txt"},{"# Change the above two values frequently": "abs-guide.txt"},{"#+ for added security.": "abs-guide.txt"},{"GROUPLEN=5": "abs-guide.txt"},{"# Output in groups of 5 letters, per tradition.": "abs-guide.txt"},{"alpha1=( abcdefghijklmnopqrstuvwxyz )": "abs-guide.txt"},{"alpha2=( {A..Z} )": "abs-guide.txt"},{"# Output in all caps, per tradition.": "abs-guide.txt"},{"# Use": "abs-guide.txt"},{"alpha2=( {a..z} )": "abs-guide.txt"},{"for password generator.": "abs-guide.txt"},{"wraplen=26": "abs-guide.txt"},{"# Wrap around if past end of alphabet.": "abs-guide.txt"},{"dflag=": "abs-guide.txt"},{"# Decrypt flag (set if $Enc_suffix present).": "abs-guide.txt"},{"E_NOARGS=76": "abs-guide.txt"},{"# Missing command-line args?": "abs-guide.txt"},{"DEBUG=77": "abs-guide.txt"},{"# Debugging flag.": "abs-guide.txt"},{"declare -a offsets": "abs-guide.txt"},{"# This array holds the numeric shift values for": "abs-guide.txt"},{"#+ encryption/decryption.": "abs-guide.txt"},{"########Keychain#########": "abs-guide.txt"},{"key= ### Put key here!!!": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"762": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# 10 characters!": "abs-guide.txt"},{"#########################": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Function": "abs-guide.txt"},{": ()": "abs-guide.txt"},{"{ # Encrypt or decrypt, depending on whether $dflag is set.": "abs-guide.txt"},{"# Why \": ()\" as a function name? Just to prove that it can be done.": "abs-guide.txt"},{"local idx keydx mlen off1 shft": "abs-guide.txt"},{"local plaintext=\"$1\"": "abs-guide.txt"},{"local mlen=${#plaintext}": "abs-guide.txt"},{"for (( idx=0; idx<$mlen; idx++ ))": "abs-guide.txt"},{"do": "abs-guide.txt"},{"let \"keydx = $idx % $keylen\"": "abs-guide.txt"},{"shft=${offsets[keydx]}": "abs-guide.txt"},{"if [ -n \"$dflag\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"# Decrypt!": "abs-guide.txt"},{"let \"off1 = $(expr index \"${alpha1[*]}\" ${plaintext:idx:1}) - $shft\"": "abs-guide.txt"},{"# Shift backward to decrypt.": "abs-guide.txt"},{"else": "abs-guide.txt"},{"# Encrypt!": "abs-guide.txt"},{"let \"off1 = $(expr index \"${alpha1[*]}\" ${plaintext:idx:1}) + $shft\"": "abs-guide.txt"},{"# Shift forward to encrypt.": "abs-guide.txt"},{"test $(( $idx % $GROUPLEN)) = 0 && echo -n \" \" # Groups of 5 letters.": "abs-guide.txt"},{"# Comment out above line for output as a string without whitespace,": "abs-guide.txt"},{"#+ for example, if using the script as a password generator.": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"((off1--))": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Normalize. Why is this necessary?": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [ $off1 -lt 0 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"# Catch negative indices.": "abs-guide.txt"},{"let \"off1 += $wraplen\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"((off1 %= $wraplen))": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Wrap around if past end of alphabet.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo -n \"${alpha2[off1]}\"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"if [ -z \"$dflag\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo \" $Enc_suffix\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"echo \"$Enc_suffix\" # For password generator.": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"} # End encrypt/decrypt function.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# int main () {": "abs-guide.txt"},{"# Check": "abs-guide.txt"},{"if [ -z": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"exit": "abs-guide.txt"},{"": "abs-guide.txt"},{"for command-line args.": "abs-guide.txt"},{"\"$1\" ]": "abs-guide.txt"},{"\"Usage: $0 TEXT TO ENCODE/DECODE\"": "abs-guide.txt"},{"$E_NOARGS": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"763": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"if [ ${!#} == \"$Enc_suffix\" ]": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^^^^^ Final command-line arg.": "abs-guide.txt"},{"then": "abs-guide.txt"},{"dflag=ON": "abs-guide.txt"},{"echo -n \"+\"": "abs-guide.txt"},{"# Flag decrypted text with a \"+\" for easy ID.": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"if [ -z \"$key\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"key=\"$Default_key\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"# \"gronsfeldk\" per above.": "abs-guide.txt"},{"": "abs-guide.txt"},{"keylen=${#key}": "abs-guide.txt"},{"for (( idx=0; idx<$keylen; idx++ ))": "abs-guide.txt"},{"do # Calculate shift values for encryption/decryption.": "abs-guide.txt"},{"offsets[idx]=$(expr index \"${alpha1[*]}\" ${key:idx:1})": "abs-guide.txt"},{"# Normalize.": "abs-guide.txt"},{"((offsets[idx]--)) # Necessary because \"expr index\" starts at 1,": "abs-guide.txt"},{"#+ whereas array count starts at 0.": "abs-guide.txt"},{"# Generate array of numerical offsets corresponding to the key.": "abs-guide.txt"},{"# There are simpler ways to accomplish this.": "abs-guide.txt"},{"done": "abs-guide.txt"},{"args=$(echo \"$*\" | sed -e 's/ //g' | tr A-Z a-z | sed -e 's/[0-9]//g')": "abs-guide.txt"},{"# Remove whitespace and digits from command-line args.": "abs-guide.txt"},{"# Can modify to also remove punctuation characters, if desired.": "abs-guide.txt"},{"# Debug:": "abs-guide.txt"},{"# echo \"$args\"; exit $DEBUG": "abs-guide.txt"},{": \"$args\"": "abs-guide.txt"},{"# Call the function named \":\".": "abs-guide.txt"},{"# : is a null operator, except . . . when it's a function name!": "abs-guide.txt"},{"exit $?": "abs-guide.txt"},{"": "abs-guide.txt"},{"# } End-of-script": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"**************************************************************": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"This script can function as a password generator,": "abs-guide.txt"},{"#+ with several minor mods, see above.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"That would allow an easy-to-remember password, even the word": "abs-guide.txt"},{"#+ \"password\" itself, which encrypts to vrgfotvo29379": "abs-guide.txt"},{"#+ a fairly secure password not susceptible to a dictionary attack.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Or, you could use your own name (surely that's easy to remember!).": "abs-guide.txt"},{"#": "abs-guide.txt"},{"For example, Bozo Bozeman encrypts to hfnbttdppkt29379.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"**************************************************************": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example A-57. Bingo Number Generator": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# bingo.sh": "abs-guide.txt"},{"# Bingo number generator": "abs-guide.txt"},{"# Reldate 20Aug12, License: Public Domain": "abs-guide.txt"},{"#######################################################################": "abs-guide.txt"},{"# This script generates bingo numbers.": "abs-guide.txt"},{"# Hitting a key generates a new number.": "abs-guide.txt"},{"# Hitting 'q' terminates the script.": "abs-guide.txt"},{"# In a given run of the script, there will be no duplicate numbers.": "abs-guide.txt"},{"# When the script terminates, it prints a log of the numbers generated.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"764": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"#######################################################################": "abs-guide.txt"},{"MIN=1": "abs-guide.txt"},{"# Lowest allowable bingo number.": "abs-guide.txt"},{"MAX=75": "abs-guide.txt"},{"# Highest allowable bingo number.": "abs-guide.txt"},{"COLS=15": "abs-guide.txt"},{"# Numbers in each column (B I N G O).": "abs-guide.txt"},{"SINGLE_DIGIT_MAX=9": "abs-guide.txt"},{"declare -a Numbers": "abs-guide.txt"},{"Prefix=(B I N G O)": "abs-guide.txt"},{"initialize_Numbers ()": "abs-guide.txt"},{"{ # Zero them out to start.": "abs-guide.txt"},{"# They'll be incremented if chosen.": "abs-guide.txt"},{"local index=0": "abs-guide.txt"},{"until [ \"$index\" -gt $MAX ]": "abs-guide.txt"},{"do": "abs-guide.txt"},{"Numbers[index]=0": "abs-guide.txt"},{"((index++))": "abs-guide.txt"},{"done": "abs-guide.txt"},{"Numbers[0]=1": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Flag zero, so it won't be selected.": "abs-guide.txt"},{"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"generate_number ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"local number": "abs-guide.txt"},{"while [ 1 ]": "abs-guide.txt"},{"do": "abs-guide.txt"},{"let \"number = $(expr $RANDOM % $MAX)\"": "abs-guide.txt"},{"if [ ${Numbers[number]} -eq 0 ]": "abs-guide.txt"},{"# Number not yet called.": "abs-guide.txt"},{"then": "abs-guide.txt"},{"let \"Numbers[number]+=1\"": "abs-guide.txt"},{"# Flag it in the array.": "abs-guide.txt"},{"break": "abs-guide.txt"},{"# And terminate loop.": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# Else if already called, loop and generate another number.": "abs-guide.txt"},{"done": "abs-guide.txt"},{"# Exercise: Rewrite this more elegantly as an until-loop.": "abs-guide.txt"},{"return $number": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"print_numbers_called ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"# Print out the called number log in neat columns.": "abs-guide.txt"},{"# echo ${Numbers[@]}": "abs-guide.txt"},{"local pre2=0": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Prefix a zero, so columns will align": "abs-guide.txt"},{"#+ on single-digit numbers.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo \"Number Stats\"": "abs-guide.txt"},{"for (( index=1; index<=MAX; index++))": "abs-guide.txt"},{"do": "abs-guide.txt"},{"count=${Numbers[index]}": "abs-guide.txt"},{"let \"t = $index - 1\"": "abs-guide.txt"},{"# Normalize, since array begins with index 0.": "abs-guide.txt"},{"let \"column = $(expr $t / $COLS)\"": "abs-guide.txt"},{"pre=${Prefix[column]}": "abs-guide.txt"},{"# echo -n \"${Prefix[column]} \"": "abs-guide.txt"},{"if [ $(expr $t % $COLS) -eq 0 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"765": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Newline at end of row.": "abs-guide.txt"},{"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"if [ \"$index\" -gt $SINGLE_DIGIT_MAX ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo -n \"$pre$index#$count \"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"# Prefix a zero.": "abs-guide.txt"},{"echo -n \"$pre$pre2$index#$count \"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Check for single-digit number.": "abs-guide.txt"},{"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"# main () {": "abs-guide.txt"},{"RANDOM=$$": "abs-guide.txt"},{"# Seed random number generator.": "abs-guide.txt"},{"initialize_Numbers": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Zero out the number tracking array.": "abs-guide.txt"},{"": "abs-guide.txt"},{"clear": "abs-guide.txt"},{"echo \"Bingo Number Caller\"; echo": "abs-guide.txt"},{"while [[ \"$key\" != \"q\" ]]": "abs-guide.txt"},{"# Main loop.": "abs-guide.txt"},{"do": "abs-guide.txt"},{"read -s -n1 -p \"Hit a key for the next number [q to exit] \" key": "abs-guide.txt"},{"# Usually 'q' exits, but not always.": "abs-guide.txt"},{"# Can always hit Ctl-C if q fails.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"generate_number; new_number=$?": "abs-guide.txt"},{"let \"column = $(expr $new_number / $COLS)\"": "abs-guide.txt"},{"echo -n \"${Prefix[column]} \"": "abs-guide.txt"},{"# B-I-N-G-O": "abs-guide.txt"},{"echo $new_number": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo; echo": "abs-guide.txt"},{"# Game over ...": "abs-guide.txt"},{"print_numbers_called": "abs-guide.txt"},{"echo; echo \"[#0 = not called . . . #1 = called]\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"# }": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Certainly, this script could stand some improvement.": "abs-guide.txt"},{"#See also the author's Instructable:": "abs-guide.txt"},{"#www.instructables.com/id/Binguino-An-Arduino-based-Bingo-Number-Generato/": "abs-guide.txt"},{"": "abs-guide.txt"},{"To end this section, a review of the basics . . . and more.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example A-58. Basics Reviewed": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# basics-reviewed.bash": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"766": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# File extension == *.bash == specific to Bash": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"Copyright (c) Michael S. Zick, 2003; All rights reserved.": "abs-guide.txt"},{"License: Use in any form, for any purpose.": "abs-guide.txt"},{"Revision: $ID$": "abs-guide.txt"},{"Edited for layout by M.C.": "abs-guide.txt"},{"(author of the \"Advanced Bash Scripting Guide\")": "abs-guide.txt"},{"Fixes and updates (04/08) by Cliff Bamford.": "abs-guide.txt"},{"": "abs-guide.txt"},{"This script tested under Bash versions 2.04, 2.05a and 2.05b.": "abs-guide.txt"},{"It may not work with earlier versions.": "abs-guide.txt"},{"This demonstration script generates one --intentional-\"command not found\" error message. See line 436.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# The current Bash maintainer, Chet Ramey, has fixed the items noted": "abs-guide.txt"},{"#+ for later versions of Bash.": "abs-guide.txt"},{"": "abs-guide.txt"},{"###-------------------------------------------###": "abs-guide.txt"},{"### Pipe the output of this script to 'more' ###": "abs-guide.txt"},{"###+ else it will scroll off the page.": "abs-guide.txt"},{"###": "abs-guide.txt"},{"###": "abs-guide.txt"},{"###": "abs-guide.txt"},{"### You may also redirect its output": "abs-guide.txt"},{"###": "abs-guide.txt"},{"###+ to a file for examination.": "abs-guide.txt"},{"###": "abs-guide.txt"},{"###-------------------------------------------###": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Most of the following points are described at length in": "abs-guide.txt"},{"#+ the text of the foregoing \"Advanced Bash Scripting Guide.\"": "abs-guide.txt"},{"# This demonstration script is mostly just a reorganized presentation.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"-- msz": "abs-guide.txt"},{"# Variables are not typed unless otherwise specified.": "abs-guide.txt"},{"# Variables are named. Names must contain a non-digit.": "abs-guide.txt"},{"# File descriptor names (as in, for example: 2>&1)": "abs-guide.txt"},{"#+ contain ONLY digits.": "abs-guide.txt"},{"# Parameters and Bash array elements are numbered.": "abs-guide.txt"},{"# (Parameters are very similar to Bash arrays.)": "abs-guide.txt"},{"# A variable name may be undefined (null reference).": "abs-guide.txt"},{"unset VarNull": "abs-guide.txt"},{"# A variable name may be defined but empty (null contents).": "abs-guide.txt"},{"VarEmpty=''": "abs-guide.txt"},{"# Two, adjacent, single quotes.": "abs-guide.txt"},{"# A variable name may be defined and non-empty.": "abs-guide.txt"},{"VarSomething='Literal'": "abs-guide.txt"},{"# A variable may contain:": "abs-guide.txt"},{"#": "abs-guide.txt"},{"* A whole number as a signed 32-bit (or larger) integer": "abs-guide.txt"},{"#": "abs-guide.txt"},{"* A string": "abs-guide.txt"},{"# A variable may also be an array.": "abs-guide.txt"},{"# A string may contain embedded blanks and may be treated": "abs-guide.txt"},{"#+ as if it where a function name with optional arguments.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"767": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# The names of variables and the names of functions": "abs-guide.txt"},{"#+ are in different namespaces.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# A variable may be defined as a Bash array either explicitly or": "abs-guide.txt"},{"#+ implicitly by the syntax of the assignment statement.": "abs-guide.txt"},{"# Explicit:": "abs-guide.txt"},{"declare -a ArrayVar": "abs-guide.txt"},{"": "abs-guide.txt"},{"# The echo command is a builtin.": "abs-guide.txt"},{"echo $VarSomething": "abs-guide.txt"},{"# The printf command is a builtin.": "abs-guide.txt"},{"# Translate %s as: String-Format": "abs-guide.txt"},{"printf %s $VarSomething": "abs-guide.txt"},{"# No linebreak specified, none output.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"# Default, only linebreak output.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# The Bash parser word breaks on whitespace.": "abs-guide.txt"},{"# Whitespace, or the lack of it is significant.": "abs-guide.txt"},{"# (This holds true in general; there are, of course, exceptions.)": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Translate the DOLLAR_SIGN character as: Content-Of.": "abs-guide.txt"},{"# Extended-Syntax way of writing Content-Of:": "abs-guide.txt"},{"echo ${VarSomething}": "abs-guide.txt"},{"# The ${ ... } Extended-Syntax allows more than just the variable": "abs-guide.txt"},{"#+ name to be specified.": "abs-guide.txt"},{"# In general, $VarSomething can always be written as: ${VarSomething}.": "abs-guide.txt"},{"# Call this script with arguments to see the following in action.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Outside of double-quotes, the special characters @ and *": "abs-guide.txt"},{"#+ specify identical behavior.": "abs-guide.txt"},{"# May be pronounced as: All-Elements-Of.": "abs-guide.txt"},{"# Without specification of a name, they refer to the": "abs-guide.txt"},{"#+ pre-defined parameter Bash-Array.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Glob-Pattern references": "abs-guide.txt"},{"echo $*": "abs-guide.txt"},{"echo ${*}": "abs-guide.txt"},{"": "abs-guide.txt"},{"# All parameters to script or function": "abs-guide.txt"},{"# Same": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Bash disables filename expansion for Glob-Patterns.": "abs-guide.txt"},{"# Only character matching is active.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# All-Elements-Of references": "abs-guide.txt"},{"echo $@": "abs-guide.txt"},{"echo ${@}": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Same as above": "abs-guide.txt"},{"# Same as above": "abs-guide.txt"},{"": "abs-guide.txt"},{"768": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Within double-quotes, the behavior of Glob-Pattern references": "abs-guide.txt"},{"#+ depends on the setting of IFS (Input Field Separator).": "abs-guide.txt"},{"# Within double-quotes, All-Elements-Of references behave the same.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Specifying only the name of a variable holding a string refers": "abs-guide.txt"},{"#+ to all elements (characters) of a string.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# To specify an element (character) of a string,": "abs-guide.txt"},{"#+ the Extended-Syntax reference notation (see below) MAY be used.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Specifying only the name of a Bash array references": "abs-guide.txt"},{"#+ the subscript zero element,": "abs-guide.txt"},{"#+ NOT the FIRST DEFINED nor the FIRST WITH CONTENTS element.": "abs-guide.txt"},{"# Additional qualification is needed to reference other elements,": "abs-guide.txt"},{"#+ which means that the reference MUST be written in Extended-Syntax.": "abs-guide.txt"},{"# The general form is: ${name[subscript]}.": "abs-guide.txt"},{"# The string forms may also be used: ${name:subscript}": "abs-guide.txt"},{"#+ for Bash-Arrays when referencing the subscript zero element.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Bash-Arrays are implemented internally as linked lists,": "abs-guide.txt"},{"#+ not as a fixed area of storage as in some programming languages.": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Characteristics of Bash arrays (Bash-Arrays):": "abs-guide.txt"},{"--------------------------------------------": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"###": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"###": "abs-guide.txt"},{"#": "abs-guide.txt"},{"###": "abs-guide.txt"},{"#": "abs-guide.txt"},{"###": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"###": "abs-guide.txt"},{"#": "abs-guide.txt"},{"###": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"###": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"If not otherwise specified, Bash-Array subscripts begin with": "abs-guide.txt"},{"subscript number zero. Literally: [0]": "abs-guide.txt"},{"This is called zero-based indexing.": "abs-guide.txt"},{"If not otherwise specified, Bash-Arrays are subscript packed": "abs-guide.txt"},{"(sequential subscripts without subscript gaps).": "abs-guide.txt"},{"Negative subscripts are not allowed.": "abs-guide.txt"},{"Elements of a Bash-Array need not all be of the same type.": "abs-guide.txt"},{"Elements of a Bash-Array may be undefined (null reference).": "abs-guide.txt"},{"That is, a Bash-Array may be \"subscript sparse.\"": "abs-guide.txt"},{"Elements of a Bash-Array may be defined and empty (null contents).": "abs-guide.txt"},{"Elements of a Bash-Array may contain:": "abs-guide.txt"},{"* A whole number as a signed 32-bit (or larger) integer": "abs-guide.txt"},{"* A string": "abs-guide.txt"},{"* A string formated so that it appears to be a function name": "abs-guide.txt"},{"+ with optional arguments": "abs-guide.txt"},{"Defined elements of a Bash-Array may be undefined (unset).": "abs-guide.txt"},{"That is, a subscript packed Bash-Array may be changed": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"769": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"#": "abs-guide.txt"},{"+": "abs-guide.txt"},{"into a subscript sparse Bash-Array.": "abs-guide.txt"},{"###": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Elements may be added to a Bash-Array by defining an element": "abs-guide.txt"},{"#+ not previously defined.": "abs-guide.txt"},{"###": "abs-guide.txt"},{"# For these reasons, I have been calling them \"Bash-Arrays\".": "abs-guide.txt"},{"# I'll return to the generic term \"array\" from now on.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"-- msz": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo \"=========================================================\"": "abs-guide.txt"},{"# Lines 202 - 334 supplied by Cliff Bamford. (Thanks!)": "abs-guide.txt"},{"# Demo --- Interaction with Arrays, quoting, IFS, echo, * and @": "abs-guide.txt"},{"#+ all affect how things work": "abs-guide.txt"},{"ArrayVar[0]='zero'": "abs-guide.txt"},{"ArrayVar[1]=one": "abs-guide.txt"},{"ArrayVar[2]='two'": "abs-guide.txt"},{"ArrayVar[3]='three'": "abs-guide.txt"},{"ArrayVar[4]='I am four'": "abs-guide.txt"},{"ArrayVar[5]='five'": "abs-guide.txt"},{"unset ArrayVar[6]": "abs-guide.txt"},{"ArrayValue[7]='seven'": "abs-guide.txt"},{"ArrayValue[8]=''": "abs-guide.txt"},{"ArrayValue[9]='nine'": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"0": "abs-guide.txt"},{"1": "abs-guide.txt"},{"2": "abs-guide.txt"},{"3": "abs-guide.txt"},{"4": "abs-guide.txt"},{"5": "abs-guide.txt"},{"6": "abs-guide.txt"},{"7": "abs-guide.txt"},{"8": "abs-guide.txt"},{"9": "abs-guide.txt"},{"": "abs-guide.txt"},{"---": "abs-guide.txt"},{"": "abs-guide.txt"},{"normal": "abs-guide.txt"},{"unquoted literal": "abs-guide.txt"},{"normal": "abs-guide.txt"},{"normal": "abs-guide.txt"},{"normal with spaces": "abs-guide.txt"},{"normal": "abs-guide.txt"},{"undefined": "abs-guide.txt"},{"normal": "abs-guide.txt"},{"defined but empty": "abs-guide.txt"},{"normal": "abs-guide.txt"},{"": "abs-guide.txt"},{"'--- Here is the array we are using for this test'": "abs-guide.txt"},{"\"ArrayVar[0]='zero'": "abs-guide.txt"},{"\"ArrayVar[1]=one": "abs-guide.txt"},{"\"ArrayVar[2]='two'": "abs-guide.txt"},{"\"ArrayVar[3]='three'": "abs-guide.txt"},{"\"ArrayVar[4]='I am four'": "abs-guide.txt"},{"\"ArrayVar[5]='five'": "abs-guide.txt"},{"\"unset ArrayVar[6]": "abs-guide.txt"},{"\"ArrayValue[7]='seven'": "abs-guide.txt"},{"\"ArrayValue[8]=''": "abs-guide.txt"},{"\"ArrayValue[9]='nine'": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"0": "abs-guide.txt"},{"1": "abs-guide.txt"},{"2": "abs-guide.txt"},{"3": "abs-guide.txt"},{"4": "abs-guide.txt"},{"5": "abs-guide.txt"},{"6": "abs-guide.txt"},{"7": "abs-guide.txt"},{"8": "abs-guide.txt"},{"9": "abs-guide.txt"},{"": "abs-guide.txt"},{"normal\"": "abs-guide.txt"},{"unquoted literal\"": "abs-guide.txt"},{"normal\"": "abs-guide.txt"},{"normal\"": "abs-guide.txt"},{"normal with spaces\"": "abs-guide.txt"},{"normal\"": "abs-guide.txt"},{"undefined\"": "abs-guide.txt"},{"normal\"": "abs-guide.txt"},{"defined but empty\"": "abs-guide.txt"},{"normal\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo '---Case0: No double-quotes, Default IFS of space,tab,newline ---'": "abs-guide.txt"},{"IFS=$'\\x20'$'\\x09'$'\\x0A'": "abs-guide.txt"},{"# In exactly this order.": "abs-guide.txt"},{"echo 'Here is: printf %q {${ArrayVar[*]}'": "abs-guide.txt"},{"printf %q ${ArrayVar[*]}": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo 'Here is: printf %q {${ArrayVar[@]}'": "abs-guide.txt"},{"printf %q ${ArrayVar[@]}": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo 'Here is: echo ${ArrayVar[*]}'": "abs-guide.txt"},{"echo ${ArrayVar[@]}": "abs-guide.txt"},{"echo 'Here is: echo {${ArrayVar[@]}'": "abs-guide.txt"},{"echo ${ArrayVar[@]}": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo '---Case1: Within double-quotes - Default IFS of space-tabnewline ---'": "abs-guide.txt"},{"IFS=$'\\x20'$'\\x09'$'\\x0A'": "abs-guide.txt"},{"# These three bytes,": "abs-guide.txt"},{"echo 'Here is: printf %q \"{${ArrayVar[*]}\"'": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"770": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"printf %q \"${ArrayVar[*]}\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo 'Here is: printf %q \"{${ArrayVar[@]}\"'": "abs-guide.txt"},{"printf %q \"${ArrayVar[@]}\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo 'Here is: echo \"${ArrayVar[*]}\"'": "abs-guide.txt"},{"echo \"${ArrayVar[@]}\"": "abs-guide.txt"},{"echo 'Here is: echo \"{${ArrayVar[@]}\"'": "abs-guide.txt"},{"echo \"${ArrayVar[@]}\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo '---Case2: Within double-quotes - IFS is q'": "abs-guide.txt"},{"IFS='q'": "abs-guide.txt"},{"echo 'Here is: printf %q \"{${ArrayVar[*]}\"'": "abs-guide.txt"},{"printf %q \"${ArrayVar[*]}\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo 'Here is: printf %q \"{${ArrayVar[@]}\"'": "abs-guide.txt"},{"printf %q \"${ArrayVar[@]}\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo 'Here is: echo \"${ArrayVar[*]}\"'": "abs-guide.txt"},{"echo \"${ArrayVar[@]}\"": "abs-guide.txt"},{"echo 'Here is: echo \"{${ArrayVar[@]}\"'": "abs-guide.txt"},{"echo \"${ArrayVar[@]}\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo '---Case3: Within double-quotes - IFS is ^'": "abs-guide.txt"},{"IFS='^'": "abs-guide.txt"},{"echo 'Here is: printf %q \"{${ArrayVar[*]}\"'": "abs-guide.txt"},{"printf %q \"${ArrayVar[*]}\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo 'Here is: printf %q \"{${ArrayVar[@]}\"'": "abs-guide.txt"},{"printf %q \"${ArrayVar[@]}\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo 'Here is: echo \"${ArrayVar[*]}\"'": "abs-guide.txt"},{"echo \"${ArrayVar[@]}\"": "abs-guide.txt"},{"echo 'Here is: echo \"{${ArrayVar[@]}\"'": "abs-guide.txt"},{"echo \"${ArrayVar[@]}\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo '---Case4: Within double-quotes - IFS is ^ followed by": "abs-guide.txt"},{"space,tab,newline'": "abs-guide.txt"},{"IFS=$'^'$'\\x20'$'\\x09'$'\\x0A'": "abs-guide.txt"},{"# ^ + space tab newline": "abs-guide.txt"},{"echo 'Here is: printf %q \"{${ArrayVar[*]}\"'": "abs-guide.txt"},{"printf %q \"${ArrayVar[*]}\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo 'Here is: printf %q \"{${ArrayVar[@]}\"'": "abs-guide.txt"},{"printf %q \"${ArrayVar[@]}\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo 'Here is: echo \"${ArrayVar[*]}\"'": "abs-guide.txt"},{"echo \"${ArrayVar[@]}\"": "abs-guide.txt"},{"echo 'Here is: echo \"{${ArrayVar[@]}\"'": "abs-guide.txt"},{"echo \"${ArrayVar[@]}\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo '---Case6: Within double-quotes - IFS set and empty '": "abs-guide.txt"},{"IFS=''": "abs-guide.txt"},{"echo 'Here is: printf %q \"{${ArrayVar[*]}\"'": "abs-guide.txt"},{"printf %q \"${ArrayVar[*]}\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo 'Here is: printf %q \"{${ArrayVar[@]}\"'": "abs-guide.txt"},{"printf %q \"${ArrayVar[@]}\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"771": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"echo 'Here is: echo \"${ArrayVar[*]}\"'": "abs-guide.txt"},{"echo \"${ArrayVar[@]}\"": "abs-guide.txt"},{"echo 'Here is: echo \"{${ArrayVar[@]}\"'": "abs-guide.txt"},{"echo \"${ArrayVar[@]}\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo '---Case7: Within double-quotes - IFS is unset'": "abs-guide.txt"},{"unset IFS": "abs-guide.txt"},{"echo 'Here is: printf %q \"{${ArrayVar[*]}\"'": "abs-guide.txt"},{"printf %q \"${ArrayVar[*]}\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo 'Here is: printf %q \"{${ArrayVar[@]}\"'": "abs-guide.txt"},{"printf %q \"${ArrayVar[@]}\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo 'Here is: echo \"${ArrayVar[*]}\"'": "abs-guide.txt"},{"echo \"${ArrayVar[@]}\"": "abs-guide.txt"},{"echo 'Here is: echo \"{${ArrayVar[@]}\"'": "abs-guide.txt"},{"echo \"${ArrayVar[@]}\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo '---End of Cases---'": "abs-guide.txt"},{"echo \"=========================================================\"; echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Put IFS back to the default.": "abs-guide.txt"},{"# Default is exactly these three bytes.": "abs-guide.txt"},{"IFS=$'\\x20'$'\\x09'$'\\x0A'": "abs-guide.txt"},{"# In exactly this order.": "abs-guide.txt"},{"# Interpretation of the above outputs:": "abs-guide.txt"},{"#": "abs-guide.txt"},{"A Glob-Pattern is I/O; the setting of IFS matters.": "abs-guide.txt"},{"###": "abs-guide.txt"},{"#": "abs-guide.txt"},{"An All-Elements-Of does not consider IFS settings.": "abs-guide.txt"},{"###": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Note the different output using the echo command and the": "abs-guide.txt"},{"#+ quoted format operator of the printf command.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Recall:": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Parameters are similar to arrays and have the similar behaviors.": "abs-guide.txt"},{"###": "abs-guide.txt"},{"# The above examples demonstrate the possible variations.": "abs-guide.txt"},{"# To retain the shape of a sparse array, additional script": "abs-guide.txt"},{"#+ programming is required.": "abs-guide.txt"},{"###": "abs-guide.txt"},{"# The source code of Bash has a routine to output the": "abs-guide.txt"},{"#+ [subscript]=value": "abs-guide.txt"},{"array assignment format.": "abs-guide.txt"},{"# As of version 2.05b, that routine is not used,": "abs-guide.txt"},{"#+ but that might change in future releases.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# The length of a string, measured in non-null elements (characters):": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo '- - Non-quoted references - -'": "abs-guide.txt"},{"echo 'Non-Null character count: '${#VarSomething}' characters.'": "abs-guide.txt"},{"# test='Lit'$'\\x00''eral'": "abs-guide.txt"},{"# echo ${#test}": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"# $'\\x00' is a null character.": "abs-guide.txt"},{"# See that?": "abs-guide.txt"},{"": "abs-guide.txt"},{"772": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# The length of an array, measured in defined elements,": "abs-guide.txt"},{"#+ including null content elements.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo 'Defined content count: '${#ArrayVar[@]}' elements.'": "abs-guide.txt"},{"# That is NOT the maximum subscript (4).": "abs-guide.txt"},{"# That is NOT the range of the subscripts (1 . . 4 inclusive).": "abs-guide.txt"},{"# It IS the length of the linked list.": "abs-guide.txt"},{"###": "abs-guide.txt"},{"# Both the maximum subscript and the range of the subscripts may": "abs-guide.txt"},{"#+ be found with additional script programming.": "abs-guide.txt"},{"# The length of a string, measured in non-null elements (characters):": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo '- - Quoted, Glob-Pattern references - -'": "abs-guide.txt"},{"echo 'Non-Null character count: '\"${#VarSomething}\"' characters.'": "abs-guide.txt"},{"# The length of an array, measured in defined elements,": "abs-guide.txt"},{"#+ including null-content elements.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo 'Defined element count: '\"${#ArrayVar[*]}\"' elements.'": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"Interpretation: Substitution does not effect the ${# ... } operation.": "abs-guide.txt"},{"Suggestion:": "abs-guide.txt"},{"Always use the All-Elements-Of character": "abs-guide.txt"},{"if that is what is intended (independence from IFS).": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Define a simple function.": "abs-guide.txt"},{"# I include an underscore in the name": "abs-guide.txt"},{"#+ to make it distinctive in the examples below.": "abs-guide.txt"},{"###": "abs-guide.txt"},{"# Bash separates variable names and function names": "abs-guide.txt"},{"#+ in different namespaces.": "abs-guide.txt"},{"# The Mark-One eyeball isn't that advanced.": "abs-guide.txt"},{"###": "abs-guide.txt"},{"_simple() {": "abs-guide.txt"},{"echo -n 'SimpleFunc'$@": "abs-guide.txt"},{"# Newlines are swallowed in": "abs-guide.txt"},{"}": "abs-guide.txt"},{"#+ result returned in any case.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# The ( ... ) notation invokes a command or function.": "abs-guide.txt"},{"# The $( ... ) notation is pronounced: Result-Of.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Invoke the function _simple": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo '- - Output of function _simple - -'": "abs-guide.txt"},{"_simple": "abs-guide.txt"},{"# Try passing arguments.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"# or": "abs-guide.txt"},{"(_simple)": "abs-guide.txt"},{"# Try passing arguments.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo '- Is there a variable of that name? -'": "abs-guide.txt"},{"echo $_simple not defined": "abs-guide.txt"},{"# No variable by that name.": "abs-guide.txt"},{"# Invoke the result of function _simple (Error msg intended)": "abs-guide.txt"},{"###": "abs-guide.txt"},{"$(_simple)": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Gives an error message:": "abs-guide.txt"},{"line 436: SimpleFunc: command not found": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"773": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"---------------------------------------": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"###": "abs-guide.txt"},{"# The first word of the result of function _simple": "abs-guide.txt"},{"#+ is neither a valid Bash command nor the name of a defined function.": "abs-guide.txt"},{"###": "abs-guide.txt"},{"# This demonstrates that the output of _simple is subject to evaluation.": "abs-guide.txt"},{"###": "abs-guide.txt"},{"# Interpretation:": "abs-guide.txt"},{"#": "abs-guide.txt"},{"A function can be used to generate in-line Bash commands.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# A simple function where the first word of result IS a bash command:": "abs-guide.txt"},{"###": "abs-guide.txt"},{"_print() {": "abs-guide.txt"},{"echo -n 'printf %q '$@": "abs-guide.txt"},{"}": "abs-guide.txt"},{"echo '- - Outputs of function _print - -'": "abs-guide.txt"},{"_print parm1 parm2": "abs-guide.txt"},{"# An Output NOT A Command.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"$(_print parm1 parm2)": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Executes: printf %q parm1 parm2": "abs-guide.txt"},{"# See above IFS examples for the": "abs-guide.txt"},{"#+ various possibilities.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"$(_print $VarSomething)": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"# The predictable result.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Function variables": "abs-guide.txt"},{"# -----------------echo": "abs-guide.txt"},{"echo '- - Function variables - -'": "abs-guide.txt"},{"# A variable may represent a signed integer, a string or an array.": "abs-guide.txt"},{"# A string may be used like a function name with optional arguments.": "abs-guide.txt"},{"# set -vx": "abs-guide.txt"},{"declare -f funcVar": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Enable if desired": "abs-guide.txt"},{"#+ in namespace of functions": "abs-guide.txt"},{"": "abs-guide.txt"},{"funcVar=_print": "abs-guide.txt"},{"$funcVar parm1": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Contains name of function.": "abs-guide.txt"},{"# Same as _print at this point.": "abs-guide.txt"},{"": "abs-guide.txt"},{"funcVar=$(_print )": "abs-guide.txt"},{"$funcVar": "abs-guide.txt"},{"$funcVar $VarSomething": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Contains result of function.": "abs-guide.txt"},{"# No input, No output.": "abs-guide.txt"},{"# The predictable result.": "abs-guide.txt"},{"": "abs-guide.txt"},{"funcVar=$(_print $VarSomething)": "abs-guide.txt"},{"$funcVar": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"# $VarSomething replaced HERE.": "abs-guide.txt"},{"# The expansion is part of the": "abs-guide.txt"},{"#+ variable contents.": "abs-guide.txt"},{"": "abs-guide.txt"},{"funcVar=\"$(_print $VarSomething)\"": "abs-guide.txt"},{"$funcVar": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"# $VarSomething replaced HERE.": "abs-guide.txt"},{"# The expansion is part of the": "abs-guide.txt"},{"#+ variable contents.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"774": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"The difference between the unquoted and the double-quoted versions": "abs-guide.txt"},{"above can be seen in the \"protect_literal.sh\" example.": "abs-guide.txt"},{"The first case above is processed as two, unquoted, Bash-Words.": "abs-guide.txt"},{"The second case above is processed as one, quoted, Bash-Word.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Delayed replacement": "abs-guide.txt"},{"# ------------------echo": "abs-guide.txt"},{"echo '- - Delayed replacement - -'": "abs-guide.txt"},{"funcVar=\"$(_print '$VarSomething')\" # No replacement, single Bash-Word.": "abs-guide.txt"},{"eval $funcVar": "abs-guide.txt"},{"# $VarSomething replaced HERE.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"VarSomething='NewThing'": "abs-guide.txt"},{"eval $funcVar": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"# $VarSomething replaced HERE.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Restore the original setting trashed above.": "abs-guide.txt"},{"VarSomething=Literal": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"There are a pair of functions demonstrated in the": "abs-guide.txt"},{"\"protect_literal.sh\" and \"unprotect_literal.sh\" examples.": "abs-guide.txt"},{"These are general purpose functions for delayed replacement literals": "abs-guide.txt"},{"containing variables.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# REVIEW:": "abs-guide.txt"},{"# -----# A string can be considered a Classic-Array of elements (characters).": "abs-guide.txt"},{"# A string operation applies to all elements (characters) of the string": "abs-guide.txt"},{"#+ (in concept, anyway).": "abs-guide.txt"},{"###": "abs-guide.txt"},{"# The notation: ${array_name[@]} represents all elements of the": "abs-guide.txt"},{"#+ Bash-Array: array_name.": "abs-guide.txt"},{"###": "abs-guide.txt"},{"# The Extended-Syntax string operations can be applied to all": "abs-guide.txt"},{"#+ elements of an array.": "abs-guide.txt"},{"###": "abs-guide.txt"},{"# This may be thought of as a For-Each operation on a vector of strings.": "abs-guide.txt"},{"###": "abs-guide.txt"},{"# Parameters are similar to an array.": "abs-guide.txt"},{"# The initialization of a parameter array for a script": "abs-guide.txt"},{"#+ and a parameter array for a function only differ": "abs-guide.txt"},{"#+ in the initialization of ${0}, which never changes its setting.": "abs-guide.txt"},{"###": "abs-guide.txt"},{"# Subscript zero of the script's parameter array contains": "abs-guide.txt"},{"#+ the name of the script.": "abs-guide.txt"},{"###": "abs-guide.txt"},{"# Subscript zero of a function's parameter array DOES NOT contain": "abs-guide.txt"},{"#+ the name of the function.": "abs-guide.txt"},{"# The name of the current function is accessed by the $FUNCNAME variable.": "abs-guide.txt"},{"###": "abs-guide.txt"},{"# A quick, review list follows (quick, not short).": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"775": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"'- - Test (but not change) - -'": "abs-guide.txt"},{"'- null reference -'": "abs-guide.txt"},{"-n ${VarNull-'NotSet'}' '": "abs-guide.txt"},{"${VarNull}": "abs-guide.txt"},{"-n ${VarNull:-'NotSet'}' '": "abs-guide.txt"},{"${VarNull}": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"NotSet": "abs-guide.txt"},{"NewLine only": "abs-guide.txt"},{"NotSet": "abs-guide.txt"},{"Newline only": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"'- null contents -'": "abs-guide.txt"},{"-n ${VarEmpty-'Empty'}' '": "abs-guide.txt"},{"${VarEmpty}": "abs-guide.txt"},{"-n ${VarEmpty:-'Empty'}' '": "abs-guide.txt"},{"${VarEmpty}": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Only the space": "abs-guide.txt"},{"Newline only": "abs-guide.txt"},{"Empty": "abs-guide.txt"},{"Newline only": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo '- contents -'": "abs-guide.txt"},{"echo ${VarSomething-'Content'}": "abs-guide.txt"},{"echo ${VarSomething:-'Content'}": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Literal": "abs-guide.txt"},{"# Literal": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo '- Sparse Array -'": "abs-guide.txt"},{"echo ${ArrayVar[@]-'not set'}": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"ASCII-Art time": "abs-guide.txt"},{"State": "abs-guide.txt"},{"Y==yes,": "abs-guide.txt"},{"Unset": "abs-guide.txt"},{"Y": "abs-guide.txt"},{"Empty": "abs-guide.txt"},{"N": "abs-guide.txt"},{"Contents N": "abs-guide.txt"},{"": "abs-guide.txt"},{"N==no": "abs-guide.txt"},{":Y": "abs-guide.txt"},{"Y": "abs-guide.txt"},{"N": "abs-guide.txt"},{"": "abs-guide.txt"},{"${# ... } == 0": "abs-guide.txt"},{"${# ... } == 0": "abs-guide.txt"},{"${# ... } > 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Either the first and/or the second part of the tests": "abs-guide.txt"},{"#+ may be a command or a function invocation string.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo '- - Test 1 for undefined - -'": "abs-guide.txt"},{"declare -i t": "abs-guide.txt"},{"_decT() {": "abs-guide.txt"},{"t=$t-1": "abs-guide.txt"},{"}": "abs-guide.txt"},{"# Null reference, set: t == -1": "abs-guide.txt"},{"t=${#VarNull}": "abs-guide.txt"},{"${VarNull- _decT }": "abs-guide.txt"},{"echo $t": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Results in zero.": "abs-guide.txt"},{"# Function executes, t now -1.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Null contents, set: t == 0": "abs-guide.txt"},{"t=${#VarEmpty}": "abs-guide.txt"},{"${VarEmpty- _decT }": "abs-guide.txt"},{"echo $t": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Results in zero.": "abs-guide.txt"},{"# _decT function NOT executed.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Contents, set: t == number of non-null characters": "abs-guide.txt"},{"VarSomething='_simple'": "abs-guide.txt"},{"# Set to valid function name.": "abs-guide.txt"},{"t=${#VarSomething}": "abs-guide.txt"},{"# non-zero length": "abs-guide.txt"},{"${VarSomething- _decT }": "abs-guide.txt"},{"# Function _simple executed.": "abs-guide.txt"},{"echo $t": "abs-guide.txt"},{"# Note the Append-To action.": "abs-guide.txt"},{"# Exercise: clean up that example.": "abs-guide.txt"},{"unset t": "abs-guide.txt"},{"unset _decT": "abs-guide.txt"},{"VarSomething=Literal": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo '- - Test and Change - -'": "abs-guide.txt"},{"echo '- Assignment if null reference -'": "abs-guide.txt"},{"echo -n ${VarNull='NotSet'}' '": "abs-guide.txt"},{"# NotSet NotSet": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"776": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"echo ${VarNull}": "abs-guide.txt"},{"unset VarNull": "abs-guide.txt"},{"echo '- Assignment if null reference -'": "abs-guide.txt"},{"echo -n ${VarNull:='NotSet'}' '": "abs-guide.txt"},{"# NotSet NotSet": "abs-guide.txt"},{"echo ${VarNull}": "abs-guide.txt"},{"unset VarNull": "abs-guide.txt"},{"echo '- No assignment if null contents -'": "abs-guide.txt"},{"echo -n ${VarEmpty='Empty'}' '": "abs-guide.txt"},{"# Space only": "abs-guide.txt"},{"echo ${VarEmpty}": "abs-guide.txt"},{"VarEmpty=''": "abs-guide.txt"},{"echo '- Assignment if null contents -'": "abs-guide.txt"},{"echo -n ${VarEmpty:='Empty'}' '": "abs-guide.txt"},{"echo ${VarEmpty}": "abs-guide.txt"},{"VarEmpty=''": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Empty Empty": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo '- No change if already has contents -'": "abs-guide.txt"},{"echo ${VarSomething='Content'}": "abs-guide.txt"},{"# Literal": "abs-guide.txt"},{"echo ${VarSomething:='Content'}": "abs-guide.txt"},{"# Literal": "abs-guide.txt"},{"": "abs-guide.txt"},{"# \"Subscript sparse\" Bash-Arrays": "abs-guide.txt"},{"###": "abs-guide.txt"},{"# Bash-Arrays are subscript packed, beginning with": "abs-guide.txt"},{"#+ subscript zero unless otherwise specified.": "abs-guide.txt"},{"###": "abs-guide.txt"},{"# The initialization of ArrayVar was one way": "abs-guide.txt"},{"#+ to \"otherwise specify\". Here is the other way:": "abs-guide.txt"},{"###": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"declare -a ArraySparse": "abs-guide.txt"},{"ArraySparse=( [1]=one [2]='' [4]='four' )": "abs-guide.txt"},{"# [0]=null reference, [2]=null content, [3]=null reference": "abs-guide.txt"},{"echo '- - Array-Sparse List - -'": "abs-guide.txt"},{"# Within double-quotes, default IFS, Glob-Pattern": "abs-guide.txt"},{"IFS=$'\\x20'$'\\x09'$'\\x0A'": "abs-guide.txt"},{"printf %q \"${ArraySparse[*]}\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"# Note that the output does not distinguish between \"null content\"": "abs-guide.txt"},{"#+ and \"null reference\".": "abs-guide.txt"},{"# Both print as escaped whitespace.": "abs-guide.txt"},{"###": "abs-guide.txt"},{"# Note also that the output does NOT contain escaped whitespace": "abs-guide.txt"},{"#+ for the \"null reference(s)\" prior to the first defined element.": "abs-guide.txt"},{"###": "abs-guide.txt"},{"# This behavior of 2.04, 2.05a and 2.05b has been reported": "abs-guide.txt"},{"#+ and may change in a future version of Bash.": "abs-guide.txt"},{"# To output a sparse array and maintain the [subscript]=value": "abs-guide.txt"},{"#+ relationship without change requires a bit of programming.": "abs-guide.txt"},{"# One possible code fragment:": "abs-guide.txt"},{"###": "abs-guide.txt"},{"# local l=${#ArraySparse[@]}": "abs-guide.txt"},{"# Count of defined elements": "abs-guide.txt"},{"# local f=0": "abs-guide.txt"},{"# Count of found subscripts": "abs-guide.txt"},{"# local i=0": "abs-guide.txt"},{"# Subscript to test": "abs-guide.txt"},{"(": "abs-guide.txt"},{"# Anonymous in-line function": "abs-guide.txt"},{"for (( l=${#ArraySparse[@]}, f = 0, i = 0 ; f < l ; i++ ))": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"777": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"do": "abs-guide.txt"},{"# 'if defined then...'": "abs-guide.txt"},{"${ArraySparse[$i]+ eval echo '\\ ['$i']='${ArraySparse[$i]} ; (( f++ )) }": "abs-guide.txt"},{"done": "abs-guide.txt"},{")": "abs-guide.txt"},{"# The reader coming upon the above code fragment cold": "abs-guide.txt"},{"#+ might want to review \"command lists\" and \"multiple commands on a line\"": "abs-guide.txt"},{"#+ in the text of the foregoing \"Advanced Bash Scripting Guide.\"": "abs-guide.txt"},{"###": "abs-guide.txt"},{"# Note:": "abs-guide.txt"},{"# The \"read -a array_name\" version of the \"read\" command": "abs-guide.txt"},{"#+ begins filling array_name at subscript zero.": "abs-guide.txt"},{"# ArraySparse does not define a value at subscript zero.": "abs-guide.txt"},{"###": "abs-guide.txt"},{"# The user needing to read/write a sparse array to either": "abs-guide.txt"},{"#+ external storage or a communications socket must invent": "abs-guide.txt"},{"#+ a read/write code pair suitable for their purpose.": "abs-guide.txt"},{"###": "abs-guide.txt"},{"# Exercise: clean it up.": "abs-guide.txt"},{"unset ArraySparse": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo '- - Conditional alternate (But not change)- -'": "abs-guide.txt"},{"echo '- No alternate if null reference -'": "abs-guide.txt"},{"echo -n ${VarNull+'NotSet'}' '": "abs-guide.txt"},{"echo ${VarNull}": "abs-guide.txt"},{"unset VarNull": "abs-guide.txt"},{"echo '- No alternate if null reference -'": "abs-guide.txt"},{"echo -n ${VarNull:+'NotSet'}' '": "abs-guide.txt"},{"echo ${VarNull}": "abs-guide.txt"},{"unset VarNull": "abs-guide.txt"},{"echo '- Alternate if null contents -'": "abs-guide.txt"},{"echo -n ${VarEmpty+'Empty'}' '": "abs-guide.txt"},{"echo ${VarEmpty}": "abs-guide.txt"},{"VarEmpty=''": "abs-guide.txt"},{"echo '- No alternate if null contents -'": "abs-guide.txt"},{"echo -n ${VarEmpty:+'Empty'}' '": "abs-guide.txt"},{"echo ${VarEmpty}": "abs-guide.txt"},{"VarEmpty=''": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Empty": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Space only": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo '- Alternate if already has contents -'": "abs-guide.txt"},{"# Alternate literal": "abs-guide.txt"},{"echo -n ${VarSomething+'Content'}' '": "abs-guide.txt"},{"echo ${VarSomething}": "abs-guide.txt"},{"# Invoke function": "abs-guide.txt"},{"echo -n ${VarSomething:+ $(_simple) }' '": "abs-guide.txt"},{"echo ${VarSomething}": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo '- - Sparse Array - -'": "abs-guide.txt"},{"echo ${ArrayVar[@]+'Empty'}": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Content Literal": "abs-guide.txt"},{"": "abs-guide.txt"},{"# SimpleFunc Literal": "abs-guide.txt"},{"": "abs-guide.txt"},{"# An array of 'Empty'(ies)": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo '- - Test 2 for undefined - -'": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"778": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"declare -i t": "abs-guide.txt"},{"_incT() {": "abs-guide.txt"},{"t=$t+1": "abs-guide.txt"},{"}": "abs-guide.txt"},{"# Note:": "abs-guide.txt"},{"# This is the same test used in the sparse array": "abs-guide.txt"},{"#+ listing code fragment.": "abs-guide.txt"},{"# Null reference, set: t == -1": "abs-guide.txt"},{"t=${#VarNull}-1": "abs-guide.txt"},{"${VarNull+ _incT }": "abs-guide.txt"},{"echo $t' Null reference'": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Results in minus-one.": "abs-guide.txt"},{"# Does not execute.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Null contents, set: t == 0": "abs-guide.txt"},{"t=${#VarEmpty}-1": "abs-guide.txt"},{"${VarEmpty+ _incT }": "abs-guide.txt"},{"echo $t' Null content'": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Results in minus-one.": "abs-guide.txt"},{"# Executes.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Contents, set: t == (number of non-null characters)": "abs-guide.txt"},{"t=${#VarSomething}-1": "abs-guide.txt"},{"# non-null length minus-one": "abs-guide.txt"},{"${VarSomething+ _incT }": "abs-guide.txt"},{"# Executes.": "abs-guide.txt"},{"echo $t' Contents'": "abs-guide.txt"},{"# Exercise: clean up that example.": "abs-guide.txt"},{"unset t": "abs-guide.txt"},{"unset _incT": "abs-guide.txt"},{"# ${name?err_msg} ${name:?err_msg}": "abs-guide.txt"},{"# These follow the same rules but always exit afterwards": "abs-guide.txt"},{"#+ if an action is specified following the question mark.": "abs-guide.txt"},{"# The action following the question mark may be a literal": "abs-guide.txt"},{"#+ or a function result.": "abs-guide.txt"},{"###": "abs-guide.txt"},{"# ${name?} ${name:?} are test-only, the return can be tested.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Element operations": "abs-guide.txt"},{"# -----------------echo": "abs-guide.txt"},{"echo '- - Trailing sub-element selection - -'": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Strings, Arrays and Positional parameters": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Call this script with multiple arguments": "abs-guide.txt"},{"#+ to see the parameter selections.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"'- All -'": "abs-guide.txt"},{"${VarSomething:0}": "abs-guide.txt"},{"${ArrayVar[@]:0}": "abs-guide.txt"},{"${@:0}": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"'- All after -'": "abs-guide.txt"},{"${VarSomething:1}": "abs-guide.txt"},{"${ArrayVar[@]:1}": "abs-guide.txt"},{"${@:2}": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"all non-null characters": "abs-guide.txt"},{"all elements with content": "abs-guide.txt"},{"all parameters with content;": "abs-guide.txt"},{"ignoring parameter[0]": "abs-guide.txt"},{"": "abs-guide.txt"},{"# all non-null after character[0]": "abs-guide.txt"},{"# all after element[0] with content": "abs-guide.txt"},{"# all after param[1] with content": "abs-guide.txt"},{"": "abs-guide.txt"},{"779": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo '- Range after -'": "abs-guide.txt"},{"echo ${VarSomething:4:3}": "abs-guide.txt"},{"": "abs-guide.txt"},{"# ral": "abs-guide.txt"},{"# Three characters after": "abs-guide.txt"},{"# character[3]": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo '- Sparse array gotch -'": "abs-guide.txt"},{"echo ${ArrayVar[@]:1:2}": "abs-guide.txt"},{"# four - The only element with content.": "abs-guide.txt"},{"# Two elements after (if that many exist).": "abs-guide.txt"},{"# the FIRST WITH CONTENTS": "abs-guide.txt"},{"#+ (the FIRST WITH CONTENTS is being": "abs-guide.txt"},{"#+ considered as if it": "abs-guide.txt"},{"#+ were subscript zero).": "abs-guide.txt"},{"# Executed as if Bash considers ONLY array elements with CONTENT": "abs-guide.txt"},{"# printf %q \"${ArrayVar[@]:0:3}\"": "abs-guide.txt"},{"# Try this one": "abs-guide.txt"},{"# In versions 2.04, 2.05a and 2.05b,": "abs-guide.txt"},{"#+ Bash does not handle sparse arrays as expected using this notation.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# The current Bash maintainer, Chet Ramey, has corrected this.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo '- Non-sparse array -'": "abs-guide.txt"},{"echo ${@:2:2}": "abs-guide.txt"},{"# Two parameters following parameter[1]": "abs-guide.txt"},{"# New victims for string vector examples:": "abs-guide.txt"},{"stringZ=abcABC123ABCabc": "abs-guide.txt"},{"arrayZ=( abcabc ABCABC 123123 ABCABC abcabc )": "abs-guide.txt"},{"sparseZ=( [1]='abcabc' [3]='ABCABC' [4]='' [5]='123123' )": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"'": "abs-guide.txt"},{"'": "abs-guide.txt"},{"'": "abs-guide.txt"},{"'": "abs-guide.txt"},{"'": "abs-guide.txt"},{"'": "abs-guide.txt"},{"": "abs-guide.txt"},{"-": "abs-guide.txt"},{"": "abs-guide.txt"},{"- Victim string - -'$stringZ'- - '": "abs-guide.txt"},{"- Victim array - -'${arrayZ[@]}'- - '": "abs-guide.txt"},{"- Sparse array - -'${sparseZ[@]}'- - '": "abs-guide.txt"},{"[0]==null ref, [2]==null ref, [4]==null content - '": "abs-guide.txt"},{"[1]=abcabc [3]=ABCABC [5]=123123 - '": "abs-guide.txt"},{"non-null-reference count: '${#sparseZ[@]}' elements'": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo '- - Prefix sub-element removal - -'": "abs-guide.txt"},{"echo '- - Glob-Pattern match must include the first character. - -'": "abs-guide.txt"},{"echo '- - Glob-Pattern may be a literal or a function result. - -'": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Function returning a simple, Literal, Glob-Pattern": "abs-guide.txt"},{"_abc() {": "abs-guide.txt"},{"echo -n 'abc'": "abs-guide.txt"},{"}": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"'- Shortest prefix -'": "abs-guide.txt"},{"${stringZ#123}": "abs-guide.txt"},{"${stringZ#$(_abc)}": "abs-guide.txt"},{"${arrayZ[@]#abc}": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Unchanged (not a prefix).": "abs-guide.txt"},{"# ABC123ABCabc": "abs-guide.txt"},{"# Applied to each element.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# echo ${sparseZ[@]#abc}": "abs-guide.txt"},{"# Version-2.05b core dumps.": "abs-guide.txt"},{"# Has since been fixed by Chet Ramey.": "abs-guide.txt"},{"# The -it would be nice- First-Subscript-Of": "abs-guide.txt"},{"# echo ${#sparseZ[@]#*}": "abs-guide.txt"},{"# This is NOT valid Bash.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"780": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"'- Longest prefix -'": "abs-guide.txt"},{"${stringZ##1*3}": "abs-guide.txt"},{"${stringZ##a*C}": "abs-guide.txt"},{"${arrayZ[@]##a*c}": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Unchanged (not a prefix)": "abs-guide.txt"},{"# abc": "abs-guide.txt"},{"# ABCABC 123123 ABCABC": "abs-guide.txt"},{"": "abs-guide.txt"},{"# echo ${sparseZ[@]##a*c}": "abs-guide.txt"},{"# Version-2.05b core dumps.": "abs-guide.txt"},{"# Has since been fixed by Chet Ramey.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"'- - Suffix sub-element removal - -'": "abs-guide.txt"},{"'- - Glob-Pattern match must include the last character. - -'": "abs-guide.txt"},{"'- - Glob-Pattern may be a literal or a function result. - -'": "abs-guide.txt"},{"'- Shortest suffix -'": "abs-guide.txt"},{"${stringZ%1*3}": "abs-guide.txt"},{"${stringZ%$(_abc)}": "abs-guide.txt"},{"${arrayZ[@]%abc}": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Unchanged (not a suffix).": "abs-guide.txt"},{"# abcABC123ABC": "abs-guide.txt"},{"# Applied to each element.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# echo ${sparseZ[@]%abc}": "abs-guide.txt"},{"# Version-2.05b core dumps.": "abs-guide.txt"},{"# Has since been fixed by Chet Ramey.": "abs-guide.txt"},{"# The -it would be nice- Last-Subscript-Of": "abs-guide.txt"},{"# echo ${#sparseZ[@]%*}": "abs-guide.txt"},{"# This is NOT valid Bash.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"'- Longest suffix -'": "abs-guide.txt"},{"${stringZ%%1*3}": "abs-guide.txt"},{"${stringZ%%b*c}": "abs-guide.txt"},{"${arrayZ[@]%%b*c}": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Unchanged (not a suffix)": "abs-guide.txt"},{"# a": "abs-guide.txt"},{"# a ABCABC 123123 ABCABC a": "abs-guide.txt"},{"": "abs-guide.txt"},{"# echo ${sparseZ[@]%%b*c}": "abs-guide.txt"},{"# Version-2.05b core dumps.": "abs-guide.txt"},{"# Has since been fixed by Chet Ramey.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"'''''''": "abs-guide.txt"},{"": "abs-guide.txt"},{"-": "abs-guide.txt"},{"": "abs-guide.txt"},{"Sub-element replacement - -'": "abs-guide.txt"},{"Sub-element at any location in string. - -'": "abs-guide.txt"},{"First specification is a Glob-Pattern - -'": "abs-guide.txt"},{"Glob-Pattern may be a literal or Glob-Pattern function result. - -'": "abs-guide.txt"},{"Second specification may be a literal or function result. - -'": "abs-guide.txt"},{"Second specification may be unspecified. Pronounce that'": "abs-guide.txt"},{"as: Replace-With-Nothing (Delete) - -'": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Function returning a simple, Literal, Glob-Pattern": "abs-guide.txt"},{"_123() {": "abs-guide.txt"},{"echo -n '123'": "abs-guide.txt"},{"}": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"'- Replace first occurrence -'": "abs-guide.txt"},{"${stringZ/$(_123)/999}": "abs-guide.txt"},{"# Changed (123 is a component).": "abs-guide.txt"},{"${stringZ/ABC/xyz}": "abs-guide.txt"},{"# xyzABC123ABCabc": "abs-guide.txt"},{"${arrayZ[@]/ABC/xyz}": "abs-guide.txt"},{"# Applied to each element.": "abs-guide.txt"},{"${sparseZ[@]/ABC/xyz}": "abs-guide.txt"},{"# Works as expected.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"'- Delete first occurrence -'": "abs-guide.txt"},{"${stringZ/$(_123)/}": "abs-guide.txt"},{"${stringZ/ABC/}": "abs-guide.txt"},{"${arrayZ[@]/ABC/}": "abs-guide.txt"},{"${sparseZ[@]/ABC/}": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"781": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# The replacement need not be a literal,": "abs-guide.txt"},{"#+ since the result of a function invocation is allowed.": "abs-guide.txt"},{"# This is general to all forms of replacement.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo '- Replace first occurrence with Result-Of -'": "abs-guide.txt"},{"echo ${stringZ/$(_123)/$(_simple)} # Works as expected.": "abs-guide.txt"},{"echo ${arrayZ[@]/ca/$(_simple)}": "abs-guide.txt"},{"# Applied to each element.": "abs-guide.txt"},{"echo ${sparseZ[@]/ca/$(_simple)}": "abs-guide.txt"},{"# Works as expected.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"'- Replace all occurrences -'": "abs-guide.txt"},{"${stringZ//[b2]/X}": "abs-guide.txt"},{"${stringZ//abc/xyz}": "abs-guide.txt"},{"${arrayZ[@]//abc/xyz}": "abs-guide.txt"},{"${sparseZ[@]//abc/xyz}": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"'- Delete all occurrences -'": "abs-guide.txt"},{"${stringZ//[b2]/}": "abs-guide.txt"},{"${stringZ//abc/}": "abs-guide.txt"},{"${arrayZ[@]//abc/}": "abs-guide.txt"},{"${sparseZ[@]//abc/}": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"X-out b's and 2's": "abs-guide.txt"},{"xyzABC123ABCxyz": "abs-guide.txt"},{"Applied to each element.": "abs-guide.txt"},{"Works as expected.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo '- - Prefix sub-element replacement - -'": "abs-guide.txt"},{"echo '- - Match must include the first character. - -'": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"'- Replace prefix occurrences -'": "abs-guide.txt"},{"${stringZ/#[b2]/X}": "abs-guide.txt"},{"# Unchanged (neither is a prefix).": "abs-guide.txt"},{"${stringZ/#$(_abc)/XYZ}": "abs-guide.txt"},{"# XYZABC123ABCabc": "abs-guide.txt"},{"${arrayZ[@]/#abc/XYZ}": "abs-guide.txt"},{"# Applied to each element.": "abs-guide.txt"},{"${sparseZ[@]/#abc/XYZ}": "abs-guide.txt"},{"# Works as expected.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"'- Delete prefix occurrences -'": "abs-guide.txt"},{"${stringZ/#[b2]/}": "abs-guide.txt"},{"${stringZ/#$(_abc)/}": "abs-guide.txt"},{"${arrayZ[@]/#abc/}": "abs-guide.txt"},{"${sparseZ[@]/#abc/}": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo '- - Suffix sub-element replacement - -'": "abs-guide.txt"},{"echo '- - Match must include the last character. - -'": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"'- Replace suffix occurrences -'": "abs-guide.txt"},{"${stringZ/%[b2]/X}": "abs-guide.txt"},{"# Unchanged (neither is a suffix).": "abs-guide.txt"},{"${stringZ/%$(_abc)/XYZ}": "abs-guide.txt"},{"# abcABC123ABCXYZ": "abs-guide.txt"},{"${arrayZ[@]/%abc/XYZ}": "abs-guide.txt"},{"# Applied to each element.": "abs-guide.txt"},{"${sparseZ[@]/%abc/XYZ}": "abs-guide.txt"},{"# Works as expected.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"'- Delete suffix occurrences -'": "abs-guide.txt"},{"${stringZ/%[b2]/}": "abs-guide.txt"},{"${stringZ/%$(_abc)/}": "abs-guide.txt"},{"${arrayZ[@]/%abc/}": "abs-guide.txt"},{"${sparseZ[@]/%abc/}": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo '- - Special cases of null Glob-Pattern - -'": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"782": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo '- Prefix all -'": "abs-guide.txt"},{"# null substring pattern means 'prefix'": "abs-guide.txt"},{"echo ${stringZ/#/NEW}": "abs-guide.txt"},{"# NEWabcABC123ABCabc": "abs-guide.txt"},{"echo ${arrayZ[@]/#/NEW}": "abs-guide.txt"},{"# Applied to each element.": "abs-guide.txt"},{"echo ${sparseZ[@]/#/NEW}": "abs-guide.txt"},{"# Applied to null-content also.": "abs-guide.txt"},{"# That seems reasonable.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo '- Suffix all -'": "abs-guide.txt"},{"# null substring pattern means 'suffix'": "abs-guide.txt"},{"echo ${stringZ/%/NEW}": "abs-guide.txt"},{"# abcABC123ABCabcNEW": "abs-guide.txt"},{"echo ${arrayZ[@]/%/NEW}": "abs-guide.txt"},{"# Applied to each element.": "abs-guide.txt"},{"echo ${sparseZ[@]/%/NEW}": "abs-guide.txt"},{"# Applied to null-content also.": "abs-guide.txt"},{"# That seems reasonable.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo '- - Special case For-Each Glob-Pattern - -'": "abs-guide.txt"},{"echo '- - - - This is a nice-to-have dream - - - -'": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"_GenFunc() {": "abs-guide.txt"},{"echo -n ${0}": "abs-guide.txt"},{"# Illustration only.": "abs-guide.txt"},{"# Actually, that would be an arbitrary computation.": "abs-guide.txt"},{"}": "abs-guide.txt"},{"# All occurrences, matching the AnyThing pattern.": "abs-guide.txt"},{"# Currently //*/ does not match null-content nor null-reference.": "abs-guide.txt"},{"# /#/ and /%/ does match null-content but not null-reference.": "abs-guide.txt"},{"echo ${sparseZ[@]//*/$(_GenFunc)}": "abs-guide.txt"},{"": "abs-guide.txt"},{"# A possible syntax would be to make": "abs-guide.txt"},{"#+ the parameter notation used within this construct mean:": "abs-guide.txt"},{"#": "abs-guide.txt"},{"${1} - The full element": "abs-guide.txt"},{"#": "abs-guide.txt"},{"${2} - The prefix, if any, to the matched sub-element": "abs-guide.txt"},{"#": "abs-guide.txt"},{"${3} - The matched sub-element": "abs-guide.txt"},{"#": "abs-guide.txt"},{"${4} - The suffix, if any, to the matched sub-element": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# echo ${sparseZ[@]//*/$(_GenFunc ${3})}": "abs-guide.txt"},{"# Same as ${1} here.": "abs-guide.txt"},{"# Perhaps it will be implemented in a future version of Bash.": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example A-59. Testing execution times of various commands": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# test-execution-time.sh": "abs-guide.txt"},{"# Example by Erik Brandsberg, for testing execution time": "abs-guide.txt"},{"#+ of certain operations.": "abs-guide.txt"},{"# Referenced in the \"Optimizations\" section of \"Miscellany\" chapter.": "abs-guide.txt"},{"count=50000": "abs-guide.txt"},{"echo \"Math tests\"": "abs-guide.txt"},{"echo \"Math via \\$(( ))\"": "abs-guide.txt"},{"time for (( i=0; i< $count; i++))": "abs-guide.txt"},{"do": "abs-guide.txt"},{"result=$(( $i%2 ))": "abs-guide.txt"},{"done": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"783": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"echo \"Math via *expr*:\"": "abs-guide.txt"},{"time for (( i=0; i< $count; i++))": "abs-guide.txt"},{"do": "abs-guide.txt"},{"result=`expr \"$i%2\"`": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo \"Math via *let*:\"": "abs-guide.txt"},{"time for (( i=0; i< $count; i++))": "abs-guide.txt"},{"do": "abs-guide.txt"},{"let result=$i%2": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"Conditional testing tests\"": "abs-guide.txt"},{"echo \"Test via case:\"": "abs-guide.txt"},{"time for (( i=0; i< $count; i++))": "abs-guide.txt"},{"do": "abs-guide.txt"},{"case $(( $i%2 )) in": "abs-guide.txt"},{"0) : ;;": "abs-guide.txt"},{"1) : ;;": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo \"Test with if [], no quotes:\"": "abs-guide.txt"},{"time for (( i=0; i< $count; i++))": "abs-guide.txt"},{"do": "abs-guide.txt"},{"if [ $(( $i%2 )) = 0 ]; then": "abs-guide.txt"},{":": "abs-guide.txt"},{"else": "abs-guide.txt"},{":": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo \"Test with if [], quotes:\"": "abs-guide.txt"},{"time for (( i=0; i< $count; i++))": "abs-guide.txt"},{"do": "abs-guide.txt"},{"if [ \"$(( $i%2 ))\" = \"0\" ]; then": "abs-guide.txt"},{":": "abs-guide.txt"},{"else": "abs-guide.txt"},{":": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo \"Test with if [], using -eq:\"": "abs-guide.txt"},{"time for (( i=0; i< $count; i++))": "abs-guide.txt"},{"do": "abs-guide.txt"},{"if [ $(( $i%2 )) -eq 0 ]; then": "abs-guide.txt"},{":": "abs-guide.txt"},{"else": "abs-guide.txt"},{":": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"done": "abs-guide.txt"},{"exit $?": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example A-60. Associative arrays vs. conventional arrays (execution times)": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# assoc-arr-test.sh": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"784": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Benchmark test script to compare execution times of": "abs-guide.txt"},{"numeric-indexed array vs. associative array.": "abs-guide.txt"},{"Thank you, Erik Brandsberg.": "abs-guide.txt"},{"": "abs-guide.txt"},{"count=100000": "abs-guide.txt"},{"declare simple": "abs-guide.txt"},{"declare -a array1": "abs-guide.txt"},{"declare -A array2": "abs-guide.txt"},{"declare -a array3": "abs-guide.txt"},{"declare -A array4": "abs-guide.txt"},{"": "abs-guide.txt"},{"# May take a while for some of the tests below.": "abs-guide.txt"},{"# Can change to 20000, if desired.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo \"===Assignment tests===\"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo \"Assigning a simple variable:\"": "abs-guide.txt"},{"# References $i twice to equalize lookup times.": "abs-guide.txt"},{"time for (( i=0; i< $count; i++)); do": "abs-guide.txt"},{"simple=$i$i": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo \"---\"": "abs-guide.txt"},{"echo \"Assigning a numeric index array entry:\"": "abs-guide.txt"},{"time for (( i=0; i< $count; i++)); do": "abs-guide.txt"},{"array1[$i]=$i": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo \"---\"": "abs-guide.txt"},{"echo \"Overwriting a numeric index array entry:\"": "abs-guide.txt"},{"time for (( i=0; i< $count; i++)); do": "abs-guide.txt"},{"array1[$i]=$i": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo \"---\"": "abs-guide.txt"},{"echo \"Linear reading of numeric index array:\"": "abs-guide.txt"},{"time for (( i=0; i< $count; i++)); do": "abs-guide.txt"},{"simple=array1[$i]": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo \"---\"": "abs-guide.txt"},{"echo \"Assigning an associative array entry:\"": "abs-guide.txt"},{"time for (( i=0; i< $count; i++)); do": "abs-guide.txt"},{"array2[$i]=$i": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo \"---\"": "abs-guide.txt"},{"echo \"Overwriting an associative array entry:\"": "abs-guide.txt"},{"time for (( i=0; i< $count; i++)); do": "abs-guide.txt"},{"array2[$i]=$i": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo \"---\"": "abs-guide.txt"},{"echo \"Linear reading an associative array entry:\"": "abs-guide.txt"},{"time for (( i=0; i< $count; i++)); do": "abs-guide.txt"},{"simple=array2[$i]": "abs-guide.txt"},{"done": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"785": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"echo \"---\"": "abs-guide.txt"},{"echo \"Assigning a random number to a simple variable:\"": "abs-guide.txt"},{"time for (( i=0; i< $count; i++)); do": "abs-guide.txt"},{"simple=$RANDOM": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo \"---\"": "abs-guide.txt"},{"echo \"Assign a sparse numeric index array entry randomly into 64k cells:\"": "abs-guide.txt"},{"time for (( i=0; i< $count; i++)); do": "abs-guide.txt"},{"array3[$RANDOM]=$i": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo \"---\"": "abs-guide.txt"},{"echo \"Reading sparse numeric index array entry:\"": "abs-guide.txt"},{"time for value in \"${array3[@]}\"i; do": "abs-guide.txt"},{"simple=$value": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo \"---\"": "abs-guide.txt"},{"echo \"Assigning a sparse associative array entry randomly into 64k cells:\"": "abs-guide.txt"},{"time for (( i=0; i< $count; i++)); do": "abs-guide.txt"},{"array4[$RANDOM]=$i": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo \"---\"": "abs-guide.txt"},{"echo \"Reading sparse associative index array entry:\"": "abs-guide.txt"},{"time for value in \"${array4[@]}\"; do": "abs-guide.txt"},{"simple=$value": "abs-guide.txt"},{"done": "abs-guide.txt"},{"exit $?": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix A. Contributed Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"786": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAppendix B. Reference Cards": "abs-guide.txt"},{"The following reference cards provide a useful summary of certain scripting concepts. The foregoing text": "abs-guide.txt"},{"treats these matters in more depth, as well as giving usage examples.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Table B-1. Special Shell Variables": "abs-guide.txt"},{"Variable": "abs-guide.txt"},{"$0": "abs-guide.txt"},{"$1": "abs-guide.txt"},{"$2 - $9": "abs-guide.txt"},{"${10}": "abs-guide.txt"},{"$#": "abs-guide.txt"},{"\"$*\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"Meaning": "abs-guide.txt"},{"Filename of script": "abs-guide.txt"},{"Positional parameter #1": "abs-guide.txt"},{"Positional parameters #2 - #9": "abs-guide.txt"},{"Positional parameter #10": "abs-guide.txt"},{"Number of positional parameters": "abs-guide.txt"},{"All the positional parameters (as a single": "abs-guide.txt"},{"word) *": "abs-guide.txt"},{"\"$@\"": "abs-guide.txt"},{"All the positional parameters (as separate": "abs-guide.txt"},{"strings)": "abs-guide.txt"},{"${#*}": "abs-guide.txt"},{"Number of positional parameters": "abs-guide.txt"},{"${#@}": "abs-guide.txt"},{"Number of positional parameters": "abs-guide.txt"},{"$?": "abs-guide.txt"},{"Return value": "abs-guide.txt"},{"$$": "abs-guide.txt"},{"Process ID (PID) of script": "abs-guide.txt"},{"$Flags passed to script (using set)": "abs-guide.txt"},{"$_": "abs-guide.txt"},{"Last argument of previous command": "abs-guide.txt"},{"$!": "abs-guide.txt"},{"Process ID (PID) of last job run in": "abs-guide.txt"},{"background": "abs-guide.txt"},{"* Must be quoted, otherwise it defaults to $@.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Table B-2. TEST Operators: Binary Comparison": "abs-guide.txt"},{"Operator": "abs-guide.txt"},{"": "abs-guide.txt"},{"Meaning": "abs-guide.txt"},{"": "abs-guide.txt"},{"Arithmetic Comparison": "abs-guide.txt"},{"-eq": "abs-guide.txt"},{"Equal to": "abs-guide.txt"},{"-ne": "abs-guide.txt"},{"-lt": "abs-guide.txt"},{"-le": "abs-guide.txt"},{"-gt": "abs-guide.txt"},{"-ge": "abs-guide.txt"},{"": "abs-guide.txt"},{"Not equal to": "abs-guide.txt"},{"Less than": "abs-guide.txt"},{"Less than or equal to": "abs-guide.txt"},{"Greater than": "abs-guide.txt"},{"Greater than or equal to": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix B. Reference Cards": "abs-guide.txt"},{"": "abs-guide.txt"},{"----- Operator": "abs-guide.txt"},{"": "abs-guide.txt"},{"Meaning": "abs-guide.txt"},{"": "abs-guide.txt"},{"String Comparison": "abs-guide.txt"},{"=": "abs-guide.txt"},{"==": "abs-guide.txt"},{"!=": "abs-guide.txt"},{"\\<": "abs-guide.txt"},{"": "abs-guide.txt"},{"Equal to": "abs-guide.txt"},{"Equal to": "abs-guide.txt"},{"Not equal to": "abs-guide.txt"},{"Less than (ASCII) *": "abs-guide.txt"},{"": "abs-guide.txt"},{"\\>": "abs-guide.txt"},{"": "abs-guide.txt"},{"Greater than (ASCII) *": "abs-guide.txt"},{"": "abs-guide.txt"},{"-z": "abs-guide.txt"},{"": "abs-guide.txt"},{"String is empty": "abs-guide.txt"},{"787": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"String is not empty": "abs-guide.txt"},{"": "abs-guide.txt"},{"-n": "abs-guide.txt"},{"Arithmetic Comparison within double parentheses (( ... ))": "abs-guide.txt"},{">": "abs-guide.txt"},{"Greater than": "abs-guide.txt"},{">=": "abs-guide.txt"},{"Greater than or equal to": "abs-guide.txt"},{"<": "abs-guide.txt"},{"Less than": "abs-guide.txt"},{"<=": "abs-guide.txt"},{"Less than or equal to": "abs-guide.txt"},{"* If within a double-bracket [[ ... ]] test construct, then no escape \\ is needed.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Table B-3. TEST Operators: Files": "abs-guide.txt"},{"Operator": "abs-guide.txt"},{"-e": "abs-guide.txt"},{"-f": "abs-guide.txt"},{"-d": "abs-guide.txt"},{"-h": "abs-guide.txt"},{"-L": "abs-guide.txt"},{"-b": "abs-guide.txt"},{"-c": "abs-guide.txt"},{"-p": "abs-guide.txt"},{"-S": "abs-guide.txt"},{"-t": "abs-guide.txt"},{"": "abs-guide.txt"},{"Tests Whether": "abs-guide.txt"},{"File exists": "abs-guide.txt"},{"File is a regular file": "abs-guide.txt"},{"File is a directory": "abs-guide.txt"},{"File is a symbolic link": "abs-guide.txt"},{"File is a symbolic link": "abs-guide.txt"},{"File is a block device": "abs-guide.txt"},{"File is a character device": "abs-guide.txt"},{"File is a pipe": "abs-guide.txt"},{"File is a socket": "abs-guide.txt"},{"File is associated with a terminal": "abs-guide.txt"},{"": "abs-guide.txt"},{"-N": "abs-guide.txt"},{"-O": "abs-guide.txt"},{"-G": "abs-guide.txt"},{"": "abs-guide.txt"},{"File modified since it was last read": "abs-guide.txt"},{"You own the file": "abs-guide.txt"},{"Group id of file same as yours": "abs-guide.txt"},{"": "abs-guide.txt"},{"-----": "abs-guide.txt"},{"": "abs-guide.txt"},{"Operator": "abs-guide.txt"},{"-s": "abs-guide.txt"},{"": "abs-guide.txt"},{"Tests Whether": "abs-guide.txt"},{"File is not zero size": "abs-guide.txt"},{"": "abs-guide.txt"},{"-r": "abs-guide.txt"},{"-w": "abs-guide.txt"},{"-x": "abs-guide.txt"},{"": "abs-guide.txt"},{"File has read permission": "abs-guide.txt"},{"File has write permission": "abs-guide.txt"},{"File has execute permission": "abs-guide.txt"},{"": "abs-guide.txt"},{"-g": "abs-guide.txt"},{"-u": "abs-guide.txt"},{"-k": "abs-guide.txt"},{"": "abs-guide.txt"},{"sgid flag set": "abs-guide.txt"},{"suid flag set": "abs-guide.txt"},{"\"sticky bit\" set": "abs-guide.txt"},{"": "abs-guide.txt"},{"F1 -nt F2": "abs-guide.txt"},{"F1 -ot F2": "abs-guide.txt"},{"F1 -ef F2": "abs-guide.txt"},{"": "abs-guide.txt"},{"File F1 is newer than F2 *": "abs-guide.txt"},{"File F1 is older than F2 *": "abs-guide.txt"},{"Files F1 and F2 are hard links to the": "abs-guide.txt"},{"same file *": "abs-guide.txt"},{"": "abs-guide.txt"},{"!": "abs-guide.txt"},{"NOT (inverts sense of above tests)": "abs-guide.txt"},{"* Binary operator (requires two operands).": "abs-guide.txt"},{"": "abs-guide.txt"},{"Table B-4. Parameter Substitution and Expansion": "abs-guide.txt"},{"Expression": "abs-guide.txt"},{"${var}": "abs-guide.txt"},{"": "abs-guide.txt"},{"Meaning": "abs-guide.txt"},{"Value of var (same as $var)": "abs-guide.txt"},{"": "abs-guide.txt"},{"${var-$DEFAULT} If var not set, evaluate expression as $DEFAULT *": "abs-guide.txt"},{"${var:-$DEFAULT} If var not set or is empty, evaluate expression as $DEFAULT *": "abs-guide.txt"},{"${var=$DEFAULT} If var not set, evaluate expression as $DEFAULT *": "abs-guide.txt"},{"Appendix B. Reference Cards": "abs-guide.txt"},{"": "abs-guide.txt"},{"788": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"${var:=$DEFAULT} If var not set or is empty, evaluate expression as $DEFAULT *": "abs-guide.txt"},{"${var+$OTHER}": "abs-guide.txt"},{"${var:+$OTHER}": "abs-guide.txt"},{"": "abs-guide.txt"},{"If var set, evaluate expression as $OTHER, otherwise as null string": "abs-guide.txt"},{"If var set, evaluate expression as $OTHER, otherwise as null string": "abs-guide.txt"},{"": "abs-guide.txt"},{"${var?$ERR_MSG} If var not set, print $ERR_MSG and abort script with an exit status of 1.*": "abs-guide.txt"},{"${var:?$ERR_MSG} If var not set, print $ERR_MSG and abort script with an exit status of 1.*": "abs-guide.txt"},{"${!varprefix*}": "abs-guide.txt"},{"Matches all previously declared variables beginning with varprefix": "abs-guide.txt"},{"${!varprefix@}": "abs-guide.txt"},{"Matches all previously declared variables beginning with varprefix": "abs-guide.txt"},{"* If var is set, evaluate the expression as $var with no side-effects.": "abs-guide.txt"},{"# Note that some of the above behavior of operators has changed from earlier versions of Bash.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Table B-5. String Operations": "abs-guide.txt"},{"Expression": "abs-guide.txt"},{"${#string}": "abs-guide.txt"},{"": "abs-guide.txt"},{"Meaning": "abs-guide.txt"},{"Length of $string": "abs-guide.txt"},{"": "abs-guide.txt"},{"${string:position}": "abs-guide.txt"},{"${string:position:length}": "abs-guide.txt"},{"": "abs-guide.txt"},{"Extract substring from $string at $position": "abs-guide.txt"},{"Extract $length characters substring from $string": "abs-guide.txt"},{"at $position [zero-indexed, first character is at": "abs-guide.txt"},{"position 0]": "abs-guide.txt"},{"": "abs-guide.txt"},{"${string#substring}": "abs-guide.txt"},{"": "abs-guide.txt"},{"Strip shortest match of $substring from front of": "abs-guide.txt"},{"$string": "abs-guide.txt"},{"Strip longest match of $substring from front of": "abs-guide.txt"},{"$string": "abs-guide.txt"},{"Strip shortest match of $substring from back of": "abs-guide.txt"},{"$string": "abs-guide.txt"},{"Strip longest match of $substring from back of": "abs-guide.txt"},{"$string": "abs-guide.txt"},{"": "abs-guide.txt"},{"${string##substring}": "abs-guide.txt"},{"${string%substring}": "abs-guide.txt"},{"${string%%substring}": "abs-guide.txt"},{"": "abs-guide.txt"},{"${string/substring/replacement}": "abs-guide.txt"},{"${string//substring/replacement}": "abs-guide.txt"},{"${string/#substring/replacement}": "abs-guide.txt"},{"${string/%substring/replacement}": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix B. Reference Cards": "abs-guide.txt"},{"": "abs-guide.txt"},{"Replace first match of $substring with": "abs-guide.txt"},{"$replacement": "abs-guide.txt"},{"Replace all matches of $substring with": "abs-guide.txt"},{"$replacement": "abs-guide.txt"},{"If $substring matches front end of $string,": "abs-guide.txt"},{"substitute $replacement for $substring": "abs-guide.txt"},{"If $substring matches back end of $string,": "abs-guide.txt"},{"substitute $replacement for $substring": "abs-guide.txt"},{"": "abs-guide.txt"},{"789": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"expr match \"$string\" '$substring'": "abs-guide.txt"},{"expr \"$string\" : '$substring'": "abs-guide.txt"},{"expr index \"$string\" $substring": "abs-guide.txt"},{"": "abs-guide.txt"},{"expr substr $string $position": "abs-guide.txt"},{"$length": "abs-guide.txt"},{"expr match \"$string\"": "abs-guide.txt"},{"'\\($substring\\)'": "abs-guide.txt"},{"expr \"$string\" : '\\($substring\\)'": "abs-guide.txt"},{"expr match \"$string\"": "abs-guide.txt"},{"'.*\\($substring\\)'": "abs-guide.txt"},{"expr \"$string\" :": "abs-guide.txt"},{"'.*\\($substring\\)'": "abs-guide.txt"},{"* Where $substring is a Regular Expression.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Length of matching $substring* at beginning of": "abs-guide.txt"},{"$string": "abs-guide.txt"},{"Length of matching $substring* at beginning of": "abs-guide.txt"},{"$string": "abs-guide.txt"},{"Numerical position in $string of first character in": "abs-guide.txt"},{"$substring* that matches [0 if no match, first": "abs-guide.txt"},{"character counts as position 1]": "abs-guide.txt"},{"Extract $length characters from $string starting at": "abs-guide.txt"},{"$position [0 if no match, first character counts as": "abs-guide.txt"},{"position 1]": "abs-guide.txt"},{"Extract $substring*, searching from beginning of": "abs-guide.txt"},{"$string": "abs-guide.txt"},{"Extract $substring* , searching from beginning of": "abs-guide.txt"},{"$string": "abs-guide.txt"},{"Extract $substring*, searching from end of": "abs-guide.txt"},{"$string": "abs-guide.txt"},{"Extract $substring*, searching from end of": "abs-guide.txt"},{"$string": "abs-guide.txt"},{"": "abs-guide.txt"},{"Table B-6. Miscellaneous Constructs": "abs-guide.txt"},{"Expression": "abs-guide.txt"},{"": "abs-guide.txt"},{"Interpretation": "abs-guide.txt"},{"": "abs-guide.txt"},{"Brackets": "abs-guide.txt"},{"if [ CONDITION ]": "abs-guide.txt"},{"if [[ CONDITION ]]": "abs-guide.txt"},{"Array[1]=element1": "abs-guide.txt"},{"[a-z]": "abs-guide.txt"},{"": "abs-guide.txt"},{"Test construct": "abs-guide.txt"},{"Extended test construct": "abs-guide.txt"},{"Array initialization": "abs-guide.txt"},{"Range of characters within a Regular Expression": "abs-guide.txt"},{"": "abs-guide.txt"},{"Curly Brackets": "abs-guide.txt"},{"${variable}": "abs-guide.txt"},{"Parameter substitution": "abs-guide.txt"},{"${!variable}": "abs-guide.txt"},{"Indirect variable reference": "abs-guide.txt"},{"{ command1; command2; . . . commandN; } Block of code": "abs-guide.txt"},{"{string1,string2,string3,...}": "abs-guide.txt"},{"Brace expansion": "abs-guide.txt"},{"{a..z}": "abs-guide.txt"},{"Extended brace expansion": "abs-guide.txt"},{"{}": "abs-guide.txt"},{"Text replacement, after find and xargs": "abs-guide.txt"},{"": "abs-guide.txt"},{"Parentheses": "abs-guide.txt"},{"( command1; command2 )": "abs-guide.txt"},{"Array=(element1 element2 element3)": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix B. Reference Cards": "abs-guide.txt"},{"": "abs-guide.txt"},{"Command group executed within a subshell": "abs-guide.txt"},{"Array initialization": "abs-guide.txt"},{"": "abs-guide.txt"},{"790": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"result=$(COMMAND)": "abs-guide.txt"},{">(COMMAND)": "abs-guide.txt"},{"<(COMMAND)": "abs-guide.txt"},{"": "abs-guide.txt"},{"Command substitution, new style": "abs-guide.txt"},{"Process substitution": "abs-guide.txt"},{"Process substitution": "abs-guide.txt"},{"": "abs-guide.txt"},{"Double Parentheses": "abs-guide.txt"},{"(( var = 78 ))": "abs-guide.txt"},{"var=$(( 20 + 5 ))": "abs-guide.txt"},{"(( var++ ))": "abs-guide.txt"},{"(( var-- ))": "abs-guide.txt"},{"(( var0 = var1<98?9:21 ))": "abs-guide.txt"},{"": "abs-guide.txt"},{"Integer arithmetic": "abs-guide.txt"},{"Integer arithmetic, with variable assignment": "abs-guide.txt"},{"C-style variable increment": "abs-guide.txt"},{"C-style variable decrement": "abs-guide.txt"},{"C-style ternary operation": "abs-guide.txt"},{"": "abs-guide.txt"},{"Quoting": "abs-guide.txt"},{"\"$variable\"": "abs-guide.txt"},{"'string'": "abs-guide.txt"},{"": "abs-guide.txt"},{"\"Weak\" quoting": "abs-guide.txt"},{"'Strong' quoting": "abs-guide.txt"},{"": "abs-guide.txt"},{"Back Quotes": "abs-guide.txt"},{"result=`COMMAND`": "abs-guide.txt"},{"": "abs-guide.txt"},{"Command substitution, classic style": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix B. Reference Cards": "abs-guide.txt"},{"": "abs-guide.txt"},{"791": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAppendix C. A Sed and Awk Micro-Primer": "abs-guide.txt"},{"This is a very brief introduction to the sed and awk text processing utilities. We will deal with only a few": "abs-guide.txt"},{"basic commands here, but that will suffice for understanding simple sed and awk constructs within shell": "abs-guide.txt"},{"scripts.": "abs-guide.txt"},{"sed: a non-interactive text file editor": "abs-guide.txt"},{"awk: a field-oriented pattern processing language with a C-style syntax": "abs-guide.txt"},{"For all their differences, the two utilities share a similar invocation syntax, use regular expressions , read input": "abs-guide.txt"},{"by default from stdin, and output to stdout. These are well-behaved UNIX tools, and they work together": "abs-guide.txt"},{"well. The output from one can be piped to the other, and their combined capabilities give shell scripts some of": "abs-guide.txt"},{"the power of Perl.": "abs-guide.txt"},{"One important difference between the utilities is that while shell scripts can easily pass arguments to sed,": "abs-guide.txt"},{"it is more cumbersome for awk (see Example 36-5 and Example 28-2).": "abs-guide.txt"},{"": "abs-guide.txt"},{"C.1. Sed": "abs-guide.txt"},{"Sed is a non-interactive [141] stream editor. It receives text input, whether from stdin or from a file,": "abs-guide.txt"},{"performs certain operations on specified lines of the input, one line at a time, then outputs the result to": "abs-guide.txt"},{"stdout or to a file. Within a shell script, sed is usually one of several tool components in a pipe.": "abs-guide.txt"},{"Sed determines which lines of its input that it will operate on from the address range passed to it. [142]": "abs-guide.txt"},{"Specify this address range either by line number or by a pattern to match. For example, 3d signals sed to": "abs-guide.txt"},{"delete line 3 of the input, and /Windows/d tells sed that you want every line of the input containing a match": "abs-guide.txt"},{"to \"Windows\" deleted.": "abs-guide.txt"},{"Of all the operations in the sed toolkit, we will focus primarily on the three most commonly used ones. These": "abs-guide.txt"},{"are printing (to stdout), deletion, and substitution.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Table C-1. Basic sed operators": "abs-guide.txt"},{"Operator": "abs-guide.txt"},{"[address-range]/p": "abs-guide.txt"},{"[address-range]/d": "abs-guide.txt"},{"s/pattern1/pattern2/": "abs-guide.txt"},{"": "abs-guide.txt"},{"Effect": "abs-guide.txt"},{"Print [specified address range]": "abs-guide.txt"},{"Delete [specified address range]": "abs-guide.txt"},{"Substitute pattern2 for first instance of": "abs-guide.txt"},{"pattern1 in a line": "abs-guide.txt"},{"[address-range]/s/pattern1/pattern2/ substitute Substitute pattern2 for first instance of": "abs-guide.txt"},{"pattern1 in a line, over address-range": "abs-guide.txt"},{"[address-range]/y/pattern1/pattern2/ transform replace any character in pattern1 with the": "abs-guide.txt"},{"corresponding character in pattern2, over": "abs-guide.txt"},{"address-range (equivalent of tr)": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix C. A Sed and Awk Micro-Primer": "abs-guide.txt"},{"": "abs-guide.txt"},{"Name": "abs-guide.txt"},{"print": "abs-guide.txt"},{"delete": "abs-guide.txt"},{"substitute": "abs-guide.txt"},{"": "abs-guide.txt"},{"792": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"[address] i pattern Filename": "abs-guide.txt"},{"": "abs-guide.txt"},{"insert": "abs-guide.txt"},{"": "abs-guide.txt"},{"g": "abs-guide.txt"},{"": "abs-guide.txt"},{"global": "abs-guide.txt"},{"": "abs-guide.txt"},{"Insert pattern at address indicated in file": "abs-guide.txt"},{"Filename. Usually used with -i": "abs-guide.txt"},{"in-place option.": "abs-guide.txt"},{"Operate on every pattern match within each": "abs-guide.txt"},{"matched line of input": "abs-guide.txt"},{"": "abs-guide.txt"},{"Unless the g (global) operator is appended to a substitute command, the substitution operates only on the": "abs-guide.txt"},{"first instance of a pattern match within each line.": "abs-guide.txt"},{"From the command-line and in a shell script, a sed operation may require quoting and certain options.": "abs-guide.txt"},{"sed -e '/^$/d' $filename": "abs-guide.txt"},{"# The -e option causes the next string to be interpreted as an editing instruction.": "abs-guide.txt"},{"# (If passing only a single instruction to sed, the \"-e\" is optional.)": "abs-guide.txt"},{"# The \"strong\" quotes ('') protect the RE characters in the instruction": "abs-guide.txt"},{"#+ from reinterpretation as special characters by the body of the script.": "abs-guide.txt"},{"# (This reserves RE expansion of the instruction for sed.)": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Operates on the text contained in file $filename.": "abs-guide.txt"},{"": "abs-guide.txt"},{"In certain cases, a sed editing command will not work with single quotes.": "abs-guide.txt"},{"filename=file1.txt": "abs-guide.txt"},{"pattern=BEGIN": "abs-guide.txt"},{"sed \"/^$pattern/d\" \"$filename\" # Works as specified.": "abs-guide.txt"},{"# sed '/^$pattern/d' \"$filename\"": "abs-guide.txt"},{"has unexpected results.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"In this instance, with strong quoting (' ... '),": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"\"$pattern\" will not expand to \"BEGIN\".": "abs-guide.txt"},{"": "abs-guide.txt"},{"Sed uses the -e option to specify that the following string is an instruction or set of instructions. If": "abs-guide.txt"},{"there is only a single instruction contained in the string, then this may be omitted.": "abs-guide.txt"},{"sed -n '/xzy/p'": "abs-guide.txt"},{"# The -n option": "abs-guide.txt"},{"# Otherwise all": "abs-guide.txt"},{"# The -e option": "abs-guide.txt"},{"": "abs-guide.txt"},{"$filename": "abs-guide.txt"},{"tells sed to print only those lines matching the pattern.": "abs-guide.txt"},{"input lines would print.": "abs-guide.txt"},{"not necessary here since there is only a single editing instruction.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Table C-2. Examples of sed operators": "abs-guide.txt"},{"Notation": "abs-guide.txt"},{"8d": "abs-guide.txt"},{"/^$/d": "abs-guide.txt"},{"1,/^$/d": "abs-guide.txt"},{"/Jones/p": "abs-guide.txt"},{"s/Windows/Linux/": "abs-guide.txt"},{"s/BSOD/stability/g": "abs-guide.txt"},{"s/ *$//": "abs-guide.txt"},{"Appendix C. A Sed and Awk Micro-Primer": "abs-guide.txt"},{"": "abs-guide.txt"},{"Effect": "abs-guide.txt"},{"Delete 8th line of input.": "abs-guide.txt"},{"Delete all blank lines.": "abs-guide.txt"},{"Delete from beginning of input up to, and": "abs-guide.txt"},{"including first blank line.": "abs-guide.txt"},{"Print only lines containing \"Jones\" (with -n": "abs-guide.txt"},{"option).": "abs-guide.txt"},{"Substitute \"Linux\" for first instance of": "abs-guide.txt"},{"\"Windows\" found in each input line.": "abs-guide.txt"},{"Substitute \"stability\" for every instance of": "abs-guide.txt"},{"\"BSOD\" found in each input line.": "abs-guide.txt"},{"Delete all spaces at the end of every line.": "abs-guide.txt"},{"793": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"Compress all consecutive sequences of zeroes": "abs-guide.txt"},{"into a single zero.": "abs-guide.txt"},{"echo \"Working on it.\" | sed -e '1i How": "abs-guide.txt"},{"Prints \"How far are you along?\" as first line,": "abs-guide.txt"},{"far are you along?'": "abs-guide.txt"},{"\"Working on it\" as second.": "abs-guide.txt"},{"5i 'Linux is great.' file.txt": "abs-guide.txt"},{"Inserts 'Linux is great.' at line 5 of the file": "abs-guide.txt"},{"file.txt.": "abs-guide.txt"},{"/GUI/d": "abs-guide.txt"},{"Delete all lines containing \"GUI\".": "abs-guide.txt"},{"s/GUI//g": "abs-guide.txt"},{"Delete all instances of \"GUI\", leaving the": "abs-guide.txt"},{"remainder of each line intact.": "abs-guide.txt"},{"Substituting a zero-length string for another is equivalent to deleting that string within a line of input. This": "abs-guide.txt"},{"leaves the remainder of the line intact. Applying s/GUI// to the line": "abs-guide.txt"},{"s/00*/0/g": "abs-guide.txt"},{"": "abs-guide.txt"},{"The most important parts of any application are its GUI and sound effects": "abs-guide.txt"},{"": "abs-guide.txt"},{"results in": "abs-guide.txt"},{"The most important parts of any application are its": "abs-guide.txt"},{"": "abs-guide.txt"},{"and sound effects": "abs-guide.txt"},{"": "abs-guide.txt"},{"A backslash forces the sed replacement command to continue on to the next line. This has the effect of using": "abs-guide.txt"},{"the newline at the end of the first line as the replacement string.": "abs-guide.txt"},{"s/^": "abs-guide.txt"},{"/g": "abs-guide.txt"},{"": "abs-guide.txt"},{"*/\\": "abs-guide.txt"},{"": "abs-guide.txt"},{"This substitution replaces line-beginning spaces with a newline. The net result is to replace paragraph indents": "abs-guide.txt"},{"with a blank line between paragraphs.": "abs-guide.txt"},{"An address range followed by one or more operations may require open and closed curly brackets, with": "abs-guide.txt"},{"appropriate newlines.": "abs-guide.txt"},{"/[0-9A-Za-z]/,/^$/{": "abs-guide.txt"},{"/^$/d": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"This deletes only the first of each set of consecutive blank lines. That might be useful for single-spacing a text": "abs-guide.txt"},{"file, but retaining the blank line(s) between paragraphs.": "abs-guide.txt"},{"The usual delimiter that sed uses is /. However, sed allows other delimiters, such as %. This is useful": "abs-guide.txt"},{"when / is part of a replacement string, as in a file pathname. See Example 11-10 and Example 16-32.": "abs-guide.txt"},{"A quick way to double-space a text file is sed G filename.": "abs-guide.txt"},{"For illustrative examples of sed within shell scripts, see:": "abs-guide.txt"},{"1. Example 36-1": "abs-guide.txt"},{"2. Example 36-2": "abs-guide.txt"},{"3. Example 16-3": "abs-guide.txt"},{"4. Example A-2": "abs-guide.txt"},{"5. Example 16-17": "abs-guide.txt"},{"6. Example 16-27": "abs-guide.txt"},{"7. Example A-12": "abs-guide.txt"},{"8. Example A-16": "abs-guide.txt"},{"9. Example A-17": "abs-guide.txt"},{"10. Example 16-32": "abs-guide.txt"},{"11. Example 11-10": "abs-guide.txt"},{"Appendix C. A Sed and Awk Micro-Primer": "abs-guide.txt"},{"": "abs-guide.txt"},{"794": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"12. Example 16-48": "abs-guide.txt"},{"13. Example A-1": "abs-guide.txt"},{"14. Example 16-14": "abs-guide.txt"},{"15. Example 16-12": "abs-guide.txt"},{"16. Example A-10": "abs-guide.txt"},{"17. Example 19-12": "abs-guide.txt"},{"18. Example 16-19": "abs-guide.txt"},{"19. Example A-29": "abs-guide.txt"},{"20. Example A-31": "abs-guide.txt"},{"21. Example A-24": "abs-guide.txt"},{"22. Example A-43": "abs-guide.txt"},{"23. Example A-55": "abs-guide.txt"},{"For a more extensive treatment of sed, refer to the pertinent references in the Bibliography.": "abs-guide.txt"},{"": "abs-guide.txt"},{"C.2. Awk": "abs-guide.txt"},{"Awk [143] is a full-featured text processing language with a syntax reminiscent of C. While it possesses an": "abs-guide.txt"},{"extensive set of operators and capabilities, we will cover only a few of these here - the ones most useful in": "abs-guide.txt"},{"shell scripts.": "abs-guide.txt"},{"Awk breaks each line of input passed to it into fields. By default, a field is a string of consecutive characters": "abs-guide.txt"},{"delimited by whitespace, though there are options for changing this. Awk parses and operates on each separate": "abs-guide.txt"},{"field. This makes it ideal for handling structured text files -- especially tables -- data organized into consistent": "abs-guide.txt"},{"chunks, such as rows and columns.": "abs-guide.txt"},{"Strong quoting and curly brackets enclose blocks of awk code within a shell script.": "abs-guide.txt"},{"# $1 is field #1, $2 is field #2, etc.": "abs-guide.txt"},{"echo one two | awk '{print $1}'": "abs-guide.txt"},{"# one": "abs-guide.txt"},{"echo one two | awk '{print $2}'": "abs-guide.txt"},{"# two": "abs-guide.txt"},{"# But what is field #0 ($0)?": "abs-guide.txt"},{"echo one two | awk '{print $0}'": "abs-guide.txt"},{"# one two": "abs-guide.txt"},{"# All the fields!": "abs-guide.txt"},{"": "abs-guide.txt"},{"awk '{print $3}' $filename": "abs-guide.txt"},{"# Prints field #3 of file $filename to stdout.": "abs-guide.txt"},{"awk '{print $1 $5 $6}' $filename": "abs-guide.txt"},{"# Prints fields #1, #5, and #6 of file $filename.": "abs-guide.txt"},{"awk '{print $0}' $filename": "abs-guide.txt"},{"# Prints the entire file!": "abs-guide.txt"},{"# Same effect as:": "abs-guide.txt"},{"cat $filename . . . or . . . sed '' $filename": "abs-guide.txt"},{"": "abs-guide.txt"},{"We have just seen the awk print command in action. The only other feature of awk we need to deal with here": "abs-guide.txt"},{"is variables. Awk handles variables similarly to shell scripts, though a bit more flexibly.": "abs-guide.txt"},{"Appendix C. A Sed and Awk Micro-Primer": "abs-guide.txt"},{"": "abs-guide.txt"},{"795": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"{ total += ${column_number} }": "abs-guide.txt"},{"": "abs-guide.txt"},{"This adds the value of column_number to the running total of total>. Finally, to print \"total\", there is an": "abs-guide.txt"},{"END command block, executed after the script has processed all its input.": "abs-guide.txt"},{"END { print total }": "abs-guide.txt"},{"": "abs-guide.txt"},{"Corresponding to the END, there is a BEGIN, for a code block to be performed before awk starts processing": "abs-guide.txt"},{"its input.": "abs-guide.txt"},{"The following example illustrates how awk can add text-parsing tools to a shell script.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example C-1. Counting Letter Occurrences": "abs-guide.txt"},{"#! /bin/sh": "abs-guide.txt"},{"# letter-count2.sh: Counting letter occurrences in a text file.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Script by nyal [nyal@voila.fr].": "abs-guide.txt"},{"# Used in ABS Guide with permission.": "abs-guide.txt"},{"# Recommented and reformatted by ABS Guide author.": "abs-guide.txt"},{"# Version 1.1: Modified to work with gawk 3.1.3.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"(Will still work with earlier versions.)": "abs-guide.txt"},{"": "abs-guide.txt"},{"INIT_TAB_AWK=\"\"": "abs-guide.txt"},{"# Parameter to initialize awk script.": "abs-guide.txt"},{"count_case=0": "abs-guide.txt"},{"FILE_PARSE=$1": "abs-guide.txt"},{"E_PARAMERR=85": "abs-guide.txt"},{"usage()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"echo \"Usage: letter-count.sh file letters\" 2>&1": "abs-guide.txt"},{"# For example:": "abs-guide.txt"},{"./letter-count2.sh filename.txt a b c": "abs-guide.txt"},{"exit $E_PARAMERR # Too few arguments passed to script.": "abs-guide.txt"},{"}": "abs-guide.txt"},{"if [ ! -f \"$1\" ] ; then": "abs-guide.txt"},{"echo \"$1: No such file.\" 2>&1": "abs-guide.txt"},{"usage": "abs-guide.txt"},{"# Print usage message and exit.": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"if [ -z \"$2\" ] ; then": "abs-guide.txt"},{"echo \"$2: No letters specified.\" 2>&1": "abs-guide.txt"},{"usage": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"shift": "abs-guide.txt"},{"# Letters specified.": "abs-guide.txt"},{"for letter in `echo $@`": "abs-guide.txt"},{"# For each one . . .": "abs-guide.txt"},{"do": "abs-guide.txt"},{"INIT_TAB_AWK=\"$INIT_TAB_AWK tab_search[${count_case}] = \\": "abs-guide.txt"},{"\\\"$letter\\\"; final_tab[${count_case}] = 0; \"": "abs-guide.txt"},{"# Pass as parameter to awk script below.": "abs-guide.txt"},{"count_case=`expr $count_case + 1`": "abs-guide.txt"},{"done": "abs-guide.txt"},{"# DEBUG:": "abs-guide.txt"},{"# echo $INIT_TAB_AWK;": "abs-guide.txt"},{"cat $FILE_PARSE |": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix C. A Sed and Awk Micro-Primer": "abs-guide.txt"},{"": "abs-guide.txt"},{"796": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# Pipe the target file to the following awk script.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"--------------------------------------------------------------------Earlier version of script:": "abs-guide.txt"},{"awk -v tab_search=0 -v final_tab=0 -v tab=0 -v \\": "abs-guide.txt"},{"nb_letter=0 -v chara=0 -v chara2=0 \\": "abs-guide.txt"},{"": "abs-guide.txt"},{"awk \\": "abs-guide.txt"},{"\"BEGIN { $INIT_TAB_AWK } \\": "abs-guide.txt"},{"{ split(\\$0, tab, \\\"\\\"); \\": "abs-guide.txt"},{"for (chara in tab) \\": "abs-guide.txt"},{"{ for (chara2 in tab_search) \\": "abs-guide.txt"},{"{ if (tab_search[chara2] == tab[chara]) { final_tab[chara2]++ } } } } \\": "abs-guide.txt"},{"END { for (chara in final_tab) \\": "abs-guide.txt"},{"{ print tab_search[chara] \\\" => \\\" final_tab[chara] } }\"": "abs-guide.txt"},{"# --------------------------------------------------------------------# Nothing all that complicated, just . . .": "abs-guide.txt"},{"#+ for-loops, if-tests, and a couple of specialized functions.": "abs-guide.txt"},{"exit $?": "abs-guide.txt"},{"# Compare this script to letter-count.sh.": "abs-guide.txt"},{"": "abs-guide.txt"},{"For simpler examples of awk within shell scripts, see:": "abs-guide.txt"},{"1. Example 15-14": "abs-guide.txt"},{"2. Example 20-8": "abs-guide.txt"},{"3. Example 16-32": "abs-guide.txt"},{"4. Example 36-5": "abs-guide.txt"},{"5. Example 28-2": "abs-guide.txt"},{"6. Example 15-20": "abs-guide.txt"},{"7. Example 29-3": "abs-guide.txt"},{"8. Example 29-4": "abs-guide.txt"},{"9. Example 11-3": "abs-guide.txt"},{"10. Example 16-61": "abs-guide.txt"},{"11. Example 9-16": "abs-guide.txt"},{"12. Example 16-4": "abs-guide.txt"},{"13. Example 10-6": "abs-guide.txt"},{"14. Example 36-19": "abs-guide.txt"},{"15. Example 11-9": "abs-guide.txt"},{"16. Example 36-4": "abs-guide.txt"},{"17. Example 16-53": "abs-guide.txt"},{"18. Example T-3": "abs-guide.txt"},{"That's all the awk we'll cover here, folks, but there's lots more to learn. See the appropriate references in the": "abs-guide.txt"},{"Bibliography.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix C. A Sed and Awk Micro-Primer": "abs-guide.txt"},{"": "abs-guide.txt"},{"797": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAppendix D. Parsing and Managing Pathnames": "abs-guide.txt"},{"Emmanual Rouat contributed the following example of parsing and transforming filenames and, in particular,": "abs-guide.txt"},{"pathnames. It draws heavily on the functionality of sed.": "abs-guide.txt"},{"#!/usr/bin/env bash": "abs-guide.txt"},{"#----------------------------------------------------------# Management of PATH, LD_LIBRARY_PATH, MANPATH variables...": "abs-guide.txt"},{"# By Emmanuel Rouat <no-email>": "abs-guide.txt"},{"# (Inspired by the bash documentation 'pathfuncs' and on": "abs-guide.txt"},{"# discussions found on stackoverflow:": "abs-guide.txt"},{"# http://stackoverflow.com/questions/370047/": "abs-guide.txt"},{"# http://stackoverflow.com/questions/273909/#346860 )": "abs-guide.txt"},{"# Last modified: Sat Sep 22 12:01:55 CEST 2012": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# The following functions handle spaces correctly.": "abs-guide.txt"},{"# These functions belong in .bash_profile rather than in": "abs-guide.txt"},{"# .bashrc, I guess.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# The modular aspect of these functions should make it easy": "abs-guide.txt"},{"# to expand them to handle path substitutions instead": "abs-guide.txt"},{"# of path removal etc....": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# See http://www.catonmat.net/blog/awk-one-liners-explained-part-two/": "abs-guide.txt"},{"# (item 43) for an explanation of the 'duplicate-entries' removal": "abs-guide.txt"},{"# (it's a nice trick!)": "abs-guide.txt"},{"#----------------------------------------------------------# Show $@ (usually PATH) as list.": "abs-guide.txt"},{"function p_show() { local p=\"$@\" && for p; do [[ ${!p} ]] &&": "abs-guide.txt"},{"echo -e ${!p//:/\\\\n}; done }": "abs-guide.txt"},{"# Filter out empty lines, multiple/trailing slashes, and duplicate entries.": "abs-guide.txt"},{"function p_filter()": "abs-guide.txt"},{"{ awk '/^[ \\t]*$/ {next} {sub(/\\/+$/, \"\");gsub(/\\/+/, \"/\")}!x[$0]++' ;}": "abs-guide.txt"},{"# Rebuild list of items into ':' separated word (PATH-like).": "abs-guide.txt"},{"function p_build() { paste -sd: ;}": "abs-guide.txt"},{"# Clean $1 (typically PATH) and rebuild it": "abs-guide.txt"},{"function p_clean()": "abs-guide.txt"},{"{ local p=${1} && eval ${p}='$(p_show ${p} | p_filter | p_build)' ;}": "abs-guide.txt"},{"# Remove $1 from $2 (found on stackoverflow, with modifications).": "abs-guide.txt"},{"function p_rm()": "abs-guide.txt"},{"{ local d=$(echo $1 | p_filter) p=${2} &&": "abs-guide.txt"},{"eval ${p}='$(p_show ${p} | p_filter | grep -xv \"${d}\" | p_build)' ;}": "abs-guide.txt"},{"# Same as previous, but filters on a pattern (dangerous...": "abs-guide.txt"},{"#+ don't use 'bin' or '/' as pattern!).": "abs-guide.txt"},{"function p_rmpat()": "abs-guide.txt"},{"{ local d=$(echo $1 | p_filter) p=${2} && eval ${p}='$(p_show ${p} |": "abs-guide.txt"},{"p_filter | grep -v \"${d}\" | p_build)' ;}": "abs-guide.txt"},{"# Delete $1 from $2 and append it cleanly.": "abs-guide.txt"},{"function p_append()": "abs-guide.txt"},{"{ local d=$(echo $1 | p_filter) p=${2} && p_rm \"${d}\" ${p} &&": "abs-guide.txt"},{"eval ${p}='$(p_show ${p} d | p_build)' ;}": "abs-guide.txt"},{"# Delete $1 from $2 and prepend it cleanly.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix D. Parsing and Managing Pathnames": "abs-guide.txt"},{"": "abs-guide.txt"},{"798": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"function p_prepend()": "abs-guide.txt"},{"{ local d=$(echo $1 | p_filter) p=${2} && p_rm \"${d}\" ${p} &&": "abs-guide.txt"},{"eval ${p}='$(p_show d ${p} | p_build)' ;}": "abs-guide.txt"},{"# Some tests:": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"MYPATH=\"/bin:/usr/bin/:/bin://bin/\"": "abs-guide.txt"},{"p_append \"/project//my project/bin\" MYPATH": "abs-guide.txt"},{"echo \"Append '/project//my project/bin' to '/bin:/usr/bin/:/bin://bin/'\"": "abs-guide.txt"},{"echo \"(result should be: /bin:/usr/bin:/project/my project/bin)\"": "abs-guide.txt"},{"echo $MYPATH": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"MYOTHERPATH=\"/bin:/usr/bin/:/bin:/project//my project/bin\"": "abs-guide.txt"},{"p_prepend \"/project//my project/bin\" MYOTHERPATH": "abs-guide.txt"},{"echo \"Prepend '/project//my project/bin' \\": "abs-guide.txt"},{"to '/bin:/usr/bin/:/bin:/project//my project/bin/'\"": "abs-guide.txt"},{"echo \"(result should be: /project/my project/bin:/bin:/usr/bin)\"": "abs-guide.txt"},{"echo $MYOTHERPATH": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"p_prepend \"/project//my project/bin\" FOOPATH # FOOPATH doesn't exist.": "abs-guide.txt"},{"echo \"Prepend '/project//my project/bin' to an unset variable\"": "abs-guide.txt"},{"echo \"(result should be: /project/my project/bin)\"": "abs-guide.txt"},{"echo $FOOPATH": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"BARPATH=\"/a:/b/://b c://a:/my local pub\"": "abs-guide.txt"},{"p_clean BARPATH": "abs-guide.txt"},{"echo \"Clean BARPATH='/a:/b/://b c://a:/my local pub'\"": "abs-guide.txt"},{"echo \"(result should be: /a:/b:/b c:/my local pub)\"": "abs-guide.txt"},{"echo $BARPATH": "abs-guide.txt"},{"": "abs-guide.txt"},{"***": "abs-guide.txt"},{"David Wheeler kindly permitted me to use his instructive examples.": "abs-guide.txt"},{"Doing it correctly: A quick summary": "abs-guide.txt"},{"by David Wheeler": "abs-guide.txt"},{"http://www.dwheeler.com/essays/filenames-in-shell.html": "abs-guide.txt"},{"So, how can you process filenames correctly in shell? Here's a quick": "abs-guide.txt"},{"summary about how to do it correctly, for the impatient who \"just want the": "abs-guide.txt"},{"answer\". In short: Double-quote to use \"$variable\" instead of $variable,": "abs-guide.txt"},{"set IFS to just newline and tab, prefix all globs/filenames so they cannot": "abs-guide.txt"},{"begin with \"-\" when expanded, and use one of a few templates that work": "abs-guide.txt"},{"correctly. Here are some of those templates that work correctly:": "abs-guide.txt"},{"": "abs-guide.txt"},{"IFS=\"$(printf '\\n\\t')\"": "abs-guide.txt"},{"# Remove SPACE, so filenames with spaces work well.": "abs-guide.txt"},{"# Correct glob use:": "abs-guide.txt"},{"#+ always use \"for\" loop, prefix glob, check for existence:": "abs-guide.txt"},{"for file in ./* ; do": "abs-guide.txt"},{"# Use \"./*\" ... NEVER bare \"*\" ...": "abs-guide.txt"},{"if [ -e \"$file\" ] ; then": "abs-guide.txt"},{"# Make sure it isn't an empty match.": "abs-guide.txt"},{"COMMAND ... \"$file\" ...": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"done": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix D. Parsing and Managing Pathnames": "abs-guide.txt"},{"": "abs-guide.txt"},{"799": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# Correct glob use, but requires nonstandard bash extension.": "abs-guide.txt"},{"shopt -s nullglob # Bash extension,": "abs-guide.txt"},{"#+ so that empty glob matches will work.": "abs-guide.txt"},{"for file in ./* ; do": "abs-guide.txt"},{"# Use \"./*\", NEVER bare \"*\"": "abs-guide.txt"},{"COMMAND ... \"$file\" ...": "abs-guide.txt"},{"done": "abs-guide.txt"},{"": "abs-guide.txt"},{"# These handle all filenames correctly;": "abs-guide.txt"},{"#+ can be unwieldy if COMMAND is large:": "abs-guide.txt"},{"find ... -exec COMMAND... {} \\;": "abs-guide.txt"},{"find ... -exec COMMAND... {} \\+ # If multiple files are okay for COMMAND.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# This skips filenames with control characters": "abs-guide.txt"},{"#+ (including tab and newline).": "abs-guide.txt"},{"IFS=\"$(printf '\\n\\t')\"": "abs-guide.txt"},{"controlchars=\"$(printf '*[\\001-\\037\\177]*')\"": "abs-guide.txt"},{"for file in $(find . ! -name \"$controlchars\"') ; do": "abs-guide.txt"},{"COMMAND \"$file\" ...": "abs-guide.txt"},{"done": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Okay if filenames can't contain tabs or newlines -#+ beware the assumption.": "abs-guide.txt"},{"IFS=\"$(printf '\\n\\t')\"": "abs-guide.txt"},{"for file in $(find .) ; do": "abs-guide.txt"},{"COMMAND \"$file\" ...": "abs-guide.txt"},{"done": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Requires nonstandard but common extensions in find and xargs:": "abs-guide.txt"},{"find . -print0 | xargs -0 COMMAND": "abs-guide.txt"},{"# Requires nonstandard extensions to find and to shell (bash works).": "abs-guide.txt"},{"# variables might not stay set once the loop ends:": "abs-guide.txt"},{"find . -print0 | while IFS=\"\" read -r -d \"\" file ; do ...": "abs-guide.txt"},{"COMMAND \"$file\" # Use quoted \"$file\", not $file, everywhere.": "abs-guide.txt"},{"done": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"Requires nonstandard extensions to find and to shell (bash works).": "abs-guide.txt"},{"Underlying system must include named pipes (FIFOs)": "abs-guide.txt"},{"or the /dev/fd mechanism.": "abs-guide.txt"},{"In this version, variables *do* stay set after the loop ends,": "abs-guide.txt"},{"and you can read from stdin.": "abs-guide.txt"},{"(Change the 4 to another number if fd 4 is needed.)": "abs-guide.txt"},{"": "abs-guide.txt"},{"while IFS=\"\" read -r -d \"\" file <&4 ; do": "abs-guide.txt"},{"COMMAND \"$file\"": "abs-guide.txt"},{"# Use quoted \"$file\" -- not $file, everywhere.": "abs-guide.txt"},{"done 4< <(find . -print0)": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Named pipe version.": "abs-guide.txt"},{"Requires nonstandard extensions to find and to shell's read (bash ok).": "abs-guide.txt"},{"Underlying system must include named pipes (FIFOs).": "abs-guide.txt"},{"Again, in this version, variables *do* stay set after the loop ends,": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix D. Parsing and Managing Pathnames": "abs-guide.txt"},{"": "abs-guide.txt"},{"800": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# and you can read from stdin.": "abs-guide.txt"},{"# (Change the 4 to something else if fd 4 needed).": "abs-guide.txt"},{"mkfifo mypipe": "abs-guide.txt"},{"find . -print0 > mypipe &": "abs-guide.txt"},{"while IFS=\"\" read -r -d \"\" file <&4 ; do": "abs-guide.txt"},{"COMMAND \"$file\" # Use quoted \"$file\", not $file, everywhere.": "abs-guide.txt"},{"done 4< mypipe": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix D. Parsing and Managing Pathnames": "abs-guide.txt"},{"": "abs-guide.txt"},{"801": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAppendix E. Exit Codes With Special Meanings": "abs-guide.txt"},{"Table E-1. Reserved Exit Codes": "abs-guide.txt"},{"Exit Code": "abs-guide.txt"},{"Number": "abs-guide.txt"},{"1": "abs-guide.txt"},{"": "abs-guide.txt"},{"Meaning": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example": "abs-guide.txt"},{"": "abs-guide.txt"},{"Comments": "abs-guide.txt"},{"": "abs-guide.txt"},{"Catchall for general errors": "abs-guide.txt"},{"": "abs-guide.txt"},{"let \"var1 = 1/0\"": "abs-guide.txt"},{"empty_function()": "abs-guide.txt"},{"{}": "abs-guide.txt"},{"": "abs-guide.txt"},{"127": "abs-guide.txt"},{"128": "abs-guide.txt"},{"": "abs-guide.txt"},{"Misuse of shell builtins": "abs-guide.txt"},{"(according to Bash": "abs-guide.txt"},{"documentation)": "abs-guide.txt"},{"Command invoked cannot": "abs-guide.txt"},{"execute": "abs-guide.txt"},{"\"command not found\"": "abs-guide.txt"},{"Invalid argument to exit": "abs-guide.txt"},{"": "abs-guide.txt"},{"128+n": "abs-guide.txt"},{"": "abs-guide.txt"},{"Fatal error signal \"n\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"kill -9 $PPID of": "abs-guide.txt"},{"script": "abs-guide.txt"},{"Ctl-C": "abs-guide.txt"},{"": "abs-guide.txt"},{"Miscellaneous errors, such as \"divide by": "abs-guide.txt"},{"zero\" and other impermissible operations": "abs-guide.txt"},{"Missing keyword or command, or": "abs-guide.txt"},{"permission problem (and diff return code on": "abs-guide.txt"},{"a failed binary file comparison).": "abs-guide.txt"},{"Permission problem or command is not an": "abs-guide.txt"},{"executable": "abs-guide.txt"},{"Possible problem with $PATH or a typo": "abs-guide.txt"},{"exit takes only integer args in the range 0 255 (see first footnote)": "abs-guide.txt"},{"$? returns 137 (128 + 9)": "abs-guide.txt"},{"": "abs-guide.txt"},{"2": "abs-guide.txt"},{"": "abs-guide.txt"},{"126": "abs-guide.txt"},{"": "abs-guide.txt"},{"illegal_command": "abs-guide.txt"},{"exit 3.14159": "abs-guide.txt"},{"": "abs-guide.txt"},{"Control-C is fatal error signal 2, (130 = 128": "abs-guide.txt"},{"+ 2, see above)": "abs-guide.txt"},{"255*": "abs-guide.txt"},{"exit -1": "abs-guide.txt"},{"exit takes only integer args in the range 0 255": "abs-guide.txt"},{"According to the above table, exit codes 1 - 2, 126 - 165, and 255 [144] have special meanings, and should": "abs-guide.txt"},{"therefore be avoided for user-specified exit parameters. Ending a script with exit 127 would certainly cause": "abs-guide.txt"},{"confusion when troubleshooting (is the error code a \"command not found\" or a user-defined one?). However,": "abs-guide.txt"},{"many scripts use an exit 1 as a general bailout-upon-error. Since exit code 1 signifies so many possible errors,": "abs-guide.txt"},{"it is not particularly useful in debugging.": "abs-guide.txt"},{"130": "abs-guide.txt"},{"": "abs-guide.txt"},{"Script terminated by": "abs-guide.txt"},{"Control-C": "abs-guide.txt"},{"Exit status out of range": "abs-guide.txt"},{"": "abs-guide.txt"},{"/dev/null": "abs-guide.txt"},{"": "abs-guide.txt"},{"There has been an attempt to systematize exit status numbers (see /usr/include/sysexits.h), but this": "abs-guide.txt"},{"is intended for C and C++ programmers. A similar standard for scripting might be appropriate. The author of": "abs-guide.txt"},{"this document proposes restricting user-defined exit codes to the range 64 - 113 (in addition to 0, for success),": "abs-guide.txt"},{"to conform with the C/C++ standard. This would allot 50 valid codes, and make troubleshooting scripts more": "abs-guide.txt"},{"straightforward. [145] All user-defined exit codes in the accompanying examples to this document conform to": "abs-guide.txt"},{"this standard, except where overriding circumstances exist, as in Example 9-2.": "abs-guide.txt"},{"Issuing a $? from the command-line after a shell script exits gives results consistent with the table above": "abs-guide.txt"},{"only from the Bash or sh prompt. Running the C-shell or tcsh may give different values in some cases.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix E. Exit Codes With Special Meanings": "abs-guide.txt"},{"": "abs-guide.txt"},{"802": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAppendix F. A Detailed Introduction to I/O and I/O": "abs-guide.txt"},{"Redirection": "abs-guide.txt"},{"written by St\u00e9phane Chazelas, and revised by the document author": "abs-guide.txt"},{"": "abs-guide.txt"},{"A command expects the first three file descriptors to be available. The first, fd 0 (standard input, stdin), is": "abs-guide.txt"},{"for reading. The other two (fd 1, stdout and fd 2, stderr) are for writing.": "abs-guide.txt"},{"There is a stdin, stdout, and a stderr associated with each command. ls 2>&1 means temporarily": "abs-guide.txt"},{"connecting the stderr of the ls command to the same \"resource\" as the shell's stdout.": "abs-guide.txt"},{"By convention, a command reads its input from fd 0 (stdin), prints normal output to fd 1 (stdout), and": "abs-guide.txt"},{"error ouput to fd 2 (stderr). If one of those three fd's is not open, you may encounter problems:": "abs-guide.txt"},{"bash$ cat /etc/passwd >&cat: standard output: Bad file descriptor": "abs-guide.txt"},{"": "abs-guide.txt"},{"For example, when xterm runs, it first initializes itself. Before running the user's shell, xterm opens the": "abs-guide.txt"},{"terminal device (/dev/pts/<n> or something similar) three times.": "abs-guide.txt"},{"At this point, Bash inherits these three file descriptors, and each command (child process) run by Bash inherits": "abs-guide.txt"},{"them in turn, except when you redirect the command. Redirection means reassigning one of the file": "abs-guide.txt"},{"descriptors to another file (or a pipe, or anything permissible). File descriptors may be reassigned locally (for": "abs-guide.txt"},{"a command, a command group, a subshell, a while or if or case or for loop...), or globally, for the remainder of": "abs-guide.txt"},{"the shell (using exec).": "abs-guide.txt"},{"ls > /dev/null means running ls with its fd 1 connected to /dev/null.": "abs-guide.txt"},{"bash$ lsof -a -p $$ -d0,1,2": "abs-guide.txt"},{"COMMAND PID": "abs-guide.txt"},{"USER": "abs-guide.txt"},{"FD": "abs-guide.txt"},{"TYPE DEVICE SIZE NODE NAME": "abs-guide.txt"},{"bash": "abs-guide.txt"},{"363 bozo": "abs-guide.txt"},{"0u": "abs-guide.txt"},{"CHR 136,1": "abs-guide.txt"},{"3 /dev/pts/1": "abs-guide.txt"},{"bash": "abs-guide.txt"},{"363 bozo": "abs-guide.txt"},{"1u": "abs-guide.txt"},{"CHR 136,1": "abs-guide.txt"},{"3 /dev/pts/1": "abs-guide.txt"},{"bash": "abs-guide.txt"},{"363 bozo": "abs-guide.txt"},{"2u": "abs-guide.txt"},{"CHR 136,1": "abs-guide.txt"},{"3 /dev/pts/1": "abs-guide.txt"},{"": "abs-guide.txt"},{"bash$ exec 2> /dev/null": "abs-guide.txt"},{"bash$ lsof -a -p $$ -d0,1,2": "abs-guide.txt"},{"COMMAND PID": "abs-guide.txt"},{"USER": "abs-guide.txt"},{"FD": "abs-guide.txt"},{"TYPE DEVICE SIZE NODE NAME": "abs-guide.txt"},{"bash": "abs-guide.txt"},{"371 bozo": "abs-guide.txt"},{"0u": "abs-guide.txt"},{"CHR 136,1": "abs-guide.txt"},{"3 /dev/pts/1": "abs-guide.txt"},{"bash": "abs-guide.txt"},{"371 bozo": "abs-guide.txt"},{"1u": "abs-guide.txt"},{"CHR 136,1": "abs-guide.txt"},{"3 /dev/pts/1": "abs-guide.txt"},{"bash": "abs-guide.txt"},{"371 bozo": "abs-guide.txt"},{"2w": "abs-guide.txt"},{"CHR": "abs-guide.txt"},{"1,3": "abs-guide.txt"},{"120 /dev/null": "abs-guide.txt"},{"": "abs-guide.txt"},{"bash$ bash -c 'lsof -a -p $$ -d0,1,2' | cat": "abs-guide.txt"},{"COMMAND PID USER": "abs-guide.txt"},{"FD": "abs-guide.txt"},{"TYPE DEVICE SIZE NODE NAME": "abs-guide.txt"},{"lsof": "abs-guide.txt"},{"379 root": "abs-guide.txt"},{"0u": "abs-guide.txt"},{"CHR 136,1": "abs-guide.txt"},{"3 /dev/pts/1": "abs-guide.txt"},{"lsof": "abs-guide.txt"},{"379 root": "abs-guide.txt"},{"1w FIFO": "abs-guide.txt"},{"0,0": "abs-guide.txt"},{"7118 pipe": "abs-guide.txt"},{"lsof": "abs-guide.txt"},{"379 root": "abs-guide.txt"},{"2u": "abs-guide.txt"},{"CHR 136,1": "abs-guide.txt"},{"3 /dev/pts/1": "abs-guide.txt"},{"": "abs-guide.txt"},{"bash$ echo \"$(bash -c 'lsof -a -p $$ -d0,1,2' 2>&1)\"": "abs-guide.txt"},{"COMMAND PID USER": "abs-guide.txt"},{"FD": "abs-guide.txt"},{"TYPE DEVICE SIZE NODE NAME": "abs-guide.txt"},{"lsof": "abs-guide.txt"},{"426 root": "abs-guide.txt"},{"0u": "abs-guide.txt"},{"CHR 136,1": "abs-guide.txt"},{"3 /dev/pts/1": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix F. A Detailed Introduction to I/O and I/O Redirection": "abs-guide.txt"},{"": "abs-guide.txt"},{"803": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"lsof": "abs-guide.txt"},{"lsof": "abs-guide.txt"},{"": "abs-guide.txt"},{"426 root": "abs-guide.txt"},{"426 root": "abs-guide.txt"},{"": "abs-guide.txt"},{"1w": "abs-guide.txt"},{"2w": "abs-guide.txt"},{"": "abs-guide.txt"},{"FIFO": "abs-guide.txt"},{"FIFO": "abs-guide.txt"},{"": "abs-guide.txt"},{"0,0": "abs-guide.txt"},{"0,0": "abs-guide.txt"},{"": "abs-guide.txt"},{"7520 pipe": "abs-guide.txt"},{"7520 pipe": "abs-guide.txt"},{"": "abs-guide.txt"},{"This works for different types of redirection.": "abs-guide.txt"},{"Exercise: Analyze the following script.": "abs-guide.txt"},{"#! /usr/bin/env bash": "abs-guide.txt"},{"mkfifo /tmp/fifo1 /tmp/fifo2": "abs-guide.txt"},{"while read a; do echo \"FIFO1: $a\"; done < /tmp/fifo1 & exec 7> /tmp/fifo1": "abs-guide.txt"},{"exec 8> >(while read a; do echo \"FD8: $a, to fd7\"; done >&7)": "abs-guide.txt"},{"exec 3>&1": "abs-guide.txt"},{"(": "abs-guide.txt"},{"(": "abs-guide.txt"},{"(": "abs-guide.txt"},{"while read a; do echo \"FIFO2: $a\"; done < /tmp/fifo2 | tee /dev/stderr \\": "abs-guide.txt"},{"| tee /dev/fd/4 | tee /dev/fd/5 | tee /dev/fd/6 >&7 & exec 3> /tmp/fifo2": "abs-guide.txt"},{"echo 1st,": "abs-guide.txt"},{"sleep 1": "abs-guide.txt"},{"echo 2nd,": "abs-guide.txt"},{"sleep 1": "abs-guide.txt"},{"echo 3rd,": "abs-guide.txt"},{"sleep 1": "abs-guide.txt"},{"echo 4th,": "abs-guide.txt"},{"sleep 1": "abs-guide.txt"},{"echo 5th,": "abs-guide.txt"},{"sleep 1": "abs-guide.txt"},{"echo 6th,": "abs-guide.txt"},{"sleep 1": "abs-guide.txt"},{"echo 7th,": "abs-guide.txt"},{"sleep 1": "abs-guide.txt"},{"echo 8th,": "abs-guide.txt"},{"sleep 1": "abs-guide.txt"},{"echo 9th,": "abs-guide.txt"},{"": "abs-guide.txt"},{"to stdout": "abs-guide.txt"},{"to stderr >&2": "abs-guide.txt"},{"to fd 3 >&3": "abs-guide.txt"},{"to fd 4 >&4": "abs-guide.txt"},{"to fd 5 >&5": "abs-guide.txt"},{"through a pipe | sed 's/.*/PIPE: &, to fd 5/' >&5": "abs-guide.txt"},{"to fd 6 >&6": "abs-guide.txt"},{"to fd 7 >&7": "abs-guide.txt"},{"to fd 8 >&8": "abs-guide.txt"},{"": "abs-guide.txt"},{") 4>&1 >&3 3>&- | while read a; do echo \"FD4: $a\"; done 1>&3 5>&- 6>&) 5>&1 >&3 | while read a; do echo \"FD5: $a\"; done 1>&3 6>&) 6>&1 >&3 | while read a; do echo \"FD6: $a\"; done 3>&rm -f /tmp/fifo1 /tmp/fifo2": "abs-guide.txt"},{"": "abs-guide.txt"},{"# For each command and subshell, figure out which fd points to what.": "abs-guide.txt"},{"# Good luck!": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix F. A Detailed Introduction to I/O and I/O Redirection": "abs-guide.txt"},{"": "abs-guide.txt"},{"804": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAppendix G. Command-Line Options": "abs-guide.txt"},{"Many executables, whether binaries or script files, accept options to modify their run-time behavior. For": "abs-guide.txt"},{"example: from the command-line, typing command -o would invoke command, with option o.": "abs-guide.txt"},{"": "abs-guide.txt"},{"G.1. Standard Command-Line Options": "abs-guide.txt"},{"Over time, there has evolved a loose standard for the meanings of command-line option flags. The GNU": "abs-guide.txt"},{"utilities conform more closely to this \"standard\" than older UNIX utilities.": "abs-guide.txt"},{"Traditionally, UNIX command-line options consist of a dash, followed by one or more lowercase letters. The": "abs-guide.txt"},{"GNU utilities added a double-dash, followed by a complete word or compound word.": "abs-guide.txt"},{"The two most widely-accepted options are:": "abs-guide.txt"},{"\u2022 -h": "abs-guide.txt"},{"--help": "abs-guide.txt"},{"Help: Give usage message and exit.": "abs-guide.txt"},{"\u2022 -v": "abs-guide.txt"},{"--version": "abs-guide.txt"},{"Version: Show program version and exit.": "abs-guide.txt"},{"Other common options are:": "abs-guide.txt"},{"\u2022 -a": "abs-guide.txt"},{"--all": "abs-guide.txt"},{"All: show all information or operate on all arguments.": "abs-guide.txt"},{"\u2022 -l": "abs-guide.txt"},{"--list": "abs-guide.txt"},{"List: list files or arguments without taking other action.": "abs-guide.txt"},{"\u2022 -o": "abs-guide.txt"},{"Output filename": "abs-guide.txt"},{"\u2022 -q": "abs-guide.txt"},{"--quiet": "abs-guide.txt"},{"Quiet: suppress stdout.": "abs-guide.txt"},{"\u2022 -r": "abs-guide.txt"},{"-R": "abs-guide.txt"},{"Appendix G. Command-Line Options": "abs-guide.txt"},{"": "abs-guide.txt"},{"805": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"--recursive": "abs-guide.txt"},{"Recursive: Operate recursively (down directory tree).": "abs-guide.txt"},{"\u2022 -v": "abs-guide.txt"},{"--verbose": "abs-guide.txt"},{"Verbose: output additional information to stdout or stderr.": "abs-guide.txt"},{"\u2022 -z": "abs-guide.txt"},{"--compress": "abs-guide.txt"},{"Compress: apply compression (usually gzip).": "abs-guide.txt"},{"However:": "abs-guide.txt"},{"\u2022 In tar and gawk:": "abs-guide.txt"},{"-f": "abs-guide.txt"},{"--file": "abs-guide.txt"},{"File: filename follows.": "abs-guide.txt"},{"\u2022 In cp, mv, rm:": "abs-guide.txt"},{"-f": "abs-guide.txt"},{"--force": "abs-guide.txt"},{"Force: force overwrite of target file(s).": "abs-guide.txt"},{"Many UNIX and Linux utilities deviate from this \"standard,\" so it is dangerous to assume that a given": "abs-guide.txt"},{"option will behave in a standard way. Always check the man page for the command in question when in": "abs-guide.txt"},{"doubt.": "abs-guide.txt"},{"A complete table of recommended options for the GNU utilities is available at the GNU standards page.": "abs-guide.txt"},{"": "abs-guide.txt"},{"G.2. Bash Command-Line Options": "abs-guide.txt"},{"Bash itself has a number of command-line options. Here are some of the more useful ones.": "abs-guide.txt"},{"\u2022 -c": "abs-guide.txt"},{"Read commands from the following string and assign any arguments to the positional parameters.": "abs-guide.txt"},{"bash$ bash -c 'set a b c d; IFS=\"+-;\"; echo \"$*\"'": "abs-guide.txt"},{"a+b+c+d": "abs-guide.txt"},{"": "abs-guide.txt"},{"\u2022 -r": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix G. Command-Line Options": "abs-guide.txt"},{"": "abs-guide.txt"},{"806": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"--restricted": "abs-guide.txt"},{"Runs the shell, or a script, in restricted mode.": "abs-guide.txt"},{"\u2022 --posix": "abs-guide.txt"},{"Forces Bash to conform to POSIX mode.": "abs-guide.txt"},{"\u2022 --version": "abs-guide.txt"},{"Display Bash version information and exit.": "abs-guide.txt"},{"\u2022 -End of options. Anything further on the command line is an argument, not an option.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix G. Command-Line Options": "abs-guide.txt"},{"": "abs-guide.txt"},{"807": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAppendix H. Important Files": "abs-guide.txt"},{"startup files": "abs-guide.txt"},{"These files contain the aliases and environmental variables made available to Bash running as a user": "abs-guide.txt"},{"shell and to all Bash scripts invoked after system initialization.": "abs-guide.txt"},{"/etc/profile": "abs-guide.txt"},{"Systemwide defaults, mostly setting the environment (all Bourne-type shells, not just Bash [146])": "abs-guide.txt"},{"/etc/bashrc": "abs-guide.txt"},{"systemwide functions and aliases for Bash": "abs-guide.txt"},{"$HOME/.bash_profile": "abs-guide.txt"},{"user-specific Bash environmental default settings, found in each user's home directory (the local": "abs-guide.txt"},{"counterpart to /etc/profile)": "abs-guide.txt"},{"$HOME/.bashrc": "abs-guide.txt"},{"user-specific Bash init file, found in each user's home directory (the local counterpart to": "abs-guide.txt"},{"/etc/bashrc). Only interactive shells and user scripts read this file. See Appendix M for a sample": "abs-guide.txt"},{".bashrc file.": "abs-guide.txt"},{"logout file": "abs-guide.txt"},{"$HOME/.bash_logout": "abs-guide.txt"},{"user-specific instruction file, found in each user's home directory. Upon exit from a login (Bash) shell,": "abs-guide.txt"},{"the commands in this file execute.": "abs-guide.txt"},{"data files": "abs-guide.txt"},{"/etc/passwd": "abs-guide.txt"},{"A listing of all the user accounts on the system, their identities, their home directories, the groups they": "abs-guide.txt"},{"belong to, and their default shell. Note that the user passwords are not stored in this file, [147] but in": "abs-guide.txt"},{"/etc/shadow in encrypted form.": "abs-guide.txt"},{"system configuration files": "abs-guide.txt"},{"/etc/sysconfig/hwconf": "abs-guide.txt"},{"Listing and description of attached hardware devices. This information is in text form and can be": "abs-guide.txt"},{"extracted and parsed.": "abs-guide.txt"},{"bash$ grep -A 5 AUDIO /etc/sysconfig/hwconf": "abs-guide.txt"},{"class: AUDIO": "abs-guide.txt"},{"bus: PCI": "abs-guide.txt"},{"detached: 0": "abs-guide.txt"},{"driver: snd-intel8x0": "abs-guide.txt"},{"desc: \"Intel Corporation 82801CA/CAM AC'97 Audio Controller\"": "abs-guide.txt"},{"vendorId: 8086": "abs-guide.txt"},{"": "abs-guide.txt"},{"This file is present on Red Hat and Fedora Core installations, but may be missing from": "abs-guide.txt"},{"other distros.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix H. Important Files": "abs-guide.txt"},{"": "abs-guide.txt"},{"808": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAppendix I. Important System Directories": "abs-guide.txt"},{"Sysadmins and anyone else writing administrative scripts should be intimately familiar with the following": "abs-guide.txt"},{"system directories.": "abs-guide.txt"},{"\u2022 /bin": "abs-guide.txt"},{"Binaries (executables). Basic system programs and utilities (such as bash).": "abs-guide.txt"},{"\u2022 /usr/bin [148]": "abs-guide.txt"},{"More system binaries.": "abs-guide.txt"},{"\u2022 /usr/local/bin": "abs-guide.txt"},{"Miscellaneous binaries local to the particular machine.": "abs-guide.txt"},{"\u2022 /sbin": "abs-guide.txt"},{"System binaries. Basic system administrative programs and utilities (such as fsck).": "abs-guide.txt"},{"\u2022 /usr/sbin": "abs-guide.txt"},{"More system administrative programs and utilities.": "abs-guide.txt"},{"\u2022 /etc": "abs-guide.txt"},{"Et cetera. Systemwide configuration scripts.": "abs-guide.txt"},{"Of particular interest are the /etc/fstab (filesystem table), /etc/mtab (mounted filesystem": "abs-guide.txt"},{"table), and the /etc/inittab files.": "abs-guide.txt"},{"\u2022 /etc/rc.d": "abs-guide.txt"},{"Boot scripts, on Red Hat and derivative distributions of Linux.": "abs-guide.txt"},{"\u2022 /usr/share/doc": "abs-guide.txt"},{"Documentation for installed packages.": "abs-guide.txt"},{"\u2022 /usr/man": "abs-guide.txt"},{"The systemwide manpages.": "abs-guide.txt"},{"\u2022 /dev": "abs-guide.txt"},{"Device directory. Entries (but not mount points) for physical and virtual devices. See Chapter 29.": "abs-guide.txt"},{"\u2022 /proc": "abs-guide.txt"},{"Process directory. Contains information and statistics about running processes and kernel parameters.": "abs-guide.txt"},{"See Chapter 29.": "abs-guide.txt"},{"\u2022 /sys": "abs-guide.txt"},{"Systemwide device directory. Contains information and statistics about device and device names. This": "abs-guide.txt"},{"is newly added to Linux with the 2.6.X kernels.": "abs-guide.txt"},{"\u2022 /mnt": "abs-guide.txt"},{"Mount. Directory for mounting hard drive partitions, such as /mnt/dos, and physical devices. In": "abs-guide.txt"},{"newer Linux distros, the /media directory has taken over as the preferred mount point for I/O": "abs-guide.txt"},{"Appendix I. Important System Directories": "abs-guide.txt"},{"": "abs-guide.txt"},{"809": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"devices.": "abs-guide.txt"},{"\u2022 /media": "abs-guide.txt"},{"In newer Linux distros, the preferred mount point for I/O devices, such as CD/DVD drives or USB": "abs-guide.txt"},{"flash drives.": "abs-guide.txt"},{"\u2022 /var": "abs-guide.txt"},{"Variable (changeable) system files. This is a catchall \"scratchpad\" directory for data generated while": "abs-guide.txt"},{"a Linux/UNIX machine is running.": "abs-guide.txt"},{"\u2022 /var/log": "abs-guide.txt"},{"Systemwide log files.": "abs-guide.txt"},{"\u2022 /var/spool/mail": "abs-guide.txt"},{"User mail spool.": "abs-guide.txt"},{"\u2022 /lib": "abs-guide.txt"},{"Systemwide library files.": "abs-guide.txt"},{"\u2022 /usr/lib": "abs-guide.txt"},{"More systemwide library files.": "abs-guide.txt"},{"\u2022 /tmp": "abs-guide.txt"},{"System temporary files.": "abs-guide.txt"},{"\u2022 /boot": "abs-guide.txt"},{"System boot directory. The kernel, module links, system map, and boot manager reside here.": "abs-guide.txt"},{"Altering files in this directory may result in an unbootable system.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix I. Important System Directories": "abs-guide.txt"},{"": "abs-guide.txt"},{"810": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAppendix J. An Introduction to Programmable": "abs-guide.txt"},{"Completion": "abs-guide.txt"},{"The programmable completion feature in Bash permits typing a partial command, then pressing the [Tab] key": "abs-guide.txt"},{"to auto-complete the command sequence. [149] If multiple completions are possible, then [Tab] lists them all.": "abs-guide.txt"},{"Let's see how it works.": "abs-guide.txt"},{"bash$ xtra[Tab]": "abs-guide.txt"},{"xtraceroute": "abs-guide.txt"},{"xtrapin": "abs-guide.txt"},{"xtraceroute.real xtrapinfo": "abs-guide.txt"},{"xtrapchar": "abs-guide.txt"},{"xtrapout": "abs-guide.txt"},{"": "abs-guide.txt"},{"bash$ xtrac[Tab]": "abs-guide.txt"},{"xtraceroute": "abs-guide.txt"},{"": "abs-guide.txt"},{"xtrapproto": "abs-guide.txt"},{"xtrapreset": "abs-guide.txt"},{"xtrapstats": "abs-guide.txt"},{"": "abs-guide.txt"},{"xtraceroute.real": "abs-guide.txt"},{"": "abs-guide.txt"},{"bash$ xtraceroute.r[Tab]": "abs-guide.txt"},{"xtraceroute.real": "abs-guide.txt"},{"": "abs-guide.txt"},{"Tab completion also works for variables and path names.": "abs-guide.txt"},{"bash$ echo $BASH[Tab]": "abs-guide.txt"},{"$BASH": "abs-guide.txt"},{"$BASH_COMPLETION": "abs-guide.txt"},{"$BASH_SUBSHELL": "abs-guide.txt"},{"$BASH_ARGC": "abs-guide.txt"},{"$BASH_COMPLETION_DIR $BASH_VERSINFO": "abs-guide.txt"},{"$BASH_ARGV": "abs-guide.txt"},{"$BASH_LINENO": "abs-guide.txt"},{"$BASH_VERSION": "abs-guide.txt"},{"$BASH_COMMAND": "abs-guide.txt"},{"$BASH_SOURCE": "abs-guide.txt"},{"": "abs-guide.txt"},{"bash$ echo /usr/local/[Tab]": "abs-guide.txt"},{"bin/": "abs-guide.txt"},{"etc/": "abs-guide.txt"},{"include/ libexec/ sbin/": "abs-guide.txt"},{"doc/": "abs-guide.txt"},{"games/": "abs-guide.txt"},{"lib/": "abs-guide.txt"},{"man/": "abs-guide.txt"},{"share/": "abs-guide.txt"},{"": "abs-guide.txt"},{"src/": "abs-guide.txt"},{"": "abs-guide.txt"},{"The Bash complete and compgen builtins make it possible for tab completion to recognize partial parameters": "abs-guide.txt"},{"and options to commands. In a very simple case, we can use complete from the command-line to specify a": "abs-guide.txt"},{"short list of acceptable parameters.": "abs-guide.txt"},{"bash$": "abs-guide.txt"},{"bash$": "abs-guide.txt"},{"bash$": "abs-guide.txt"},{"bash$": "abs-guide.txt"},{"": "abs-guide.txt"},{"touch sample_command": "abs-guide.txt"},{"touch file1.txt file2.txt file2.doc file30.txt file4.zzz": "abs-guide.txt"},{"chmod +x sample_command": "abs-guide.txt"},{"complete -f -X '!*.txt' sample_command": "abs-guide.txt"},{"": "abs-guide.txt"},{"bash$ ./sample[Tab][Tab]": "abs-guide.txt"},{"sample_command": "abs-guide.txt"},{"file1.txt": "abs-guide.txt"},{"file2.txt": "abs-guide.txt"},{"file30.txt": "abs-guide.txt"},{"": "abs-guide.txt"},{"The -f option to complete specifies filenames, and -X the filter pattern.": "abs-guide.txt"},{"": "abs-guide.txt"},{"For anything more complex, we could write a script that specifies a list of acceptable command-line": "abs-guide.txt"},{"parameters. The compgen builtin expands a list of arguments to generate completion matches.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix J. An Introduction to Programmable Completion": "abs-guide.txt"},{"": "abs-guide.txt"},{"811": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"Let us take a modified version of the UseGetOpt.sh script as an example command. This script accepts a": "abs-guide.txt"},{"number of command-line parameters, preceded by either a single or double dash. And here is the": "abs-guide.txt"},{"corresponding completion script, by convention given a filename corresponding to its associated command.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example J-1. Completion script for UseGetOpt.sh": "abs-guide.txt"},{"# file: UseGetOpt-2": "abs-guide.txt"},{"# UseGetOpt-2.sh parameter-completion": "abs-guide.txt"},{"_UseGetOpt-2 ()": "abs-guide.txt"},{"# By convention, the function name": "abs-guide.txt"},{"{": "abs-guide.txt"},{"#+ starts with an underscore.": "abs-guide.txt"},{"local cur": "abs-guide.txt"},{"# Pointer to current completion word.": "abs-guide.txt"},{"# By convention, it's named \"cur\" but this isn't strictly necessary.": "abs-guide.txt"},{"COMPREPLY=()": "abs-guide.txt"},{"# Array variable storing the possible completions.": "abs-guide.txt"},{"cur=${COMP_WORDS[COMP_CWORD]}": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"case \"$cur\" in": "abs-guide.txt"},{"-*)": "abs-guide.txt"},{"COMPREPLY=( $( compgen -W '-a -d -f -l -t -h --aoption --debug \\": "abs-guide.txt"},{"--file --log --test --help --' -- $cur ) );;": "abs-guide.txt"},{"Generate the completion matches and load them into $COMPREPLY array.": "abs-guide.txt"},{"xx) May add more cases here.": "abs-guide.txt"},{"yy)": "abs-guide.txt"},{"zz)": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"return 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"complete -F _UseGetOpt-2 -o filenames ./UseGetOpt-2.sh": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^^ ^^^^^^^^^^^^ Invokes the function _UseGetOpt-2.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Now, let's try it.": "abs-guide.txt"},{"bash$ source UseGetOpt-2": "abs-guide.txt"},{"bash$ ./UseGetOpt-2.sh -[Tab]": "abs-guide.txt"},{"---aoption --debug": "abs-guide.txt"},{"-a": "abs-guide.txt"},{"-d": "abs-guide.txt"},{"-f": "abs-guide.txt"},{"": "abs-guide.txt"},{"--file": "abs-guide.txt"},{"-h": "abs-guide.txt"},{"": "abs-guide.txt"},{"--help": "abs-guide.txt"},{"-l": "abs-guide.txt"},{"": "abs-guide.txt"},{"--log": "abs-guide.txt"},{"-t": "abs-guide.txt"},{"": "abs-guide.txt"},{"--test": "abs-guide.txt"},{"": "abs-guide.txt"},{"bash$ ./UseGetOpt-2.sh --[Tab]": "abs-guide.txt"},{"---aoption --debug": "abs-guide.txt"},{"": "abs-guide.txt"},{"--file": "abs-guide.txt"},{"": "abs-guide.txt"},{"--help": "abs-guide.txt"},{"": "abs-guide.txt"},{"--log": "abs-guide.txt"},{"": "abs-guide.txt"},{"--test": "abs-guide.txt"},{"": "abs-guide.txt"},{"We begin by sourcing the \"completion script.\" This sets the command-line parameters. [150]": "abs-guide.txt"},{"In the first instance, hitting [Tab] after a single dash, the output is all the possible parameters preceded by one": "abs-guide.txt"},{"or more dashes. Hitting [Tab] after two dashes gives the possible parameters preceded by two or more dashes.": "abs-guide.txt"},{"Now, just what is the point of having to jump through flaming hoops to enable command-line tab completion?": "abs-guide.txt"},{"It saves keystrokes. [151]": "abs-guide.txt"},{"-Resources:": "abs-guide.txt"},{"Appendix J. An Introduction to Programmable Completion": "abs-guide.txt"},{"": "abs-guide.txt"},{"812": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"Bash programmable completion project": "abs-guide.txt"},{"Mitch Frazier's Linux Journal article, More on Using the Bash Complete Command": "abs-guide.txt"},{"Steve's excellent two-part article, \"An Introduction to Bash Completion\": Part 1 and Part 2": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix J. An Introduction to Programmable Completion": "abs-guide.txt"},{"": "abs-guide.txt"},{"813": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAppendix K. Localization": "abs-guide.txt"},{"Localization is an undocumented Bash feature.": "abs-guide.txt"},{"A localized shell script echoes its text output in the language defined as the system's locale. A Linux user in": "abs-guide.txt"},{"Berlin, Germany, would get script output in German, whereas his cousin in Berlin, Maryland, would get": "abs-guide.txt"},{"output from the same script in English.": "abs-guide.txt"},{"To create a localized script, use the following template to write all messages to the user (error messages,": "abs-guide.txt"},{"prompts, etc.).": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# localized.sh": "abs-guide.txt"},{"# Script by St\u00e9phane Chazelas,": "abs-guide.txt"},{"#+ modified by Bruno Haible, bugfixed by Alfredo Pironti.": "abs-guide.txt"},{". gettext.sh": "abs-guide.txt"},{"E_CDERROR=65": "abs-guide.txt"},{"error()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"printf \"$@\" >&2": "abs-guide.txt"},{"exit $E_CDERROR": "abs-guide.txt"},{"}": "abs-guide.txt"},{"cd $var || error \"`eval_gettext \\\"Can\\'t cd to \\\\\\$var.\\\"`\"": "abs-guide.txt"},{"# The triple backslashes (escapes) in front of $var needed": "abs-guide.txt"},{"#+ \"because eval_gettext expects a string": "abs-guide.txt"},{"#+ where the variable values have not yet been substituted.\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"-- per Bruno Haible": "abs-guide.txt"},{"read -p \"`gettext \\\"Enter the value: \\\"`\" var": "abs-guide.txt"},{"# ...": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"-----------------------------------------------------------------Alfredo Pironti comments:": "abs-guide.txt"},{"": "abs-guide.txt"},{"# This script has been modified to not use the $\"...\" syntax in": "abs-guide.txt"},{"#+ favor of the \"`gettext \\\"...\\\"`\" syntax.": "abs-guide.txt"},{"# This is ok, but with the new localized.sh program, the commands": "abs-guide.txt"},{"#+ \"bash -D filename\" and \"bash --dump-po-string filename\"": "abs-guide.txt"},{"#+ will produce no output": "abs-guide.txt"},{"#+ (because those command are only searching for the $\"...\" strings)!": "abs-guide.txt"},{"# The ONLY way to extract strings from the new file is to use the": "abs-guide.txt"},{"# 'xgettext' program. However, the xgettext program is buggy.": "abs-guide.txt"},{"# Note that 'xgettext' has another bug.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# The shell fragment:": "abs-guide.txt"},{"#": "abs-guide.txt"},{"gettext -s \"I like Bash\"": "abs-guide.txt"},{"# will be correctly extracted, but . . .": "abs-guide.txt"},{"#": "abs-guide.txt"},{"xgettext -s \"I like Bash\"": "abs-guide.txt"},{"# . . . fails!": "abs-guide.txt"},{"# 'xgettext' will extract \"-s\" because": "abs-guide.txt"},{"#+ the command only extracts the": "abs-guide.txt"},{"#+ very first argument after the 'gettext' word.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix K. Localization": "abs-guide.txt"},{"": "abs-guide.txt"},{"814": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"Escape characters:": "abs-guide.txt"},{"To localize a sentence like": "abs-guide.txt"},{"echo -e \"Hello\\tworld!\"": "abs-guide.txt"},{"you must use": "abs-guide.txt"},{"echo -e \"`gettext \\\"Hello\\\\tworld\\\"`\"": "abs-guide.txt"},{"The \"double escape character\" before the `t' is needed because": "abs-guide.txt"},{"'gettext' will search for a string like: 'Hello\\tworld'": "abs-guide.txt"},{"This is because gettext will read one literal `\\')": "abs-guide.txt"},{"and will output a string like \"Bonjour\\tmonde\",": "abs-guide.txt"},{"so the 'echo' command will display the message correctly.": "abs-guide.txt"},{"You may not use": "abs-guide.txt"},{"echo \"`gettext -e \\\"Hello\\tworld\\\"`\"": "abs-guide.txt"},{"due to the xgettext bug explained above.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Let's localize the following shell fragment:": "abs-guide.txt"},{"#": "abs-guide.txt"},{"echo \"-h display help and exit\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# First, one could do this:": "abs-guide.txt"},{"#": "abs-guide.txt"},{"echo \"`gettext \\\"-h display help and exit\\\"`\"": "abs-guide.txt"},{"# This way 'xgettext' will work ok,": "abs-guide.txt"},{"#+ but the 'gettext' program will read \"-h\" as an option!": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# One solution could be": "abs-guide.txt"},{"#": "abs-guide.txt"},{"echo \"`gettext -- \\\"-h display help and exit\\\"`\"": "abs-guide.txt"},{"# This way 'gettext' will work,": "abs-guide.txt"},{"#+ but 'xgettext' will extract \"--\", as referred to above.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# The workaround you may use to get this string localized is": "abs-guide.txt"},{"#": "abs-guide.txt"},{"echo -e \"`gettext \\\"\\\\0-h display help and exit\\\"`\"": "abs-guide.txt"},{"# We have added a \\0 (NULL) at the beginning of the sentence.": "abs-guide.txt"},{"# This way 'gettext' works correctly, as does 'xgettext.'": "abs-guide.txt"},{"# Moreover, the NULL character won't change the behavior": "abs-guide.txt"},{"#+ of the 'echo' command.": "abs-guide.txt"},{"# -----------------------------------------------------------------bash$ bash -D localized.sh": "abs-guide.txt"},{"\"Can't cd to %s.\"": "abs-guide.txt"},{"\"Enter the value: \"": "abs-guide.txt"},{"": "abs-guide.txt"},{"This lists all the localized text. (The -D option lists double-quoted strings prefixed by a $, without executing": "abs-guide.txt"},{"the script.)": "abs-guide.txt"},{"bash$ bash --dump-po-strings localized.sh": "abs-guide.txt"},{"#: a:6": "abs-guide.txt"},{"msgid \"Can't cd to %s.\"": "abs-guide.txt"},{"msgstr \"\"": "abs-guide.txt"},{"#: a:7": "abs-guide.txt"},{"msgid \"Enter the value: \"": "abs-guide.txt"},{"msgstr \"\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"The --dump-po-strings option to Bash resembles the -D option, but uses gettext \"po\" format.": "abs-guide.txt"},{"Bruno Haible points out:": "abs-guide.txt"},{"Starting with gettext-0.12.2, xgettext -o - localized.sh is recommended instead of bash": "abs-guide.txt"},{"--dump-po-strings localized.sh, because xgettext . . .": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix K. Localization": "abs-guide.txt"},{"": "abs-guide.txt"},{"815": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"1. understands the gettext and eval_gettext commands (whereas bash --dump-po-strings understands only": "abs-guide.txt"},{"its deprecated $\"...\" syntax)": "abs-guide.txt"},{"2. can extract comments placed by the programmer, intended to be read by the translator.": "abs-guide.txt"},{"This shell code is then not specific to Bash any more; it works the same way with Bash 1.x and other": "abs-guide.txt"},{"/bin/sh implementations.": "abs-guide.txt"},{"Now, build a language.po file for each language that the script will be translated into, specifying the": "abs-guide.txt"},{"msgstr. Alfredo Pironti gives the following example:": "abs-guide.txt"},{"fr.po:": "abs-guide.txt"},{"#: a:6": "abs-guide.txt"},{"msgid \"Can't cd to $var.\"": "abs-guide.txt"},{"msgstr \"Impossible de se positionner dans le repertoire $var.\"": "abs-guide.txt"},{"#: a:7": "abs-guide.txt"},{"msgid \"Enter the value: \"": "abs-guide.txt"},{"msgstr \"Entrez la valeur : \"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"The string are dumped with the variable names, not with the %s syntax,": "abs-guide.txt"},{"similar to C programs.": "abs-guide.txt"},{"This is a very cool feature if the programmer uses": "abs-guide.txt"},{"variable names that make sense!": "abs-guide.txt"},{"": "abs-guide.txt"},{"Then, run msgfmt.": "abs-guide.txt"},{"msgfmt -o localized.sh.mo fr.po": "abs-guide.txt"},{"Place the resulting localized.sh.mo file in the /usr/local/share/locale/fr/LC_MESSAGES": "abs-guide.txt"},{"directory, and at the beginning of the script, insert the lines:": "abs-guide.txt"},{"TEXTDOMAINDIR=/usr/local/share/locale": "abs-guide.txt"},{"TEXTDOMAIN=localized.sh": "abs-guide.txt"},{"": "abs-guide.txt"},{"If a user on a French system runs the script, she will get French messages.": "abs-guide.txt"},{"With older versions of Bash or other shells, localization requires gettext, using the -s option. In this": "abs-guide.txt"},{"case, the script becomes:": "abs-guide.txt"},{"": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# localized.sh": "abs-guide.txt"},{"E_CDERROR=65": "abs-guide.txt"},{"error() {": "abs-guide.txt"},{"local format=$1": "abs-guide.txt"},{"shift": "abs-guide.txt"},{"printf \"$(gettext -s \"$format\")\" \"$@\" >&2": "abs-guide.txt"},{"exit $E_CDERROR": "abs-guide.txt"},{"}": "abs-guide.txt"},{"cd $var || error \"Can't cd to %s.\" \"$var\"": "abs-guide.txt"},{"read -p \"$(gettext -s \"Enter the value: \")\" var": "abs-guide.txt"},{"# ...": "abs-guide.txt"},{"": "abs-guide.txt"},{"The TEXTDOMAIN and TEXTDOMAINDIR variables need to be set and exported to the environment. This": "abs-guide.txt"},{"should be done within the script itself.": "abs-guide.txt"},{"Appendix K. Localization": "abs-guide.txt"},{"": "abs-guide.txt"},{"816": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"--This appendix written by St\u00e9phane Chazelas, with modifications suggested by Alfredo Pironti, and by Bruno": "abs-guide.txt"},{"Haible, maintainer of GNU gettext.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix K. Localization": "abs-guide.txt"},{"": "abs-guide.txt"},{"817": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAppendix L. History Commands": "abs-guide.txt"},{"The Bash shell provides command-line tools for editing and manipulating a user's command history. This is": "abs-guide.txt"},{"primarily a convenience, a means of saving keystrokes.": "abs-guide.txt"},{"Bash history commands:": "abs-guide.txt"},{"1. history": "abs-guide.txt"},{"2. fc": "abs-guide.txt"},{"bash$ history": "abs-guide.txt"},{"1 mount /mnt/cdrom": "abs-guide.txt"},{"2 cd /mnt/cdrom": "abs-guide.txt"},{"3 ls": "abs-guide.txt"},{"...": "abs-guide.txt"},{"": "abs-guide.txt"},{"Internal variables associated with Bash history commands:": "abs-guide.txt"},{"1. $HISTCMD": "abs-guide.txt"},{"2. $HISTCONTROL": "abs-guide.txt"},{"3. $HISTIGNORE": "abs-guide.txt"},{"4. $HISTFILE": "abs-guide.txt"},{"5. $HISTFILESIZE": "abs-guide.txt"},{"6. $HISTSIZE": "abs-guide.txt"},{"7. $HISTTIMEFORMAT (Bash, ver. 3.0 or later)": "abs-guide.txt"},{"8. !!": "abs-guide.txt"},{"9. !$": "abs-guide.txt"},{"10. !#": "abs-guide.txt"},{"11. !N": "abs-guide.txt"},{"12. !-N": "abs-guide.txt"},{"13. !STRING": "abs-guide.txt"},{"14. !?STRING?": "abs-guide.txt"},{"15. ^STRING^string^": "abs-guide.txt"},{"Unfortunately, the Bash history tools find no use in scripting.": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# history.sh": "abs-guide.txt"},{"# A (vain) attempt to use the 'history' command in a script.": "abs-guide.txt"},{"history": "abs-guide.txt"},{"": "abs-guide.txt"},{"# No output.": "abs-guide.txt"},{"": "abs-guide.txt"},{"var=$(history); echo \"$var\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# $var is empty.": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"History commands are, by default, disabled within a script.": "abs-guide.txt"},{"However, as dhw points out,": "abs-guide.txt"},{"set -o history": "abs-guide.txt"},{"enables the history mechanism.": "abs-guide.txt"},{"": "abs-guide.txt"},{"set -o history": "abs-guide.txt"},{"var=$(history); echo \"$var\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# 1": "abs-guide.txt"},{"": "abs-guide.txt"},{"var=$(history)": "abs-guide.txt"},{"": "abs-guide.txt"},{"bash$ ./history.sh": "abs-guide.txt"},{"(no output)": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix L. History Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"818": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"The Advancing in the Bash Shell site gives a good introduction to the use of history commands in Bash.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix L. History Commands": "abs-guide.txt"},{"": "abs-guide.txt"},{"819": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAppendix M. Sample .bashrc and": "abs-guide.txt"},{".bash_profile Files": "abs-guide.txt"},{"The ~/.bashrc file determines the behavior of interactive shells. A good look at this file can lead to a": "abs-guide.txt"},{"better understanding of Bash.": "abs-guide.txt"},{"Emmanuel Rouat contributed the following very elaborate .bashrc file, written for a Linux system. He": "abs-guide.txt"},{"welcomes reader feedback on it.": "abs-guide.txt"},{"Study the file carefully, and feel free to reuse code snippets and functions from it in your own .bashrc file": "abs-guide.txt"},{"or even in your scripts.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example M-1. Sample .bashrc file": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"=============================================================== #": "abs-guide.txt"},{"PERSONAL $HOME/.bashrc FILE for bash-3.0 (or later)": "abs-guide.txt"},{"By Emmanuel Rouat [no-email]": "abs-guide.txt"},{"Last modified: Tue Nov 20 22:04:47 CET 2012": "abs-guide.txt"},{"": "abs-guide.txt"},{"# This file is normally read by interactive shells only.": "abs-guide.txt"},{"#+ Here is the place to define your aliases, functions and": "abs-guide.txt"},{"#+ other interactive features like your prompt.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# The majority of the code here assumes you are on a GNU": "abs-guide.txt"},{"#+ system (most likely a Linux box) and is often based on code": "abs-guide.txt"},{"#+ found on Usenet or Internet.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# See for instance:": "abs-guide.txt"},{"# http://tldp.org/LDP/abs/html/index.html": "abs-guide.txt"},{"# http://www.caliban.org/bash": "abs-guide.txt"},{"# http://www.shelldorado.com/scripts/categories.html": "abs-guide.txt"},{"# http://www.dotfiles.org": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# The choice of colors was done for a shell with a dark background": "abs-guide.txt"},{"#+ (white on black), and this is usually also suited for pure text-mode": "abs-guide.txt"},{"#+ consoles (no X server available). If you use a white background,": "abs-guide.txt"},{"#+ you'll have to do some other choices for readability.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# This bashrc file is a bit overcrowded.": "abs-guide.txt"},{"# Remember, it is just just an example.": "abs-guide.txt"},{"# Tailor it to your needs.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# =============================================================== #": "abs-guide.txt"},{"# --> Comments added by HOWTO author.": "abs-guide.txt"},{"# If not running interactively, don't do anything": "abs-guide.txt"},{"[ -z \"$PS1\" ] && return": "abs-guide.txt"},{"": "abs-guide.txt"},{"#------------------------------------------------------------# Source global definitions (if any)": "abs-guide.txt"},{"#-------------------------------------------------------------": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix M. Sample .bashrc and .bash_profile Files": "abs-guide.txt"},{"": "abs-guide.txt"},{"820": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"if [ -f /etc/bashrc ]; then": "abs-guide.txt"},{". /etc/bashrc": "abs-guide.txt"},{"# --> Read /etc/bashrc, if present.": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"#-------------------------------------------------------------# Automatic setting of $DISPLAY (if not set already).": "abs-guide.txt"},{"# This works for me - your mileage may vary. . . .": "abs-guide.txt"},{"# The problem is that different types of terminals give": "abs-guide.txt"},{"#+ different answers to 'who am i' (rxvt in particular can be": "abs-guide.txt"},{"#+ troublesome) - however this code seems to work in a majority": "abs-guide.txt"},{"#+ of cases.": "abs-guide.txt"},{"#-------------------------------------------------------------function get_xserver ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"case $TERM in": "abs-guide.txt"},{"xterm )": "abs-guide.txt"},{"XSERVER=$(who am i | awk '{print $NF}' | tr -d ')''(' )": "abs-guide.txt"},{"# Ane-Pieter Wieringa suggests the following alternative:": "abs-guide.txt"},{"# I_AM=$(who am i)": "abs-guide.txt"},{"# SERVER=${I_AM#*(}": "abs-guide.txt"},{"# SERVER=${SERVER%*)}": "abs-guide.txt"},{"XSERVER=${XSERVER%%:*}": "abs-guide.txt"},{";;": "abs-guide.txt"},{"aterm | rxvt)": "abs-guide.txt"},{"# Find some code that works here. ...": "abs-guide.txt"},{";;": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"}": "abs-guide.txt"},{"if [ -z ${DISPLAY:=\"\"} ]; then": "abs-guide.txt"},{"get_xserver": "abs-guide.txt"},{"if [[ -z ${XSERVER} || ${XSERVER} == $(hostname) ||": "abs-guide.txt"},{"${XSERVER} == \"unix\" ]]; then": "abs-guide.txt"},{"DISPLAY=\":0.0\"": "abs-guide.txt"},{"# Display on local host.": "abs-guide.txt"},{"else": "abs-guide.txt"},{"DISPLAY=${XSERVER}:0.0": "abs-guide.txt"},{"# Display on remote host.": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"export DISPLAY": "abs-guide.txt"},{"#------------------------------------------------------------# Some settings": "abs-guide.txt"},{"#------------------------------------------------------------#set -o nounset": "abs-guide.txt"},{"# These two options are useful for debugging.": "abs-guide.txt"},{"#set -o xtrace": "abs-guide.txt"},{"alias debug=\"set -o nounset; set -o xtrace\"": "abs-guide.txt"},{"ulimit": "abs-guide.txt"},{"set -o": "abs-guide.txt"},{"set -o": "abs-guide.txt"},{"set -o": "abs-guide.txt"},{"": "abs-guide.txt"},{"-S -c 0": "abs-guide.txt"},{"notify": "abs-guide.txt"},{"noclobber": "abs-guide.txt"},{"ignoreeof": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Enable": "abs-guide.txt"},{"shopt -s": "abs-guide.txt"},{"shopt -s": "abs-guide.txt"},{"shopt -s": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Don't want coredumps.": "abs-guide.txt"},{"": "abs-guide.txt"},{"options:": "abs-guide.txt"},{"cdspell": "abs-guide.txt"},{"cdable_vars": "abs-guide.txt"},{"checkhash": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix M. Sample .bashrc and .bash_profile Files": "abs-guide.txt"},{"": "abs-guide.txt"},{"821": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"shopt": "abs-guide.txt"},{"shopt": "abs-guide.txt"},{"shopt": "abs-guide.txt"},{"shopt": "abs-guide.txt"},{"shopt": "abs-guide.txt"},{"shopt": "abs-guide.txt"},{"": "abs-guide.txt"},{"-s": "abs-guide.txt"},{"-s": "abs-guide.txt"},{"-s": "abs-guide.txt"},{"-s": "abs-guide.txt"},{"-s": "abs-guide.txt"},{"-s": "abs-guide.txt"},{"": "abs-guide.txt"},{"checkwinsize": "abs-guide.txt"},{"sourcepath": "abs-guide.txt"},{"no_empty_cmd_completion": "abs-guide.txt"},{"cmdhist": "abs-guide.txt"},{"histappend histreedit histverify": "abs-guide.txt"},{"extglob": "abs-guide.txt"},{"# Necessary for programmable completion.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Disable options:": "abs-guide.txt"},{"shopt -u mailwarn": "abs-guide.txt"},{"unset MAILCHECK": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Don't want my shell to warn me of incoming mail.": "abs-guide.txt"},{"": "abs-guide.txt"},{"#------------------------------------------------------------# Greeting, motd etc. ...": "abs-guide.txt"},{"#------------------------------------------------------------#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Color definitions (taken from Color Bash Prompt HowTo).": "abs-guide.txt"},{"Some colors might look different of some terminals.": "abs-guide.txt"},{"For example, I see 'Bold Red' as 'orange' on my screen,": "abs-guide.txt"},{"hence the 'Green' 'BRed' 'Red' sequence I often use in my prompt.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Normal Colors": "abs-guide.txt"},{"Black='\\e[0;30m'": "abs-guide.txt"},{"Red='\\e[0;31m'": "abs-guide.txt"},{"Green='\\e[0;32m'": "abs-guide.txt"},{"Yellow='\\e[0;33m'": "abs-guide.txt"},{"Blue='\\e[0;34m'": "abs-guide.txt"},{"Purple='\\e[0;35m'": "abs-guide.txt"},{"Cyan='\\e[0;36m'": "abs-guide.txt"},{"White='\\e[0;37m'": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Black": "abs-guide.txt"},{"Red": "abs-guide.txt"},{"Green": "abs-guide.txt"},{"Yellow": "abs-guide.txt"},{"Blue": "abs-guide.txt"},{"Purple": "abs-guide.txt"},{"Cyan": "abs-guide.txt"},{"White": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Bold": "abs-guide.txt"},{"BBlack='\\e[1;30m'": "abs-guide.txt"},{"BRed='\\e[1;31m'": "abs-guide.txt"},{"BGreen='\\e[1;32m'": "abs-guide.txt"},{"BYellow='\\e[1;33m'": "abs-guide.txt"},{"BBlue='\\e[1;34m'": "abs-guide.txt"},{"BPurple='\\e[1;35m'": "abs-guide.txt"},{"BCyan='\\e[1;36m'": "abs-guide.txt"},{"BWhite='\\e[1;37m'": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Black": "abs-guide.txt"},{"Red": "abs-guide.txt"},{"Green": "abs-guide.txt"},{"Yellow": "abs-guide.txt"},{"Blue": "abs-guide.txt"},{"Purple": "abs-guide.txt"},{"Cyan": "abs-guide.txt"},{"White": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Background": "abs-guide.txt"},{"On_Black='\\e[40m'": "abs-guide.txt"},{"On_Red='\\e[41m'": "abs-guide.txt"},{"On_Green='\\e[42m'": "abs-guide.txt"},{"On_Yellow='\\e[43m'": "abs-guide.txt"},{"On_Blue='\\e[44m'": "abs-guide.txt"},{"On_Purple='\\e[45m'": "abs-guide.txt"},{"On_Cyan='\\e[46m'": "abs-guide.txt"},{"On_White='\\e[47m'": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Black": "abs-guide.txt"},{"Red": "abs-guide.txt"},{"Green": "abs-guide.txt"},{"Yellow": "abs-guide.txt"},{"Blue": "abs-guide.txt"},{"Purple": "abs-guide.txt"},{"Cyan": "abs-guide.txt"},{"White": "abs-guide.txt"},{"": "abs-guide.txt"},{"NC=\"\\e[m\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Color Reset": "abs-guide.txt"},{"": "abs-guide.txt"},{"ALERT=${BWhite}${On_Red} # Bold White on red background": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo -e \"${BCyan}This is BASH ${BRed}${BASH_VERSION%.*}${BCyan}\\": "abs-guide.txt"},{"- DISPLAY on ${BRed}$DISPLAY${NC}\\n\"": "abs-guide.txt"},{"date": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix M. Sample .bashrc and .bash_profile Files": "abs-guide.txt"},{"": "abs-guide.txt"},{"822": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"if [ -x /usr/games/fortune ]; then": "abs-guide.txt"},{"/usr/games/fortune -s": "abs-guide.txt"},{"# Makes our day a bit more fun.... :-)": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"function _exit()": "abs-guide.txt"},{"# Function to run upon exit of shell.": "abs-guide.txt"},{"{": "abs-guide.txt"},{"echo -e \"${BRed}Hasta la vista, baby${NC}\"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"trap _exit EXIT": "abs-guide.txt"},{"#------------------------------------------------------------# Shell Prompt - for many examples, see:": "abs-guide.txt"},{"#": "abs-guide.txt"},{"http://www.debian-administration.org/articles/205": "abs-guide.txt"},{"#": "abs-guide.txt"},{"http://www.askapache.com/linux/bash-power-prompt.html": "abs-guide.txt"},{"#": "abs-guide.txt"},{"http://tldp.org/HOWTO/Bash-Prompt-HOWTO": "abs-guide.txt"},{"#": "abs-guide.txt"},{"https://github.com/nojhan/liquidprompt": "abs-guide.txt"},{"#------------------------------------------------------------# Current Format: [TIME USER@HOST PWD] >": "abs-guide.txt"},{"# TIME:": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Green": "abs-guide.txt"},{"== machine load is low": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Orange": "abs-guide.txt"},{"== machine load is medium": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Red": "abs-guide.txt"},{"== machine load is high": "abs-guide.txt"},{"#": "abs-guide.txt"},{"ALERT": "abs-guide.txt"},{"== machine load is very high": "abs-guide.txt"},{"# USER:": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Cyan": "abs-guide.txt"},{"== normal user": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Orange": "abs-guide.txt"},{"== SU to user": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Red": "abs-guide.txt"},{"== root": "abs-guide.txt"},{"# HOST:": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Cyan": "abs-guide.txt"},{"== local session": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Green": "abs-guide.txt"},{"== secured remote connection (via ssh)": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Red": "abs-guide.txt"},{"== unsecured remote connection": "abs-guide.txt"},{"# PWD:": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Green": "abs-guide.txt"},{"== more than 10% free disk space": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Orange": "abs-guide.txt"},{"== less than 10% free disk space": "abs-guide.txt"},{"#": "abs-guide.txt"},{"ALERT": "abs-guide.txt"},{"== less than 5% free disk space": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Red": "abs-guide.txt"},{"== current user does not have write privileges": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Cyan": "abs-guide.txt"},{"== current filesystem is size zero (like /proc)": "abs-guide.txt"},{"# >:": "abs-guide.txt"},{"#": "abs-guide.txt"},{"White": "abs-guide.txt"},{"== no background or suspended jobs in this shell": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Cyan": "abs-guide.txt"},{"== at least one background job in this shell": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Orange": "abs-guide.txt"},{"== at least one suspended job in this shell": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"Command is added to the history file each time you hit enter,": "abs-guide.txt"},{"#": "abs-guide.txt"},{"so it's available to all shells (using 'history -a').": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Test connection type:": "abs-guide.txt"},{"if [ -n \"${SSH_CONNECTION}\" ]; then": "abs-guide.txt"},{"CNX=${Green}": "abs-guide.txt"},{"# Connected": "abs-guide.txt"},{"elif [[ \"${DISPLAY%%:0*}\" != \"\" ]];": "abs-guide.txt"},{"CNX=${ALERT}": "abs-guide.txt"},{"# Connected": "abs-guide.txt"},{"else": "abs-guide.txt"},{"CNX=${BCyan}": "abs-guide.txt"},{"# Connected": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"# Test user type:": "abs-guide.txt"},{"if [[ ${USER} == \"root\" ]]; then": "abs-guide.txt"},{"SU=${Red}": "abs-guide.txt"},{"# User is": "abs-guide.txt"},{"elif [[ ${USER} != $(logname) ]];": "abs-guide.txt"},{"SU=${BRed}": "abs-guide.txt"},{"# User is": "abs-guide.txt"},{"else": "abs-guide.txt"},{"SU=${BCyan}": "abs-guide.txt"},{"# User is": "abs-guide.txt"},{"": "abs-guide.txt"},{"on remote machine, via ssh (good).": "abs-guide.txt"},{"then": "abs-guide.txt"},{"on remote machine, not via ssh (bad).": "abs-guide.txt"},{"on local machine.": "abs-guide.txt"},{"": "abs-guide.txt"},{"root.": "abs-guide.txt"},{"then": "abs-guide.txt"},{"not login user.": "abs-guide.txt"},{"normal (well ... most of us are).": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix M. Sample .bashrc and .bash_profile Files": "abs-guide.txt"},{"": "abs-guide.txt"},{"823": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"NCPU=$(grep -c 'processor' /proc/cpuinfo)": "abs-guide.txt"},{"# Number of CPUs": "abs-guide.txt"},{"SLOAD=$(( 100*${NCPU} ))": "abs-guide.txt"},{"# Small load": "abs-guide.txt"},{"MLOAD=$(( 200*${NCPU} ))": "abs-guide.txt"},{"# Medium load": "abs-guide.txt"},{"XLOAD=$(( 400*${NCPU} ))": "abs-guide.txt"},{"# Xlarge load": "abs-guide.txt"},{"# Returns system load as percentage, i.e., '40' rather than '0.40)'.": "abs-guide.txt"},{"function load()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"local SYSLOAD=$(cut -d \" \" -f1 /proc/loadavg | tr -d '.')": "abs-guide.txt"},{"# System load of the current host.": "abs-guide.txt"},{"echo $((10#$SYSLOAD))": "abs-guide.txt"},{"# Convert to decimal.": "abs-guide.txt"},{"}": "abs-guide.txt"},{"# Returns a color indicating system load.": "abs-guide.txt"},{"function load_color()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"local SYSLOAD=$(load)": "abs-guide.txt"},{"if [ ${SYSLOAD} -gt ${XLOAD} ]; then": "abs-guide.txt"},{"echo -en ${ALERT}": "abs-guide.txt"},{"elif [ ${SYSLOAD} -gt ${MLOAD} ]; then": "abs-guide.txt"},{"echo -en ${Red}": "abs-guide.txt"},{"elif [ ${SYSLOAD} -gt ${SLOAD} ]; then": "abs-guide.txt"},{"echo -en ${BRed}": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo -en ${Green}": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"}": "abs-guide.txt"},{"# Returns a color according to free disk space in $PWD.": "abs-guide.txt"},{"function disk_color()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"if [ ! -w \"${PWD}\" ] ; then": "abs-guide.txt"},{"echo -en ${Red}": "abs-guide.txt"},{"# No 'write' privilege in the current directory.": "abs-guide.txt"},{"elif [ -s \"${PWD}\" ] ; then": "abs-guide.txt"},{"local used=$(command df -P \"$PWD\" |": "abs-guide.txt"},{"awk 'END {print $5} {sub(/%/,\"\")}')": "abs-guide.txt"},{"if [ ${used} -gt 95 ]; then": "abs-guide.txt"},{"echo -en ${ALERT}": "abs-guide.txt"},{"# Disk almost full (>95%).": "abs-guide.txt"},{"elif [ ${used} -gt 90 ]; then": "abs-guide.txt"},{"echo -en ${BRed}": "abs-guide.txt"},{"# Free disk space almost gone.": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo -en ${Green}": "abs-guide.txt"},{"# Free disk space is ok.": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo -en ${Cyan}": "abs-guide.txt"},{"# Current directory is size '0' (like /proc, /sys etc).": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"}": "abs-guide.txt"},{"# Returns a color according to running/suspended jobs.": "abs-guide.txt"},{"function job_color()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"if [ $(jobs -s | wc -l) -gt \"0\" ]; then": "abs-guide.txt"},{"echo -en ${BRed}": "abs-guide.txt"},{"elif [ $(jobs -r | wc -l) -gt \"0\" ] ; then": "abs-guide.txt"},{"echo -en ${BCyan}": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix M. Sample .bashrc and .bash_profile Files": "abs-guide.txt"},{"": "abs-guide.txt"},{"824": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"}": "abs-guide.txt"},{"# Adds some text in the terminal frame (if applicable).": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Now we construct the prompt.": "abs-guide.txt"},{"PROMPT_COMMAND=\"history -a\"": "abs-guide.txt"},{"case ${TERM} in": "abs-guide.txt"},{"*term | rxvt | linux)": "abs-guide.txt"},{"PS1=\"\\[\\$(load_color)\\][\\A\\[${NC}\\] \"": "abs-guide.txt"},{"# Time of day (with load info):": "abs-guide.txt"},{"PS1=\"\\[\\$(load_color)\\][\\A\\[${NC}\\] \"": "abs-guide.txt"},{"# User@Host (with connection type info):": "abs-guide.txt"},{"PS1=${PS1}\"\\[${SU}\\]\\u\\[${NC}\\]@\\[${CNX}\\]\\h\\[${NC}\\] \"": "abs-guide.txt"},{"# PWD (with 'disk space' info):": "abs-guide.txt"},{"PS1=${PS1}\"\\[\\$(disk_color)\\]\\W]\\[${NC}\\] \"": "abs-guide.txt"},{"# Prompt (with 'job' info):": "abs-guide.txt"},{"PS1=${PS1}\"\\[\\$(job_color)\\]>\\[${NC}\\] \"": "abs-guide.txt"},{"# Set title of current xterm:": "abs-guide.txt"},{"PS1=${PS1}\"\\[\\e]0;[\\u@\\h] \\w\\a\\]\"": "abs-guide.txt"},{";;": "abs-guide.txt"},{"*)": "abs-guide.txt"},{"PS1=\"(\\A \\u@\\h \\W) > \" # --> PS1=\"(\\A \\u@\\h \\w) > \"": "abs-guide.txt"},{"# --> Shows full pathname of current dir.": "abs-guide.txt"},{";;": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"": "abs-guide.txt"},{"export": "abs-guide.txt"},{"export": "abs-guide.txt"},{"export": "abs-guide.txt"},{"export": "abs-guide.txt"},{"export": "abs-guide.txt"},{"": "abs-guide.txt"},{"TIMEFORMAT=$'\\nreal %3R\\tuser %3U\\tsys %3S\\tpcpu %P\\n'": "abs-guide.txt"},{"HISTIGNORE=\"&:bg:fg:ll:h\"": "abs-guide.txt"},{"HISTTIMEFORMAT=\"$(echo -e ${BCyan})[%d/%m %H:%M:%S]$(echo -e ${NC}) \"": "abs-guide.txt"},{"HISTCONTROL=ignoredups": "abs-guide.txt"},{"HOSTFILE=$HOME/.hosts": "abs-guide.txt"},{"# Put a list of remote hosts in ~/.hosts": "abs-guide.txt"},{"": "abs-guide.txt"},{"#============================================================": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# ALIASES AND FUNCTIONS": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Arguably, some functions defined here are quite big.": "abs-guide.txt"},{"# If you want to make this file smaller, these functions can": "abs-guide.txt"},{"#+ be converted into scripts and removed from here.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#============================================================": "abs-guide.txt"},{"#------------------# Personnal Aliases": "abs-guide.txt"},{"#------------------alias rm='rm -i'": "abs-guide.txt"},{"alias cp='cp -i'": "abs-guide.txt"},{"alias mv='mv -i'": "abs-guide.txt"},{"# -> Prevents accidentally clobbering files.": "abs-guide.txt"},{"alias mkdir='mkdir -p'": "abs-guide.txt"},{"alias": "abs-guide.txt"},{"alias": "abs-guide.txt"},{"alias": "abs-guide.txt"},{"alias": "abs-guide.txt"},{"": "abs-guide.txt"},{"h='history'": "abs-guide.txt"},{"j='jobs -l'": "abs-guide.txt"},{"which='type -a'": "abs-guide.txt"},{"..='cd ..'": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Pretty-print of some PATH variables:": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix M. Sample .bashrc and .bash_profile Files": "abs-guide.txt"},{"": "abs-guide.txt"},{"825": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"alias path='echo -e ${PATH//:/\\\\n}'": "abs-guide.txt"},{"alias libpath='echo -e ${LD_LIBRARY_PATH//:/\\\\n}'": "abs-guide.txt"},{"": "abs-guide.txt"},{"alias du='du -kh'": "abs-guide.txt"},{"alias df='df -kTh'": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Makes a more readable output.": "abs-guide.txt"},{"": "abs-guide.txt"},{"#------------------------------------------------------------# The 'ls' family (this assumes you use a recent GNU ls).": "abs-guide.txt"},{"#------------------------------------------------------------# Add colors for filetype and human-readable sizes by default on 'ls':": "abs-guide.txt"},{"alias ls='ls -h --color'": "abs-guide.txt"},{"alias lx='ls -lXB'": "abs-guide.txt"},{"# Sort by extension.": "abs-guide.txt"},{"alias lk='ls -lSr'": "abs-guide.txt"},{"# Sort by size, biggest last.": "abs-guide.txt"},{"alias lt='ls -ltr'": "abs-guide.txt"},{"# Sort by date, most recent last.": "abs-guide.txt"},{"alias lc='ls -ltcr'": "abs-guide.txt"},{"# Sort by/show change time,most recent last.": "abs-guide.txt"},{"alias lu='ls -ltur'": "abs-guide.txt"},{"# Sort by/show access time,most recent last.": "abs-guide.txt"},{"# The": "abs-guide.txt"},{"alias": "abs-guide.txt"},{"alias": "abs-guide.txt"},{"alias": "abs-guide.txt"},{"alias": "abs-guide.txt"},{"alias": "abs-guide.txt"},{"": "abs-guide.txt"},{"ubiquitous 'll': directories first, with alphanumeric sorting:": "abs-guide.txt"},{"ll=\"ls -lv --group-directories-first\"": "abs-guide.txt"},{"lm='ll |more'": "abs-guide.txt"},{"# Pipe through 'more'": "abs-guide.txt"},{"lr='ll -R'": "abs-guide.txt"},{"# Recursive ls.": "abs-guide.txt"},{"la='ll -A'": "abs-guide.txt"},{"# Show hidden files.": "abs-guide.txt"},{"tree='tree -Csuh'": "abs-guide.txt"},{"# Nice alternative to 'recursive ls' ...": "abs-guide.txt"},{"": "abs-guide.txt"},{"#------------------------------------------------------------# Tailoring 'less'": "abs-guide.txt"},{"#------------------------------------------------------------alias more='less'": "abs-guide.txt"},{"export PAGER=less": "abs-guide.txt"},{"export LESSCHARSET='latin1'": "abs-guide.txt"},{"export LESSOPEN='|/usr/bin/lesspipe.sh %s 2>&-'": "abs-guide.txt"},{"# Use this if lesspipe.sh exists.": "abs-guide.txt"},{"export LESS='-i -N -w -z-4 -g -e -M -X -F -R -P%t?f%f \\": "abs-guide.txt"},{":stdin .?pb%pb\\%:?lbLine %lb:?bbByte %bb:-...'": "abs-guide.txt"},{"# LESS": "abs-guide.txt"},{"export": "abs-guide.txt"},{"export": "abs-guide.txt"},{"export": "abs-guide.txt"},{"export": "abs-guide.txt"},{"export": "abs-guide.txt"},{"export": "abs-guide.txt"},{"export": "abs-guide.txt"},{"": "abs-guide.txt"},{"man page colors (makes Man pages more readable).": "abs-guide.txt"},{"LESS_TERMCAP_mb=$'\\E[01;31m'": "abs-guide.txt"},{"LESS_TERMCAP_md=$'\\E[01;31m'": "abs-guide.txt"},{"LESS_TERMCAP_me=$'\\E[0m'": "abs-guide.txt"},{"LESS_TERMCAP_se=$'\\E[0m'": "abs-guide.txt"},{"LESS_TERMCAP_so=$'\\E[01;44;33m'": "abs-guide.txt"},{"LESS_TERMCAP_ue=$'\\E[0m'": "abs-guide.txt"},{"LESS_TERMCAP_us=$'\\E[01;32m'": "abs-guide.txt"},{"": "abs-guide.txt"},{"#------------------------------------------------------------# Spelling typos - highly personnal and keyboard-dependent :-)": "abs-guide.txt"},{"#------------------------------------------------------------alias": "abs-guide.txt"},{"alias": "abs-guide.txt"},{"alias": "abs-guide.txt"},{"alias": "abs-guide.txt"},{"alias": "abs-guide.txt"},{"": "abs-guide.txt"},{"xs='cd'": "abs-guide.txt"},{"vf='cd'": "abs-guide.txt"},{"moer='more'": "abs-guide.txt"},{"moew='more'": "abs-guide.txt"},{"kk='ll'": "abs-guide.txt"},{"": "abs-guide.txt"},{"#------------------------------------------------------------# A few fun ones": "abs-guide.txt"},{"#-------------------------------------------------------------": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix M. Sample .bashrc and .bash_profile Files": "abs-guide.txt"},{"": "abs-guide.txt"},{"826": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# Adds some text in the terminal frame (if applicable).": "abs-guide.txt"},{"function xtitle()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"case \"$TERM\" in": "abs-guide.txt"},{"*term* | rxvt)": "abs-guide.txt"},{"echo -en \"\\e]0;$*\\a\" ;;": "abs-guide.txt"},{"*) ;;": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Aliases that use xtitle": "abs-guide.txt"},{"alias top='xtitle Processes on $HOST && top'": "abs-guide.txt"},{"alias make='xtitle Making $(basename $PWD) ; make'": "abs-guide.txt"},{"# .. and functions": "abs-guide.txt"},{"function man()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"for i ; do": "abs-guide.txt"},{"xtitle The $(basename $1|tr -d .[:digit:]) manual": "abs-guide.txt"},{"command man -a \"$i\"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"#------------------------------------------------------------# Make the following commands run in background automatically:": "abs-guide.txt"},{"#------------------------------------------------------------function te() # wrapper around xemacs/gnuserv": "abs-guide.txt"},{"{": "abs-guide.txt"},{"if [ \"$(gnuclient -batch -eval t 2>&-)\" == \"t\" ]; then": "abs-guide.txt"},{"gnuclient -q \"$@\";": "abs-guide.txt"},{"else": "abs-guide.txt"},{"( xemacs \"$@\" &);": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"}": "abs-guide.txt"},{"function soffice() { command soffice \"$@\" & }": "abs-guide.txt"},{"function firefox() { command firefox \"$@\" & }": "abs-guide.txt"},{"function xpdf() { command xpdf \"$@\" & }": "abs-guide.txt"},{"": "abs-guide.txt"},{"#------------------------------------------------------------# File & strings related functions:": "abs-guide.txt"},{"#-------------------------------------------------------------": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Find a file with a pattern in name:": "abs-guide.txt"},{"function ff() { find . -type f -iname '*'\"$*\"'*' -ls ; }": "abs-guide.txt"},{"# Find a file with pattern $1 in name and Execute $2 on it:": "abs-guide.txt"},{"function fe() { find . -type f -iname '*'\"${1:-}\"'*' \\": "abs-guide.txt"},{"-exec ${2:-file} {} \\; ; }": "abs-guide.txt"},{"# Find a pattern in a set of files and highlight them:": "abs-guide.txt"},{"#+ (needs a recent version of egrep).": "abs-guide.txt"},{"function fstr()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"OPTIND=1": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix M. Sample .bashrc and .bash_profile Files": "abs-guide.txt"},{"": "abs-guide.txt"},{"827": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"local mycase=\"\"": "abs-guide.txt"},{"local usage=\"fstr: find string in files.": "abs-guide.txt"},{"Usage: fstr [-i] \\\"pattern\\\" [\\\"filename pattern\\\"] \"": "abs-guide.txt"},{"while getopts :it opt": "abs-guide.txt"},{"do": "abs-guide.txt"},{"case \"$opt\" in": "abs-guide.txt"},{"i) mycase=\"-i \" ;;": "abs-guide.txt"},{"*) echo \"$usage\"; return ;;": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"done": "abs-guide.txt"},{"shift $(( $OPTIND - 1 ))": "abs-guide.txt"},{"if [ \"$#\" -lt 1 ]; then": "abs-guide.txt"},{"echo \"$usage\"": "abs-guide.txt"},{"return;": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"find . -type f -name \"${2:-*}\" -print0 | \\": "abs-guide.txt"},{"xargs -0 egrep --color=always -sn ${case} \"$1\" 2>&- | more": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"function swap()": "abs-guide.txt"},{"{ # Swap 2 filenames around, if they exist (from Uzi's bashrc).": "abs-guide.txt"},{"local TMPFILE=tmp.$$": "abs-guide.txt"},{"[ $# -ne 2 ] && echo \"swap: 2 arguments needed\" && return 1": "abs-guide.txt"},{"[ ! -e $1 ] && echo \"swap: $1 does not exist\" && return 1": "abs-guide.txt"},{"[ ! -e $2 ] && echo \"swap: $2 does not exist\" && return 1": "abs-guide.txt"},{"mv \"$1\" $TMPFILE": "abs-guide.txt"},{"mv \"$2\" \"$1\"": "abs-guide.txt"},{"mv $TMPFILE \"$2\"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"function extract()": "abs-guide.txt"},{"# Handy Extract Program": "abs-guide.txt"},{"{": "abs-guide.txt"},{"if [ -f $1 ] ; then": "abs-guide.txt"},{"case $1 in": "abs-guide.txt"},{"*.tar.bz2)": "abs-guide.txt"},{"tar xvjf $1": "abs-guide.txt"},{";;": "abs-guide.txt"},{"*.tar.gz)": "abs-guide.txt"},{"tar xvzf $1": "abs-guide.txt"},{";;": "abs-guide.txt"},{"*.bz2)": "abs-guide.txt"},{"bunzip2 $1": "abs-guide.txt"},{";;": "abs-guide.txt"},{"*.rar)": "abs-guide.txt"},{"unrar x $1": "abs-guide.txt"},{";;": "abs-guide.txt"},{"*.gz)": "abs-guide.txt"},{"gunzip $1": "abs-guide.txt"},{";;": "abs-guide.txt"},{"*.tar)": "abs-guide.txt"},{"tar xvf $1": "abs-guide.txt"},{";;": "abs-guide.txt"},{"*.tbz2)": "abs-guide.txt"},{"tar xvjf $1": "abs-guide.txt"},{";;": "abs-guide.txt"},{"*.tgz)": "abs-guide.txt"},{"tar xvzf $1": "abs-guide.txt"},{";;": "abs-guide.txt"},{"*.zip)": "abs-guide.txt"},{"unzip $1": "abs-guide.txt"},{";;": "abs-guide.txt"},{"*.Z)": "abs-guide.txt"},{"uncompress $1": "abs-guide.txt"},{";;": "abs-guide.txt"},{"*.7z)": "abs-guide.txt"},{"7z x $1": "abs-guide.txt"},{";;": "abs-guide.txt"},{"*)": "abs-guide.txt"},{"echo \"'$1' cannot be extracted via >extract<\" ;;": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"else": "abs-guide.txt"},{"echo \"'$1' is not a valid file!\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Creates an archive (*.tar.gz) from given directory.": "abs-guide.txt"},{"function maketar() { tar cvzf \"${1%%/}.tar.gz\" \"${1%%/}/\"; }": "abs-guide.txt"},{"# Create a ZIP archive of a file or folder.": "abs-guide.txt"},{"function makezip() { zip -r \"${1%%/}.zip\" \"$1\" ; }": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix M. Sample .bashrc and .bash_profile Files": "abs-guide.txt"},{"": "abs-guide.txt"},{"828": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# Make your directories and files access rights sane.": "abs-guide.txt"},{"function sanitize() { chmod -R u=rwX,g=rX,o= \"$@\" ;}": "abs-guide.txt"},{"#------------------------------------------------------------# Process/system related functions:": "abs-guide.txt"},{"#-------------------------------------------------------------": "abs-guide.txt"},{"": "abs-guide.txt"},{"function my_ps() { ps $@ -u $USER -o pid,%cpu,%mem,bsdtime,command ; }": "abs-guide.txt"},{"function pp() { my_ps f | awk '!/awk/ && $0~var' var=${1:-\".*\"} ; }": "abs-guide.txt"},{"": "abs-guide.txt"},{"function killps()": "abs-guide.txt"},{"# kill by process name": "abs-guide.txt"},{"{": "abs-guide.txt"},{"local pid pname sig=\"-TERM\"": "abs-guide.txt"},{"# default signal": "abs-guide.txt"},{"if [ \"$#\" -lt 1 ] || [ \"$#\" -gt 2 ]; then": "abs-guide.txt"},{"echo \"Usage: killps [-SIGNAL] pattern\"": "abs-guide.txt"},{"return;": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"if [ $# = 2 ]; then sig=$1 ; fi": "abs-guide.txt"},{"for pid in $(my_ps| awk '!/awk/ && $0~pat { print $1 }' pat=${!#} )": "abs-guide.txt"},{"do": "abs-guide.txt"},{"pname=$(my_ps | awk '$1~var { print $5 }' var=$pid )": "abs-guide.txt"},{"if ask \"Kill process $pid <$pname> with signal $sig?\"": "abs-guide.txt"},{"then kill $sig $pid": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"done": "abs-guide.txt"},{"}": "abs-guide.txt"},{"function mydf()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"for fs ; do": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Pretty-print of 'df' output.": "abs-guide.txt"},{"# Inspired by 'dfc' utility.": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [ ! -d $fs ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"echo -e $fs\" :No such file or directory\" ; continue": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"local info=( $(command df -P $fs | awk 'END{ print $2,$3,$5 }') )": "abs-guide.txt"},{"local free=( $(command df -Pkh $fs | awk 'END{ print $4 }') )": "abs-guide.txt"},{"local nbstars=$(( 20 * ${info[1]} / ${info[0]} ))": "abs-guide.txt"},{"local out=\"[\"": "abs-guide.txt"},{"for ((j=0;j<20;j++)); do": "abs-guide.txt"},{"if [ ${j} -lt ${nbstars} ]; then": "abs-guide.txt"},{"out=$out\"*\"": "abs-guide.txt"},{"else": "abs-guide.txt"},{"out=$out\"-\"": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"done": "abs-guide.txt"},{"out=${info[2]}\" \"$out\"] (\"$free\" free on \"$fs\")\"": "abs-guide.txt"},{"echo -e $out": "abs-guide.txt"},{"done": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"function my_ip() # Get IP adress on ethernet.": "abs-guide.txt"},{"{": "abs-guide.txt"},{"MY_IP=$(/sbin/ifconfig eth0 | awk '/inet/ { print $2 } ' |": "abs-guide.txt"},{"sed -e s/addr://)": "abs-guide.txt"},{"echo ${MY_IP:-\"Not connected\"}": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix M. Sample .bashrc and .bash_profile Files": "abs-guide.txt"},{"": "abs-guide.txt"},{"829": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"function": "abs-guide.txt"},{"{": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"ii()": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Get current host related info.": "abs-guide.txt"},{"": "abs-guide.txt"},{"-e \"\\nYou are logged on ${BRed}$HOST\"": "abs-guide.txt"},{"-e \"\\n${BRed}Additionnal information:$NC \" ; uname -a": "abs-guide.txt"},{"-e \"\\n${BRed}Users logged on:$NC \" ; w -hs |": "abs-guide.txt"},{"cut -d \" \" -f1 | sort | uniq": "abs-guide.txt"},{"-e \"\\n${BRed}Current date :$NC \" ; date": "abs-guide.txt"},{"-e \"\\n${BRed}Machine stats :$NC \" ; uptime": "abs-guide.txt"},{"-e \"\\n${BRed}Memory stats :$NC \" ; free": "abs-guide.txt"},{"-e \"\\n${BRed}Diskspace :$NC \" ; mydf / $HOME": "abs-guide.txt"},{"-e \"\\n${BRed}Local IP Address :$NC\" ; my_ip": "abs-guide.txt"},{"-e \"\\n${BRed}Open connections :$NC \"; netstat -pan --inet;": "abs-guide.txt"},{"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"#------------------------------------------------------------# Misc utilities:": "abs-guide.txt"},{"#------------------------------------------------------------function repeat()": "abs-guide.txt"},{"# Repeat n times command.": "abs-guide.txt"},{"{": "abs-guide.txt"},{"local i max": "abs-guide.txt"},{"max=$1; shift;": "abs-guide.txt"},{"for ((i=1; i <= max ; i++)); do # --> C-like syntax": "abs-guide.txt"},{"eval \"$@\";": "abs-guide.txt"},{"done": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"function ask()": "abs-guide.txt"},{"# See 'killps' for example of use.": "abs-guide.txt"},{"{": "abs-guide.txt"},{"echo -n \"$@\" '[y/n] ' ; read ans": "abs-guide.txt"},{"case \"$ans\" in": "abs-guide.txt"},{"y*|Y*) return 0 ;;": "abs-guide.txt"},{"*) return 1 ;;": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"}": "abs-guide.txt"},{"function corename()": "abs-guide.txt"},{"# Get name of app that created a corefile.": "abs-guide.txt"},{"{": "abs-guide.txt"},{"for file ; do": "abs-guide.txt"},{"echo -n $file : ; gdb --core=$file --batch | head -1": "abs-guide.txt"},{"done": "abs-guide.txt"},{"}": "abs-guide.txt"},{"": "abs-guide.txt"},{"#=========================================================================": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# PROGRAMMABLE COMPLETION SECTION": "abs-guide.txt"},{"# Most are taken from the bash 2.05 documentation and from Ian McDonald's": "abs-guide.txt"},{"# 'Bash completion' package (http://www.caliban.org/bash/#completion)": "abs-guide.txt"},{"# You will in fact need bash more recent then 3.0 for some features.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Note that most linux distributions now provide many completions": "abs-guide.txt"},{"# 'out of the box' - however, you might need to make your own one day,": "abs-guide.txt"},{"# so I kept those here as examples.": "abs-guide.txt"},{"#=========================================================================": "abs-guide.txt"},{"if [ \"${BASH_VERSION%.*}\" \\< \"3.0\" ]; then": "abs-guide.txt"},{"echo \"You will need to upgrade to version 3.0 for full \\": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix M. Sample .bashrc and .bash_profile Files": "abs-guide.txt"},{"": "abs-guide.txt"},{"830": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"programmable completion features\"": "abs-guide.txt"},{"return": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"shopt -s extglob": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Necessary.": "abs-guide.txt"},{"": "abs-guide.txt"},{"complete": "abs-guide.txt"},{"complete": "abs-guide.txt"},{"complete": "abs-guide.txt"},{"complete": "abs-guide.txt"},{"complete": "abs-guide.txt"},{"complete": "abs-guide.txt"},{"complete": "abs-guide.txt"},{"": "abs-guide.txt"},{"-A": "abs-guide.txt"},{"-A": "abs-guide.txt"},{"-A": "abs-guide.txt"},{"-A": "abs-guide.txt"},{"-A": "abs-guide.txt"},{"-A": "abs-guide.txt"},{"-A": "abs-guide.txt"},{"": "abs-guide.txt"},{"hostname": "abs-guide.txt"},{"export": "abs-guide.txt"},{"variable": "abs-guide.txt"},{"enabled": "abs-guide.txt"},{"alias": "abs-guide.txt"},{"function": "abs-guide.txt"},{"user": "abs-guide.txt"},{"": "abs-guide.txt"},{"rsh rcp telnet rlogin ftp ping disk": "abs-guide.txt"},{"printenv": "abs-guide.txt"},{"export local readonly unset": "abs-guide.txt"},{"builtin": "abs-guide.txt"},{"alias unalias": "abs-guide.txt"},{"function": "abs-guide.txt"},{"su mail finger": "abs-guide.txt"},{"": "abs-guide.txt"},{"complete": "abs-guide.txt"},{"complete": "abs-guide.txt"},{"complete": "abs-guide.txt"},{"complete": "abs-guide.txt"},{"": "abs-guide.txt"},{"-A": "abs-guide.txt"},{"-A": "abs-guide.txt"},{"-A": "abs-guide.txt"},{"-A": "abs-guide.txt"},{"": "abs-guide.txt"},{"helptopic help": "abs-guide.txt"},{"# Currently same as builtins.": "abs-guide.txt"},{"shopt": "abs-guide.txt"},{"shopt": "abs-guide.txt"},{"stopped -P '%' bg": "abs-guide.txt"},{"job -P '%'": "abs-guide.txt"},{"fg jobs disown": "abs-guide.txt"},{"": "abs-guide.txt"},{"complete -A directory": "abs-guide.txt"},{"complete -A directory": "abs-guide.txt"},{"": "abs-guide.txt"},{"mkdir rmdir": "abs-guide.txt"},{"-o default cd": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Compression": "abs-guide.txt"},{"complete -f -o": "abs-guide.txt"},{"complete -f -o": "abs-guide.txt"},{"complete -f -o": "abs-guide.txt"},{"complete -f -o": "abs-guide.txt"},{"complete -f -o": "abs-guide.txt"},{"complete -f -o": "abs-guide.txt"},{"complete -f -o": "abs-guide.txt"},{"complete -f -o": "abs-guide.txt"},{"complete -f -o": "abs-guide.txt"},{"": "abs-guide.txt"},{"-X": "abs-guide.txt"},{"-X": "abs-guide.txt"},{"-X": "abs-guide.txt"},{"-X": "abs-guide.txt"},{"-X": "abs-guide.txt"},{"-X": "abs-guide.txt"},{"-X": "abs-guide.txt"},{"-X": "abs-guide.txt"},{"-X": "abs-guide.txt"},{"": "abs-guide.txt"},{"default": "abs-guide.txt"},{"default": "abs-guide.txt"},{"default": "abs-guide.txt"},{"default": "abs-guide.txt"},{"default": "abs-guide.txt"},{"default": "abs-guide.txt"},{"default": "abs-guide.txt"},{"default": "abs-guide.txt"},{"default": "abs-guide.txt"},{"": "abs-guide.txt"},{"'*.+(zip|ZIP)' zip": "abs-guide.txt"},{"'!*.+(zip|ZIP)' unzip": "abs-guide.txt"},{"'*.+(z|Z)'": "abs-guide.txt"},{"compress": "abs-guide.txt"},{"'!*.+(z|Z)'": "abs-guide.txt"},{"uncompress": "abs-guide.txt"},{"'*.+(gz|GZ)'": "abs-guide.txt"},{"gzip": "abs-guide.txt"},{"'!*.+(gz|GZ)'": "abs-guide.txt"},{"gunzip": "abs-guide.txt"},{"'*.+(bz2|BZ2)' bzip2": "abs-guide.txt"},{"'!*.+(bz2|BZ2)' bunzip2": "abs-guide.txt"},{"'!*.+(zip|ZIP|z|Z|gz|GZ|bz2|BZ2)' extract": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Documents - Postscript,pdf,dvi.....": "abs-guide.txt"},{"complete -f -o default -X '!*.+(ps|PS)' gs ghostview ps2pdf ps2ascii": "abs-guide.txt"},{"complete -f -o default -X \\": "abs-guide.txt"},{"'!*.+(dvi|DVI)' dvips dvipdf xdvi dviselect dvitype": "abs-guide.txt"},{"complete -f -o default -X '!*.+(pdf|PDF)' acroread pdf2ps": "abs-guide.txt"},{"complete -f -o default -X '!*.@(@(?(e)ps|?(E)PS|pdf|PDF)?\\": "abs-guide.txt"},{"(.gz|.GZ|.bz2|.BZ2|.Z))' gv ggv": "abs-guide.txt"},{"complete -f -o default -X '!*.texi*' makeinfo texi2dvi texi2html texi2pdf": "abs-guide.txt"},{"complete -f -o default -X '!*.tex' tex latex slitex": "abs-guide.txt"},{"complete -f -o default -X '!*.lyx' lyx": "abs-guide.txt"},{"complete -f -o default -X '!*.+(htm*|HTM*)' lynx html2ps": "abs-guide.txt"},{"complete -f -o default -X \\": "abs-guide.txt"},{"'!*.+(doc|DOC|xls|XLS|ppt|PPT|sx?|SX?|csv|CSV|od?|OD?|ott|OTT)' soffice": "abs-guide.txt"},{"# Multimedia": "abs-guide.txt"},{"complete -f -o default -X \\": "abs-guide.txt"},{"'!*.+(gif|GIF|jp*g|JP*G|bmp|BMP|xpm|XPM|png|PNG)' xv gimp ee gqview": "abs-guide.txt"},{"complete -f -o default -X '!*.+(mp3|MP3)' mpg123 mpg321": "abs-guide.txt"},{"complete -f -o default -X '!*.+(ogg|OGG)' ogg123": "abs-guide.txt"},{"complete -f -o default -X \\": "abs-guide.txt"},{"'!*.@(mp[23]|MP[23]|ogg|OGG|wav|WAV|pls|\\": "abs-guide.txt"},{"m3u|xm|mod|s[3t]m|it|mtm|ult|flac)' xmms": "abs-guide.txt"},{"complete -f -o default -X '!*.@(mp?(e)g|MP?(E)G|wma|avi|AVI|\\": "abs-guide.txt"},{"asf|vob|VOB|bin|dat|vcd|ps|pes|fli|viv|rm|ram|yuv|mov|MOV|qt|\\": "abs-guide.txt"},{"QT|wmv|mp3|MP3|ogg|OGG|ogm|OGM|mp4|MP4|wav|WAV|asx|ASX)' xine": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix M. Sample .bashrc and .bash_profile Files": "abs-guide.txt"},{"": "abs-guide.txt"},{"831": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"complete -f -o default -X '!*.pl'": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"perl perl5": "abs-guide.txt"},{"": "abs-guide.txt"},{"This is a 'universal' completion function - it works when commands have": "abs-guide.txt"},{"a so-called 'long options' mode , ie: 'ls --all' instead of 'ls -a'": "abs-guide.txt"},{"Needs the '-o' option of grep": "abs-guide.txt"},{"(try the commented-out version if not available).": "abs-guide.txt"},{"": "abs-guide.txt"},{"# First, remove '=' from completion word separators": "abs-guide.txt"},{"#+ (this will allow completions like 'ls --color=auto' to work correctly).": "abs-guide.txt"},{"COMP_WORDBREAKS=${COMP_WORDBREAKS/=/}": "abs-guide.txt"},{"": "abs-guide.txt"},{"_get_longopts()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"#$1 --help | sed -e '/--/!d' -e 's/.*--\\([^[:space:].,]*\\).*/--\\1/'| \\": "abs-guide.txt"},{"#grep ^\"$2\" |sort -u ;": "abs-guide.txt"},{"$1 --help | grep -o -e \"--[^[:space:].,]*\" | grep -e \"$2\" |sort -u": "abs-guide.txt"},{"}": "abs-guide.txt"},{"_longopts()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"local cur": "abs-guide.txt"},{"cur=${COMP_WORDS[COMP_CWORD]}": "abs-guide.txt"},{"case \"${cur:-*}\" in": "abs-guide.txt"},{"-*)": "abs-guide.txt"},{";;": "abs-guide.txt"},{"*)": "abs-guide.txt"},{"return ;;": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"case \"$1\" in": "abs-guide.txt"},{"\\~*)": "abs-guide.txt"},{"eval cmd=\"$1\" ;;": "abs-guide.txt"},{"*)": "abs-guide.txt"},{"cmd=\"$1\" ;;": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"COMPREPLY=( $(_get_longopts ${1} ${cur} ) )": "abs-guide.txt"},{"}": "abs-guide.txt"},{"complete": "abs-guide.txt"},{"complete": "abs-guide.txt"},{"": "abs-guide.txt"},{"-o default -F _longopts configure bash": "abs-guide.txt"},{"-o default -F _longopts wget id info a2ps ls recode": "abs-guide.txt"},{"": "abs-guide.txt"},{"_tar()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"local cur ext regex tar untar": "abs-guide.txt"},{"COMPREPLY=()": "abs-guide.txt"},{"cur=${COMP_WORDS[COMP_CWORD]}": "abs-guide.txt"},{"# If we want an option, return the possible long options.": "abs-guide.txt"},{"case \"$cur\" in": "abs-guide.txt"},{"-*)": "abs-guide.txt"},{"COMPREPLY=( $(_get_longopts $1 $cur ) ); return 0;;": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"if [ $COMP_CWORD -eq 1 ]; then": "abs-guide.txt"},{"COMPREPLY=( $( compgen -W 'c t x u r d A' -- $cur ) )": "abs-guide.txt"},{"return 0": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"case \"${COMP_WORDS[1]}\" in": "abs-guide.txt"},{"?(-)c*f)": "abs-guide.txt"},{"COMPREPLY=( $( compgen -f $cur ) )": "abs-guide.txt"},{"return 0": "abs-guide.txt"},{";;": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix M. Sample .bashrc and .bash_profile Files": "abs-guide.txt"},{"": "abs-guide.txt"},{"832": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"+([^Izjy])f)": "abs-guide.txt"},{"ext='tar'": "abs-guide.txt"},{"regex=$ext": "abs-guide.txt"},{";;": "abs-guide.txt"},{"*z*f)": "abs-guide.txt"},{"ext='tar.gz'": "abs-guide.txt"},{"regex='t\\(ar\\.\\)\\(gz\\|Z\\)'": "abs-guide.txt"},{";;": "abs-guide.txt"},{"*[Ijy]*f)": "abs-guide.txt"},{"ext='t?(ar.)bz?(2)'": "abs-guide.txt"},{"regex='t\\(ar\\.\\)bz2\\?'": "abs-guide.txt"},{";;": "abs-guide.txt"},{"*)": "abs-guide.txt"},{"COMPREPLY=( $( compgen -f $cur ) )": "abs-guide.txt"},{"return 0": "abs-guide.txt"},{";;": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"if [[ \"$COMP_LINE\" == tar*.$ext' '* ]]; then": "abs-guide.txt"},{"# Complete on files in tar file.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"# Get name of tar file from command line.": "abs-guide.txt"},{"tar=$( echo \"$COMP_LINE\" | \\": "abs-guide.txt"},{"sed -e 's|^.* \\([^ ]*'$regex'\\) .*$|\\1|' )": "abs-guide.txt"},{"# Devise how to untar and list it.": "abs-guide.txt"},{"untar=t${COMP_WORDS[1]//[^Izjyf]/}": "abs-guide.txt"},{"COMPREPLY=( $( compgen -W \"$( echo $( tar $untar $tar \\": "abs-guide.txt"},{"2>/dev/null ) )\" -- \"$cur\" ) )": "abs-guide.txt"},{"return 0": "abs-guide.txt"},{"else": "abs-guide.txt"},{"# File completion on relevant files.": "abs-guide.txt"},{"COMPREPLY=( $( compgen -G $cur\\*.$ext ) )": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"return 0": "abs-guide.txt"},{"}": "abs-guide.txt"},{"complete -F _tar -o default tar": "abs-guide.txt"},{"_make()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"local mdef makef makef_dir=\".\" makef_inc gcmd cur prev i;": "abs-guide.txt"},{"COMPREPLY=();": "abs-guide.txt"},{"cur=${COMP_WORDS[COMP_CWORD]};": "abs-guide.txt"},{"prev=${COMP_WORDS[COMP_CWORD-1]};": "abs-guide.txt"},{"case \"$prev\" in": "abs-guide.txt"},{"-*f)": "abs-guide.txt"},{"COMPREPLY=($(compgen -f $cur ));": "abs-guide.txt"},{"return 0": "abs-guide.txt"},{";;": "abs-guide.txt"},{"esac;": "abs-guide.txt"},{"case \"$cur\" in": "abs-guide.txt"},{"-*)": "abs-guide.txt"},{"COMPREPLY=($(_get_longopts $1 $cur ));": "abs-guide.txt"},{"return 0": "abs-guide.txt"},{";;": "abs-guide.txt"},{"esac;": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix M. Sample .bashrc and .bash_profile Files": "abs-guide.txt"},{"": "abs-guide.txt"},{"833": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# ... make reads": "abs-guide.txt"},{"#": "abs-guide.txt"},{"GNUmakefile,": "abs-guide.txt"},{"#": "abs-guide.txt"},{"then makefile": "abs-guide.txt"},{"#": "abs-guide.txt"},{"then Makefile ...": "abs-guide.txt"},{"if [ -f ${makef_dir}/GNUmakefile ]; then": "abs-guide.txt"},{"makef=${makef_dir}/GNUmakefile": "abs-guide.txt"},{"elif [ -f ${makef_dir}/makefile ]; then": "abs-guide.txt"},{"makef=${makef_dir}/makefile": "abs-guide.txt"},{"elif [ -f ${makef_dir}/Makefile ]; then": "abs-guide.txt"},{"makef=${makef_dir}/Makefile": "abs-guide.txt"},{"else": "abs-guide.txt"},{"makef=${makef_dir}/*.mk": "abs-guide.txt"},{"# Local convention.": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Before we scan for targets, see if a Makefile name was": "abs-guide.txt"},{"#+ specified with -f.": "abs-guide.txt"},{"for (( i=0; i < ${#COMP_WORDS[@]}; i++ )); do": "abs-guide.txt"},{"if [[ ${COMP_WORDS[i]} == -f ]]; then": "abs-guide.txt"},{"# eval for tilde expansion": "abs-guide.txt"},{"eval makef=${COMP_WORDS[i+1]}": "abs-guide.txt"},{"break": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"done": "abs-guide.txt"},{"[ ! -f $makef ] && return 0": "abs-guide.txt"},{"# Deal with included Makefiles.": "abs-guide.txt"},{"makef_inc=$( grep -E '^-?include' $makef |": "abs-guide.txt"},{"sed -e \"s,^.* ,\"$makef_dir\"/,\" )": "abs-guide.txt"},{"for file in $makef_inc; do": "abs-guide.txt"},{"[ -f $file ] && makef=\"$makef $file\"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"": "abs-guide.txt"},{"# If we have a partial word to complete, restrict completions": "abs-guide.txt"},{"#+ to matches of that word.": "abs-guide.txt"},{"if [ -n \"$cur\" ]; then gcmd='grep \"^$cur\"' ; else gcmd=cat ; fi": "abs-guide.txt"},{"COMPREPLY=( $( awk -F':' '/^[a-zA-Z0-9][^$#\\/\\t=]*:([^=]|$)/ \\": "abs-guide.txt"},{"{split($1,A,/ /);for(i in A)print A[i]}' \\": "abs-guide.txt"},{"$makef 2>/dev/null | eval $gcmd ))": "abs-guide.txt"},{"}": "abs-guide.txt"},{"complete -F _make -X '+($*|*.[cho])' make gmake pmake": "abs-guide.txt"},{"": "abs-guide.txt"},{"_killall()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"local cur prev": "abs-guide.txt"},{"COMPREPLY=()": "abs-guide.txt"},{"cur=${COMP_WORDS[COMP_CWORD]}": "abs-guide.txt"},{"# Get a list of processes": "abs-guide.txt"},{"#+ (the first sed evaluation": "abs-guide.txt"},{"#+ takes care of swapped out processes, the second": "abs-guide.txt"},{"#+ takes care of getting the basename of the process).": "abs-guide.txt"},{"COMPREPLY=( $( ps -u $USER -o comm | \\": "abs-guide.txt"},{"sed -e '1,1d' -e 's#[]\\[]##g' -e 's#^.*/##'| \\": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix M. Sample .bashrc and .bash_profile Files": "abs-guide.txt"},{"": "abs-guide.txt"},{"834": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"awk '{if ($0 ~ /^'$cur'/) print $0}' ))": "abs-guide.txt"},{"return 0": "abs-guide.txt"},{"}": "abs-guide.txt"},{"complete -F _killall killall killps": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Local Variables:": "abs-guide.txt"},{"mode:shell-script": "abs-guide.txt"},{"sh-shell:bash": "abs-guide.txt"},{"End:": "abs-guide.txt"},{"": "abs-guide.txt"},{"And, here is a snippet from Andrzej Szelachowski's instructive .bash_profile file.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example M-2. .bash_profile file": "abs-guide.txt"},{"# From Andrzej Szelachowski's ~/.bash_profile:": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Note that a variable may require special treatment": "abs-guide.txt"},{"#+ if it will be exported.": "abs-guide.txt"},{"DARKGRAY='\\e[1;30m'": "abs-guide.txt"},{"LIGHTRED='\\e[1;31m'": "abs-guide.txt"},{"GREEN='\\e[32m'": "abs-guide.txt"},{"YELLOW='\\e[1;33m'": "abs-guide.txt"},{"LIGHTBLUE='\\e[1;34m'": "abs-guide.txt"},{"NC='\\e[m'": "abs-guide.txt"},{"PCT=\"\\`if [[ \\$EUID -eq 0 ]]; then T='$LIGHTRED' ; else T='$LIGHTBLUE'; fi;": "abs-guide.txt"},{"echo \\$T \\`\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"For \"literal\" command substitution to be assigned to a variable,": "abs-guide.txt"},{"use escapes and double quotes:": "abs-guide.txt"},{"PCT=\"\\` ... \\`\" . . .": "abs-guide.txt"},{"Otherwise, the value of PCT variable is assigned only once,": "abs-guide.txt"},{"when the variable is exported/read from .bash_profile,": "abs-guide.txt"},{"and it will not change afterwards even if the user ID changes.": "abs-guide.txt"},{"": "abs-guide.txt"},{"PS1=\"\\n$GREEN[\\w] \\n$DARKGRAY($PCT\\t$DARKGRAY)-($PCT\\u$DARKGRAY)-($PCT\\!": "abs-guide.txt"},{"$DARKGRAY)$YELLOW-> $NC\"": "abs-guide.txt"},{"# Escape a variables whose value changes:": "abs-guide.txt"},{"#": "abs-guide.txt"},{"if [[ \\$EUID -eq 0 ]],": "abs-guide.txt"},{"# Otherwise the value of the EUID variable will be assigned only once,": "abs-guide.txt"},{"#+ as above.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"When a variable is assigned, it should be called escaped:": "abs-guide.txt"},{"echo \\$T,": "abs-guide.txt"},{"Otherwise the value of the T variable is taken from the moment the PCT": "abs-guide.txt"},{"variable is exported/read from .bash_profile.": "abs-guide.txt"},{"So, in this example it would be null.": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"When a variable's value contains a semicolon it should be strong quoted:": "abs-guide.txt"},{"T='$LIGHTRED',": "abs-guide.txt"},{"Otherwise, the semicolon will be interpreted as a command separator.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix M. Sample .bashrc and .bash_profile Files": "abs-guide.txt"},{"": "abs-guide.txt"},{"835": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Variables PCT and PS1 can be merged into a new PS1 variable:": "abs-guide.txt"},{"": "abs-guide.txt"},{"PS1=\"\\`if [[ \\$EUID -eq 0 ]]; then PCT='$LIGHTRED';": "abs-guide.txt"},{"else PCT='$LIGHTBLUE'; fi;": "abs-guide.txt"},{"echo '\\n$GREEN[\\w] \\n$DARKGRAY('\\$PCT'\\t$DARKGRAY)-\\": "abs-guide.txt"},{"('\\$PCT'\\u$DARKGRAY)-('\\$PCT'\\!$DARKGRAY)$YELLOW-> $NC'\\`\"": "abs-guide.txt"},{"# The trick is to use strong quoting for parts of old PS1 variable.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix M. Sample .bashrc and .bash_profile Files": "abs-guide.txt"},{"": "abs-guide.txt"},{"836": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAppendix N. Converting DOS Batch Files to Shell": "abs-guide.txt"},{"Scripts": "abs-guide.txt"},{"Quite a number of programmers learned scripting on a PC running DOS. Even the crippled DOS batch file": "abs-guide.txt"},{"language allowed writing some fairly powerful scripts and applications, though they often required extensive": "abs-guide.txt"},{"kludges and workarounds. Occasionally, the need still arises to convert an old DOS batch file to a UNIX shell": "abs-guide.txt"},{"script. This is generally not difficult, as DOS batch file operators are only a limited subset of the equivalent": "abs-guide.txt"},{"shell scripting ones.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Table N-1. Batch file keywords / variables / operators, and their shell equivalents": "abs-guide.txt"},{"Batch File Operator": "abs-guide.txt"},{"%": "abs-guide.txt"},{"/": "abs-guide.txt"},{"\\": "abs-guide.txt"},{"==": "abs-guide.txt"},{"!==!": "abs-guide.txt"},{"": "abs-guide.txt"},{"Shell Script Equivalent": "abs-guide.txt"},{"$": "abs-guide.txt"},{"/": "abs-guide.txt"},{"=": "abs-guide.txt"},{"!=": "abs-guide.txt"},{"": "abs-guide.txt"},{"|": "abs-guide.txt"},{"@": "abs-guide.txt"},{"*": "abs-guide.txt"},{">": "abs-guide.txt"},{">>": "abs-guide.txt"},{"<": "abs-guide.txt"},{"%VAR%": "abs-guide.txt"},{"REM": "abs-guide.txt"},{"NOT": "abs-guide.txt"},{"NUL": "abs-guide.txt"},{"": "abs-guide.txt"},{"|": "abs-guide.txt"},{"set +v": "abs-guide.txt"},{"*": "abs-guide.txt"},{">": "abs-guide.txt"},{">>": "abs-guide.txt"},{"<": "abs-guide.txt"},{"$VAR": "abs-guide.txt"},{"#": "abs-guide.txt"},{"!": "abs-guide.txt"},{"/dev/null": "abs-guide.txt"},{"": "abs-guide.txt"},{"ECHO": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"": "abs-guide.txt"},{"ECHO.": "abs-guide.txt"},{"ECHO OFF": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"set +v": "abs-guide.txt"},{"": "abs-guide.txt"},{"FOR %%VAR IN (LIST) DO": "abs-guide.txt"},{":LABEL": "abs-guide.txt"},{"GOTO": "abs-guide.txt"},{"": "abs-guide.txt"},{"for var in [list]; do": "abs-guide.txt"},{"none (unnecessary)": "abs-guide.txt"},{"none (use a function)": "abs-guide.txt"},{"": "abs-guide.txt"},{"PAUSE": "abs-guide.txt"},{"CHOICE": "abs-guide.txt"},{"IF": "abs-guide.txt"},{"": "abs-guide.txt"},{"sleep": "abs-guide.txt"},{"case or select": "abs-guide.txt"},{"if": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix N. Converting DOS Batch Files to Shell Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"Meaning": "abs-guide.txt"},{"command-line parameter prefix": "abs-guide.txt"},{"command option flag": "abs-guide.txt"},{"directory path separator": "abs-guide.txt"},{"(equal-to) string comparison test": "abs-guide.txt"},{"(not equal-to) string comparison": "abs-guide.txt"},{"test": "abs-guide.txt"},{"pipe": "abs-guide.txt"},{"do not echo current command": "abs-guide.txt"},{"filename \"wild card\"": "abs-guide.txt"},{"file redirection (overwrite)": "abs-guide.txt"},{"file redirection (append)": "abs-guide.txt"},{"redirect stdin": "abs-guide.txt"},{"environmental variable": "abs-guide.txt"},{"comment": "abs-guide.txt"},{"negate following test": "abs-guide.txt"},{"\"black hole\" for burying": "abs-guide.txt"},{"command output": "abs-guide.txt"},{"echo (many more option in": "abs-guide.txt"},{"Bash)": "abs-guide.txt"},{"echo blank line": "abs-guide.txt"},{"do not echo command(s)": "abs-guide.txt"},{"following": "abs-guide.txt"},{"\"for\" loop": "abs-guide.txt"},{"label": "abs-guide.txt"},{"jump to another location in the": "abs-guide.txt"},{"script": "abs-guide.txt"},{"pause or wait an interval": "abs-guide.txt"},{"menu choice": "abs-guide.txt"},{"if-test": "abs-guide.txt"},{"": "abs-guide.txt"},{"837": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"IF EXIST FILENAME": "abs-guide.txt"},{"IF !%N==!": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [ -e filename ]": "abs-guide.txt"},{"if [ -z \"$N\" ]": "abs-guide.txt"},{"": "abs-guide.txt"},{"CALL": "abs-guide.txt"},{"COMMAND /C": "abs-guide.txt"},{"": "abs-guide.txt"},{"source or . (dot operator)": "abs-guide.txt"},{"source or . (dot operator)": "abs-guide.txt"},{"": "abs-guide.txt"},{"SET": "abs-guide.txt"},{"SHIFT": "abs-guide.txt"},{"": "abs-guide.txt"},{"export": "abs-guide.txt"},{"shift": "abs-guide.txt"},{"": "abs-guide.txt"},{"SGN": "abs-guide.txt"},{"ERRORLEVEL": "abs-guide.txt"},{"CON": "abs-guide.txt"},{"PRN": "abs-guide.txt"},{"LPT1": "abs-guide.txt"},{"COM1": "abs-guide.txt"},{"": "abs-guide.txt"},{"-lt or -gt": "abs-guide.txt"},{"$?": "abs-guide.txt"},{"stdin": "abs-guide.txt"},{"/dev/lp0": "abs-guide.txt"},{"/dev/lp0": "abs-guide.txt"},{"/dev/ttyS0": "abs-guide.txt"},{"": "abs-guide.txt"},{"test if file exists": "abs-guide.txt"},{"if replaceable parameter \"N\" not": "abs-guide.txt"},{"present": "abs-guide.txt"},{"\"include\" another script": "abs-guide.txt"},{"\"include\" another script (same": "abs-guide.txt"},{"as CALL)": "abs-guide.txt"},{"set an environmental variable": "abs-guide.txt"},{"left shift command-line": "abs-guide.txt"},{"argument list": "abs-guide.txt"},{"sign (of integer)": "abs-guide.txt"},{"exit status": "abs-guide.txt"},{"\"console\" (stdin)": "abs-guide.txt"},{"(generic) printer device": "abs-guide.txt"},{"first printer device": "abs-guide.txt"},{"first serial port": "abs-guide.txt"},{"": "abs-guide.txt"},{"Batch files usually contain DOS commands. These must be translated into their UNIX equivalents in order to": "abs-guide.txt"},{"convert a batch file into a shell script.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Table N-2. DOS commands and their UNIX equivalents": "abs-guide.txt"},{"DOS Command": "abs-guide.txt"},{"ASSIGN": "abs-guide.txt"},{"": "abs-guide.txt"},{"UNIX Equivalent": "abs-guide.txt"},{"ln": "abs-guide.txt"},{"": "abs-guide.txt"},{"ATTRIB": "abs-guide.txt"},{"": "abs-guide.txt"},{"chmod": "abs-guide.txt"},{"": "abs-guide.txt"},{"CD": "abs-guide.txt"},{"CHDIR": "abs-guide.txt"},{"CLS": "abs-guide.txt"},{"COMP": "abs-guide.txt"},{"COPY": "abs-guide.txt"},{"Ctl-C": "abs-guide.txt"},{"Ctl-Z": "abs-guide.txt"},{"DEL": "abs-guide.txt"},{"DELTREE": "abs-guide.txt"},{"": "abs-guide.txt"},{"cd": "abs-guide.txt"},{"cd": "abs-guide.txt"},{"clear": "abs-guide.txt"},{"diff, comm, cmp": "abs-guide.txt"},{"cp": "abs-guide.txt"},{"Ctl-C": "abs-guide.txt"},{"Ctl-D": "abs-guide.txt"},{"rm": "abs-guide.txt"},{"rm -rf": "abs-guide.txt"},{"": "abs-guide.txt"},{"DIR": "abs-guide.txt"},{"ERASE": "abs-guide.txt"},{"EXIT": "abs-guide.txt"},{"": "abs-guide.txt"},{"ls -l": "abs-guide.txt"},{"rm": "abs-guide.txt"},{"exit": "abs-guide.txt"},{"": "abs-guide.txt"},{"FC": "abs-guide.txt"},{"FIND": "abs-guide.txt"},{"MD": "abs-guide.txt"},{"": "abs-guide.txt"},{"comm, cmp": "abs-guide.txt"},{"grep": "abs-guide.txt"},{"mkdir": "abs-guide.txt"},{"": "abs-guide.txt"},{"Effect": "abs-guide.txt"},{"link file or": "abs-guide.txt"},{"directory": "abs-guide.txt"},{"change file": "abs-guide.txt"},{"permissions": "abs-guide.txt"},{"change directory": "abs-guide.txt"},{"change directory": "abs-guide.txt"},{"clear screen": "abs-guide.txt"},{"file compare": "abs-guide.txt"},{"file copy": "abs-guide.txt"},{"break (signal)": "abs-guide.txt"},{"EOF (end-of-file)": "abs-guide.txt"},{"delete file(s)": "abs-guide.txt"},{"delete directory": "abs-guide.txt"},{"recursively": "abs-guide.txt"},{"directory listing": "abs-guide.txt"},{"delete file(s)": "abs-guide.txt"},{"exit current": "abs-guide.txt"},{"process": "abs-guide.txt"},{"file compare": "abs-guide.txt"},{"find strings in files": "abs-guide.txt"},{"make directory": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix N. Converting DOS Batch Files to Shell Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"838": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"MKDIR": "abs-guide.txt"},{"MORE": "abs-guide.txt"},{"": "abs-guide.txt"},{"mkdir": "abs-guide.txt"},{"more": "abs-guide.txt"},{"": "abs-guide.txt"},{"MOVE": "abs-guide.txt"},{"PATH": "abs-guide.txt"},{"REN": "abs-guide.txt"},{"RENAME": "abs-guide.txt"},{"RD": "abs-guide.txt"},{"RMDIR": "abs-guide.txt"},{"SORT": "abs-guide.txt"},{"TIME": "abs-guide.txt"},{"": "abs-guide.txt"},{"mv": "abs-guide.txt"},{"$PATH": "abs-guide.txt"},{"mv": "abs-guide.txt"},{"mv": "abs-guide.txt"},{"rmdir": "abs-guide.txt"},{"rmdir": "abs-guide.txt"},{"sort": "abs-guide.txt"},{"date": "abs-guide.txt"},{"": "abs-guide.txt"},{"TYPE": "abs-guide.txt"},{"": "abs-guide.txt"},{"cat": "abs-guide.txt"},{"": "abs-guide.txt"},{"XCOPY": "abs-guide.txt"},{"": "abs-guide.txt"},{"cp": "abs-guide.txt"},{"": "abs-guide.txt"},{"make directory": "abs-guide.txt"},{"text file paging": "abs-guide.txt"},{"filter": "abs-guide.txt"},{"move": "abs-guide.txt"},{"path to executables": "abs-guide.txt"},{"rename (move)": "abs-guide.txt"},{"rename (move)": "abs-guide.txt"},{"remove directory": "abs-guide.txt"},{"remove directory": "abs-guide.txt"},{"sort file": "abs-guide.txt"},{"display system": "abs-guide.txt"},{"time": "abs-guide.txt"},{"output file to": "abs-guide.txt"},{"stdout": "abs-guide.txt"},{"(extended) file": "abs-guide.txt"},{"copy": "abs-guide.txt"},{"": "abs-guide.txt"},{"Virtually all UNIX and shell operators and commands have many more options and enhancements than": "abs-guide.txt"},{"their DOS and batch file counterparts. Many DOS batch files rely on auxiliary utilities, such as ask.com,": "abs-guide.txt"},{"a crippled counterpart to read.": "abs-guide.txt"},{"DOS supports only a very limited and incompatible subset of filename wild-card expansion, recognizing": "abs-guide.txt"},{"just the * and ? characters.": "abs-guide.txt"},{"Converting a DOS batch file into a shell script is generally straightforward, and the result ofttimes reads better": "abs-guide.txt"},{"than the original.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example N-1. VIEWDATA.BAT: DOS Batch File": "abs-guide.txt"},{"REM VIEWDATA": "abs-guide.txt"},{"REM INSPIRED BY AN EXAMPLE IN \"DOS POWERTOOLS\"": "abs-guide.txt"},{"REM": "abs-guide.txt"},{"BY PAUL SOMERSON": "abs-guide.txt"},{"": "abs-guide.txt"},{"@ECHO OFF": "abs-guide.txt"},{"IF !%1==! GOTO VIEWDATA": "abs-guide.txt"},{"REM IF NO COMMAND-LINE ARG...": "abs-guide.txt"},{"FIND \"%1\" C:\\BOZO\\BOOKLIST.TXT": "abs-guide.txt"},{"GOTO EXIT0": "abs-guide.txt"},{"REM PRINT LINE WITH STRING MATCH, THEN EXIT.": "abs-guide.txt"},{":VIEWDATA": "abs-guide.txt"},{"TYPE C:\\BOZO\\BOOKLIST.TXT | MORE": "abs-guide.txt"},{"REM SHOW ENTIRE FILE, 1 PAGE AT A TIME.": "abs-guide.txt"},{":EXIT0": "abs-guide.txt"},{"": "abs-guide.txt"},{"The script conversion is somewhat of an improvement. [152]": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix N. Converting DOS Batch Files to Shell Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"839": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"Example N-2. viewdata.sh: Shell Script Conversion of VIEWDATA.BAT": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# viewdata.sh": "abs-guide.txt"},{"# Conversion of VIEWDATA.BAT to shell script.": "abs-guide.txt"},{"DATAFILE=/home/bozo/datafiles/book-collection.data": "abs-guide.txt"},{"ARGNO=1": "abs-guide.txt"},{"# @ECHO OFF": "abs-guide.txt"},{"": "abs-guide.txt"},{"Command unnecessary here.": "abs-guide.txt"},{"": "abs-guide.txt"},{"if [ $# -lt \"$ARGNO\" ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"less $DATAFILE": "abs-guide.txt"},{"else": "abs-guide.txt"},{"grep \"$1\" $DATAFILE": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"": "abs-guide.txt"},{"# IF !%1==! GOTO VIEWDATA": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"# :EXIT0": "abs-guide.txt"},{"": "abs-guide.txt"},{"# TYPE C:\\MYDIR\\BOOKLIST.TXT | MORE": "abs-guide.txt"},{"# FIND \"%1\" C:\\MYDIR\\BOOKLIST.TXT": "abs-guide.txt"},{"": "abs-guide.txt"},{"# GOTOs, labels, smoke-and-mirrors, and flimflam unnecessary.": "abs-guide.txt"},{"# The converted script is short, sweet, and clean,": "abs-guide.txt"},{"#+ which is more than can be said for the original.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Ted Davis' Shell Scripts on the PC site had a set of comprehensive tutorials on the old-fashioned art of batch": "abs-guide.txt"},{"file programming. Unfortunately the page has vanished without a trace.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix N. Converting DOS Batch Files to Shell Scripts": "abs-guide.txt"},{"": "abs-guide.txt"},{"840": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAppendix O. Exercises": "abs-guide.txt"},{"The exercises that follow test and extend your knowledge of scripting. Think of them as a challenge, as an": "abs-guide.txt"},{"entertaining way to take you further along the stony path toward UNIX wizardry.": "abs-guide.txt"},{"": "abs-guide.txt"},{"On a dingy side street in a run-down section of Hoboken, New Jersey,": "abs-guide.txt"},{"there sits a nondescript squat two-story brick building with an inscriptio": "abs-guide.txt"},{"incised on a marble plate in its wall:": "abs-guide.txt"},{"Bash Scripting Hall of Fame.": "abs-guide.txt"},{"Inside, among various dusty uninteresting exhibits is a corroding,": "abs-guide.txt"},{"cobweb-festooned brass plaque inscribed with a short, very short": "abs-guide.txt"},{"list of those few persons who have successfully mastered the material": "abs-guide.txt"},{"in the Advanced Bash Scripting": "abs-guide.txt"},{"Guide, as evidenced by their performance": "abs-guide.txt"},{"on the following Exercise sections.": "abs-guide.txt"},{"(Alas, the author of the ABS": "abs-guide.txt"},{"Guide is not represented among the exhibits.": "abs-guide.txt"},{"This is possibly due to malicious rumors about lack of": "abs-guide.txt"},{"credentials and": "abs-guide.txt"},{"deficient scripting skills.)": "abs-guide.txt"},{"": "abs-guide.txt"},{"O.1. Analyzing Scripts": "abs-guide.txt"},{"Examine the following script. Run it, then explain what it does. Annotate the script and rewrite it in a more": "abs-guide.txt"},{"compact and elegant manner.": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"MAX=10000": "abs-guide.txt"},{"": "abs-guide.txt"},{"for((nr=1; nr<$MAX; nr++))": "abs-guide.txt"},{"do": "abs-guide.txt"},{"let \"t1 = nr % 5\"": "abs-guide.txt"},{"if [ \"$t1\" -ne 3 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"continue": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"let \"t2 = nr % 7\"": "abs-guide.txt"},{"if [ \"$t2\" -ne 4 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"continue": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"let \"t3 = nr % 9\"": "abs-guide.txt"},{"if [ \"$t3\" -ne 5 ]": "abs-guide.txt"},{"then": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix O. Exercises": "abs-guide.txt"},{"": "abs-guide.txt"},{"841": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"continue": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"break": "abs-guide.txt"},{"": "abs-guide.txt"},{"# What happens when you comment out this line? Why?": "abs-guide.txt"},{"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"echo \"Number = $nr\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"--Explain what the following script does. It is really just a parameterized command-line pipe.": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"DIRNAME=/usr/bin": "abs-guide.txt"},{"FILETYPE=\"shell script\"": "abs-guide.txt"},{"LOGFILE=logfile": "abs-guide.txt"},{"file \"$DIRNAME\"/* | fgrep \"$FILETYPE\" | tee $LOGFILE | wc -l": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"--Examine and explain the following script. For hints, you might refer to the listings for find and stat.": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# Author: Nathan Coulter": "abs-guide.txt"},{"# This code is released to the public domain.": "abs-guide.txt"},{"# The author gave permission to use this code snippet in the ABS Guide.": "abs-guide.txt"},{"find -maxdepth 1 -type f -printf '%f\\000' | {": "abs-guide.txt"},{"while read -d $'\\000'; do": "abs-guide.txt"},{"mv \"$REPLY\" \"$(date -d \"$(stat -c '%y' \"$REPLY\") \" '+%Y%m%d%H%M%S'": "abs-guide.txt"},{")-$REPLY\"": "abs-guide.txt"},{"done": "abs-guide.txt"},{"}": "abs-guide.txt"},{"# Warning: Test-drive this script in a \"scratch\" directory.": "abs-guide.txt"},{"# It will somehow affect all the files there.": "abs-guide.txt"},{"": "abs-guide.txt"},{"--A reader sent in the following code snippet.": "abs-guide.txt"},{"while read LINE": "abs-guide.txt"},{"do": "abs-guide.txt"},{"echo $LINE": "abs-guide.txt"},{"done < `tail -f /var/log/messages`": "abs-guide.txt"},{"": "abs-guide.txt"},{"He wished to write a script tracking changes to the system log file, /var/log/messages. Unfortunately,": "abs-guide.txt"},{"the above code block hangs and does nothing useful. Why? Fix this so it does work. (Hint: rather than": "abs-guide.txt"},{"redirecting the stdin of the loop, try a pipe.)": "abs-guide.txt"},{"---": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix O. Exercises": "abs-guide.txt"},{"": "abs-guide.txt"},{"842": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"Analyze the following \"one-liner\" (here split into two lines for clarity) contributed by Rory Winston:": "abs-guide.txt"},{"export SUM=0; for f in $(find src -name \"*.java\");": "abs-guide.txt"},{"do export SUM=$(($SUM + $(wc -l $f | awk '{ print $1 }'))); done; echo $SUM": "abs-guide.txt"},{"": "abs-guide.txt"},{"Hint: First, break the script up into bite-sized sections. Then, carefully examine its use of double-parentheses": "abs-guide.txt"},{"arithmetic, the export command, the find command, the wc command, and awk.": "abs-guide.txt"},{"--Analyze Example A-10, and reorganize it in a simplified and more logical style. See how many of the": "abs-guide.txt"},{"variables can be eliminated, and try to optimize the script to speed up its execution time.": "abs-guide.txt"},{"Alter the script so that it accepts any ordinary ASCII text file as input for its initial \"generation\". The script": "abs-guide.txt"},{"will read the first $ROW*$COL characters, and set the occurrences of vowels as \"living\" cells. Hint: be sure to": "abs-guide.txt"},{"translate the spaces in the input file to underscore characters.": "abs-guide.txt"},{"": "abs-guide.txt"},{"O.2. Writing Scripts": "abs-guide.txt"},{"Write a script to carry out each of the following tasks.": "abs-guide.txt"},{"EASY": "abs-guide.txt"},{"Self-reproducing Script": "abs-guide.txt"},{"Write a script that backs itself up, that is, copies itself to a file named backup.sh.": "abs-guide.txt"},{"Hint: Use the cat command and the appropriate positional parameter.": "abs-guide.txt"},{"Home Directory Listing": "abs-guide.txt"},{"Perform a recursive directory listing on the user's home directory and save the information to a file.": "abs-guide.txt"},{"Compress the file, have the script prompt the user to insert a USB flash drive, then press ENTER.": "abs-guide.txt"},{"Finally, save the file to the flash drive after making certain the flash drive has properly mounted by": "abs-guide.txt"},{"parsing the output of df. Note that the flash drive must be unmounted before it is removed.": "abs-guide.txt"},{"Converting for loops to while and until loops": "abs-guide.txt"},{"Convert the for loops in Example 11-1 to while loops. Hint: store the data in an array and step through": "abs-guide.txt"},{"the array elements.": "abs-guide.txt"},{"Having already done the \"heavy lifting,\" now convert the loops in the example to until loops.": "abs-guide.txt"},{"Changing the line spacing of a text file": "abs-guide.txt"},{"Write a script that reads each line of a target file, then writes the line back to stdout, but with an": "abs-guide.txt"},{"extra blank line following. This has the effect of double-spacing the file.": "abs-guide.txt"},{"Include all necessary code to check whether the script gets the necessary command-line argument (a": "abs-guide.txt"},{"filename), and whether the specified file exists.": "abs-guide.txt"},{"When the script runs correctly, modify it to triple-space the target file.": "abs-guide.txt"},{"Finally, write a script to remove all blank lines from the target file, single-spacing it.": "abs-guide.txt"},{"Backwards Listing": "abs-guide.txt"},{"Write a script that echoes itself to stdout, but backwards.": "abs-guide.txt"},{"Automatically Decompressing Files": "abs-guide.txt"},{"Appendix O. Exercises": "abs-guide.txt"},{"": "abs-guide.txt"},{"843": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"Given a list of filenames as input, this script queries each target file (parsing the output of the file": "abs-guide.txt"},{"command) for the type of compression used on it. Then the script automatically invokes the": "abs-guide.txt"},{"appropriate decompression command (gunzip, bunzip2, unzip, uncompress, or whatever). If a target": "abs-guide.txt"},{"file is not compressed, the script emits a warning message, but takes no other action on that particular": "abs-guide.txt"},{"file.": "abs-guide.txt"},{"Unique System ID": "abs-guide.txt"},{"Generate a \"unique\" 6-digit hexadecimal identifier for your computer. Do not use the flawed hostid": "abs-guide.txt"},{"command. Hint: md5sum /etc/passwd, then select the first 6 digits of output.": "abs-guide.txt"},{"Backup": "abs-guide.txt"},{"Archive as a \"tarball\" (*.tar.gz file) all the files in your home directory tree": "abs-guide.txt"},{"(/home/your-name) that have been modified in the last 24 hours. Hint: use find.": "abs-guide.txt"},{"Optional: you may use this as the basis of a backup script.": "abs-guide.txt"},{"Checking whether a process is still running": "abs-guide.txt"},{"Given a process ID (PID) as an argument, this script will check, at user-specified intervals, whether": "abs-guide.txt"},{"the given process is still running. You may use the ps and sleep commands.": "abs-guide.txt"},{"Primes": "abs-guide.txt"},{"Print (to stdout) all prime numbers between 60000 and 63000. The output should be nicely": "abs-guide.txt"},{"formatted in columns (hint: use printf).": "abs-guide.txt"},{"Lottery Numbers": "abs-guide.txt"},{"One type of lottery involves picking five different numbers, in the range of 1 - 50. Write a script that": "abs-guide.txt"},{"generates five pseudorandom numbers in this range, with no duplicates. The script will give the": "abs-guide.txt"},{"option of echoing the numbers to stdout or saving them to a file, along with the date and time the": "abs-guide.txt"},{"particular number set was generated. (If your script consistently generates winning lottery numbers,": "abs-guide.txt"},{"then you can retire on the proceeds and leave shell scripting to those of us who have to work for a": "abs-guide.txt"},{"living.)": "abs-guide.txt"},{"INTERMEDIATE": "abs-guide.txt"},{"Integer or String": "abs-guide.txt"},{"Write a script function that determines if an argument passed to it is an integer or a string. The": "abs-guide.txt"},{"function will return TRUE (0) if passed an integer, and FALSE (1) if passed a string.": "abs-guide.txt"},{"Hint: What does the following expression return when $1 is not an integer?": "abs-guide.txt"},{"expr $1 + 0": "abs-guide.txt"},{"ASCII to Integer": "abs-guide.txt"},{"The atoi function in C converts a string character to an integer. Write a shell script function that": "abs-guide.txt"},{"performs the same operation. Likewise, write a shell script function that does the inverse, mirroring": "abs-guide.txt"},{"the C itoa function which converts an integer into an ASCII character.": "abs-guide.txt"},{"Managing Disk Space": "abs-guide.txt"},{"List, one at a time, all files larger than 100K in the /home/username directory tree. Give the user": "abs-guide.txt"},{"the option to delete or compress the file, then proceed to show the next one. Write to a logfile the": "abs-guide.txt"},{"names of all deleted files and the deletion times.": "abs-guide.txt"},{"Banner": "abs-guide.txt"},{"Simulate the functionality of the deprecated banner command in a script.": "abs-guide.txt"},{"Removing Inactive Accounts": "abs-guide.txt"},{"Inactive accounts on a network server waste disk space and may become a security risk. Write an": "abs-guide.txt"},{"administrative script (to be invoked by root or the cron daemon) that checks for and deletes user": "abs-guide.txt"},{"accounts that have not been accessed within the last 90 days.": "abs-guide.txt"},{"Enforcing Disk Quotas": "abs-guide.txt"},{"Appendix O. Exercises": "abs-guide.txt"},{"": "abs-guide.txt"},{"844": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"Write a script for a multi-user system that checks users' disk usage. If a user surpasses a preset limit": "abs-guide.txt"},{"(500 MB, for example) in her /home/username directory, then the script automatically sends her a": "abs-guide.txt"},{"\"pigout\" warning e-mail.": "abs-guide.txt"},{"The script will use the du and mail commands. As an option, it will allow setting and enforcing quotas": "abs-guide.txt"},{"using the quota and setquota commands.": "abs-guide.txt"},{"Logged in User Information": "abs-guide.txt"},{"For all logged in users, show their real names and the time and date of their last login.": "abs-guide.txt"},{"Hint: use who, lastlog, and parse /etc/passwd.": "abs-guide.txt"},{"Safe Delete": "abs-guide.txt"},{"Implement, as a script, a \"safe\" delete command, sdel.sh. Filenames passed as command-line": "abs-guide.txt"},{"arguments to this script are not deleted, but instead gzipped if not already compressed (use file to": "abs-guide.txt"},{"check), then moved to a ~/TRASH directory. Upon invocation, the script checks the ~/TRASH": "abs-guide.txt"},{"directory for files older than 48 hours and permanently deletes them. (An better alternative might be": "abs-guide.txt"},{"to have a second script handle this, periodically invoked by the cron daemon.)": "abs-guide.txt"},{"Extra credit: Write the script so it can handle files and directories recursively. This would give it the": "abs-guide.txt"},{"capability of \"safely deleting\" entire directory structures.": "abs-guide.txt"},{"Making Change": "abs-guide.txt"},{"What is the most efficient way to make change for $1.68, using only coins in common circulations": "abs-guide.txt"},{"(up to 25c)? It's 6 quarters, 1 dime, a nickel, and three cents.": "abs-guide.txt"},{"Given any arbitrary command-line input in dollars and cents ($*.??), calculate the change, using the": "abs-guide.txt"},{"minimum number of coins. If your home country is not the United States, you may use your local": "abs-guide.txt"},{"currency units instead. The script will need to parse the command-line input, then change it to": "abs-guide.txt"},{"multiples of the smallest monetary unit (cents or whatever). Hint: look at Example 24-8.": "abs-guide.txt"},{"Quadratic Equations": "abs-guide.txt"},{"Solve a quadratic equation of the form Ax^2 + Bx + C = 0. Have a script take as arguments the": "abs-guide.txt"},{"coefficients, A, B, and C, and return the solutions to five decimal places.": "abs-guide.txt"},{"Hint: pipe the coefficients to bc, using the well-known formula, x = ( -B +/- sqrt( B^2 4AC ) ) / 2A.": "abs-guide.txt"},{"Table of Logarithms": "abs-guide.txt"},{"Using the bc and printf commands, print out a nicely-formatted table of eight-place natural logarithms": "abs-guide.txt"},{"in the interval between 0.00 and 100.00, in steps of .01.": "abs-guide.txt"},{"Hint: bc requires the -l option to load the math library.": "abs-guide.txt"},{"Unicode Table": "abs-guide.txt"},{"Using Example T-1 as a template, write a script that prints to a file a complete Unicode table.": "abs-guide.txt"},{"Hint: Use the -e option to echo: echo -e '\\uXXXX', where XXXX is the Unicode numerical character": "abs-guide.txt"},{"designation. This requires version 4.2 or later of Bash.": "abs-guide.txt"},{"Sum of Matching Numbers": "abs-guide.txt"},{"Find the sum of all five-digit numbers (in the range 10000 - 99999) containing exactly two out of the": "abs-guide.txt"},{"following set of digits: { 4, 5, 6 }. These may repeat within the same number, and if so, they count": "abs-guide.txt"},{"once for each occurrence.": "abs-guide.txt"},{"Some examples of matching numbers are 42057, 74638, and 89515.": "abs-guide.txt"},{"Lucky Numbers": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix O. Exercises": "abs-guide.txt"},{"": "abs-guide.txt"},{"845": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"A lucky number is one whose individual digits add up to 7, in successive additions. For example,": "abs-guide.txt"},{"62431 is a lucky number (6 + 2 + 4 + 3 + 1 = 16, 1 + 6 = 7). Find all the lucky numbers between 1000": "abs-guide.txt"},{"and 10000.": "abs-guide.txt"},{"Craps": "abs-guide.txt"},{"Borrowing the ASCII graphics from Example A-40, write a script that plays the well-known gambling": "abs-guide.txt"},{"game of craps. The script will accept bets from one or more players, roll the dice, and keep track of": "abs-guide.txt"},{"wins and losses, as well as of each player's bankroll.": "abs-guide.txt"},{"Tic-tac-toe": "abs-guide.txt"},{"Write a script that plays the child's game of tic-tac-toe against a human player. The script will let the": "abs-guide.txt"},{"human choose whether to take the first move. The script will follow an optimal strategy, and therefore": "abs-guide.txt"},{"never lose. To simplify matters, you may use ASCII graphics:": "abs-guide.txt"},{"o | x |": "abs-guide.txt"},{"---------| x |": "abs-guide.txt"},{"---------| o |": "abs-guide.txt"},{"Your move, human (row, column)?": "abs-guide.txt"},{"": "abs-guide.txt"},{"Alphabetizing a String": "abs-guide.txt"},{"Alphabetize (in ASCII order) an arbitrary string read from the command-line.": "abs-guide.txt"},{"Parsing": "abs-guide.txt"},{"Parse /etc/passwd, and output its contents in nice, easy-to-read tabular form.": "abs-guide.txt"},{"Logging Logins": "abs-guide.txt"},{"Parse /var/log/messages to produce a nicely formatted file of user logins and login times. The": "abs-guide.txt"},{"script may need to run as root. (Hint: Search for the string \"LOGIN.\")": "abs-guide.txt"},{"Pretty-Printing a Data File": "abs-guide.txt"},{"Certain database and spreadsheet packages use save-files with the fields separated by commas,": "abs-guide.txt"},{"commonly referred to as comma-separated values or CSVs. Other applications often need to parse": "abs-guide.txt"},{"these files.": "abs-guide.txt"},{"Given a data file with comma-separated fields, of the form:": "abs-guide.txt"},{"Jones,Bill,235 S. Williams St.,Denver,CO,80221,(303) 244-7989": "abs-guide.txt"},{"Smith,Tom,404 Polk Ave.,Los Angeles,CA,90003,(213) 879-5612": "abs-guide.txt"},{"...": "abs-guide.txt"},{"": "abs-guide.txt"},{"Reformat the data and print it out to stdout in labeled, evenly-spaced columns.": "abs-guide.txt"},{"Justification": "abs-guide.txt"},{"Given ASCII text input either from stdin or a file, adjust the word spacing to right-justify each line": "abs-guide.txt"},{"to a user-specified line-width, then send the output to stdout.": "abs-guide.txt"},{"Mailing List": "abs-guide.txt"},{"Using the mail command, write a script that manages a simple mailing list. The script automatically": "abs-guide.txt"},{"e-mails the monthly company newsletter, read from a specified text file, and sends it to all the": "abs-guide.txt"},{"addresses on the mailing list, which the script reads from another specified file.": "abs-guide.txt"},{"Generating Passwords": "abs-guide.txt"},{"Generate pseudorandom 8-character passwords, using characters in the ranges [0-9], [A-Z], [a-z].": "abs-guide.txt"},{"Each password must contain at least two digits.": "abs-guide.txt"},{"Monitoring a User": "abs-guide.txt"},{"You suspect that one particular user on the network has been abusing her privileges and possibly": "abs-guide.txt"},{"attempting to hack the system. Write a script to automatically monitor and log her activities when": "abs-guide.txt"},{"she's signed on. The log file will save entries for the previous week, and delete those entries more": "abs-guide.txt"},{"than seven days old.": "abs-guide.txt"},{"Appendix O. Exercises": "abs-guide.txt"},{"": "abs-guide.txt"},{"846": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"You may use last, lastlog, and lastcomm to aid your surveillance of the suspected fiend.": "abs-guide.txt"},{"Checking for Broken Links": "abs-guide.txt"},{"Using lynx with the -traversal option, write a script that checks a Web site for broken links.": "abs-guide.txt"},{"DIFFICULT": "abs-guide.txt"},{"Testing Passwords": "abs-guide.txt"},{"Write a script to check and validate passwords. The object is to flag \"weak\" or easily guessed": "abs-guide.txt"},{"password candidates.": "abs-guide.txt"},{"A trial password will be input to the script as a command-line parameter. To be considered": "abs-guide.txt"},{"acceptable, a password must meet the following minimum qualifications:": "abs-guide.txt"},{"\u25ca Minimum length of 8 characters": "abs-guide.txt"},{"\u25ca Must contain at least one numeric character": "abs-guide.txt"},{"\u25ca Must contain at least one of the following non-alphabetic characters: @, #, $, %, &, *, +, -, =": "abs-guide.txt"},{"Optional:": "abs-guide.txt"},{"\u25ca Do a dictionary check on every sequence of at least four consecutive alphabetic characters in": "abs-guide.txt"},{"the password under test. This will eliminate passwords containing embedded \"words\" found": "abs-guide.txt"},{"in a standard dictionary.": "abs-guide.txt"},{"\u25ca Enable the script to check all the passwords on your system. These do not reside in": "abs-guide.txt"},{"/etc/passwd.": "abs-guide.txt"},{"This exercise tests mastery of Regular Expressions.": "abs-guide.txt"},{"Cross Reference": "abs-guide.txt"},{"Write a script that generates a cross-reference (concordance) on a target file. The output will be a": "abs-guide.txt"},{"listing of all word occurrences in the target file, along with the line numbers in which each word": "abs-guide.txt"},{"occurs. Traditionally, linked list constructs would be used in such applications. Therefore, you should": "abs-guide.txt"},{"investigate arrays in the course of this exercise. Example 16-12 is probably not a good place to start.": "abs-guide.txt"},{"Square Root": "abs-guide.txt"},{"Write a script to calculate square roots of numbers using Newton's Method.": "abs-guide.txt"},{"The algorithm for this, expressed as a snippet of Bash pseudo-code is:": "abs-guide.txt"},{"# (Isaac) Newton's Method for speedy extraction": "abs-guide.txt"},{"#+ of square roots.": "abs-guide.txt"},{"guess = $argument": "abs-guide.txt"},{"# $argument is the number to find the square root of.": "abs-guide.txt"},{"# $guess is each successive calculated \"guess\" -- or trial solution -#+ of the square root.": "abs-guide.txt"},{"# Our first \"guess\" at a square root is the argument itself.": "abs-guide.txt"},{"oldguess = 0": "abs-guide.txt"},{"# $oldguess is the previous $guess.": "abs-guide.txt"},{"tolerance = .000001": "abs-guide.txt"},{"# To how close a tolerance we wish to calculate.": "abs-guide.txt"},{"loopcnt = 0": "abs-guide.txt"},{"# Let's keep track of how many times through the loop.": "abs-guide.txt"},{"# Some arguments will require more loop iterations than others.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix O. Exercises": "abs-guide.txt"},{"": "abs-guide.txt"},{"847": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"while [ ABS( $guess $oldguess ) -gt $tolerance ]": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^^^^^^^^^^^^^^^^^^^^^^^ Fix up syntax, of course.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"\"ABS\" is a (floating point) function to find the absolute value": "abs-guide.txt"},{"of the difference between the two terms.": "abs-guide.txt"},{"So, as long as difference between current and previous": "abs-guide.txt"},{"trial solution (guess) exceeds the tolerance, keep looping.": "abs-guide.txt"},{"": "abs-guide.txt"},{"do": "abs-guide.txt"},{"oldguess = $guess": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Update $oldguess to previous $guess.": "abs-guide.txt"},{"": "abs-guide.txt"},{"=======================================================": "abs-guide.txt"},{"guess = ( $oldguess + ( $argument / $oldguess ) ) / 2.0": "abs-guide.txt"},{"= 1/2 ( ($oldguess **2 + $argument) / $oldguess )": "abs-guide.txt"},{"equivalent to:": "abs-guide.txt"},{"= 1/2 ( $oldguess + $argument / $oldguess )": "abs-guide.txt"},{"that is, \"averaging out\" the trial solution and": "abs-guide.txt"},{"the proportion of argument deviation": "abs-guide.txt"},{"(in effect, splitting the error in half).": "abs-guide.txt"},{"This converges on an accurate solution": "abs-guide.txt"},{"with surprisingly few loop iterations . . .": "abs-guide.txt"},{"for arguments > $tolerance, of course.": "abs-guide.txt"},{"=======================================================": "abs-guide.txt"},{"": "abs-guide.txt"},{"(( loopcnt++ ))": "abs-guide.txt"},{"done": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Update loop counter.": "abs-guide.txt"},{"": "abs-guide.txt"},{"It's a simple enough recipe, and seems at first glance easy enough to convert into a working Bash": "abs-guide.txt"},{"script. The problem, though, is that Bash has no native support for floating point numbers. So, the": "abs-guide.txt"},{"script writer needs to use bc or possibly awk to convert the numbers and do the calculations. It could": "abs-guide.txt"},{"get rather messy . . .": "abs-guide.txt"},{"Logging File Accesses": "abs-guide.txt"},{"Log all accesses to the files in /etc during the course of a single day. This information should": "abs-guide.txt"},{"include the filename, user name, and access time. If any alterations to the files take place, that will be": "abs-guide.txt"},{"flagged. Write this data as tabular (tab-separated) formatted records in a logfile.": "abs-guide.txt"},{"Monitoring Processes": "abs-guide.txt"},{"Write a script to continually monitor all running processes and to keep track of how many child": "abs-guide.txt"},{"processes each parent spawns. If a process spawns more than five children, then the script sends an": "abs-guide.txt"},{"e-mail to the system administrator (or root) with all relevant information, including the time, PID of": "abs-guide.txt"},{"the parent, PIDs of the children, etc. The script appends a report to a log file every ten minutes.": "abs-guide.txt"},{"Strip Comments": "abs-guide.txt"},{"Strip all comments from a shell script whose name is specified on the command-line. Note that the": "abs-guide.txt"},{"initial #! line must not be stripped out.": "abs-guide.txt"},{"Strip HTML Tags": "abs-guide.txt"},{"Strip all the HTML tags from a specified HTML file, then reformat it into lines between 60 and 75": "abs-guide.txt"},{"characters in length. Reset paragraph and block spacing, as appropriate, and convert HTML tables to": "abs-guide.txt"},{"their approximate text equivalent.": "abs-guide.txt"},{"XML Conversion": "abs-guide.txt"},{"Convert an XML file to both HTML and text format.": "abs-guide.txt"},{"Optional: A script that converts Docbook/SGML to XML.": "abs-guide.txt"},{"Chasing Spammers": "abs-guide.txt"},{"Write a script that analyzes a spam e-mail by doing DNS lookups on the IP addresses in the headers to": "abs-guide.txt"},{"identify the relay hosts as well as the originating ISP. The script will forward the unaltered spam": "abs-guide.txt"},{"message to the responsible ISPs. Of course, it will be necessary to filter out your own ISP's IP": "abs-guide.txt"},{"address, so you don't end up complaining about yourself.": "abs-guide.txt"},{"Appendix O. Exercises": "abs-guide.txt"},{"": "abs-guide.txt"},{"848": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"As necessary, use the appropriate network analysis commands.": "abs-guide.txt"},{"For some ideas, see Example 16-41 and Example A-28.": "abs-guide.txt"},{"Optional: Write a script that searches through a list of e-mail messages and deletes the spam": "abs-guide.txt"},{"according to specified filters.": "abs-guide.txt"},{"Creating man pages": "abs-guide.txt"},{"Write a script that automates the process of creating man pages.": "abs-guide.txt"},{"Given a text file which contains information to be formatted into a man page, the script will read the": "abs-guide.txt"},{"file, then invoke the appropriate groff commands to output the corresponding man page to stdout.": "abs-guide.txt"},{"The text file contains blocks of information under the standard man page headings, i.e., NAME,": "abs-guide.txt"},{"SYNOPSIS, DESCRIPTION, etc.": "abs-guide.txt"},{"Example A-39 is an instructive first step.": "abs-guide.txt"},{"Hex Dump": "abs-guide.txt"},{"Do a hex(adecimal) dump on a binary file specified as an argument to the script. The output should be": "abs-guide.txt"},{"in neat tabular fields, with the first field showing the address, each of the next 8 fields a 4-byte hex": "abs-guide.txt"},{"number, and the final field the ASCII equivalent of the previous 8 fields.": "abs-guide.txt"},{"The obvious followup to this is to extend the hex dump script into a disassembler. Using a lookup": "abs-guide.txt"},{"table, or some other clever gimmick, convert the hex values into 80x86 op codes.": "abs-guide.txt"},{"Emulating a Shift Register": "abs-guide.txt"},{"Using Example 27-15 as an inspiration, write a script that emulates a 64-bit shift register as an array.": "abs-guide.txt"},{"Implement functions to load the register, shift left, shift right, and rotate it. Finally, write a function": "abs-guide.txt"},{"that interprets the register contents as eight 8-bit ASCII characters.": "abs-guide.txt"},{"Calculating Determinants": "abs-guide.txt"},{"Write a script that calculates determinants [153] by recursively expanding the minors. Use a 4 x 4": "abs-guide.txt"},{"determinant as a test case.": "abs-guide.txt"},{"Hidden Words": "abs-guide.txt"},{"Write a \"word-find\" puzzle generator, a script that hides 10 input words in a 10 x 10 array of random": "abs-guide.txt"},{"letters. The words may be hidden across, down, or diagonally.": "abs-guide.txt"},{"Optional: Write a script that solves word-find puzzles. To keep this from becoming too difficult, the": "abs-guide.txt"},{"solution script will find only horizontal and vertical words. (Hint: Treat each row and column as a": "abs-guide.txt"},{"string, and search for substrings.)": "abs-guide.txt"},{"Anagramming": "abs-guide.txt"},{"Anagram 4-letter input. For example, the anagrams of word are: do or rod row word. You may use": "abs-guide.txt"},{"/usr/share/dict/linux.words as the reference list.": "abs-guide.txt"},{"Word Ladders": "abs-guide.txt"},{"A \"word ladder\" is a sequence of words, with each successive word in the sequence differing from the": "abs-guide.txt"},{"previous one by a single letter.": "abs-guide.txt"},{"For example, to \"ladder\" from mark to vase:": "abs-guide.txt"},{"mark --> park --> part --> past --> vast --> vase": "abs-guide.txt"},{"^": "abs-guide.txt"},{"^": "abs-guide.txt"},{"^": "abs-guide.txt"},{"^": "abs-guide.txt"},{"^": "abs-guide.txt"},{"": "abs-guide.txt"},{"Write a script that solves word ladder puzzles. Given a starting and an ending word, the script will list": "abs-guide.txt"},{"all intermediate steps in the \"ladder.\" Note that all words in the sequence must be legitimate": "abs-guide.txt"},{"dictionary words.": "abs-guide.txt"},{"Fog Index": "abs-guide.txt"},{"Appendix O. Exercises": "abs-guide.txt"},{"": "abs-guide.txt"},{"849": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"The \"fog index\" of a passage of text estimates its reading difficulty, as a number corresponding": "abs-guide.txt"},{"roughly to a school grade level. For example, a passage with a fog index of 12 should be": "abs-guide.txt"},{"comprehensible to anyone with 12 years of schooling.": "abs-guide.txt"},{"The Gunning version of the fog index uses the following algorithm.": "abs-guide.txt"},{"1. Choose a section of the text at least 100 words in length.": "abs-guide.txt"},{"2. Count the number of sentences (a portion of a sentence truncated by the boundary of the text": "abs-guide.txt"},{"section counts as one).": "abs-guide.txt"},{"3. Find the average number of words per sentence.": "abs-guide.txt"},{"AVE_WDS_SEN = TOTAL_WORDS / SENTENCES": "abs-guide.txt"},{"4. Count the number of \"difficult\" words in the segment -- those containing at least 3 syllables.": "abs-guide.txt"},{"Divide this quantity by total words to get the proportion of difficult words.": "abs-guide.txt"},{"PRO_DIFF_WORDS = LONG_WORDS / TOTAL_WORDS": "abs-guide.txt"},{"5. The Gunning fog index is the sum of the above two quantities, multiplied by 0.4, then": "abs-guide.txt"},{"rounded to the nearest integer.": "abs-guide.txt"},{"G_FOG_INDEX = int ( 0.4 * ( AVE_WDS_SEN + PRO_DIFF_WORDS ) )": "abs-guide.txt"},{"Step 4 is by far the most difficult portion of the exercise. There exist various algorithms for estimating": "abs-guide.txt"},{"the syllable count of a word. A rule-of-thumb formula might consider the number of letters in a word": "abs-guide.txt"},{"and the vowel-consonant mix.": "abs-guide.txt"},{"A strict interpretation of the Gunning fog index does not count compound words and proper nouns as": "abs-guide.txt"},{"\"difficult\" words, but this would enormously complicate the script.": "abs-guide.txt"},{"Calculating PI using Buffon's Needle": "abs-guide.txt"},{"The Eighteenth Century French mathematician de Buffon came up with a novel experiment.": "abs-guide.txt"},{"Repeatedly drop a needle of length n onto a wooden floor composed of long and narrow parallel": "abs-guide.txt"},{"boards. The cracks separating the equal-width floorboards are a fixed distance d apart. Keep track of": "abs-guide.txt"},{"the total drops and the number of times the needle intersects a crack on the floor. The ratio of these": "abs-guide.txt"},{"two quantities turns out to be a fractional multiple of PI.": "abs-guide.txt"},{"In the spirit of Example 16-50, write a script that runs a Monte Carlo simulation of Buffon's Needle.": "abs-guide.txt"},{"To simplify matters, set the needle length equal to the distance between the cracks, n = d.": "abs-guide.txt"},{"Hint: there are actually two critical variables: the distance from the center of the needle to the nearest": "abs-guide.txt"},{"crack, and the inclination angle of the needle to that crack. You may use bc to handle the calculations.": "abs-guide.txt"},{"Playfair Cipher": "abs-guide.txt"},{"Implement the Playfair (Wheatstone) Cipher in a script.": "abs-guide.txt"},{"The Playfair Cipher encrypts text by substitution of digrams (2-letter groupings). It is traditional to": "abs-guide.txt"},{"use a 5 x 5 letter scrambled-alphabet key square for the encryption and decryption.": "abs-guide.txt"},{"C": "abs-guide.txt"},{"A": "abs-guide.txt"},{"I": "abs-guide.txt"},{"P": "abs-guide.txt"},{"V": "abs-guide.txt"},{"": "abs-guide.txt"},{"O": "abs-guide.txt"},{"B": "abs-guide.txt"},{"K": "abs-guide.txt"},{"Q": "abs-guide.txt"},{"W": "abs-guide.txt"},{"": "abs-guide.txt"},{"D": "abs-guide.txt"},{"F": "abs-guide.txt"},{"L": "abs-guide.txt"},{"R": "abs-guide.txt"},{"X": "abs-guide.txt"},{"": "abs-guide.txt"},{"E": "abs-guide.txt"},{"G": "abs-guide.txt"},{"M": "abs-guide.txt"},{"T": "abs-guide.txt"},{"Y": "abs-guide.txt"},{"": "abs-guide.txt"},{"S": "abs-guide.txt"},{"H": "abs-guide.txt"},{"N": "abs-guide.txt"},{"U": "abs-guide.txt"},{"Z": "abs-guide.txt"},{"": "abs-guide.txt"},{"Each letter of the alphabet appears once, except \"I\" also represents": "abs-guide.txt"},{"\"J\". The arbitrarily chosen key word, \"CODES\" comes first, then all": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix O. Exercises": "abs-guide.txt"},{"": "abs-guide.txt"},{"850": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"the rest of the alphabet, in order from left to right, skipping letters": "abs-guide.txt"},{"already used.": "abs-guide.txt"},{"To encrypt, separate the plaintext message into digrams (2-letter": "abs-guide.txt"},{"groups). If a group has two identical letters, delete the second, and": "abs-guide.txt"},{"form a new group. If there is a single letter left over at the end,": "abs-guide.txt"},{"insert a \"null\" character, typically an \"X.\"": "abs-guide.txt"},{"THIS IS A TOP SECRET MESSAGE": "abs-guide.txt"},{"TH IS IS AT OP SE CR ET ME SA GE": "abs-guide.txt"},{"": "abs-guide.txt"},{"For each digram, there are three possibilities.": "abs-guide.txt"},{"----------------------------------------------1) Both letters will be on the same row of the key square:": "abs-guide.txt"},{"For each letter, substitute the one immediately to the right, in that": "abs-guide.txt"},{"row. If necessary, wrap around left to the beginning of the row.": "abs-guide.txt"},{"or": "abs-guide.txt"},{"2) Both letters will be in the same column of the key square:": "abs-guide.txt"},{"For each letter, substitute the one immediately below it, in that": "abs-guide.txt"},{"row. If necessary, wrap around to the top of the column.": "abs-guide.txt"},{"or": "abs-guide.txt"},{"3) Both letters will form the corners of a rectangle within the key square:": "abs-guide.txt"},{"For each letter, substitute the one on the other corner the rectangle": "abs-guide.txt"},{"which lies on the same row.": "abs-guide.txt"},{"": "abs-guide.txt"},{"The \"TH\" digram falls under case #3.": "abs-guide.txt"},{"G H": "abs-guide.txt"},{"M N": "abs-guide.txt"},{"T U": "abs-guide.txt"},{"(Rectangle with \"T\" and \"H\" at corners)": "abs-guide.txt"},{"T --> U": "abs-guide.txt"},{"H --> G": "abs-guide.txt"},{"": "abs-guide.txt"},{"The \"SE\" digram falls under case #1.": "abs-guide.txt"},{"C O D E S": "abs-guide.txt"},{"(Row containing \"S\" and \"E\")": "abs-guide.txt"},{"S --> C": "abs-guide.txt"},{"E --> S": "abs-guide.txt"},{"": "abs-guide.txt"},{"(wraps around left to beginning of row)": "abs-guide.txt"},{"": "abs-guide.txt"},{"=========================================================================": "abs-guide.txt"},{"To decrypt encrypted text, reverse the above procedure under cases #1": "abs-guide.txt"},{"and #2 (move in opposite direction for substitution). Under case #3,": "abs-guide.txt"},{"just take the remaining two corners of the rectangle.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Helen Fouche Gaines' classic work, ELEMENTARY CRYPTANALYSIS (1939), gives a": "abs-guide.txt"},{"fairly detailed description of the Playfair Cipher and its solution methods.": "abs-guide.txt"},{"": "abs-guide.txt"},{"This script will have three main sections": "abs-guide.txt"},{"I. Generating the key square, based on a user-input keyword.": "abs-guide.txt"},{"Appendix O. Exercises": "abs-guide.txt"},{"": "abs-guide.txt"},{"851": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"II. Encrypting a plaintext message.": "abs-guide.txt"},{"III. Decrypting encrypted text.": "abs-guide.txt"},{"The script will make extensive use of arrays and functions. You may use Example A-56 as an": "abs-guide.txt"},{"inspiration.": "abs-guide.txt"},{"-Please do not send the author your solutions to these exercises. There are more appropriate ways to impress": "abs-guide.txt"},{"him with your cleverness, such as submitting bugfixes and suggestions for improving the book.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix O. Exercises": "abs-guide.txt"},{"": "abs-guide.txt"},{"852": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAppendix P. Revision History": "abs-guide.txt"},{"This document first appeared as a 60-page HOWTO in the late spring": "abs-guide.txt"},{"of 2000. Since then, it has gone through quite a number of updates": "abs-guide.txt"},{"and revisions. This book could not have been written without the": "abs-guide.txt"},{"assistance of the Linux community, and especially of the volunteers": "abs-guide.txt"},{"of the Linux Documentation Project.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Here is the e-mail to the LDP requesting permission to submit version 0.1.": "abs-guide.txt"},{"From thegrendel@theriver.com Sat Jun 10 09:05:33 2000 -0700": "abs-guide.txt"},{"Date: Sat, 10 Jun 2000 09:05:28 -0700 (MST)": "abs-guide.txt"},{"From: \"M. Leo Cooper\" <thegrendel@theriver.com>": "abs-guide.txt"},{"X-Sender: thegrendel@localhost": "abs-guide.txt"},{"To: ldp-discuss@lists.linuxdoc.org": "abs-guide.txt"},{"Subject: Permission to submit HOWTO": "abs-guide.txt"},{"Dear HOWTO Coordinator,": "abs-guide.txt"},{"I am working on and would like to submit to the LDP a HOWTO on the subject": "abs-guide.txt"},{"of \"Bash Scripting\" (shell scripting, using 'bash'). As it happens,": "abs-guide.txt"},{"I have been writing this document, off and on, for about the last eight": "abs-guide.txt"},{"months or so, and I could produce a first draft in ASCII text format in": "abs-guide.txt"},{"a matter of just a few more days.": "abs-guide.txt"},{"I began writing this out of frustration at being unable to find a": "abs-guide.txt"},{"decent book on shell scripting. I managed to locate some pretty good": "abs-guide.txt"},{"articles on various aspects of scripting, but nothing like a complete,": "abs-guide.txt"},{"beginning-to-end tutorial. Well, in keeping with my philosophy, if all": "abs-guide.txt"},{"else fails, do it yourself.": "abs-guide.txt"},{"As it stands, this proposed \"Bash-Scripting HOWTO\" would serve as a": "abs-guide.txt"},{"combination tutorial and reference, with the heavier emphasis on the": "abs-guide.txt"},{"tutorial. It assumes Linux experience, but only a very basic level": "abs-guide.txt"},{"of programming skills. Interspersed with the text are 79 illustrative": "abs-guide.txt"},{"example scripts of varying complexity, all liberally commented. There": "abs-guide.txt"},{"are even exercises for the reader.": "abs-guide.txt"},{"At this stage, I'm up to 18,000+ words (124k), and that's over 50 pages of": "abs-guide.txt"},{"text (whew!).": "abs-guide.txt"},{"": "abs-guide.txt"},{"I haven't mentioned that I've previously authored an LDP HOWTO, the": "abs-guide.txt"},{"\"Software-Building HOWTO\", which I wrote in Linuxdoc/SGML. I don't know": "abs-guide.txt"},{"if I could handle Docbook/SGML, and I'm glad you have volunteers to do": "abs-guide.txt"},{"the conversion. You people seem to have gotten on a more organized basis": "abs-guide.txt"},{"these last few months. Working with Greg Hankins and Tim Bynum was nice,": "abs-guide.txt"},{"but a professional team is even nicer.": "abs-guide.txt"},{"Anyhow, please advise.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Mendel Cooper": "abs-guide.txt"},{"thegrendel@theriver.com": "abs-guide.txt"},{"": "abs-guide.txt"},{"Table P-1. Revision History": "abs-guide.txt"},{"Release Date": "abs-guide.txt"},{"": "abs-guide.txt"},{"Comments": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix P. Revision History": "abs-guide.txt"},{"": "abs-guide.txt"},{"853": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"0.1": "abs-guide.txt"},{"0.2": "abs-guide.txt"},{"0.3": "abs-guide.txt"},{"0.4": "abs-guide.txt"},{"0.5": "abs-guide.txt"},{"1.0": "abs-guide.txt"},{"1.1": "abs-guide.txt"},{"1.2": "abs-guide.txt"},{"1.3": "abs-guide.txt"},{"1.4": "abs-guide.txt"},{"1.5": "abs-guide.txt"},{"1.6": "abs-guide.txt"},{"1.7": "abs-guide.txt"},{"1.8": "abs-guide.txt"},{"1.9": "abs-guide.txt"},{"2.0": "abs-guide.txt"},{"2.1": "abs-guide.txt"},{"2.2": "abs-guide.txt"},{"2.3": "abs-guide.txt"},{"2.4": "abs-guide.txt"},{"2.5": "abs-guide.txt"},{"2.6": "abs-guide.txt"},{"2.7": "abs-guide.txt"},{"2.8": "abs-guide.txt"},{"3.0": "abs-guide.txt"},{"3.1": "abs-guide.txt"},{"3.2": "abs-guide.txt"},{"3.3": "abs-guide.txt"},{"3.4": "abs-guide.txt"},{"3.5": "abs-guide.txt"},{"3.6": "abs-guide.txt"},{"3.7": "abs-guide.txt"},{"3.8": "abs-guide.txt"},{"3.9": "abs-guide.txt"},{"4.0": "abs-guide.txt"},{"4.1": "abs-guide.txt"},{"4.2": "abs-guide.txt"},{"4.3": "abs-guide.txt"},{"5.0": "abs-guide.txt"},{"5.1": "abs-guide.txt"},{"5.2": "abs-guide.txt"},{"5.3": "abs-guide.txt"},{"": "abs-guide.txt"},{"14 Jun 2000": "abs-guide.txt"},{"30 Oct 2000": "abs-guide.txt"},{"12 Feb 2001": "abs-guide.txt"},{"08 Jul 2001": "abs-guide.txt"},{"03 Sep 2001": "abs-guide.txt"},{"14 Oct 2001": "abs-guide.txt"},{"06 Jan 2002": "abs-guide.txt"},{"31 Mar 2002": "abs-guide.txt"},{"02 Jun 2002": "abs-guide.txt"},{"16 Jun 2002": "abs-guide.txt"},{"13 Jul 2002": "abs-guide.txt"},{"29 Sep 2002": "abs-guide.txt"},{"05 Jan 2003": "abs-guide.txt"},{"10 May 2003": "abs-guide.txt"},{"21 Jun 2003": "abs-guide.txt"},{"24 Aug 2003": "abs-guide.txt"},{"14 Sep 2003": "abs-guide.txt"},{"31 Oct 2003": "abs-guide.txt"},{"03 Jan 2004": "abs-guide.txt"},{"25 Jan 2004": "abs-guide.txt"},{"15 Feb 2004": "abs-guide.txt"},{"15 Mar 2004": "abs-guide.txt"},{"18 Apr 2004": "abs-guide.txt"},{"11 Jul 2004": "abs-guide.txt"},{"03 Oct 2004": "abs-guide.txt"},{"14 Nov 2004": "abs-guide.txt"},{"06 Feb 2005": "abs-guide.txt"},{"20 Mar 2005": "abs-guide.txt"},{"08 May 2005": "abs-guide.txt"},{"05 Jun 2005": "abs-guide.txt"},{"28 Aug 2005": "abs-guide.txt"},{"23 Oct 2005": "abs-guide.txt"},{"26 Feb 2006": "abs-guide.txt"},{"15 May 2006": "abs-guide.txt"},{"18 Jun 2006": "abs-guide.txt"},{"08 Oct 2006": "abs-guide.txt"},{"10 Dec 2006": "abs-guide.txt"},{"29 Apr 2007": "abs-guide.txt"},{"24 Jun 2007": "abs-guide.txt"},{"10 Nov 2007": "abs-guide.txt"},{"16 Mar 2008": "abs-guide.txt"},{"11 May 2008": "abs-guide.txt"},{"": "abs-guide.txt"},{"Initial release.": "abs-guide.txt"},{"Bugs fixed, plus much additional material and more example scripts.": "abs-guide.txt"},{"Major update.": "abs-guide.txt"},{"Complete revision and expansion of the book.": "abs-guide.txt"},{"Major update: Bugfixes, material added, sections reorganized.": "abs-guide.txt"},{"Stable release: Bugfixes, reorganization, material added.": "abs-guide.txt"},{"Bugfixes, material and scripts added.": "abs-guide.txt"},{"Bugfixes, material and scripts added.": "abs-guide.txt"},{"TANGERINE release: A few bugfixes, much more material and scripts added.": "abs-guide.txt"},{"MANGO release: A number of typos fixed, more material and scripts.": "abs-guide.txt"},{"PAPAYA release: A few bugfixes, much more material and scripts added.": "abs-guide.txt"},{"POMEGRANATE release: Bugfixes, more material, one more script.": "abs-guide.txt"},{"COCONUT release: A couple of bugfixes, more material, one more script.": "abs-guide.txt"},{"BREADFRUIT release: A number of bugfixes, more scripts and material.": "abs-guide.txt"},{"PERSIMMON release: Bugfixes, and more material.": "abs-guide.txt"},{"GOOSEBERRY release: Major update.": "abs-guide.txt"},{"HUCKLEBERRY release: Bugfixes, and more material.": "abs-guide.txt"},{"CRANBERRY release: Major update.": "abs-guide.txt"},{"STRAWBERRY release: Bugfixes and more material.": "abs-guide.txt"},{"MUSKMELON release: Bugfixes.": "abs-guide.txt"},{"STARFRUIT release: Bugfixes and more material.": "abs-guide.txt"},{"SALAL release: Minor update.": "abs-guide.txt"},{"MULBERRY release: Minor update.": "abs-guide.txt"},{"ELDERBERRY release: Minor update.": "abs-guide.txt"},{"LOGANBERRY release: Major update.": "abs-guide.txt"},{"BAYBERRY release: Bugfix update.": "abs-guide.txt"},{"BLUEBERRY release: Minor update.": "abs-guide.txt"},{"RASPBERRY release: Bugfixes, much material added.": "abs-guide.txt"},{"TEABERRY release: Bugfixes, stylistic revisions.": "abs-guide.txt"},{"BOXBERRY release: Bugfixes, some material added.": "abs-guide.txt"},{"POKEBERRY release: Bugfixes, some material added.": "abs-guide.txt"},{"WHORTLEBERRY release: Bugfixes, some material added.": "abs-guide.txt"},{"BLAEBERRY release: Bugfixes, some material added.": "abs-guide.txt"},{"SPICEBERRY release: Bugfixes, some material added.": "abs-guide.txt"},{"WINTERBERRY release: Major reorganization.": "abs-guide.txt"},{"WAXBERRY release: Minor update.": "abs-guide.txt"},{"SPARKLEBERRY release: Important update.": "abs-guide.txt"},{"INKBERRY release: Bugfixes, material added.": "abs-guide.txt"},{"SERVICEBERRY release: Major update.": "abs-guide.txt"},{"LINGONBERRY release: Minor update.": "abs-guide.txt"},{"SILVERBERRY release: Important update.": "abs-guide.txt"},{"GOLDENBERRY release: Minor update.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix P. Revision History": "abs-guide.txt"},{"": "abs-guide.txt"},{"854": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"5.4": "abs-guide.txt"},{"5.5": "abs-guide.txt"},{"5.6": "abs-guide.txt"},{"6.0": "abs-guide.txt"},{"6.1": "abs-guide.txt"},{"6.2": "abs-guide.txt"},{"6.3": "abs-guide.txt"},{"6.4": "abs-guide.txt"},{"6.5": "abs-guide.txt"},{"6.6": "abs-guide.txt"},{"10": "abs-guide.txt"},{"": "abs-guide.txt"},{"21 Jul 2008": "abs-guide.txt"},{"23 Nov 2008": "abs-guide.txt"},{"26 Jan 2009": "abs-guide.txt"},{"23 Mar 2009": "abs-guide.txt"},{"30 Sep 2009": "abs-guide.txt"},{"17 Mar 2010": "abs-guide.txt"},{"30 Apr 2011": "abs-guide.txt"},{"30 Aug 2011": "abs-guide.txt"},{"05 Apr 2012": "abs-guide.txt"},{"27 Nov 2012": "abs-guide.txt"},{"10 Mar 2014": "abs-guide.txt"},{"": "abs-guide.txt"},{"ANGLEBERRY release: Major update.": "abs-guide.txt"},{"FARKLEBERRY release: Minor update.": "abs-guide.txt"},{"WORCESTERBERRY release: Minor update.": "abs-guide.txt"},{"THIMBLEBERRY release: Major update.": "abs-guide.txt"},{"BUFFALOBERRY release: Minor update.": "abs-guide.txt"},{"ROWANBERRY release: Minor update.": "abs-guide.txt"},{"SWOZZLEBERRY release: Major update.": "abs-guide.txt"},{"VORTEXBERRY release: Minor update.": "abs-guide.txt"},{"TUNGSTENBERRY release: Minor update.": "abs-guide.txt"},{"YTTERBIUMBERRY release: Minor update.": "abs-guide.txt"},{"YTTERBIUMBERRY release: License change.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix P. Revision History": "abs-guide.txt"},{"": "abs-guide.txt"},{"855": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAppendix Q. Download and Mirror Sites": "abs-guide.txt"},{"The latest update of this document, as an archived, bzip2-ed \"tarball\" including both the SGML source and": "abs-guide.txt"},{"rendered HTML, may be downloaded from the author's home site). A pdf version is also available (mirror": "abs-guide.txt"},{"site). There is likewise an epub version, courtesy of Craig Barnes and Michael Satke. The change log gives a": "abs-guide.txt"},{"detailed revision history. The ABS Guide even has its own freshmeat.net/freecode page to keep": "abs-guide.txt"},{"track of major updates, user comments, and popularity ratings for the project.": "abs-guide.txt"},{"The legacy hosting site for this document is the Linux Documentation Project, which maintains many other": "abs-guide.txt"},{"Guides and HOWTOs as well.": "abs-guide.txt"},{"Many thanks to Ronny Bangsund for donating server space to host this project.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix Q. Download and Mirror Sites": "abs-guide.txt"},{"": "abs-guide.txt"},{"856": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAppendix R. To Do List": "abs-guide.txt"},{"\u2022 A comprehensive survey of incompatibilities between Bash and the classic Bourne shell.": "abs-guide.txt"},{"\u2022 Same as above, but for the Korn shell (ksh).": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix R. To Do List": "abs-guide.txt"},{"": "abs-guide.txt"},{"857": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAppendix S. Copyright": "abs-guide.txt"},{"The Advanced Bash Scripting Guide is herewith granted to the PUBLIC DOMAIN. This has the following": "abs-guide.txt"},{"implications and consequences.": "abs-guide.txt"},{"A.": "abs-guide.txt"},{"": "abs-guide.txt"},{"All previous releases of the Advanced Bash Scripting Guide": "abs-guide.txt"},{"are as well granted to the Public Domain.": "abs-guide.txt"},{"": "abs-guide.txt"},{"A1. All printed editions, whether authorized by the author or not,": "abs-guide.txt"},{"are as well granted to the Public Domain. This legally overrides": "abs-guide.txt"},{"any stated intention or wishes of the publishers. Any statement": "abs-guide.txt"},{"of copyright is void and invalid.": "abs-guide.txt"},{"THERE ARE NO EXCEPTIONS TO THIS.": "abs-guide.txt"},{"A2. Any release of the Advanced Bash Scripting Guide, whether in": "abs-guide.txt"},{"electronic or print form is granted to the Public Domain by the": "abs-guide.txt"},{"express directive of the author and previous copyright holder, Mendel": "abs-guide.txt"},{"Cooper. No other person(s) or entities have ever held a valid copyright.": "abs-guide.txt"},{"B.": "abs-guide.txt"},{"": "abs-guide.txt"},{"As a Public Domain document, unlimited copying and distribution rights": "abs-guide.txt"},{"are granted. There can be NO restrictions. If anyone has published or will": "abs-guide.txt"},{"in the future publish an original or modified version of this document,": "abs-guide.txt"},{"then only additional original material may be copyrighted. The core": "abs-guide.txt"},{"work will remain in the Public Domain.": "abs-guide.txt"},{"": "abs-guide.txt"},{"By law, distributors and publishers (including on-line publishers) are prohibited from imposing any": "abs-guide.txt"},{"conditions, strictures, or provisions on this document, any previous versions, or any derivative versions. The": "abs-guide.txt"},{"author asserts that he has not entered into any contractual obligations that would alter the foregoing": "abs-guide.txt"},{"declarations.": "abs-guide.txt"},{"Essentially, you may freely distribute this book or any derivative thereof in electronic or printed form. If you": "abs-guide.txt"},{"have previously purchased or are in possession of a printed copy of a current or previous edition, you have the": "abs-guide.txt"},{"LEGAL RIGHT to copy and/or redistribute it, regardless of any copyright notice. Any copyright notice is": "abs-guide.txt"},{"void.": "abs-guide.txt"},{"Additionally, the author wishes to state his intention that:": "abs-guide.txt"},{"If you copy or distribute this book, kindly DO NOT": "abs-guide.txt"},{"use the materials within, or any portion thereof, in a patent or copyright": "abs-guide.txt"},{"lawsuit against the Open Source community, its developers, its": "abs-guide.txt"},{"distributors, or against any of its associated software or documentation": "abs-guide.txt"},{"including, but not limited to, the Linux kernel, Open Office, Samba,": "abs-guide.txt"},{"and Wine. Kindly DO NOT use any of the materials within": "abs-guide.txt"},{"this book in testimony or depositions as a plaintiff's \"expert witness\" in": "abs-guide.txt"},{"any lawsuit against the Open Source community, any of its developers, its": "abs-guide.txt"},{"distributors, or any of its associated software or documentation.": "abs-guide.txt"},{"": "abs-guide.txt"},{"A Public Domain license essentially does not restrict ANY legitimate distribution or use of this book. The": "abs-guide.txt"},{"author especially encourages its (royalty-free!) use for classroom and instructional purposes.": "abs-guide.txt"},{"To date, limited print rights (Lulu edition) have been granted to one individual and to no one else. Neither that": "abs-guide.txt"},{"individual nor Lulu holds or ever has held a valid copyright.": "abs-guide.txt"},{"It has come to the attention of the author that unauthorized electronic and print editions of this book are": "abs-guide.txt"},{"being sold commercially on itunes\u00ae, amazon.com and elsewhere. These are illegal and pirated editions": "abs-guide.txt"},{"produced without the author's permission, and readers of this book are strongly urged not to purchase": "abs-guide.txt"},{"Appendix S. Copyright": "abs-guide.txt"},{"": "abs-guide.txt"},{"858": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"them. In fact, these pirated editions are now legal, but necessarily fall into the Public Domain, and any": "abs-guide.txt"},{"copyright notices contained within them are invalid and void.": "abs-guide.txt"},{"The author produced this book in a manner consistent with the spirit of the LDP Manifesto.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Linux is a trademark registered to Linus Torvalds.": "abs-guide.txt"},{"Fedora is a trademark registered to Red Hat.": "abs-guide.txt"},{"Unix and UNIX are trademarks registered to the Open Group.": "abs-guide.txt"},{"MS Windows is a trademark registered to the Microsoft Corp.": "abs-guide.txt"},{"Solaris is a trademark registered to Oracle, Inc.": "abs-guide.txt"},{"OSX is a trademark registered to Apple, Inc.": "abs-guide.txt"},{"Yahoo is a trademark registered to Yahoo, Inc.": "abs-guide.txt"},{"Pentium is a trademark registered to Intel, Inc.": "abs-guide.txt"},{"Thinkpad is a trademark registered to Lenovo, Inc.": "abs-guide.txt"},{"Scrabble is a trademark registered to Hasbro, Inc.": "abs-guide.txt"},{"Librie, PRS-500, and PRS-505 are trademarks registered to Sony, Inc.": "abs-guide.txt"},{"All other commercial trademarks mentioned in the body of this work are registered to their respective": "abs-guide.txt"},{"owners.": "abs-guide.txt"},{"Hyun Jin Cha has done a Korean translation of version 1.0.11 of this book. Spanish, Portuguese, French,": "abs-guide.txt"},{"German, Italian, Russian, Czech, Chinese, Indonesian, Dutch, Romanian, Bulgarian, and Turkish translations": "abs-guide.txt"},{"are also available or in progress. If you wish to translate this document into another language, please feel free": "abs-guide.txt"},{"to do so, subject to the terms stated above. The author wishes to be notified of such efforts.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Those generous readers desiring to make a donation to the author may contribute a small amount via Paypal": "abs-guide.txt"},{"to my e-mail address, <thegrendel.abs@gmail.com>. (An Honor Roll of Supporters is": "abs-guide.txt"},{"given at the beginning of the Change Log.) This is not a requirement. The ABS Guide is a free and freely": "abs-guide.txt"},{"distributed document for the use and enjoyment of the Linux community. However, in these difficult times,": "abs-guide.txt"},{"showing support for voluntary projects and especially to authors of limited means is more critically": "abs-guide.txt"},{"important than ever.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix S. Copyright": "abs-guide.txt"},{"": "abs-guide.txt"},{"859": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAppendix T. ASCII Table": "abs-guide.txt"},{"Traditionally, a book of this sort has an ASCII Table appendix. This book does not. Instead, here are several": "abs-guide.txt"},{"short scripts, each of which generates a complete ASCII table.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example T-1. A script that generates an ASCII table": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# ascii.sh": "abs-guide.txt"},{"# ver. 0.2, reldate 26 Aug 2008": "abs-guide.txt"},{"# Patched by ABS Guide author.": "abs-guide.txt"},{"# Original script by Sebastian Arming.": "abs-guide.txt"},{"# Used with permission (thanks!).": "abs-guide.txt"},{"exec >ASCII.txt": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Save stdout to file,": "abs-guide.txt"},{"#+ as in the example scripts": "abs-guide.txt"},{"#+ reassign-stdout.sh and upperconv.sh.": "abs-guide.txt"},{"": "abs-guide.txt"},{"MAXNUM=256": "abs-guide.txt"},{"COLUMNS=5": "abs-guide.txt"},{"OCT=8": "abs-guide.txt"},{"OCTSQU=64": "abs-guide.txt"},{"LITTLESPACE=-3": "abs-guide.txt"},{"BIGSPACE=-5": "abs-guide.txt"},{"i=1 # Decimal counter": "abs-guide.txt"},{"o=1 # Octal counter": "abs-guide.txt"},{"while [ \"$i\" -lt \"$MAXNUM\" ]; do # We don't have to count past 400 octal.": "abs-guide.txt"},{"paddi=\"": "abs-guide.txt"},{"$i\"": "abs-guide.txt"},{"echo -n \"${paddi: $BIGSPACE} \"": "abs-guide.txt"},{"# Column spacing.": "abs-guide.txt"},{"paddo=\"00$o\"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"echo -ne \"\\\\${paddo: $LITTLESPACE}\"": "abs-guide.txt"},{"# Original.": "abs-guide.txt"},{"echo -ne \"\\\\0${paddo: $LITTLESPACE}\" # Fixup.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"^": "abs-guide.txt"},{"echo -n \"": "abs-guide.txt"},{"\"": "abs-guide.txt"},{"if (( i % $COLUMNS == 0)); then": "abs-guide.txt"},{"# New line.": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"fi": "abs-guide.txt"},{"((i++, o++))": "abs-guide.txt"},{"# The octal notation for 8 is 10, and 64 decimal is 100 octal.": "abs-guide.txt"},{"(( i % $OCT == 0))": "abs-guide.txt"},{"&& ((o+=2))": "abs-guide.txt"},{"(( i % $OCTSQU == 0)) && ((o+=20))": "abs-guide.txt"},{"done": "abs-guide.txt"},{"exit $?": "abs-guide.txt"},{"# Compare this script with the \"pr-asc.sh\" example.": "abs-guide.txt"},{"# This one handles \"unprintable\" characters.": "abs-guide.txt"},{"# Exercise:": "abs-guide.txt"},{"# Rewrite this script to use decimal numbers, rather than octal.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example T-2. Another ASCII table script": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix T. ASCII Table": "abs-guide.txt"},{"": "abs-guide.txt"},{"860": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# Script author: Joseph Steinhauser": "abs-guide.txt"},{"# Lightly edited by ABS Guide author, but not commented.": "abs-guide.txt"},{"# Used in ABS Guide with permission.": "abs-guide.txt"},{"#------------------------------------------------------------------------#-- File: ascii.sh": "abs-guide.txt"},{"Print ASCII chart, base 10/8/16": "abs-guide.txt"},{"(JETS-2012)": "abs-guide.txt"},{"#------------------------------------------------------------------------#-- Usage: ascii [oct|dec|hex|help|8|10|16]": "abs-guide.txt"},{"#-#-- This script prints out a summary of ASCII char codes from Zero to 127.": "abs-guide.txt"},{"#-- Numeric values may be printed in Base10, Octal, or Hex.": "abs-guide.txt"},{"#-#-- Format Based on: /usr/share/lib/pub/ascii with base-10 as default.": "abs-guide.txt"},{"#-- For more detail, man ascii . . .": "abs-guide.txt"},{"#------------------------------------------------------------------------[ -n \"$BASH_VERSION\" ] && shopt -s extglob": "abs-guide.txt"},{"case \"$1\" in": "abs-guide.txt"},{"oct|[Oo]?([Cc][Tt])|8)": "abs-guide.txt"},{"hex|[Hh]?([Ee][Xx])|16|[Xx])": "abs-guide.txt"},{"help|?(-)[h?])": "abs-guide.txt"},{"sed -n": "abs-guide.txt"},{"code|[Cc][Oo][Dd][Ee])sed -n": "abs-guide.txt"},{"*) Obase=Decimal": "abs-guide.txt"},{"esac # CODE is actually shorter": "abs-guide.txt"},{"": "abs-guide.txt"},{"Obase=Octal;": "abs-guide.txt"},{"Obase=Hex;": "abs-guide.txt"},{"'2,/^[ ]*$/p'": "abs-guide.txt"},{"'/case/,$p'": "abs-guide.txt"},{"": "abs-guide.txt"},{"Numy=3o;;": "abs-guide.txt"},{"Numy=2X;;": "abs-guide.txt"},{"$0;exit;;": "abs-guide.txt"},{"$0;exit;;": "abs-guide.txt"},{"": "abs-guide.txt"},{"than the chart!": "abs-guide.txt"},{"": "abs-guide.txt"},{"printf \"\\t\\t## $Obase ASCII Chart ##\\n\\n\"; FM1=\"|%0${Numy:-3d}\"; LD=-1": "abs-guide.txt"},{"AB=\"nul soh stx etx eot enq ack bel bs tab nl vt np cr so si dle\"": "abs-guide.txt"},{"AD=\"dc1 dc2 dc3 dc4 nak syn etb can em sub esc fs gs rs us sp\"": "abs-guide.txt"},{"for TOK in $AB $AD; do ABR[$((LD+=1))]=$TOK; done;": "abs-guide.txt"},{"ABR[127]=del": "abs-guide.txt"},{"IDX=0": "abs-guide.txt"},{"while [ $IDX -le 127 ] && CHR=\"${ABR[$IDX]}\"": "abs-guide.txt"},{"do ((${#CHR}))&& FM2='%-3s'|| FM2=`printf '\\\\\\\\%o ' $IDX`": "abs-guide.txt"},{"printf \"$FM1 $FM2\" \"$IDX\" $CHR; (( (IDX+=1)%8))||echo '|'": "abs-guide.txt"},{"done": "abs-guide.txt"},{"exit $?": "abs-guide.txt"},{"": "abs-guide.txt"},{"Example T-3. A third ASCII table script, using awk": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# ASCII table script, using awk.": "abs-guide.txt"},{"# Author: Joseph Steinhauser": "abs-guide.txt"},{"# Used in ABS Guide with permission.": "abs-guide.txt"},{"": "abs-guide.txt"},{"#------------------------------------------------------------------------#-- File: ascii": "abs-guide.txt"},{"Print ASCII chart, base 10/8/16": "abs-guide.txt"},{"(JETS-2010)": "abs-guide.txt"},{"#------------------------------------------------------------------------#-- Usage: ascii [oct|dec|hex|help|8|10|16]": "abs-guide.txt"},{"#-#-- This script prints a summary of ASCII char codes from Zero to 127.": "abs-guide.txt"},{"#-- Numeric values may be printed in Base10, Octal, or Hex (Base16).": "abs-guide.txt"},{"#-#-- Format Based on: /usr/share/lib/pub/ascii with base-10 as default.": "abs-guide.txt"},{"#-- For more detail, man ascii": "abs-guide.txt"},{"#-------------------------------------------------------------------------": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix T. ASCII Table": "abs-guide.txt"},{"": "abs-guide.txt"},{"861": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"[ -n \"$BASH_VERSION\" ] && shopt -s extglob": "abs-guide.txt"},{"case \"$1\" in": "abs-guide.txt"},{"oct|[Oo]?([Cc][Tt])|8)": "abs-guide.txt"},{"Obase=Octal; Numy=3o;;": "abs-guide.txt"},{"hex|[Hh]?([Ee][Xx])|16|[Xx]) Obase=Hex;": "abs-guide.txt"},{"Numy=2X;;": "abs-guide.txt"},{"help|?(-)[h?])": "abs-guide.txt"},{"sed -n '2,/^[ ]*$/p' $0;exit;;": "abs-guide.txt"},{"code|[Cc][Oo][Dd][Ee])sed -n '/case/,$p'": "abs-guide.txt"},{"$0;exit;;": "abs-guide.txt"},{"*) Obase=Decimal": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"export Obase": "abs-guide.txt"},{"# CODE is actually shorter than the chart!": "abs-guide.txt"},{"awk 'BEGIN{print \"\\n\\t\\t## \"ENVIRON[\"Obase\"]\" ASCII Chart ##\\n\"": "abs-guide.txt"},{"ab=\"soh,stx,etx,eot,enq,ack,bel,bs,tab,nl,vt,np,cr,so,si,dle,\"": "abs-guide.txt"},{"ad=\"dc1,dc2,dc3,dc4,nak,syn,etb,can,em,sub,esc,fs,gs,rs,us,sp\"": "abs-guide.txt"},{"split(ab ad,abr,\",\");abr[0]=\"nul\";abr[127]=\"del\";": "abs-guide.txt"},{"fm1=\"|%0'\"${Numy:- 4d}\"' %-3s\"": "abs-guide.txt"},{"for(idx=0;idx<128;idx++){fmt=fm1 (++colz%8?\"\":\"|\\n\")": "abs-guide.txt"},{"printf(fmt,idx,(idx in abr)?abr[idx]:sprintf(\"%c\",idx))} }'": "abs-guide.txt"},{"exit $?": "abs-guide.txt"},{"": "abs-guide.txt"},{"Index": "abs-guide.txt"},{"This index / glossary / quick-reference lists many of the important topics covered in the text. Terms are": "abs-guide.txt"},{"arranged in approximate ASCII sorting order, modified as necessary for enhanced clarity.": "abs-guide.txt"},{"Note that commands are indexed in Part 4.": "abs-guide.txt"},{"***": "abs-guide.txt"},{"^ (caret)": "abs-guide.txt"},{"\u2022 Beginning-of-line, in a Regular Expression": "abs-guide.txt"},{"\u2022^": "abs-guide.txt"},{"^^": "abs-guide.txt"},{"Uppercase conversion in parameter substitution": "abs-guide.txt"},{"~ Tilde": "abs-guide.txt"},{"\u2022 ~ home directory, corresponds to $HOME": "abs-guide.txt"},{"\u2022 ~/ Current user's home directory": "abs-guide.txt"},{"\u2022 ~+ Current working directory": "abs-guide.txt"},{"\u2022 ~- Previous working directory": "abs-guide.txt"},{"= Equals sign": "abs-guide.txt"},{"\u2022 = Variable assignment operator": "abs-guide.txt"},{"\u2022 = String comparison operator": "abs-guide.txt"},{"== String comparison operator": "abs-guide.txt"},{"\u2022 =~ Regular Expression match operator": "abs-guide.txt"},{"Appendix T. ASCII Table": "abs-guide.txt"},{"": "abs-guide.txt"},{"862": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"Example script": "abs-guide.txt"},{"< Left angle bracket": "abs-guide.txt"},{"\u2022 Is-less-than": "abs-guide.txt"},{"String comparison": "abs-guide.txt"},{"Integer comparison within double parentheses": "abs-guide.txt"},{"\u2022 Redirection": "abs-guide.txt"},{"< stdin": "abs-guide.txt"},{"<< Here document": "abs-guide.txt"},{"<<< Here string": "abs-guide.txt"},{"<> Opening a file for both reading and writing": "abs-guide.txt"},{"> Right angle bracket": "abs-guide.txt"},{"\u2022 Is-greater-than": "abs-guide.txt"},{"String comparison": "abs-guide.txt"},{"Integer comparison, within double parentheses": "abs-guide.txt"},{"\u2022 Redirection": "abs-guide.txt"},{"> Redirect stdout to a file": "abs-guide.txt"},{">> Redirect stdout to a file, but append": "abs-guide.txt"},{"i>&j Redirect file descriptor i to file descriptor j": "abs-guide.txt"},{">&j Redirect stdout to file descriptor j": "abs-guide.txt"},{">&2 Redirect stdout of a command to stderr": "abs-guide.txt"},{"2>&1 Redirect stderr to stdout": "abs-guide.txt"},{"&> Redirect both stdout and stderr of a command to a file": "abs-guide.txt"},{":> file Truncate file to zero length": "abs-guide.txt"},{"| Pipe, a device for passing the output of a command to another command or to the shell": "abs-guide.txt"},{"|| Logical OR test operator": "abs-guide.txt"},{"- (dash)": "abs-guide.txt"},{"\u2022 Prefix to default parameter, in parameter substitution": "abs-guide.txt"},{"Appendix T. ASCII Table": "abs-guide.txt"},{"": "abs-guide.txt"},{"863": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"\u2022 Prefix to option flag": "abs-guide.txt"},{"\u2022 Indicating redirection from stdin or stdout": "abs-guide.txt"},{"\u2022 -- (double-dash)": "abs-guide.txt"},{"Prefix to long command options": "abs-guide.txt"},{"C-style variable decrement within double parentheses": "abs-guide.txt"},{"; (semicolon)": "abs-guide.txt"},{"\u2022 As command separator": "abs-guide.txt"},{"\u2022 \\; Escaped semicolon, terminates a find command": "abs-guide.txt"},{"\u2022 ;; Double-semicolon, terminator in a case option": "abs-guide.txt"},{"Required when ...": "abs-guide.txt"},{"do keyword is on the first line of loop": "abs-guide.txt"},{"terminating curly-bracketed code block": "abs-guide.txt"},{"\u2022 ;;& ;& Terminators in a case option (version 4+ of Bash).": "abs-guide.txt"},{": Colon": "abs-guide.txt"},{"\u2022 :> filename Truncate file to zero length": "abs-guide.txt"},{"\u2022 null command, equivalent to the true Bash builtin": "abs-guide.txt"},{"\u2022 Used in an anonymous here document": "abs-guide.txt"},{"\u2022 Used in an otherwise empty function": "abs-guide.txt"},{"\u2022 Used as a function name": "abs-guide.txt"},{"! Negation operator, inverts exit status of a test or command": "abs-guide.txt"},{"\u2022 != not-equal-to String comparison operator": "abs-guide.txt"},{"? (question mark)": "abs-guide.txt"},{"\u2022 Match zero or one characters, in an Extended Regular Expression": "abs-guide.txt"},{"\u2022 Single-character wild card, in globbing": "abs-guide.txt"},{"\u2022 In a C-style Trinary operator": "abs-guide.txt"},{"// Double forward slash, behavior of cd command toward": "abs-guide.txt"},{". (dot / period)": "abs-guide.txt"},{"\u2022 . Load a file (into a script), equivalent to source command": "abs-guide.txt"},{"\u2022 . Match single character, in a Regular Expression": "abs-guide.txt"},{"\u2022 . Current working directory": "abs-guide.txt"},{"./ Current working directory": "abs-guide.txt"},{"\u2022 .. Parent directory": "abs-guide.txt"},{"' ... ' (single quotes) strong quoting": "abs-guide.txt"},{"Appendix T. ASCII Table": "abs-guide.txt"},{"": "abs-guide.txt"},{"864": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"\" ... \" (double quotes) weak quoting": "abs-guide.txt"},{"\u2022 Double-quoting the backslash (\\) character": "abs-guide.txt"},{",": "abs-guide.txt"},{"\u2022 Comma operator": "abs-guide.txt"},{"\u2022,": "abs-guide.txt"},{",,": "abs-guide.txt"},{"Lowercase conversion in parameter substitution": "abs-guide.txt"},{"() Parentheses": "abs-guide.txt"},{"\u2022 ( ... ) Command group; starts a subshell": "abs-guide.txt"},{"\u2022 ( ... ) Enclose group of Extended Regular Expressions": "abs-guide.txt"},{"\u2022 >( ... )": "abs-guide.txt"},{"<( ... ) Process substitution": "abs-guide.txt"},{"\u2022 ... ) Terminates test-condition in case construct": "abs-guide.txt"},{"\u2022 (( ... )) Double parentheses, in arithmetic expansion": "abs-guide.txt"},{"[ Left bracket, test construct": "abs-guide.txt"},{"[ ]Brackets": "abs-guide.txt"},{"\u2022 Array element": "abs-guide.txt"},{"\u2022 Enclose character set to match in a Regular Expression": "abs-guide.txt"},{"\u2022 Test construct": "abs-guide.txt"},{"[[ ... ]] Double brackets, extended test construct": "abs-guide.txt"},{"$ Anchor, in a Regular Expression": "abs-guide.txt"},{"$ Prefix to a variable name": "abs-guide.txt"},{"$( ... ) Command substitution, setting a variable with output of a command, using parentheses notation": "abs-guide.txt"},{"` ... ` Command substitution, using backquotes notation": "abs-guide.txt"},{"$[ ... ] Integer expansion (deprecated)": "abs-guide.txt"},{"${ ... } Variable manipulation / evaluation": "abs-guide.txt"},{"\u2022 ${var} Value of a variable": "abs-guide.txt"},{"\u2022 ${#var} Length of a variable": "abs-guide.txt"},{"\u2022 ${#@}": "abs-guide.txt"},{"${#*} Number of positional parameters": "abs-guide.txt"},{"\u2022 ${parameter?err_msg} Parameter-unset message": "abs-guide.txt"},{"Appendix T. ASCII Table": "abs-guide.txt"},{"": "abs-guide.txt"},{"865": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"\u2022 ${parameter-default}": "abs-guide.txt"},{"${parameter:-default}": "abs-guide.txt"},{"${parameter=default}": "abs-guide.txt"},{"${parameter:=default} Set default parameter": "abs-guide.txt"},{"\u2022 ${parameter+alt_value}": "abs-guide.txt"},{"${parameter:+alt_value}": "abs-guide.txt"},{"Alternate value of parameter, if set": "abs-guide.txt"},{"\u2022 ${!var}": "abs-guide.txt"},{"Indirect referencing of a variable, new notation": "abs-guide.txt"},{"\u2022 ${!#}": "abs-guide.txt"},{"Final positional parameter. (This is an indirect reference to $#.)": "abs-guide.txt"},{"\u2022 ${!varprefix*}": "abs-guide.txt"},{"${!varprefix@}": "abs-guide.txt"},{"Match names of all previously declared variables beginning with varprefix": "abs-guide.txt"},{"\u2022 ${string:position}": "abs-guide.txt"},{"${string:position:length} Substring extraction": "abs-guide.txt"},{"\u2022 ${var#Pattern}": "abs-guide.txt"},{"${var##Pattern} Substring removal": "abs-guide.txt"},{"\u2022 ${var%Pattern}": "abs-guide.txt"},{"${var%%Pattern} Substring removal": "abs-guide.txt"},{"\u2022 ${string/substring/replacement}": "abs-guide.txt"},{"${string//substring/replacement}": "abs-guide.txt"},{"${string/#substring/replacement}": "abs-guide.txt"},{"${string/%substring/replacement} Substring replacement": "abs-guide.txt"},{"$' ... ' String expansion, using escaped characters.": "abs-guide.txt"},{"\\ Escape the character following": "abs-guide.txt"},{"\u2022 \\< ... \\> Angle brackets, escaped, word boundary in a Regular Expression": "abs-guide.txt"},{"\u2022 \\{ N \\} \"Curly\" brackets, escaped, number of character sets to match in an Extended RE": "abs-guide.txt"},{"\u2022 \\; Semicolon, escaped, terminates a find command": "abs-guide.txt"},{"\u2022 \\$$ Indirect reverencing of a variable, old-style notation": "abs-guide.txt"},{"\u2022 Escaping a newline, to write a multi-line command": "abs-guide.txt"},{"&": "abs-guide.txt"},{"Appendix T. ASCII Table": "abs-guide.txt"},{"": "abs-guide.txt"},{"866": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"\u2022 &> Redirect both stdout and stderr of a command to a file": "abs-guide.txt"},{"\u2022 >&j Redirect stdout to file descriptor j": "abs-guide.txt"},{">&2 Redirect stdout of a command to stderr": "abs-guide.txt"},{"\u2022 i>&j Redirect file descriptor i to file descriptor j": "abs-guide.txt"},{"2>&1 Redirect stderr to stdout": "abs-guide.txt"},{"\u2022 Closing file descriptors": "abs-guide.txt"},{"n<&- Close input file descriptor n": "abs-guide.txt"},{"0<&-, <&- Close stdin": "abs-guide.txt"},{"n>&- Close output file descriptor n": "abs-guide.txt"},{"1>&-, >&- Close stdout": "abs-guide.txt"},{"\u2022 && Logical AND test operator": "abs-guide.txt"},{"\u2022 Command & Run job in background": "abs-guide.txt"},{"# Hashmark, special symbol beginning a script comment": "abs-guide.txt"},{"#! Sha-bang, special string starting a shell script": "abs-guide.txt"},{"* Asterisk": "abs-guide.txt"},{"\u2022 Wild card, in globbing": "abs-guide.txt"},{"\u2022 Any number of characters in a Regular Expression": "abs-guide.txt"},{"\u2022 ** Exponentiation, arithmetic operator": "abs-guide.txt"},{"\u2022 ** Extended globbing file-match operator": "abs-guide.txt"},{"% Percent sign": "abs-guide.txt"},{"\u2022 Modulo, division-remainder arithmetic operation": "abs-guide.txt"},{"\u2022 Substring removal (pattern matching) operator": "abs-guide.txt"},{"+ Plus sign": "abs-guide.txt"},{"\u2022 Character match, in an extended Regular Expression": "abs-guide.txt"},{"\u2022 Prefix to alternate parameter, in parameter substitution": "abs-guide.txt"},{"\u2022 ++ C-style variable increment, within double parentheses": "abs-guide.txt"},{"***": "abs-guide.txt"},{"Shell Variables": "abs-guide.txt"},{"$_ Last argument to previous command": "abs-guide.txt"},{"$- Flags passed to script, using set": "abs-guide.txt"},{"$! Process ID of last background job": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix T. ASCII Table": "abs-guide.txt"},{"": "abs-guide.txt"},{"867": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"$? Exit status of a command": "abs-guide.txt"},{"$@ All the positional parameters, as separate words": "abs-guide.txt"},{"$* All the positional parameters, as a single word": "abs-guide.txt"},{"$$ Process ID of the script": "abs-guide.txt"},{"$# Number of arguments passed to a function, or to the script itself": "abs-guide.txt"},{"$0 Filename of the script": "abs-guide.txt"},{"$1 First argument passed to script": "abs-guide.txt"},{"$9 Ninth argument passed to script": "abs-guide.txt"},{"Table of shell variables": "abs-guide.txt"},{"******": "abs-guide.txt"},{"-a Logical AND compound comparison test": "abs-guide.txt"},{"Address database, script example": "abs-guide.txt"},{"Advanced Bash Scripting Guide, where to download": "abs-guide.txt"},{"Alias": "abs-guide.txt"},{"\u2022 Removing an alias, using unalias": "abs-guide.txt"},{"Anagramming": "abs-guide.txt"},{"And list": "abs-guide.txt"},{"\u2022 To supply default command-line argument": "abs-guide.txt"},{"And logical operator &&": "abs-guide.txt"},{"Angle brackets, escaped, \\< . . . \\> word boundary in a Regular Expression": "abs-guide.txt"},{"Anonymous here document, using :": "abs-guide.txt"},{"Archiving": "abs-guide.txt"},{"\u2022 rpm": "abs-guide.txt"},{"\u2022 tar": "abs-guide.txt"},{"Arithmetic expansion": "abs-guide.txt"},{"\u2022 exit status of": "abs-guide.txt"},{"\u2022 variations of": "abs-guide.txt"},{"Appendix T. ASCII Table": "abs-guide.txt"},{"": "abs-guide.txt"},{"868": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"Arithmetic operators": "abs-guide.txt"},{"\u2022 combination operators, C-style": "abs-guide.txt"},{"+= -= *= /= %=": "abs-guide.txt"},{"In certain contexts, += can also function as a string concatenation operator.": "abs-guide.txt"},{"Arrays": "abs-guide.txt"},{"\u2022 Associative arrays": "abs-guide.txt"},{"more efficient than conventional arrays": "abs-guide.txt"},{"\u2022 Bracket notation": "abs-guide.txt"},{"\u2022 Concatenating, example script": "abs-guide.txt"},{"\u2022 Copying": "abs-guide.txt"},{"\u2022 Declaring": "abs-guide.txt"},{"declare -a array_name": "abs-guide.txt"},{"\u2022 Embedded arrays": "abs-guide.txt"},{"\u2022 Empty arrays, empty elements, example script": "abs-guide.txt"},{"\u2022 Indirect references": "abs-guide.txt"},{"\u2022 Initialization": "abs-guide.txt"},{"array=( element1 element2 ... elementN)": "abs-guide.txt"},{"Example script": "abs-guide.txt"},{"Using command substitution": "abs-guide.txt"},{"\u2022 Loading a file into an array": "abs-guide.txt"},{"\u2022 Multidimensional, simulating": "abs-guide.txt"},{"\u2022 Nesting and embedding": "abs-guide.txt"},{"\u2022 Notation and usage": "abs-guide.txt"},{"\u2022 Number of elements in": "abs-guide.txt"},{"${#array_name[@]}": "abs-guide.txt"},{"${#array_name[*]}": "abs-guide.txt"},{"\u2022 Operations": "abs-guide.txt"},{"\u2022 Passing an array to a function": "abs-guide.txt"},{"\u2022 As return value from a function": "abs-guide.txt"},{"\u2022 Special properties, example script": "abs-guide.txt"},{"\u2022 String operations, example script": "abs-guide.txt"},{"\u2022 unset deletes array elements": "abs-guide.txt"},{"Arrow keys, detecting": "abs-guide.txt"},{"ASCII": "abs-guide.txt"},{"\u2022 Definition": "abs-guide.txt"},{"Appendix T. ASCII Table": "abs-guide.txt"},{"": "abs-guide.txt"},{"869": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"\u2022 Scripts for generating ASCII table": "abs-guide.txt"},{"awk field-oriented text processing language": "abs-guide.txt"},{"\u2022 rand(), random function": "abs-guide.txt"},{"\u2022 String manipulation": "abs-guide.txt"},{"\u2022 Using export to pass a variable to an embedded awk script": "abs-guide.txt"},{"***": "abs-guide.txt"},{"Backlight, setting the brightness": "abs-guide.txt"},{"Backquotes, used in command substitution": "abs-guide.txt"},{"Base conversion, example script": "abs-guide.txt"},{"Bash": "abs-guide.txt"},{"\u2022 Bad scripting practices": "abs-guide.txt"},{"\u2022 Basics reviewed, script example": "abs-guide.txt"},{"\u2022 Command-line options": "abs-guide.txt"},{"Table": "abs-guide.txt"},{"\u2022 Features that classic Bourne shell lacks": "abs-guide.txt"},{"\u2022 Internal variables": "abs-guide.txt"},{"\u2022 Version 2": "abs-guide.txt"},{"\u2022 Version 3": "abs-guide.txt"},{"\u2022 Version 4": "abs-guide.txt"},{"Version 4.1": "abs-guide.txt"},{"Version 4.2": "abs-guide.txt"},{".bashrc": "abs-guide.txt"},{"$BASH_SUBSHELL": "abs-guide.txt"},{"Basic commands, external": "abs-guide.txt"},{"Batch files, DOS": "abs-guide.txt"},{"Batch processing": "abs-guide.txt"},{"bc, calculator utility": "abs-guide.txt"},{"\u2022 In a here document": "abs-guide.txt"},{"\u2022 Template for calculating a script variable": "abs-guide.txt"},{"Bibliography": "abs-guide.txt"},{"Bison utility": "abs-guide.txt"},{"Appendix T. ASCII Table": "abs-guide.txt"},{"": "abs-guide.txt"},{"870": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"Bitwise operators": "abs-guide.txt"},{"\u2022 Example script": "abs-guide.txt"},{"Block devices": "abs-guide.txt"},{"\u2022 testing for": "abs-guide.txt"},{"Blocks of code": "abs-guide.txt"},{"\u2022 Iterating / looping": "abs-guide.txt"},{"\u2022 Redirection": "abs-guide.txt"},{"Script example: Redirecting output of a a code block": "abs-guide.txt"},{"Bootable flash drives, creating": "abs-guide.txt"},{"Brace expansion": "abs-guide.txt"},{"\u2022 Extended, {a..z}": "abs-guide.txt"},{"\u2022 Parameterizing": "abs-guide.txt"},{"\u2022 With increment and zero-padding (new feature in Bash, version 4)": "abs-guide.txt"},{"Brackets, [ ]": "abs-guide.txt"},{"\u2022 Array element": "abs-guide.txt"},{"\u2022 Enclose character set to match in a Regular Expression": "abs-guide.txt"},{"\u2022 Test construct": "abs-guide.txt"},{"Brackets, curly, {}, used in": "abs-guide.txt"},{"\u2022 Code block": "abs-guide.txt"},{"\u2022 find": "abs-guide.txt"},{"\u2022 Extended Regular Expressions": "abs-guide.txt"},{"\u2022 Positional parameters": "abs-guide.txt"},{"\u2022 xargs": "abs-guide.txt"},{"break loop control command": "abs-guide.txt"},{"\u2022 Parameter (optional)": "abs-guide.txt"},{"Builtins in Bash": "abs-guide.txt"},{"\u2022 Do not fork a subprocess": "abs-guide.txt"},{"***": "abs-guide.txt"},{"case construct": "abs-guide.txt"},{"\u2022 Command-line parameters, handling": "abs-guide.txt"},{"\u2022 Globbing, filtering strings with": "abs-guide.txt"},{"Appendix T. ASCII Table": "abs-guide.txt"},{"": "abs-guide.txt"},{"871": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"cat, concatentate file(s)": "abs-guide.txt"},{"\u2022 Abuse of": "abs-guide.txt"},{"\u2022 cat scripts": "abs-guide.txt"},{"\u2022 Less efficient than redirecting stdin": "abs-guide.txt"},{"\u2022 Piping the output of, to a read": "abs-guide.txt"},{"\u2022 Uses of": "abs-guide.txt"},{"Character devices": "abs-guide.txt"},{"\u2022 testing for": "abs-guide.txt"},{"Checksum": "abs-guide.txt"},{"Child processes": "abs-guide.txt"},{"Colon, : , equivalent to the true Bash builtin": "abs-guide.txt"},{"Colorizing scripts": "abs-guide.txt"},{"\u2022 Cycling through the background colors, example script": "abs-guide.txt"},{"\u2022 Table of color escape sequences": "abs-guide.txt"},{"\u2022 Template, colored text on colored background": "abs-guide.txt"},{"Comma operator, linking commands or operations": "abs-guide.txt"},{"Command-line options": "abs-guide.txt"},{"command_not_found_handle () builtin error-handling function (version 4+ of Bash)": "abs-guide.txt"},{"Command substitution": "abs-guide.txt"},{"\u2022 $( ... ), preferred notation": "abs-guide.txt"},{"\u2022 Backquotes": "abs-guide.txt"},{"\u2022 Extending the Bash toolset": "abs-guide.txt"},{"\u2022 Invokes a subshell": "abs-guide.txt"},{"\u2022 Nesting": "abs-guide.txt"},{"\u2022 Removes trailing newlines": "abs-guide.txt"},{"\u2022 Setting variable from loop output": "abs-guide.txt"},{"\u2022 Word splitting": "abs-guide.txt"},{"Comment headers, special purpose": "abs-guide.txt"},{"Commenting out blocks of code": "abs-guide.txt"},{"\u2022 Using an anonymous here document": "abs-guide.txt"},{"\u2022 Using an if-then construct": "abs-guide.txt"},{"Communications and hosts": "abs-guide.txt"},{"Compound comparison operators": "abs-guide.txt"},{"Appendix T. ASCII Table": "abs-guide.txt"},{"": "abs-guide.txt"},{"872": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"Compression utilities": "abs-guide.txt"},{"\u2022 bzip2": "abs-guide.txt"},{"\u2022 compress": "abs-guide.txt"},{"\u2022 gzip": "abs-guide.txt"},{"\u2022 zip": "abs-guide.txt"},{"continue loop control command": "abs-guide.txt"},{"Control characters": "abs-guide.txt"},{"\u2022 Control-C, break": "abs-guide.txt"},{"\u2022 Control-D, terminate / log out / erase": "abs-guide.txt"},{"\u2022 Control-G, BEL (beep)": "abs-guide.txt"},{"\u2022 Control-H, rubout": "abs-guide.txt"},{"\u2022 Control-J, newline": "abs-guide.txt"},{"\u2022 Control-M, carriage return": "abs-guide.txt"},{"Coprocesses": "abs-guide.txt"},{"cron, scheduling daemon": "abs-guide.txt"},{"C-style syntax , for handling variables": "abs-guide.txt"},{"Crossword puzzle solver": "abs-guide.txt"},{"Cryptography": "abs-guide.txt"},{"Curly brackets {}": "abs-guide.txt"},{"\u2022 in find command": "abs-guide.txt"},{"\u2022 in an Extended Regular Expression": "abs-guide.txt"},{"\u2022 in xargs": "abs-guide.txt"},{"***": "abs-guide.txt"},{"Daemons, in UNIX-type OS": "abs-guide.txt"},{"date": "abs-guide.txt"},{"dc, calculator utility": "abs-guide.txt"},{"dd, data duplicator command": "abs-guide.txt"},{"\u2022 Conversions": "abs-guide.txt"},{"\u2022 Copying raw data to/from devices": "abs-guide.txt"},{"\u2022 File deletion, secure": "abs-guide.txt"},{"\u2022 Keystrokes, capturing": "abs-guide.txt"},{"\u2022 Options": "abs-guide.txt"},{"\u2022 Random access on a data stream": "abs-guide.txt"},{"\u2022 Raspberry Pi, script for preparing a bootable SD card": "abs-guide.txt"},{"Appendix T. ASCII Table": "abs-guide.txt"},{"": "abs-guide.txt"},{"873": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"\u2022 Swapfiles, initializing": "abs-guide.txt"},{"\u2022 Thread on www.linuxquestions.org": "abs-guide.txt"},{"Debugging scripts": "abs-guide.txt"},{"\u2022 Tools": "abs-guide.txt"},{"\u2022 Trapping at exit": "abs-guide.txt"},{"\u2022 Trapping signals": "abs-guide.txt"},{"Decimal number, Bash interprets numbers as": "abs-guide.txt"},{"declare builtin": "abs-guide.txt"},{"\u2022 options": "abs-guide.txt"},{"case-modification options (version 4+ of Bash)": "abs-guide.txt"},{"Default parameters": "abs-guide.txt"},{"/dev directory": "abs-guide.txt"},{"\u2022 /dev/null pseudo-device file": "abs-guide.txt"},{"\u2022 /dev/urandom pseudo-device file, generating pseudorandom numbers with": "abs-guide.txt"},{"\u2022 /dev/zero, pseudo-device file": "abs-guide.txt"},{"Device file": "abs-guide.txt"},{"dialog, utility for generating dialog boxes in a script": "abs-guide.txt"},{"$DIRSTACK directory stack": "abs-guide.txt"},{"Disabled commands, in restricted shells": "abs-guide.txt"},{"do keyword, begins execution of commands within a loop": "abs-guide.txt"},{"done keyword, terminates a loop": "abs-guide.txt"},{"DOS batch files, converting to shell scripts": "abs-guide.txt"},{"DOS commands, UNIX equivalents of (table)": "abs-guide.txt"},{"dot files, \"hidden\" setup and configuration files": "abs-guide.txt"},{"Double brackets [[ ... ]] test construct": "abs-guide.txt"},{"\u2022 and evaluation of octal/hex constants": "abs-guide.txt"},{"Double parentheses (( ... )) arithmetic expansion/evaluation construct": "abs-guide.txt"},{"Double quotes \" ... \" weak quoting": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix T. ASCII Table": "abs-guide.txt"},{"": "abs-guide.txt"},{"874": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"\u2022 Double-quoting the backslash (\\) character": "abs-guide.txt"},{"Double-spacing a text file, using sed": "abs-guide.txt"},{"***": "abs-guide.txt"},{"-e File exists test": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"\u2022 Feeding commands down a pipe": "abs-guide.txt"},{"\u2022 Setting a variable using command substitution": "abs-guide.txt"},{"\u2022 /bin/echo, external echo command": "abs-guide.txt"},{"elif, Contraction of else and if": "abs-guide.txt"},{"else": "abs-guide.txt"},{"Encrypting files, using openssl": "abs-guide.txt"},{"esac, keyword terminating case construct": "abs-guide.txt"},{"Environmental variables": "abs-guide.txt"},{"-eq , is-equal-to integer comparison test": "abs-guide.txt"},{"Eratosthenes, Sieve of, algorithm for generating prime numbers": "abs-guide.txt"},{"Escaped characters, special meanings of": "abs-guide.txt"},{"\u2022 Within $' ... ' string expansion": "abs-guide.txt"},{"\u2022 Used with Unicode characters": "abs-guide.txt"},{"/etc/fstab (filesystem mount) file": "abs-guide.txt"},{"/etc/passwd (user account) file": "abs-guide.txt"},{"$EUID, Effective user ID": "abs-guide.txt"},{"eval, Combine and evaluate expression(s), with variable expansion": "abs-guide.txt"},{"\u2022 Effects of, Example script": "abs-guide.txt"},{"\u2022 Forces reevaluation of arguments": "abs-guide.txt"},{"\u2022 And indirect references": "abs-guide.txt"},{"\u2022 Risk of using": "abs-guide.txt"},{"\u2022 Using eval to convert array elements into a command list": "abs-guide.txt"},{"\u2022 Using eval to select among variables": "abs-guide.txt"},{"Evaluation of octal/hex constants within [[ ... ]]": "abs-guide.txt"},{"exec command, using in redirection": "abs-guide.txt"},{"Appendix T. ASCII Table": "abs-guide.txt"},{"": "abs-guide.txt"},{"875": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"Exercises": "abs-guide.txt"},{"Exit and Exit status": "abs-guide.txt"},{"\u2022 exit command": "abs-guide.txt"},{"\u2022 Exit status (exit code, return status of a command)": "abs-guide.txt"},{"Table, Exit codes with special meanings": "abs-guide.txt"},{"Anomalous": "abs-guide.txt"},{"Out of range": "abs-guide.txt"},{"Pipe exit status": "abs-guide.txt"},{"Specified by a function return": "abs-guide.txt"},{"Successful, 0": "abs-guide.txt"},{"/usr/include/sysexits.h, system file listing C/C++ standard exit codes": "abs-guide.txt"},{"Export, to make available variables to child processes": "abs-guide.txt"},{"\u2022 Passing a variable to an embedded awk script": "abs-guide.txt"},{"expr, Expression evaluator": "abs-guide.txt"},{"\u2022 Substring extraction": "abs-guide.txt"},{"\u2022 Substring index (numerical position in string)": "abs-guide.txt"},{"\u2022 Substring matching": "abs-guide.txt"},{"Extended Regular Expressions": "abs-guide.txt"},{"\u2022 ? (question mark) Match zero / one characters": "abs-guide.txt"},{"\u2022 ( ... ) Group of expressions": "abs-guide.txt"},{"\u2022 \\{ N \\} \"Curly\" brackets, escaped, number of character sets to match": "abs-guide.txt"},{"\u2022 + Character match": "abs-guide.txt"},{"***": "abs-guide.txt"},{"factor, decomposes an integer into its prime factors": "abs-guide.txt"},{"\u2022 Application: Generating prime numbers": "abs-guide.txt"},{"false, returns unsuccessful (1) exit status": "abs-guide.txt"},{"Field, a group of characters that comprises an item of data": "abs-guide.txt"},{"Files / Archiving": "abs-guide.txt"},{"File descriptors": "abs-guide.txt"},{"Appendix T. ASCII Table": "abs-guide.txt"},{"": "abs-guide.txt"},{"876": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"\u2022 Closing": "abs-guide.txt"},{"n<&- Close input file descriptor n": "abs-guide.txt"},{"0<&-, <&- Close stdin": "abs-guide.txt"},{"n>&- Close output file descriptor n": "abs-guide.txt"},{"1>&-, >&- Close stdout": "abs-guide.txt"},{"\u2022 File handles in C, similarity to": "abs-guide.txt"},{"File encryption": "abs-guide.txt"},{"find": "abs-guide.txt"},{"\u2022 {} Curly brackets": "abs-guide.txt"},{"\u2022 \\; Escaped semicolon": "abs-guide.txt"},{"Filter": "abs-guide.txt"},{"\u2022 Using - with file-processing utility as a filter": "abs-guide.txt"},{"\u2022 Feeding output of a filter back to same filter": "abs-guide.txt"},{"Floating point numbers, Bash does not recognize": "abs-guide.txt"},{"fold, a filter to wrap lines of text": "abs-guide.txt"},{"Forking a child process": "abs-guide.txt"},{"for loops": "abs-guide.txt"},{"Functions": "abs-guide.txt"},{"\u2022 Arguments passed referred to by position": "abs-guide.txt"},{"\u2022 Capturing the return value of a function using echo": "abs-guide.txt"},{"\u2022 Colon as function name": "abs-guide.txt"},{"\u2022 Definition must precede first call to function": "abs-guide.txt"},{"\u2022 Exit status": "abs-guide.txt"},{"\u2022 Local variables": "abs-guide.txt"},{"and recursion": "abs-guide.txt"},{"\u2022 Passing an array to a function": "abs-guide.txt"},{"\u2022 Passing pointers to a function": "abs-guide.txt"},{"\u2022 Positional parameters": "abs-guide.txt"},{"\u2022 Recursion": "abs-guide.txt"},{"\u2022 Redirecting stdin of a function": "abs-guide.txt"},{"\u2022 return": "abs-guide.txt"},{"Multiple return values from a function, example script": "abs-guide.txt"},{"Returning an array from a function": "abs-guide.txt"},{"Appendix T. ASCII Table": "abs-guide.txt"},{"": "abs-guide.txt"},{"877": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"Return range limits, workarounds": "abs-guide.txt"},{"\u2022 Shift arguments passed to a function": "abs-guide.txt"},{"\u2022 Unusual function names": "abs-guide.txt"},{"***": "abs-guide.txt"},{"Games and amusements": "abs-guide.txt"},{"\u2022 Anagrams": "abs-guide.txt"},{"\u2022 Anagrams, again": "abs-guide.txt"},{"\u2022 Bingo Number Generator": "abs-guide.txt"},{"\u2022 Crossword puzzle solver": "abs-guide.txt"},{"\u2022 Crypto-Quotes": "abs-guide.txt"},{"\u2022 Dealing a deck of cards": "abs-guide.txt"},{"\u2022 Fifteen Puzzle": "abs-guide.txt"},{"\u2022 Horse race": "abs-guide.txt"},{"\u2022 Knight's Tour": "abs-guide.txt"},{"\u2022 \"Life\" game": "abs-guide.txt"},{"\u2022 Magic Squares": "abs-guide.txt"},{"\u2022 Music-playing script": "abs-guide.txt"},{"\u2022 Nim": "abs-guide.txt"},{"\u2022 Pachinko": "abs-guide.txt"},{"\u2022 Perquackey": "abs-guide.txt"},{"\u2022 Petals Around the Rose": "abs-guide.txt"},{"\u2022 Podcasting": "abs-guide.txt"},{"\u2022 Poem": "abs-guide.txt"},{"\u2022 Speech generation": "abs-guide.txt"},{"\u2022 Towers of Hanoi": "abs-guide.txt"},{"Graphic version": "abs-guide.txt"},{"Alternate graphic version": "abs-guide.txt"},{"getopt, external command for parsing script command-line arguments": "abs-guide.txt"},{"\u2022 Emulated in a script": "abs-guide.txt"},{"getopts, Bash builtin for parsing script command-line arguments": "abs-guide.txt"},{"\u2022 $OPTIND / $OPTARG": "abs-guide.txt"},{"Global variable": "abs-guide.txt"},{"Globbing, filename expansion": "abs-guide.txt"},{"\u2022 Handling filenames correctly": "abs-guide.txt"},{"\u2022 Wild cards": "abs-guide.txt"},{"\u2022 Will not match dot files": "abs-guide.txt"},{"Golden Ratio (Phi)": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix T. ASCII Table": "abs-guide.txt"},{"": "abs-guide.txt"},{"878": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"-ge , greater-than or equal integer comparison test": "abs-guide.txt"},{"-gt , greater-than integer comparison test": "abs-guide.txt"},{"groff, text markup and formatting language": "abs-guide.txt"},{"Gronsfeld cipher": "abs-guide.txt"},{"$GROUPS, Groups user belongs to": "abs-guide.txt"},{"gzip, compression utility": "abs-guide.txt"},{"***": "abs-guide.txt"},{"Hashing, creating lookup keys in a table": "abs-guide.txt"},{"\u2022 Example script": "abs-guide.txt"},{"head, echo to stdout lines at the beginning of a text file": "abs-guide.txt"},{"help, gives usage summary of a Bash builtin": "abs-guide.txt"},{"Here documents": "abs-guide.txt"},{"\u2022 Anonymous here documents, using :": "abs-guide.txt"},{"Commenting out blocks of code": "abs-guide.txt"},{"Self-documenting scripts": "abs-guide.txt"},{"\u2022 bc in a here document": "abs-guide.txt"},{"\u2022 cat scripts": "abs-guide.txt"},{"\u2022 Command substitution": "abs-guide.txt"},{"\u2022 ex scripts": "abs-guide.txt"},{"\u2022 Function, supplying input to": "abs-guide.txt"},{"\u2022 Here strings": "abs-guide.txt"},{"Calculating the Golden Ratio": "abs-guide.txt"},{"Prepending text": "abs-guide.txt"},{"As the stdin of a loop": "abs-guide.txt"},{"Using read": "abs-guide.txt"},{"\u2022 Limit string": "abs-guide.txt"},{"! as a limit string": "abs-guide.txt"},{"Closing limit string may not be indented": "abs-guide.txt"},{"Dash option to limit string, <<-LimitString": "abs-guide.txt"},{"\u2022 Literal text output, for generating program code": "abs-guide.txt"},{"Appendix T. ASCII Table": "abs-guide.txt"},{"": "abs-guide.txt"},{"879": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"\u2022 Parameter substitution": "abs-guide.txt"},{"Disabling parameter substitution": "abs-guide.txt"},{"\u2022 Passing parameters": "abs-guide.txt"},{"\u2022 Temporary files": "abs-guide.txt"},{"\u2022 Using vi non-interactively": "abs-guide.txt"},{"History commands": "abs-guide.txt"},{"$HOME, user's home directory": "abs-guide.txt"},{"Homework assignment solver": "abs-guide.txt"},{"$HOSTNAME, system host name": "abs-guide.txt"},{"***": "abs-guide.txt"},{"$Id parameter, in rcs (Revision Control System)": "abs-guide.txt"},{"if [ condition ]; then ... test construct": "abs-guide.txt"},{"\u2022 if-grep, if and grep in combination": "abs-guide.txt"},{"Fixup for if-grep test": "abs-guide.txt"},{"$IFS, Internal field separator variable": "abs-guide.txt"},{"\u2022 Defaults to whitespace": "abs-guide.txt"},{"Integer comparison operators": "abs-guide.txt"},{"in, keyword preceding [list] in a for loop": "abs-guide.txt"},{"Initialization table, /etc/inittab": "abs-guide.txt"},{"Inline group, i.e., code block": "abs-guide.txt"},{"Interactive script, test for": "abs-guide.txt"},{"I/O redirection": "abs-guide.txt"},{"Indirect referencing of variables": "abs-guide.txt"},{"\u2022 New notation, introduced in version 2 of Bash ( example script)": "abs-guide.txt"},{"iptables, packet filtering and firewall utility": "abs-guide.txt"},{"\u2022 Usage example": "abs-guide.txt"},{"\u2022 Example script": "abs-guide.txt"},{"Iteration": "abs-guide.txt"},{"Appendix T. ASCII Table": "abs-guide.txt"},{"": "abs-guide.txt"},{"880": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"***": "abs-guide.txt"},{"Job IDs, table": "abs-guide.txt"},{"jot, Emit a sequence of integers. Equivalent to seq.": "abs-guide.txt"},{"\u2022 Random sequence generation": "abs-guide.txt"},{"Just another Bash hacker!": "abs-guide.txt"},{"***": "abs-guide.txt"},{"Keywords": "abs-guide.txt"},{"\u2022 error, if missing": "abs-guide.txt"},{"kill, terminate a process by process ID": "abs-guide.txt"},{"\u2022 Options (-l, -9)": "abs-guide.txt"},{"killall, terminate a process by name": "abs-guide.txt"},{"killall script in /etc/rc.d/init.d": "abs-guide.txt"},{"***": "abs-guide.txt"},{"lastpipe shell option": "abs-guide.txt"},{"-le , less-than or equal integer comparison test": "abs-guide.txt"},{"let, setting and carrying out arithmetic operations on variables": "abs-guide.txt"},{"\u2022 C-style increment and decrement operators": "abs-guide.txt"},{"Limit string, in a here document": "abs-guide.txt"},{"$LINENO, variable indicating the line number where it appears in a script": "abs-guide.txt"},{"Link, file (using ln command)": "abs-guide.txt"},{"\u2022 Invoking script with multiple names, using ln": "abs-guide.txt"},{"\u2022 symbolic links, ln -s": "abs-guide.txt"},{"List constructs": "abs-guide.txt"},{"\u2022 And list": "abs-guide.txt"},{"\u2022 Or list": "abs-guide.txt"},{"Local variables": "abs-guide.txt"},{"\u2022 and recursion": "abs-guide.txt"},{"Appendix T. ASCII Table": "abs-guide.txt"},{"": "abs-guide.txt"},{"881": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"Localization": "abs-guide.txt"},{"Logical operators (&&, ||, etc.)": "abs-guide.txt"},{"Logout file, the ~/.bash_logout file": "abs-guide.txt"},{"Loopback device, mounting a file on a block device": "abs-guide.txt"},{"Loops": "abs-guide.txt"},{"\u2022 break loop control command": "abs-guide.txt"},{"\u2022 continue loop control command": "abs-guide.txt"},{"\u2022 C-style loop within double parentheses": "abs-guide.txt"},{"for loop": "abs-guide.txt"},{"while loop": "abs-guide.txt"},{"\u2022 do (keyword), begins execution of commands within a loop": "abs-guide.txt"},{"\u2022 done (keyword), terminates a loop": "abs-guide.txt"},{"\u2022 for loops": "abs-guide.txt"},{"for arg in [list]; do": "abs-guide.txt"},{"Command substitution to generate [list]": "abs-guide.txt"},{"Filename expansion in [list]": "abs-guide.txt"},{"Multiple parameters in each [list] element": "abs-guide.txt"},{"Omitting [list], defaults to positional parameters": "abs-guide.txt"},{"Parameterizing [list]": "abs-guide.txt"},{"Redirection": "abs-guide.txt"},{"\u2022 in, (keyword) preceding [list] in a for loop": "abs-guide.txt"},{"\u2022 Nested loops": "abs-guide.txt"},{"\u2022 Running a loop in the background, script example": "abs-guide.txt"},{"\u2022 Semicolon required, when do is on first line of loop": "abs-guide.txt"},{"for loop": "abs-guide.txt"},{"while loop": "abs-guide.txt"},{"\u2022 until loop": "abs-guide.txt"},{"until [ condition-is-true ]; do": "abs-guide.txt"},{"\u2022 while loop": "abs-guide.txt"},{"while [ condition ]; do": "abs-guide.txt"},{"Function call inside test brackets": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix T. ASCII Table": "abs-guide.txt"},{"": "abs-guide.txt"},{"882": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"Multiple conditions": "abs-guide.txt"},{"Omitting test brackets": "abs-guide.txt"},{"Redirection": "abs-guide.txt"},{"while read construct": "abs-guide.txt"},{"\u2022 Which type of loop to use": "abs-guide.txt"},{"Loopback devices": "abs-guide.txt"},{"\u2022 In /dev directory": "abs-guide.txt"},{"\u2022 Mounting an ISO image": "abs-guide.txt"},{"-lt , less-than integer comparison test": "abs-guide.txt"},{"***": "abs-guide.txt"},{"m4, macro processing language": "abs-guide.txt"},{"$MACHTYPE, Machine type": "abs-guide.txt"},{"Magic number, marker at the head of a file indicating the file type": "abs-guide.txt"},{"Makefile, file containing the list of dependencies used by make command": "abs-guide.txt"},{"man, manual page (lookup)": "abs-guide.txt"},{"\u2022 Man page editor (script)": "abs-guide.txt"},{"mapfile builtin, loads an array with a text file": "abs-guide.txt"},{"Math commands": "abs-guide.txt"},{"Meta-meaning": "abs-guide.txt"},{"Morse code training script": "abs-guide.txt"},{"Modulo, arithmetic remainder operator": "abs-guide.txt"},{"\u2022 Application: Generating prime numbers": "abs-guide.txt"},{"Mortgage calculations, example script": "abs-guide.txt"},{"***": "abs-guide.txt"},{"-n String not null test": "abs-guide.txt"},{"Named pipe, a temporary FIFO buffer": "abs-guide.txt"},{"\u2022 Example script": "abs-guide.txt"},{"Appendix T. ASCII Table": "abs-guide.txt"},{"": "abs-guide.txt"},{"883": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"nc, netcat, a network toolkit for TCP and UDP ports": "abs-guide.txt"},{"-ne, not-equal-to integer comparison test": "abs-guide.txt"},{"Negation operator, !, reverses the sense of a test": "abs-guide.txt"},{"netstat, Network statistics": "abs-guide.txt"},{"Network programming": "abs-guide.txt"},{"nl, a filter to number lines of text": "abs-guide.txt"},{"Noclobber, -C option to Bash to prevent overwriting of files": "abs-guide.txt"},{"NOT logical operator, !": "abs-guide.txt"},{"null variable assignment, avoiding": "abs-guide.txt"},{"***": "abs-guide.txt"},{"-o Logical OR compound comparison test": "abs-guide.txt"},{"Obfuscation": "abs-guide.txt"},{"\u2022 Colon as function name": "abs-guide.txt"},{"\u2022 Homework assignment": "abs-guide.txt"},{"\u2022 Just another Bash hacker!": "abs-guide.txt"},{"octal, base-8 numbers": "abs-guide.txt"},{"od, octal dump": "abs-guide.txt"},{"$OLDPWD Previous working directory": "abs-guide.txt"},{"openssl encryption utility": "abs-guide.txt"},{"Operator": "abs-guide.txt"},{"\u2022 Definition of": "abs-guide.txt"},{"\u2022 Precedence": "abs-guide.txt"},{"Options, passed to shell or script on command line or by set command": "abs-guide.txt"},{"Or list": "abs-guide.txt"},{"Or logical operator, ||": "abs-guide.txt"},{"***": "abs-guide.txt"},{"Parameter substitution": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix T. ASCII Table": "abs-guide.txt"},{"": "abs-guide.txt"},{"884": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"\u2022 ${parameter+alt_value}": "abs-guide.txt"},{"${parameter:+alt_value}": "abs-guide.txt"},{"Alternate value of parameter, if set": "abs-guide.txt"},{"\u2022 ${parameter-default}": "abs-guide.txt"},{"${parameter:-default}": "abs-guide.txt"},{"${parameter=default}": "abs-guide.txt"},{"${parameter:=default}": "abs-guide.txt"},{"Default parameters": "abs-guide.txt"},{"\u2022 ${!varprefix*}": "abs-guide.txt"},{"${!varprefix@}": "abs-guide.txt"},{"Parameter name match": "abs-guide.txt"},{"\u2022 ${parameter?err_msg}": "abs-guide.txt"},{"Parameter-unset message": "abs-guide.txt"},{"\u2022 ${parameter}": "abs-guide.txt"},{"Value of parameter": "abs-guide.txt"},{"\u2022 Case modification (version 4+ of Bash).": "abs-guide.txt"},{"\u2022 Script example": "abs-guide.txt"},{"\u2022 Table of parameter substitution": "abs-guide.txt"},{"Parent / child process problem, a child process cannot export variables to a parent process": "abs-guide.txt"},{"Parentheses": "abs-guide.txt"},{"\u2022 Command group": "abs-guide.txt"},{"\u2022 Enclose group of Extended Regular Expressions": "abs-guide.txt"},{"\u2022 Double parentheses, in arithmetic expansion": "abs-guide.txt"},{"$PATH, the path (location of system binaries)": "abs-guide.txt"},{"\u2022 Appending directories to $PATH using the += operator.": "abs-guide.txt"},{"Pathname, a filename that incorporates the complete path of a given file.": "abs-guide.txt"},{"\u2022 Parsing pathnames": "abs-guide.txt"},{"Perl, programming language": "abs-guide.txt"},{"\u2022 Combined in the same file with a Bash script": "abs-guide.txt"},{"\u2022 Embedded in a Bash script": "abs-guide.txt"},{"Perquackey-type anagramming game (Quackey script)": "abs-guide.txt"},{"Appendix T. ASCII Table": "abs-guide.txt"},{"": "abs-guide.txt"},{"885": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"Petals Around the Rose": "abs-guide.txt"},{"PID, Process ID, an identification number assigned to a running process.": "abs-guide.txt"},{"Pipe, | , a device for passing the output of a command to another command or to the shell": "abs-guide.txt"},{"\u2022 Avoiding unnecessary commands in a pipe": "abs-guide.txt"},{"\u2022 Comments embedded within": "abs-guide.txt"},{"\u2022 Exit status of a pipe": "abs-guide.txt"},{"\u2022 Pipefail, set -o pipefail option to indicate exit status within a pipe": "abs-guide.txt"},{"\u2022 $PIPESTATUS, exit status of last executed pipe": "abs-guide.txt"},{"\u2022 Piping output of a command to a script": "abs-guide.txt"},{"\u2022 Redirecting stdin, rather than using cat in a pipe": "abs-guide.txt"},{"Pitfalls": "abs-guide.txt"},{"\u2022 - (dash) is not redirection operator": "abs-guide.txt"},{"\u2022 // (double forward slash), behavior of cd command toward": "abs-guide.txt"},{"\u2022 #!/bin/sh script header disables extended Bash features": "abs-guide.txt"},{"\u2022 Abuse of cat": "abs-guide.txt"},{"\u2022 CGI programming, using scripts for": "abs-guide.txt"},{"\u2022 Closing limit string in a here document, indenting": "abs-guide.txt"},{"\u2022 DOS-type newlines (\\r\\n) crash a script": "abs-guide.txt"},{"\u2022 Double-quoting the backslash (\\) character": "abs-guide.txt"},{"\u2022 eval, risk of using": "abs-guide.txt"},{"\u2022 Execute permission lacking for commands within a script": "abs-guide.txt"},{"\u2022 Exit status, anomalous": "abs-guide.txt"},{"\u2022 Exit status of arithmetic expression not equivalent to an error code": "abs-guide.txt"},{"\u2022 Export problem, child process to parent process": "abs-guide.txt"},{"\u2022 Extended Bash features not available": "abs-guide.txt"},{"\u2022 Failing to quote variables within test brackets": "abs-guide.txt"},{"\u2022 GNU command set, in cross-platform scripts": "abs-guide.txt"},{"\u2022 let misuse: attempting to set string variables": "abs-guide.txt"},{"\u2022 Multiple echo statements in a function whose output is captured": "abs-guide.txt"},{"\u2022 null variable assignment": "abs-guide.txt"},{"\u2022 Numerical and string comparison operators not equivalent": "abs-guide.txt"},{"= and -eq not interchangeable": "abs-guide.txt"},{"\u2022 Omitting terminal semicolon, in a curly-bracketed code block": "abs-guide.txt"},{"\u2022 Piping": "abs-guide.txt"},{"echo to a loop": "abs-guide.txt"},{"echo to read (however, this problem can be circumvented)": "abs-guide.txt"},{"tail -f to grep": "abs-guide.txt"},{"\u2022 Preserving whitespace within a variable, unintended consequences": "abs-guide.txt"},{"\u2022 suid commands inside a script": "abs-guide.txt"},{"\u2022 Undocumented Bash features, danger of": "abs-guide.txt"},{"\u2022 Updates to Bash breaking older scripts": "abs-guide.txt"},{"\u2022 Uninitialized variables": "abs-guide.txt"},{"Appendix T. ASCII Table": "abs-guide.txt"},{"": "abs-guide.txt"},{"886": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"\u2022 Variable names, inappropriate": "abs-guide.txt"},{"\u2022 Variables in a subshell, scope limited": "abs-guide.txt"},{"\u2022 Subshell in while-read loop": "abs-guide.txt"},{"\u2022 Whitespace, misuse of": "abs-guide.txt"},{"Pointers": "abs-guide.txt"},{"\u2022 and file descriptors": "abs-guide.txt"},{"\u2022 and functions": "abs-guide.txt"},{"\u2022 and indirect references": "abs-guide.txt"},{"\u2022 and variables": "abs-guide.txt"},{"Portability issues in shell scripting": "abs-guide.txt"},{"\u2022 Setting path and umask": "abs-guide.txt"},{"\u2022 A test suite script (Bash versus classic Bourne shell)": "abs-guide.txt"},{"\u2022 Using whatis": "abs-guide.txt"},{"Positional parameters": "abs-guide.txt"},{"\u2022 $@, as separate words": "abs-guide.txt"},{"\u2022 $*, as a single word": "abs-guide.txt"},{"\u2022 in functions": "abs-guide.txt"},{"POSIX, Portable Operating System Interface / UNIX": "abs-guide.txt"},{"\u2022 --posix option": "abs-guide.txt"},{"\u2022 1003.2 standard": "abs-guide.txt"},{"\u2022 Character classes": "abs-guide.txt"},{"$PPID, process ID of parent process": "abs-guide.txt"},{"Precedence, operator": "abs-guide.txt"},{"Prepending lines at head of a file, script example": "abs-guide.txt"},{"Prime numbers": "abs-guide.txt"},{"\u2022 Generating primes using the factor command": "abs-guide.txt"},{"\u2022 Generating primes using the modulo operator": "abs-guide.txt"},{"\u2022 Sieve of Eratosthenes, example script": "abs-guide.txt"},{"printf, formatted print command": "abs-guide.txt"},{"/proc directory": "abs-guide.txt"},{"\u2022 Running processes, files describing": "abs-guide.txt"},{"\u2022 Writing to files in /proc, warning": "abs-guide.txt"},{"Process": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix T. ASCII Table": "abs-guide.txt"},{"": "abs-guide.txt"},{"887": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"\u2022 Child process": "abs-guide.txt"},{"\u2022 Parent process": "abs-guide.txt"},{"\u2022 Process ID (PID)": "abs-guide.txt"},{"Process substitution": "abs-guide.txt"},{"\u2022 To compare contents of directories": "abs-guide.txt"},{"\u2022 To supply stdin of a command": "abs-guide.txt"},{"\u2022 Template": "abs-guide.txt"},{"\u2022 while-read loop without a subshell": "abs-guide.txt"},{"Programmable completion (tab expansion)": "abs-guide.txt"},{"Prompt": "abs-guide.txt"},{"\u2022 $PS1, Main prompt, seen at command line": "abs-guide.txt"},{"\u2022 $PS2, Secondary prompt": "abs-guide.txt"},{"Pseudo-code, as problem-solving method": "abs-guide.txt"},{"$PWD, Current working directory": "abs-guide.txt"},{"***": "abs-guide.txt"},{"Quackey, a Perquackey-type anagramming game (script)": "abs-guide.txt"},{"Question mark, ?": "abs-guide.txt"},{"\u2022 Character match in an Extended Regular Expression": "abs-guide.txt"},{"\u2022 Single-character wild card, in globbing": "abs-guide.txt"},{"\u2022 In a C-style Trinary (ternary) operator": "abs-guide.txt"},{"Quoting": "abs-guide.txt"},{"\u2022 Character string": "abs-guide.txt"},{"\u2022 Variables": "abs-guide.txt"},{"within test brackets": "abs-guide.txt"},{"\u2022 Whitespace, using quoting to preserve": "abs-guide.txt"},{"***": "abs-guide.txt"},{"Random numbers": "abs-guide.txt"},{"\u2022 /dev/urandom": "abs-guide.txt"},{"\u2022 rand(), random function in awk": "abs-guide.txt"},{"\u2022 $RANDOM, Bash function that returns a pseudorandom integer": "abs-guide.txt"},{"\u2022 Random sequence generation, using date command": "abs-guide.txt"},{"\u2022 Random sequence generation, using jot": "abs-guide.txt"},{"\u2022 Random string, generating": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix T. ASCII Table": "abs-guide.txt"},{"": "abs-guide.txt"},{"888": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"Raspberry Pi (single-board computer)": "abs-guide.txt"},{"\u2022 Script for preparing a bootable SD card": "abs-guide.txt"},{"rcs": "abs-guide.txt"},{"read, set value of a variable from stdin": "abs-guide.txt"},{"\u2022 Detecting arrow keys": "abs-guide.txt"},{"\u2022 Options": "abs-guide.txt"},{"\u2022 Piping output of cat to read": "abs-guide.txt"},{"\u2022 \"Prepending\" text": "abs-guide.txt"},{"\u2022 Problems piping echo to read": "abs-guide.txt"},{"\u2022 Redirection from a file to read": "abs-guide.txt"},{"\u2022 $REPLY, default read variable": "abs-guide.txt"},{"\u2022 Timed input": "abs-guide.txt"},{"\u2022 while read construct": "abs-guide.txt"},{"readline library": "abs-guide.txt"},{"Recursion": "abs-guide.txt"},{"\u2022 Demonstration of": "abs-guide.txt"},{"\u2022 Factorial": "abs-guide.txt"},{"\u2022 Fibonacci sequence": "abs-guide.txt"},{"\u2022 Local variables": "abs-guide.txt"},{"\u2022 Script calling itself recursively": "abs-guide.txt"},{"\u2022 Towers of Hanoi": "abs-guide.txt"},{"Redirection": "abs-guide.txt"},{"\u2022 Code blocks": "abs-guide.txt"},{"\u2022 exec <filename,": "abs-guide.txt"},{"to reassign file descriptors": "abs-guide.txt"},{"\u2022 Introductory-level explanation of I/O redirection": "abs-guide.txt"},{"\u2022 Open a file for both reading and writing": "abs-guide.txt"},{"<>filename": "abs-guide.txt"},{"\u2022 read input redirected from a file": "abs-guide.txt"},{"\u2022 stderr to stdout": "abs-guide.txt"},{"2>&1": "abs-guide.txt"},{"\u2022 stdin / stdout, using \u2022 stdinof a function": "abs-guide.txt"},{"\u2022 stdout to a file": "abs-guide.txt"},{"> ... >>": "abs-guide.txt"},{"\u2022 stdout to file descriptor j": "abs-guide.txt"},{">&j": "abs-guide.txt"},{"Appendix T. ASCII Table": "abs-guide.txt"},{"": "abs-guide.txt"},{"889": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"\u2022 file descriptori to file descriptor j": "abs-guide.txt"},{"i>&j": "abs-guide.txt"},{"\u2022 stdout of a command to stderr": "abs-guide.txt"},{">&2": "abs-guide.txt"},{"\u2022 stdout and stderr of a command to a file": "abs-guide.txt"},{"&>": "abs-guide.txt"},{"\u2022 tee, redirect to a file output of command(s) partway through a pipe": "abs-guide.txt"},{"Reference Cards": "abs-guide.txt"},{"\u2022 Miscellaneous constructs": "abs-guide.txt"},{"\u2022 Parameter substitution/expansion": "abs-guide.txt"},{"\u2022 Special shell variables": "abs-guide.txt"},{"\u2022 String operations": "abs-guide.txt"},{"\u2022 Test operators": "abs-guide.txt"},{"Binary comparison": "abs-guide.txt"},{"Files": "abs-guide.txt"},{"Regular Expressions": "abs-guide.txt"},{"\u2022 ^ (caret) Beginning-of-line": "abs-guide.txt"},{"\u2022 $ (dollar sign) Anchor": "abs-guide.txt"},{"\u2022 . (dot) Match single character": "abs-guide.txt"},{"\u2022 * (asterisk) Any number of characters": "abs-guide.txt"},{"\u2022 [ ] (brackets) Enclose character set to match": "abs-guide.txt"},{"\u2022 \\ (backslash) Escape, interpret following character literally": "abs-guide.txt"},{"\u2022 \\< ... \\> (angle brackets, escaped) Word boundary": "abs-guide.txt"},{"\u2022 Extended REs": "abs-guide.txt"},{"+ Character match": "abs-guide.txt"},{"\\{ \\} Escaped \"curly\" brackets": "abs-guide.txt"},{"[: :] POSIX character classes": "abs-guide.txt"},{"$REPLY, Default value associated with read command": "abs-guide.txt"},{"Restricted shell, shell (or script) with certain commands disabled": "abs-guide.txt"},{"return, command that terminates a function": "abs-guide.txt"},{"run-parts": "abs-guide.txt"},{"\u2022 Running scripts in sequence, without user intervention": "abs-guide.txt"},{"***": "abs-guide.txt"},{"Appendix T. ASCII Table": "abs-guide.txt"},{"": "abs-guide.txt"},{"890": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"Scope of a variable, definition": "abs-guide.txt"},{"Script options, set at command line": "abs-guide.txt"},{"Scripting routines, library of useful definitions and functions": "abs-guide.txt"},{"Secondary prompt, $PS2": "abs-guide.txt"},{"Security issues": "abs-guide.txt"},{"\u2022 nmap, network mapper / port scanner": "abs-guide.txt"},{"\u2022 sudo": "abs-guide.txt"},{"\u2022 suid commands inside a script": "abs-guide.txt"},{"\u2022 Viruses, trojans, and worms in scripts": "abs-guide.txt"},{"\u2022 Writing secure scripts": "abs-guide.txt"},{"sed, pattern-based programming language": "abs-guide.txt"},{"\u2022 Table, basic operators": "abs-guide.txt"},{"\u2022 Table, examples of operators": "abs-guide.txt"},{"select, construct for menu building": "abs-guide.txt"},{"\u2022 in list omitted": "abs-guide.txt"},{"Semaphore": "abs-guide.txt"},{"Semicolon required, when do keyword is on first line of loop": "abs-guide.txt"},{"\u2022 When terminating curly-bracketed code block": "abs-guide.txt"},{"seq, Emit a sequence of integers. Equivalent to jot.": "abs-guide.txt"},{"set, Change value of internal script variables": "abs-guide.txt"},{"\u2022 set -u, Abort script with error message if attempting to use an undeclared variable.": "abs-guide.txt"},{"Shell script, definition of": "abs-guide.txt"},{"Shell wrapper, script embedding a command or utility": "abs-guide.txt"},{"shift, reassigning positional parameters": "abs-guide.txt"},{"$SHLVL, shell level, depth to which the shell (or script) is nested": "abs-guide.txt"},{"shopt, change shell options": "abs-guide.txt"},{"Signal, a message sent to a process": "abs-guide.txt"},{"Simulations": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix T. ASCII Table": "abs-guide.txt"},{"": "abs-guide.txt"},{"891": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"\u2022 Brownian motion": "abs-guide.txt"},{"\u2022 Galton board": "abs-guide.txt"},{"\u2022 Horserace": "abs-guide.txt"},{"\u2022 Life, game of": "abs-guide.txt"},{"\u2022 PI, approximating by firing cannonballs": "abs-guide.txt"},{"\u2022 Pushdown stack": "abs-guide.txt"},{"Single quotes (' ... ') strong quoting": "abs-guide.txt"},{"Socket, a communication node associated with an I/O port": "abs-guide.txt"},{"Sorting": "abs-guide.txt"},{"\u2022 Bubble sort": "abs-guide.txt"},{"\u2022 Insertion sort": "abs-guide.txt"},{"source, execute a script or, within a script, import a file": "abs-guide.txt"},{"\u2022 Passing positional parameters": "abs-guide.txt"},{"Spam, dealing with": "abs-guide.txt"},{"\u2022 Example script": "abs-guide.txt"},{"\u2022 Example script": "abs-guide.txt"},{"\u2022 Example script": "abs-guide.txt"},{"\u2022 Example script": "abs-guide.txt"},{"Special characters": "abs-guide.txt"},{"Stack": "abs-guide.txt"},{"\u2022 Definition": "abs-guide.txt"},{"\u2022 Emulating a push-down stack, example script": "abs-guide.txt"},{"Standard Deviation, example script": "abs-guide.txt"},{"Startup files, Bash": "abs-guide.txt"},{"stdin and stdout": "abs-guide.txt"},{"Stopwatch, example script": "abs-guide.txt"},{"Strings": "abs-guide.txt"},{"\u2022 =~ String match operator": "abs-guide.txt"},{"\u2022 Comparison": "abs-guide.txt"},{"\u2022 Length": "abs-guide.txt"},{"${#string}": "abs-guide.txt"},{"\u2022 Manipulation": "abs-guide.txt"},{"\u2022 Manipulation, using awk": "abs-guide.txt"},{"Appendix T. ASCII Table": "abs-guide.txt"},{"": "abs-guide.txt"},{"892": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"\u2022 Null string, testing for": "abs-guide.txt"},{"\u2022 Protecting strings from expansion and/or reinterpretation, script example": "abs-guide.txt"},{"Unprotecting strings, script example": "abs-guide.txt"},{"\u2022 strchr(), equivalent of": "abs-guide.txt"},{"\u2022 strlen(), equivalent of": "abs-guide.txt"},{"\u2022 strings command, find printable strings in a binary or data file": "abs-guide.txt"},{"\u2022 Substring extraction": "abs-guide.txt"},{"${string:position}": "abs-guide.txt"},{"${string:position:length}": "abs-guide.txt"},{"Using expr": "abs-guide.txt"},{"\u2022 Substring index (numerical position in string)": "abs-guide.txt"},{"\u2022 Substring matching, using expr": "abs-guide.txt"},{"\u2022 Substring removal": "abs-guide.txt"},{"${var#Pattern}": "abs-guide.txt"},{"${var##Pattern}": "abs-guide.txt"},{"${var%Pattern}": "abs-guide.txt"},{"${var%%Pattern}": "abs-guide.txt"},{"\u2022 Substring replacement": "abs-guide.txt"},{"${string/substring/replacement}": "abs-guide.txt"},{"${string//substring/replacement}": "abs-guide.txt"},{"${string/#substring/replacement}": "abs-guide.txt"},{"${string/%substring/replacement}": "abs-guide.txt"},{"Script example": "abs-guide.txt"},{"\u2022 Table of string/substring manipulation and extraction operators": "abs-guide.txt"},{"Strong quoting ' ... '": "abs-guide.txt"},{"Stylesheet for writing scripts": "abs-guide.txt"},{"Subshell": "abs-guide.txt"},{"\u2022 Command list within parentheses": "abs-guide.txt"},{"\u2022 Variables, $BASH_SUBSHELL and $SHLVL": "abs-guide.txt"},{"\u2022 Variables in a subshell": "abs-guide.txt"},{"scope limited, but ...": "abs-guide.txt"},{"... can be accessed outside the subshell?": "abs-guide.txt"},{"Appendix T. ASCII Table": "abs-guide.txt"},{"": "abs-guide.txt"},{"893": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"su Substitute user, log on as a different user or as root": "abs-guide.txt"},{"suid (set user id) file flag": "abs-guide.txt"},{"\u2022 suid commands inside a script, not advisable": "abs-guide.txt"},{"Symbolic links": "abs-guide.txt"},{"Swapfiles": "abs-guide.txt"},{"***": "abs-guide.txt"},{"Tab completion": "abs-guide.txt"},{"Table lookup, script example": "abs-guide.txt"},{"tail, echo to stdout lines at the (tail) end of a text file": "abs-guide.txt"},{"tar, archiving utility": "abs-guide.txt"},{"tee, redirect to a file output of command(s) partway through a pipe": "abs-guide.txt"},{"Terminals": "abs-guide.txt"},{"\u2022 setserial": "abs-guide.txt"},{"\u2022 setterm": "abs-guide.txt"},{"\u2022 stty": "abs-guide.txt"},{"\u2022 tput": "abs-guide.txt"},{"\u2022 wall": "abs-guide.txt"},{"test command": "abs-guide.txt"},{"\u2022 Bash builtin": "abs-guide.txt"},{"\u2022 external command, /usr/bin/test (equivalent to /usr/bin/[)": "abs-guide.txt"},{"Test constructs": "abs-guide.txt"},{"Test operators": "abs-guide.txt"},{"\u2022 -a Logical AND compound comparison": "abs-guide.txt"},{"\u2022 -e File exists": "abs-guide.txt"},{"\u2022 -eq is-equal-to (integer comparison)": "abs-guide.txt"},{"\u2022 -f File is a regular file": "abs-guide.txt"},{"\u2022 -ge greater-than or equal (integer comparison)": "abs-guide.txt"},{"\u2022 -gt greater-than (integer comparison)": "abs-guide.txt"},{"\u2022 -le less-than or equal (integer comparison)": "abs-guide.txt"},{"\u2022 -lt less-than (integer comparison)": "abs-guide.txt"},{"\u2022 -n not-zero-length (string comparison)": "abs-guide.txt"},{"\u2022 -ne not-equal-to (integer comparison)": "abs-guide.txt"},{"\u2022 -o Logical OR compound comparison": "abs-guide.txt"},{"\u2022 -u suid flag set, file test": "abs-guide.txt"},{"Appendix T. ASCII Table": "abs-guide.txt"},{"": "abs-guide.txt"},{"894": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"\u2022 -z is-zero-length (string comparison)": "abs-guide.txt"},{"\u2022 = is-equal-to (string comparison)": "abs-guide.txt"},{"== is-equal-to (string comparison)": "abs-guide.txt"},{"\u2022 < less-than (string comparison)": "abs-guide.txt"},{"\u2022 < less-than, (integer comparison, within double parentheses)": "abs-guide.txt"},{"\u2022 <= less-than-or-equal, (integer comparison, within double parentheses)": "abs-guide.txt"},{"\u2022 > greater-than (string comparison)": "abs-guide.txt"},{"\u2022 > greater-than, (integer comparison, within double parentheses)": "abs-guide.txt"},{"\u2022 >= greater-than-or-equal, (integer comparison, within double parentheses)": "abs-guide.txt"},{"\u2022 || Logical OR": "abs-guide.txt"},{"\u2022 && Logical AND": "abs-guide.txt"},{"\u2022 ! Negation operator, inverts exit status of a test": "abs-guide.txt"},{"!= not-equal-to (string comparison)": "abs-guide.txt"},{"\u2022 Tables of test operators": "abs-guide.txt"},{"Binary comparison": "abs-guide.txt"},{"File": "abs-guide.txt"},{"Text and text file processing": "abs-guide.txt"},{"Time / Date": "abs-guide.txt"},{"Timed input": "abs-guide.txt"},{"\u2022 Using read -t": "abs-guide.txt"},{"\u2022 Using stty": "abs-guide.txt"},{"\u2022 Using timing loop": "abs-guide.txt"},{"\u2022 Using $TMOUT": "abs-guide.txt"},{"Tips and hints for Bash scripts": "abs-guide.txt"},{"\u2022 Array, as return value from a function": "abs-guide.txt"},{"Associative array more efficient than a numerically-indexed array": "abs-guide.txt"},{"\u2022 Capturing the return value of a function, using echo": "abs-guide.txt"},{"\u2022 CGI programming, using scripts for": "abs-guide.txt"},{"\u2022 Comment blocks": "abs-guide.txt"},{"Using anonymous here documents": "abs-guide.txt"},{"Using if-then constructs": "abs-guide.txt"},{"\u2022 Comment headers, special purpose": "abs-guide.txt"},{"\u2022 C-style syntax , for manipulating variables": "abs-guide.txt"},{"\u2022 Double-spacing a text file": "abs-guide.txt"},{"\u2022 Filenames prefixed with a dash, removing": "abs-guide.txt"},{"\u2022 Filter, feeding output back to same filter": "abs-guide.txt"},{"\u2022 Function return value workarounds": "abs-guide.txt"},{"\u2022 if-grep test fixup": "abs-guide.txt"},{"Appendix T. ASCII Table": "abs-guide.txt"},{"": "abs-guide.txt"},{"895": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"\u2022 Library of useful definitions and functions": "abs-guide.txt"},{"\u2022 null variable assignment, avoiding": "abs-guide.txt"},{"\u2022 Passing an array to a function": "abs-guide.txt"},{"\u2022 $PATH, appending to, using the += operator.": "abs-guide.txt"},{"\u2022 Prepending lines at head of a file": "abs-guide.txt"},{"\u2022 Progress bar template": "abs-guide.txt"},{"\u2022 Pseudo-code": "abs-guide.txt"},{"\u2022 rcs": "abs-guide.txt"},{"\u2022 Redirecting a test to /dev/null to suppress output": "abs-guide.txt"},{"\u2022 Running scripts in sequence without user intervention, using run-parts": "abs-guide.txt"},{"\u2022 Script as embedded command": "abs-guide.txt"},{"\u2022 Script portability": "abs-guide.txt"},{"Setting path and umask": "abs-guide.txt"},{"Using whatis": "abs-guide.txt"},{"\u2022 Setting script variable to a block of embedded sed or awk code": "abs-guide.txt"},{"\u2022 Speeding up script execution by disabling unicode": "abs-guide.txt"},{"\u2022 Subshell variable, accessing outside the subshell": "abs-guide.txt"},{"\u2022 Testing a variable to see if it contains only digits": "abs-guide.txt"},{"\u2022 Testing whether a command exists, using type": "abs-guide.txt"},{"\u2022 Tracking script usage": "abs-guide.txt"},{"\u2022 while-read loop without a subshell": "abs-guide.txt"},{"\u2022 Widgets, invoking from a script": "abs-guide.txt"},{"$TMOUT, Timeout interval": "abs-guide.txt"},{"Token, a symbol that may expand to a keyword or command": "abs-guide.txt"},{"tput, terminal-control command": "abs-guide.txt"},{"tr, character translation filter": "abs-guide.txt"},{"\u2022 DOS to Unix text file conversion": "abs-guide.txt"},{"\u2022 Options": "abs-guide.txt"},{"\u2022 Soundex, example script": "abs-guide.txt"},{"\u2022 Variants": "abs-guide.txt"},{"Trap, specifying an action upon receipt of a signal": "abs-guide.txt"},{"Trinary (ternary) operator, C-style, var>10?88:99": "abs-guide.txt"},{"\u2022 in double-parentheses construct": "abs-guide.txt"},{"\u2022 in let construct": "abs-guide.txt"},{"true, returns successful (0) exit status": "abs-guide.txt"},{"typeset builtin": "abs-guide.txt"},{"\u2022 options": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix T. ASCII Table": "abs-guide.txt"},{"": "abs-guide.txt"},{"896": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"***": "abs-guide.txt"},{"$UID, User ID number": "abs-guide.txt"},{"unalias, to remove an alias": "abs-guide.txt"},{"uname, output system information": "abs-guide.txt"},{"Unicode, encoding standard for representing letters and symbols": "abs-guide.txt"},{"\u2022 Disabling unicode to optimize script": "abs-guide.txt"},{"Uninitialized variables": "abs-guide.txt"},{"uniq, filter to remove duplicate lines from a sorted file": "abs-guide.txt"},{"unset, delete a shell variable": "abs-guide.txt"},{"until loop": "abs-guide.txt"},{"until [ condition-is-true ]; do": "abs-guide.txt"},{"***": "abs-guide.txt"},{"Variables": "abs-guide.txt"},{"\u2022 Array operations on": "abs-guide.txt"},{"\u2022 Assignment": "abs-guide.txt"},{"Script example": "abs-guide.txt"},{"Script example": "abs-guide.txt"},{"Script example": "abs-guide.txt"},{"\u2022 Bash internal variables": "abs-guide.txt"},{"\u2022 Block of sed or awk code, setting a variable to": "abs-guide.txt"},{"\u2022 C-style increment/decrement/trinary operations": "abs-guide.txt"},{"\u2022 Change value of internal script variables using set": "abs-guide.txt"},{"\u2022 declare, to modify the properties of variables": "abs-guide.txt"},{"\u2022 Deleting a shell variable using unset": "abs-guide.txt"},{"\u2022 Environmental": "abs-guide.txt"},{"\u2022 Expansion / Substring replacement operators": "abs-guide.txt"},{"\u2022 Indirect referencing": "abs-guide.txt"},{"eval variable1=\\$$variable2": "abs-guide.txt"},{"Newer notation": "abs-guide.txt"},{"${!variable}": "abs-guide.txt"},{"\u2022 Integer": "abs-guide.txt"},{"\u2022 Integer / string (variables are untyped)": "abs-guide.txt"},{"Appendix T. ASCII Table": "abs-guide.txt"},{"": "abs-guide.txt"},{"897": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"\u2022 Length": "abs-guide.txt"},{"${#var}": "abs-guide.txt"},{"\u2022 Lvalue": "abs-guide.txt"},{"\u2022 Manipulating and expanding": "abs-guide.txt"},{"\u2022 Name and value of a variable, distinguishing between": "abs-guide.txt"},{"\u2022 Null string, testing for": "abs-guide.txt"},{"\u2022 Null variable assignment, avoiding": "abs-guide.txt"},{"\u2022 Quoting": "abs-guide.txt"},{"within test brackets": "abs-guide.txt"},{"to preserve whitespace": "abs-guide.txt"},{"\u2022 rvalue": "abs-guide.txt"},{"\u2022 Setting to null value": "abs-guide.txt"},{"\u2022 In subshell not visible to parent shell": "abs-guide.txt"},{"\u2022 Testing a variable if it contains only digits": "abs-guide.txt"},{"\u2022 Typing, restricting the properties of a variable": "abs-guide.txt"},{"\u2022 Undeclared, error message": "abs-guide.txt"},{"\u2022 Uninitialized": "abs-guide.txt"},{"\u2022 Unquoted variable, splitting": "abs-guide.txt"},{"\u2022 Unsetting": "abs-guide.txt"},{"\u2022 Untyped": "abs-guide.txt"},{"***": "abs-guide.txt"},{"wait, suspend script execution": "abs-guide.txt"},{"\u2022 To remedy script hang": "abs-guide.txt"},{"Weak quoting \" ... \"": "abs-guide.txt"},{"while loop": "abs-guide.txt"},{"while [ condition ]; do": "abs-guide.txt"},{"\u2022 C-style syntax": "abs-guide.txt"},{"\u2022 Calling a function within test brackets": "abs-guide.txt"},{"\u2022 Multiple conditions": "abs-guide.txt"},{"\u2022 Omitting test brackets": "abs-guide.txt"},{"\u2022 while read construct": "abs-guide.txt"},{"Avoiding a subshell": "abs-guide.txt"},{"Whitespace, spaces, tabs, and newline characters": "abs-guide.txt"},{"\u2022 $IFS defaults to": "abs-guide.txt"},{"\u2022 Inappropriate use of": "abs-guide.txt"},{"\u2022 Preceding closing limit string in a here document, error": "abs-guide.txt"},{"\u2022 Preceding script comments": "abs-guide.txt"},{"\u2022 Quoting, to preserve whitespace within strings or variables": "abs-guide.txt"},{"Appendix T. ASCII Table": "abs-guide.txt"},{"": "abs-guide.txt"},{"898": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"\u2022 [:space:], POSIX character class": "abs-guide.txt"},{"who, information about logged on users": "abs-guide.txt"},{"\u2022w": "abs-guide.txt"},{"\u2022 whoami": "abs-guide.txt"},{"\u2022 logname": "abs-guide.txt"},{"Widgets": "abs-guide.txt"},{"Wild card characters": "abs-guide.txt"},{"\u2022 Asterisk *": "abs-guide.txt"},{"\u2022 In [list] constructs": "abs-guide.txt"},{"\u2022 Question mark ?": "abs-guide.txt"},{"\u2022 Will not match dot files": "abs-guide.txt"},{"Word splitting": "abs-guide.txt"},{"\u2022 Definition": "abs-guide.txt"},{"\u2022 Resulting from command substitution": "abs-guide.txt"},{"Wrapper, shell": "abs-guide.txt"},{"***": "abs-guide.txt"},{"xargs, Filter for grouping arguments": "abs-guide.txt"},{"\u2022 Curly brackets": "abs-guide.txt"},{"\u2022 Limiting arguments passed": "abs-guide.txt"},{"\u2022 Options": "abs-guide.txt"},{"\u2022 Processes arguments one at a time": "abs-guide.txt"},{"\u2022 Whitespace, handling": "abs-guide.txt"},{"***": "abs-guide.txt"},{"yes": "abs-guide.txt"},{"\u2022 Emulation": "abs-guide.txt"},{"***": "abs-guide.txt"},{"-z String is null": "abs-guide.txt"},{"Zombie, a process that has terminated, but not yet been killed by its parent": "abs-guide.txt"},{"Notes": "abs-guide.txt"},{"[1]": "abs-guide.txt"},{"[2]": "abs-guide.txt"},{"": "abs-guide.txt"},{"These are referred to as builtins, features internal to the shell.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix T. ASCII Table": "abs-guide.txt"},{"": "abs-guide.txt"},{"899": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"": "abs-guide.txt"},{"[3]": "abs-guide.txt"},{"": "abs-guide.txt"},{"[4]": "abs-guide.txt"},{"[5]": "abs-guide.txt"},{"": "abs-guide.txt"},{"[6]": "abs-guide.txt"},{"[7]": "abs-guide.txt"},{"[8]": "abs-guide.txt"},{"": "abs-guide.txt"},{"Although recursion is possible in a shell script, it tends to be slow and its implementation is often an": "abs-guide.txt"},{"ugly kludge.": "abs-guide.txt"},{"An acronym is an ersatz word formed by pasting together the initial letters of the words into a": "abs-guide.txt"},{"tongue-tripping phrase. This morally corrupt and pernicious practice deserves appropriately severe": "abs-guide.txt"},{"punishment. Public flogging suggests itself.": "abs-guide.txt"},{"Many of the features of ksh88, and even a few from the updated ksh93 have been merged into Bash.": "abs-guide.txt"},{"By convention, user-written shell scripts that are Bourne shell compliant generally take a name with a": "abs-guide.txt"},{".sh extension. System scripts, such as those found in /etc/rc.d, do not necessarily conform to this": "abs-guide.txt"},{"nomenclature.": "abs-guide.txt"},{"More commonly seen in the literature as she-bang or sh-bang. This derives from the concatenation of": "abs-guide.txt"},{"the tokens sharp (#) and bang (!).": "abs-guide.txt"},{"Some flavors of UNIX (those based on 4.2 BSD) allegedly take a four-byte magic number, requiring a": "abs-guide.txt"},{"blank after the ! -- #! /bin/sh. According to Sven Mascheck this is probably a myth.": "abs-guide.txt"},{"The #! line in a shell script will be the first thing the command interpreter (sh or bash) sees. Since this": "abs-guide.txt"},{"line begins with a #, it will be correctly interpreted as a comment when the command interpreter finally": "abs-guide.txt"},{"executes the script. The line has already served its purpose - calling the command interpreter.": "abs-guide.txt"},{"If, in fact, the script includes an extra #! line, then bash will interpret it as a comment.": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"echo \"Part 1 of script.\"": "abs-guide.txt"},{"a=1": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"# This does *not* launch a new script.": "abs-guide.txt"},{"echo \"Part 2 of script.\"": "abs-guide.txt"},{"echo $a # Value of $a stays at 1.": "abs-guide.txt"},{"": "abs-guide.txt"},{"[9]": "abs-guide.txt"},{"": "abs-guide.txt"},{"This allows some cute tricks.": "abs-guide.txt"},{"#!/bin/rm": "abs-guide.txt"},{"# Self-deleting script.": "abs-guide.txt"},{"# Nothing much seems to happen when you run this... except that the file disappears.": "abs-guide.txt"},{"WHATEVER=85": "abs-guide.txt"},{"echo \"This line will never print (betcha!).\"": "abs-guide.txt"},{"exit $WHATEVER": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Doesn't matter. The script will not exit here.": "abs-guide.txt"},{"# Try an echo $? after script termination.": "abs-guide.txt"},{"# You'll get a 0, not a 85.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Also, try starting a README file with a #!/bin/more, and making it executable. The result is a": "abs-guide.txt"},{"self-listing documentation file. (A here document using cat is possibly a better alternative -- see": "abs-guide.txt"},{"Example 19-3).": "abs-guide.txt"},{"[10] Portable Operating System Interface, an attempt to standardize UNIX-like OSes. The POSIX": "abs-guide.txt"},{"specifications are listed on the Open Group site.": "abs-guide.txt"},{"[11] To avoid this possibility, a script may begin with a #!/bin/env bash sha-bang line. This may be useful": "abs-guide.txt"},{"on UNIX machines where bash is not located in /bin": "abs-guide.txt"},{"[12] If Bash is your default shell, then the #! isn't necessary at the beginning of a script. However, if": "abs-guide.txt"},{"launching a script from a different shell, such as tcsh, then you will need the #!.": "abs-guide.txt"},{"Appendix T. ASCII Table": "abs-guide.txt"},{"": "abs-guide.txt"},{"900": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"[13] Caution: invoking a Bash script by sh scriptname turns off Bash-specific extensions, and the": "abs-guide.txt"},{"script may therefore fail to execute.": "abs-guide.txt"},{"[14] A script needs read, as well as execute permission for it to run, since the shell needs to be able to read": "abs-guide.txt"},{"it.": "abs-guide.txt"},{"[15] Why not simply invoke the script with scriptname? If the directory you are in ($PWD) is where": "abs-guide.txt"},{"scriptname is located, why doesn't this work? This fails because, for security reasons, the current": "abs-guide.txt"},{"directory (./) is not by default included in a user's $PATH. It is therefore necessary to explicitly": "abs-guide.txt"},{"invoke the script in the current directory with a ./scriptname.": "abs-guide.txt"},{"[16] An operator is an agent that carries out an operation. Some examples are the common arithmetic": "abs-guide.txt"},{"operators, + - * /. In Bash, there is some overlap between the concepts of operator and keyword.": "abs-guide.txt"},{"[17] This is more commonly known as the ternary operator. Unfortunately, ternary is an ugly word. It": "abs-guide.txt"},{"doesn't roll off the tongue, and it doesn't elucidate. It obfuscates. Trinary is by far the more elegant": "abs-guide.txt"},{"usage.": "abs-guide.txt"},{"[18]": "abs-guide.txt"},{"American Standard Code for Information Interchange. This is a system for encoding text characters": "abs-guide.txt"},{"(alphabetic, numeric, and a limited set of symbols) as 7-bit numbers that can be stored and manipulated": "abs-guide.txt"},{"by computers. Many of the ASCII characters are represented on a standard keyboard.": "abs-guide.txt"},{"[19]": "abs-guide.txt"},{"A PID, or process ID, is a number assigned to a running process. The PIDs of running processes may": "abs-guide.txt"},{"be viewed with a ps command.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Definition: A process is a currently executing command (or program), sometimes referred to as a": "abs-guide.txt"},{"job.": "abs-guide.txt"},{"[20] The shell does the brace expansion. The command itself acts upon the result of the expansion.": "abs-guide.txt"},{"[21] Exception: a code block in braces as part of a pipe may run as a subshell.": "abs-guide.txt"},{"ls | { read firstline; read secondline; }": "abs-guide.txt"},{"# Error. The code block in braces runs as a subshell,": "abs-guide.txt"},{"#+ so the output of \"ls\" cannot be passed to variables within the block.": "abs-guide.txt"},{"echo \"First line is $firstline; second line is $secondline\" # Won't work.": "abs-guide.txt"},{"# Thanks, S.C.": "abs-guide.txt"},{"": "abs-guide.txt"},{"[22] Even as in olden times a philtre denoted a potion alleged to have magical transformative powers, so": "abs-guide.txt"},{"does a UNIX filter transform its target in (roughly) analogous fashion. (The coder who comes up with a": "abs-guide.txt"},{"\"love philtre\" that runs on a Linux machine will likely win accolades and honors.)": "abs-guide.txt"},{"[23] Bash stores a list of commands previously issued from the command-line in a buffer, or memory space,": "abs-guide.txt"},{"for recall with the builtin history commands.": "abs-guide.txt"},{"[24] A linefeed (newline) is also a whitespace character. This explains why a blank line, consisting only of a": "abs-guide.txt"},{"linefeed, is considered whitespace.": "abs-guide.txt"},{"[25] Technically, the name of a variable is called an lvalue, meaning that it appears on the left side of an": "abs-guide.txt"},{"assignment statment, as in VARIABLE=23. A variable's value is an rvalue, meaning that it appears on": "abs-guide.txt"},{"the right side of an assignment statement, as in VAR2=$VARIABLE.": "abs-guide.txt"},{"A variable's name is, in fact, a reference, a pointer to the memory location(s) where the actual data": "abs-guide.txt"},{"associated with that variable is kept.": "abs-guide.txt"},{"[26] Note that functions also take positional parameters.": "abs-guide.txt"},{"[27]": "abs-guide.txt"},{"Appendix T. ASCII Table": "abs-guide.txt"},{"": "abs-guide.txt"},{"901": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"The process calling the script sets the $0 parameter. By convention, this parameter is the name of the": "abs-guide.txt"},{"script. See the manpage (manual page) for execv.": "abs-guide.txt"},{"From the command-line, however, $0 is the name of the shell.": "abs-guide.txt"},{"bash$ echo $0": "abs-guide.txt"},{"bash": "abs-guide.txt"},{"tcsh% echo $0": "abs-guide.txt"},{"tcsh": "abs-guide.txt"},{"": "abs-guide.txt"},{"[28] If the the script is sourced or symlinked, then this will not work. It is safer to check $BASH_Source.": "abs-guide.txt"},{"[29] Unless there is a file named first in the current working directory. Yet another reason to quote.": "abs-guide.txt"},{"(Thank you, Harald Koenig, for pointing this out.": "abs-guide.txt"},{"[30]": "abs-guide.txt"},{"Encapsulating \"!\" within double quotes gives an error when used from the command line. This is": "abs-guide.txt"},{"interpreted as a history command. Within a script, though, this problem does not occur, since the Bash": "abs-guide.txt"},{"history mechanism is disabled then.": "abs-guide.txt"},{"Of more concern is the apparently inconsistent behavior of \\ within double quotes, and especially": "abs-guide.txt"},{"following an echo -e command.": "abs-guide.txt"},{"bash$ echo hello\\!": "abs-guide.txt"},{"hello!": "abs-guide.txt"},{"bash$ echo \"hello\\!\"": "abs-guide.txt"},{"hello\\!": "abs-guide.txt"},{"": "abs-guide.txt"},{"bash$": "abs-guide.txt"},{">": "abs-guide.txt"},{"bash$": "abs-guide.txt"},{">": "abs-guide.txt"},{"bash$": "abs-guide.txt"},{"a": "abs-guide.txt"},{"bash$": "abs-guide.txt"},{"\\a": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo \\": "abs-guide.txt"},{"echo \"\\\"": "abs-guide.txt"},{"echo \\a": "abs-guide.txt"},{"echo \"\\a\"": "abs-guide.txt"},{"": "abs-guide.txt"},{"bash$ echo x\\ty": "abs-guide.txt"},{"xty": "abs-guide.txt"},{"bash$ echo \"x\\ty\"": "abs-guide.txt"},{"x\\ty": "abs-guide.txt"},{"bash$ echo -e x\\ty": "abs-guide.txt"},{"xty": "abs-guide.txt"},{"bash$ echo -e \"x\\ty\"": "abs-guide.txt"},{"x": "abs-guide.txt"},{"y": "abs-guide.txt"},{"": "abs-guide.txt"},{"Double quotes following an echo sometimes escape \\. Moreover, the -e option to echo causes the \"\\t\"": "abs-guide.txt"},{"to be interpreted as a tab.": "abs-guide.txt"},{"(Thank you, Wayne Pollock, for pointing this out, and Geoff Lee and Daniel Barclay for explaining it.)": "abs-guide.txt"},{"[31] \"Word splitting,\" in this context, means dividing a character string into separate and discrete": "abs-guide.txt"},{"arguments.": "abs-guide.txt"},{"[32] In those instances when there is no return terminating the function.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix T. ASCII Table": "abs-guide.txt"},{"": "abs-guide.txt"},{"902": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"[33] A token is a symbol or short string with a special meaning attached to it (a meta-meaning). In Bash,": "abs-guide.txt"},{"certain tokens, such as [ and . (dot-command), may expand to keywords and commands.": "abs-guide.txt"},{"[34] Per the 1913 edition of Webster's Dictionary:": "abs-guide.txt"},{"Deprecate": "abs-guide.txt"},{"...": "abs-guide.txt"},{"To": "abs-guide.txt"},{"to": "abs-guide.txt"},{"to": "abs-guide.txt"},{"to": "abs-guide.txt"},{"to": "abs-guide.txt"},{"to": "abs-guide.txt"},{"": "abs-guide.txt"},{"pray against, as an evil;": "abs-guide.txt"},{"seek to avert by prayer;": "abs-guide.txt"},{"desire the removal of;": "abs-guide.txt"},{"seek deliverance from;": "abs-guide.txt"},{"express deep regret for;": "abs-guide.txt"},{"disapprove of strongly.": "abs-guide.txt"},{"": "abs-guide.txt"},{"[35] Be aware that suid binaries may open security holes. The suid flag has no effect on shell scripts.": "abs-guide.txt"},{"[36] On Linux systems, the sticky bit is no longer used for files, only on directories.": "abs-guide.txt"},{"[37] As S.C. points out, in a compound test, even quoting the string variable might not suffice. [ -n": "abs-guide.txt"},{"\"$string\" -o \"$a\" = \"$b\" ] may cause an error with some versions of Bash if $string is": "abs-guide.txt"},{"empty. The safe way is to append an extra character to possibly empty variables, [ \"x$string\" !=": "abs-guide.txt"},{"x -o \"x$a\" = \"x$b\" ] (the \"x's\" cancel out).": "abs-guide.txt"},{"[38] In a different context, += can serve as a string concatenation operator. This can be useful for modifying": "abs-guide.txt"},{"environmental variables.": "abs-guide.txt"},{"[39] Side effects are, of course, unintended -- and usually undesirable -- consequences.": "abs-guide.txt"},{"[40] Precedence, in this context, has approximately the same meaning as priority": "abs-guide.txt"},{"[41] A stack register is a set of consecutive memory locations, such that the values stored (pushed) are": "abs-guide.txt"},{"retrieved (popped) in reverse order. The last value stored is the first retrieved. This is sometimes called": "abs-guide.txt"},{"a LIFO (last-in-first-out) or pushdown stack.": "abs-guide.txt"},{"[42] The PID of the currently running script is $$, of course.": "abs-guide.txt"},{"[43] Somewhat analogous to recursion, in this context nesting refers to a pattern embedded within a larger": "abs-guide.txt"},{"pattern. One of the definitions of nest, according to the 1913 edition of Webster's Dictionary, illustrates": "abs-guide.txt"},{"this beautifully: \"A collection of boxes, cases, or the like, of graduated size, each put within the one": "abs-guide.txt"},{"next larger.\"": "abs-guide.txt"},{"[44] The words \"argument\" and \"parameter\" are often used interchangeably. In the context of this document,": "abs-guide.txt"},{"they have the same precise meaning: a variable passed to a script or function.": "abs-guide.txt"},{"[45] Within a script, inside a subshell, $$ returns the PID of the script, not the subshell.": "abs-guide.txt"},{"[46] In this context, typing a variable means to classify it and restrict its properties. For example, a variable": "abs-guide.txt"},{"declared or typed as an integer is no longer available for string operations.": "abs-guide.txt"},{"declare -i intvar": "abs-guide.txt"},{"intvar=23": "abs-guide.txt"},{"echo \"$intvar\"": "abs-guide.txt"},{"# 23": "abs-guide.txt"},{"intvar=stringval": "abs-guide.txt"},{"echo \"$intvar\"": "abs-guide.txt"},{"# 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"[47] True \"randomness,\" insofar as it exists at all, can only be found in certain incompletely understood": "abs-guide.txt"},{"natural phenomena, such as radioactive decay. Computers only simulate randomness, and": "abs-guide.txt"},{"computer-generated sequences of \"random\" numbers are therefore referred to as pseudorandom.": "abs-guide.txt"},{"[48] The seed of a computer-generated pseudorandom number series can be considered an identification": "abs-guide.txt"},{"label. For example, think of the pseudorandom series with a seed of 23 as Series #23.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix T. ASCII Table": "abs-guide.txt"},{"": "abs-guide.txt"},{"903": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"": "abs-guide.txt"},{"[49]": "abs-guide.txt"},{"[50]": "abs-guide.txt"},{"[51]": "abs-guide.txt"},{"[52]": "abs-guide.txt"},{"[53]": "abs-guide.txt"},{"[54]": "abs-guide.txt"},{"": "abs-guide.txt"},{"A property of a pseurandom number series is the length of the cycle before it starts repeating itself. A": "abs-guide.txt"},{"good pseurandom generator will produce series with very long cycles.": "abs-guide.txt"},{"This applies to either command-line arguments or parameters passed to a function.": "abs-guide.txt"},{"Note that $substring and $replacement may refer to either literal strings or variables,": "abs-guide.txt"},{"depending on context. See the first usage example.": "abs-guide.txt"},{"If $parameter is null in a non-interactive script, it will terminate with a 127 exit status (the Bash error": "abs-guide.txt"},{"code for \"command not found\").": "abs-guide.txt"},{"Iteration: Repeated execution of a command or group of commands, usually -- but not always, while a": "abs-guide.txt"},{"given condition holds, or until a given condition is met.": "abs-guide.txt"},{"These are shell builtins, whereas other loop commands, such as while and case, are keywords.": "abs-guide.txt"},{"Pattern-match lines may also start with a ( left paren to give the layout a more structured appearance.": "abs-guide.txt"},{"case $( arch ) in": "abs-guide.txt"},{"# $( arch ) returns machine architecture.": "abs-guide.txt"},{"( i386 ) echo \"80386-based machine\";;": "abs-guide.txt"},{"# ^": "abs-guide.txt"},{"^": "abs-guide.txt"},{"( i486 ) echo \"80486-based machine\";;": "abs-guide.txt"},{"( i586 ) echo \"Pentium-based machine\";;": "abs-guide.txt"},{"( i686 ) echo \"Pentium2+-based machine\";;": "abs-guide.txt"},{"(": "abs-guide.txt"},{"* ) echo \"Other type of machine\";;": "abs-guide.txt"},{"esac": "abs-guide.txt"},{"": "abs-guide.txt"},{"[55] For purposes of command substitution, a command may be an external system command, an internal": "abs-guide.txt"},{"scripting builtin, or even a script function.": "abs-guide.txt"},{"[56] In a more technically correct sense, command substitution extracts the stdout of a command, then": "abs-guide.txt"},{"assigns it to a variable using the = operator.": "abs-guide.txt"},{"[57] In fact, nesting with backticks is also possible, but only by escaping the inner backticks, as John": "abs-guide.txt"},{"Default points out.": "abs-guide.txt"},{"word_count=` wc -w \\`echo * | awk '{print $8}'\\` `": "abs-guide.txt"},{"": "abs-guide.txt"},{"[58] As Nathan Coulter points out, \"while forking a process is a low-cost operation, executing a new": "abs-guide.txt"},{"program in the newly-forked child process adds more overhead.\"": "abs-guide.txt"},{"[59] An exception to this is the time command, listed in the official Bash documentation as a keyword": "abs-guide.txt"},{"(\"reserved word\").": "abs-guide.txt"},{"[60] Note that let cannot be used for setting string variables.": "abs-guide.txt"},{"[61] To Export information is to make it available in a more general context. See also scope.": "abs-guide.txt"},{"[62] An option is an argument that acts as a flag, switching script behaviors on or off. The argument": "abs-guide.txt"},{"associated with a particular option indicates the behavior that the option (flag) switches on or off.": "abs-guide.txt"},{"[63] Technically, an exit only terminates the process (or shell) in which it is running, not the parent process.": "abs-guide.txt"},{"[64] Unless the exec is used to reassign file descriptors.": "abs-guide.txt"},{"[65]": "abs-guide.txt"},{"Hashing is a method of creating lookup keys for data stored in a table. The data items themselves are": "abs-guide.txt"},{"\"scrambled\" to create keys, using one of a number of simple mathematical algorithms (methods, or": "abs-guide.txt"},{"recipes).": "abs-guide.txt"},{"An advantage of hashing is that it is fast. A disadvantage is that collisions -- where a single key maps to": "abs-guide.txt"},{"more than one data item -- are possible.": "abs-guide.txt"},{"For examples of hashing see Example A-20 and Example A-21.": "abs-guide.txt"},{"[66] The readline library is what Bash uses for reading input in an interactive shell.": "abs-guide.txt"},{"Appendix T. ASCII Table": "abs-guide.txt"},{"": "abs-guide.txt"},{"904": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"[67] This only applies to child processes, of course.": "abs-guide.txt"},{"[68] The C source for a number of loadable builtins is typically found in the": "abs-guide.txt"},{"/usr/share/doc/bash-?.??/functions directory.": "abs-guide.txt"},{"Note that the -f option to enable is not portable to all systems.": "abs-guide.txt"},{"[69] The same effect as autoload can be achieved with typeset -fu.": "abs-guide.txt"},{"[70] The -v option also orders the sort by upper- and lowercase prefixed filenames.": "abs-guide.txt"},{"[71]": "abs-guide.txt"},{"Dotfiles are files whose names begin with a dot, such as ~/.Xdefaults. Such filenames do not": "abs-guide.txt"},{"appear in a normal ls listing (although an ls -a will show them), and they cannot be deleted by an": "abs-guide.txt"},{"accidental rm -rf *. Dotfiles are generally used as setup and configuration files in a user's home": "abs-guide.txt"},{"directory.": "abs-guide.txt"},{"[72] This particular feature may not yet be implemented in the version of the ext2/ext3 filesystem installed": "abs-guide.txt"},{"on your system. Check the documentation for your Linux distro.": "abs-guide.txt"},{"[73] And even when xargs is not strictly necessary, it can speed up execution of a command involving": "abs-guide.txt"},{"batch-processing of multiple files.": "abs-guide.txt"},{"[74] This is only true of the GNU version of tr, not the generic version often found on commercial UNIX": "abs-guide.txt"},{"systems.": "abs-guide.txt"},{"[75] An archive, in the sense discussed here, is simply a set of related files stored in a single location.": "abs-guide.txt"},{"[76] A tar czvf ArchiveName.tar.gz * will include dotfiles in subdirectories below the current": "abs-guide.txt"},{"working directory. This is an undocumented GNU tar \"feature.\"": "abs-guide.txt"},{"[77] The checksum may be expressed as a hexadecimal number, or to some other base.": "abs-guide.txt"},{"[78] For even better security, use the sha256sum, sha512, and sha1pass commands.": "abs-guide.txt"},{"[79] This is a symmetric block cipher, used to encrypt files on a single system or local network, as opposed": "abs-guide.txt"},{"to the public key cipher class, of which pgp is a well-known example.": "abs-guide.txt"},{"[80] Creates a temporary directory when invoked with the -d option.": "abs-guide.txt"},{"[81]": "abs-guide.txt"},{"A daemon is a background process not attached to a terminal session. Daemons perform designated": "abs-guide.txt"},{"services either at specified times or explicitly triggered by certain events.": "abs-guide.txt"},{"": "abs-guide.txt"},{"[82]": "abs-guide.txt"},{"[83]": "abs-guide.txt"},{"[84]": "abs-guide.txt"},{"": "abs-guide.txt"},{"[85]": "abs-guide.txt"},{"[86]": "abs-guide.txt"},{"": "abs-guide.txt"},{"The word \"daemon\" means ghost in Greek, and there is certainly something mysterious, almost": "abs-guide.txt"},{"supernatural, about the way UNIX daemons wander about behind the scenes, silently carrying out their": "abs-guide.txt"},{"appointed tasks.": "abs-guide.txt"},{"This is actually a script adapted from the Debian Linux distribution.": "abs-guide.txt"},{"The print queue is the group of jobs \"waiting in line\" to be printed.": "abs-guide.txt"},{"Large mechanical line printers printed a single line of type at a time onto joined sheets of greenbar": "abs-guide.txt"},{"paper, to the accompaniment of a great deal of noise. The hardcopy thusly printed was referred to as a": "abs-guide.txt"},{"printout.": "abs-guide.txt"},{"For an excellent overview of this topic, see Andy Vaught's article, Introduction to Named Pipes, in the": "abs-guide.txt"},{"September, 1997 issue of Linux Journal.": "abs-guide.txt"},{"EBCDIC (pronounced \"ebb-sid-ick\") is an acronym for Extended Binary Coded Decimal Interchange": "abs-guide.txt"},{"Code, an obsolete IBM data format. A bizarre application of the conv=ebcdic option of dd is as a": "abs-guide.txt"},{"quick 'n easy, but not very secure text file encoder.": "abs-guide.txt"},{"cat $file | dd conv=swab,ebcdic > $file_encrypted": "abs-guide.txt"},{"# Encode (looks like gibberish).": "abs-guide.txt"},{"# Might as well switch bytes (swab), too, for a little extra obscurity.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix T. ASCII Table": "abs-guide.txt"},{"": "abs-guide.txt"},{"905": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"cat $file_encrypted | dd conv=swab,ascii > $file_plaintext": "abs-guide.txt"},{"# Decode.": "abs-guide.txt"},{"": "abs-guide.txt"},{"[87] A macro is a symbolic constant that expands into a command string or a set of operations on": "abs-guide.txt"},{"parameters. Simply put, it's a shortcut or abbreviation.": "abs-guide.txt"},{"[88] This is the case on a Linux machine or a UNIX system with disk quotas.": "abs-guide.txt"},{"[89] The userdel command will fail if the particular user being deleted is still logged on.": "abs-guide.txt"},{"[90] For more detail on burning CDRs, see Alex Withers' article, Creating CDs, in the October, 1999 issue": "abs-guide.txt"},{"of Linux Journal.": "abs-guide.txt"},{"[91] The -c option to mke2fs also invokes a check for bad blocks.": "abs-guide.txt"},{"[92] Since only root has write permission in the /var/lock directory, a user script cannot set a lock file": "abs-guide.txt"},{"there.": "abs-guide.txt"},{"[93] Operators of single-user Linux systems generally prefer something simpler for backups, such as tar.": "abs-guide.txt"},{"[94] As of the version 4 update of Bash, the -f and -c options take a block size of 512 when in POSIX": "abs-guide.txt"},{"mode. Additionally, there are two new options: -b for socket buffer size, and -T for the limit on the": "abs-guide.txt"},{"number of threads.": "abs-guide.txt"},{"[95] NAND is the logical not-and operator. Its effect is somewhat similar to subtraction.": "abs-guide.txt"},{"[96] In Bash and other Bourne shell derivatives, it is possible to set variables in a single command's": "abs-guide.txt"},{"environment.": "abs-guide.txt"},{"var1=value1 var2=value2 commandXXX": "abs-guide.txt"},{"# $var1 and $var2 set in the environment of 'commandXXX' only.": "abs-guide.txt"},{"": "abs-guide.txt"},{"[97] The killall system script should not be confused with the killall command in /usr/bin.": "abs-guide.txt"},{"[98] A meta-meaning is the meaning of a term or expression on a higher level of abstraction. For example,": "abs-guide.txt"},{"the literal meaning of regular expression is an ordinary expression that conforms to accepted usage.": "abs-guide.txt"},{"The meta-meaning is drastically different, as discussed at length in this chapter.": "abs-guide.txt"},{"[99] Since sed, awk, and grep process single lines, there will usually not be a newline to match. In those": "abs-guide.txt"},{"cases where there is a newline in a multiple line expression, the dot will match the newline.": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"sed -e 'N;s/.*/[&]/' << EOF": "abs-guide.txt"},{"line1": "abs-guide.txt"},{"line2": "abs-guide.txt"},{"EOF": "abs-guide.txt"},{"# OUTPUT:": "abs-guide.txt"},{"# [line1": "abs-guide.txt"},{"# line2]": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Here Document": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo": "abs-guide.txt"},{"awk '{ $0=$1 \"\\n\" $2; if (/line.1/) {print}}' << EOF": "abs-guide.txt"},{"line 1": "abs-guide.txt"},{"line 2": "abs-guide.txt"},{"EOF": "abs-guide.txt"},{"# OUTPUT:": "abs-guide.txt"},{"# line": "abs-guide.txt"},{"# 1": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix T. ASCII Table": "abs-guide.txt"},{"": "abs-guide.txt"},{"906": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"# Thanks, S.C.": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"[100] Filename expansion means expanding filename patterns or templates containing special characters. For": "abs-guide.txt"},{"example, example.??? might expand to example.001 and/or example.txt.": "abs-guide.txt"},{"[101] A wild card character, analogous to a wild card in poker, can represent (almost) any other character.": "abs-guide.txt"},{"[102] Filename expansion can match dotfiles, but only if the pattern explicitly includes the dot as a literal": "abs-guide.txt"},{"character.": "abs-guide.txt"},{"~/[.]bashrc": "abs-guide.txt"},{"~/?bashrc": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#+": "abs-guide.txt"},{"": "abs-guide.txt"},{"Will not expand to ~/.bashrc": "abs-guide.txt"},{"Neither will this.": "abs-guide.txt"},{"Wild cards and metacharacters will NOT": "abs-guide.txt"},{"expand to a dot in globbing.": "abs-guide.txt"},{"": "abs-guide.txt"},{"~/.[b]ashrc": "abs-guide.txt"},{"~/.ba?hrc": "abs-guide.txt"},{"~/.bashr*": "abs-guide.txt"},{"": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Will expand to ~/.bashrc": "abs-guide.txt"},{"Likewise.": "abs-guide.txt"},{"Likewise.": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Setting the \"dotglob\" option turns this off.": "abs-guide.txt"},{"# Thanks, S.C.": "abs-guide.txt"},{"": "abs-guide.txt"},{"[103] Except, as Dennis Benzinger points out, if using <<- to suppress tabs.": "abs-guide.txt"},{"[104] By convention in UNIX and Linux, data streams and peripherals (device files) are treated as files, in a": "abs-guide.txt"},{"fashion analogous to ordinary files.": "abs-guide.txt"},{"[105] A file descriptor is simply a number that the operating system assigns to an open file to keep track of it.": "abs-guide.txt"},{"Consider it a simplified type of file pointer. It is analogous to a file handle in C.": "abs-guide.txt"},{"[106] Using file descriptor 5 might cause problems. When Bash creates a child process, as with": "abs-guide.txt"},{"exec, the child inherits fd 5 (see Chet Ramey's archived e-mail, SUBJECT: RE: File descriptor 5 is": "abs-guide.txt"},{"held open). Best leave this particular fd alone.": "abs-guide.txt"},{"[107] An external command invoked with an exec does not (usually) fork off a subprocess / subshell.": "abs-guide.txt"},{"[108] This has the same effect as a named pipe (temp file), and, in fact, named pipes were at one time used in": "abs-guide.txt"},{"process substitution.": "abs-guide.txt"},{"[109] The return command is a Bash builtin.": "abs-guide.txt"},{"[110] However, as Thomas Braunberger points out, a local variable declared in a function is also visible to": "abs-guide.txt"},{"functions called by the parent function.": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"function1 ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"local func1var=20": "abs-guide.txt"},{"echo \"Within function1, \\$func1var = $func1var.\"": "abs-guide.txt"},{"function2": "abs-guide.txt"},{"}": "abs-guide.txt"},{"function2 ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"echo \"Within function2, \\$func1var = $func1var.\"": "abs-guide.txt"},{"}": "abs-guide.txt"},{"function1": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix T. ASCII Table": "abs-guide.txt"},{"": "abs-guide.txt"},{"907": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"exit 0": "abs-guide.txt"},{"": "abs-guide.txt"},{"# Output of the script:": "abs-guide.txt"},{"# Within function1, $func1var = 20.": "abs-guide.txt"},{"# Within function2, $func1var = 20.": "abs-guide.txt"},{"": "abs-guide.txt"},{"This is documented in the Bash manual:": "abs-guide.txt"},{"": "abs-guide.txt"},{"[111]": "abs-guide.txt"},{"[112]": "abs-guide.txt"},{"[113]": "abs-guide.txt"},{"[114]": "abs-guide.txt"},{"[115]": "abs-guide.txt"},{"": "abs-guide.txt"},{"\"Local can only be used within a function; it makes the variable name have a visible scope restricted to": "abs-guide.txt"},{"that function and its children.\" [emphasis added] The ABS Guide author considers this behavior to be a": "abs-guide.txt"},{"bug.": "abs-guide.txt"},{"Otherwise known as redundancy.": "abs-guide.txt"},{"Otherwise known as tautology.": "abs-guide.txt"},{"Otherwise known as a metaphor.": "abs-guide.txt"},{"Otherwise known as a recursive function.": "abs-guide.txt"},{"Too many levels of recursion may crash a script with a segfault.": "abs-guide.txt"},{"#!/bin/bash": "abs-guide.txt"},{"#": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Warning: Running this script could possibly lock up your system!": "abs-guide.txt"},{"If you're lucky, it will segfault before using up all available memory.": "abs-guide.txt"},{"": "abs-guide.txt"},{"recursive_function ()": "abs-guide.txt"},{"{": "abs-guide.txt"},{"echo \"$1\"": "abs-guide.txt"},{"# Makes the function do something, and hastens the segfault.": "abs-guide.txt"},{"(( $1 < $2 )) && recursive_function $(( $1 + 1 )) $2;": "abs-guide.txt"},{"# As long as 1st parameter is less than 2nd,": "abs-guide.txt"},{"#+ increment 1st and recurse.": "abs-guide.txt"},{"}": "abs-guide.txt"},{"recursive_function 1 50000 # Recurse 50,000 levels!": "abs-guide.txt"},{"# Most likely segfaults (depending on stack size, set by ulimit -m).": "abs-guide.txt"},{"# Recursion this deep might cause even a C program to segfault,": "abs-guide.txt"},{"#+ by using up all the memory allotted to the stack.": "abs-guide.txt"},{"": "abs-guide.txt"},{"echo \"This will probably not print.\"": "abs-guide.txt"},{"exit 0 # This script will not exit normally.": "abs-guide.txt"},{"#": "abs-guide.txt"},{"": "abs-guide.txt"},{"Thanks, St\u00e9phane Chazelas.": "abs-guide.txt"},{"": "abs-guide.txt"},{"[116] ... as the first word of a command string. Obviously, an alias is only meaningful at the beginning of a": "abs-guide.txt"},{"command.": "abs-guide.txt"},{"[117] However, aliases do seem to expand positional parameters.": "abs-guide.txt"},{"[118] The entries in /dev provide mount points for physical and virtual devices. These entries use very little": "abs-guide.txt"},{"drive space.": "abs-guide.txt"},{"Some devices, such as /dev/null, /dev/zero, and /dev/urandom are virtual. They are not": "abs-guide.txt"},{"actual physical devices and exist only in software.": "abs-guide.txt"},{"[119] A block device reads and/or writes data in chunks, or blocks, in contrast to a character device, which": "abs-guide.txt"},{"acesses data in character units. Examples of block devices are hard drives, CDROM drives, and flash": "abs-guide.txt"},{"drives. Examples of character devices are keyboards, modems, sound cards.": "abs-guide.txt"},{"[120]": "abs-guide.txt"},{"Appendix T. ASCII Table": "abs-guide.txt"},{"": "abs-guide.txt"},{"908": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"Of course, the mount point /mnt/flashdrive must exist. If not, then, as root, mkdir": "abs-guide.txt"},{"/mnt/flashdrive.": "abs-guide.txt"},{"To actually mount the drive, use the following command: mount /mnt/flashdrive": "abs-guide.txt"},{"": "abs-guide.txt"},{"[121]": "abs-guide.txt"},{"[122]": "abs-guide.txt"},{"[123]": "abs-guide.txt"},{"[124]": "abs-guide.txt"},{"[125]": "abs-guide.txt"},{"[126]": "abs-guide.txt"},{"[127]": "abs-guide.txt"},{"[128]": "abs-guide.txt"},{"[129]": "abs-guide.txt"},{"[130]": "abs-guide.txt"},{"": "abs-guide.txt"},{"[131]": "abs-guide.txt"},{"[132]": "abs-guide.txt"},{"[133]": "abs-guide.txt"},{"[134]": "abs-guide.txt"},{"[135]": "abs-guide.txt"},{"[136]": "abs-guide.txt"},{"": "abs-guide.txt"},{"[137]": "abs-guide.txt"},{"[138]": "abs-guide.txt"},{"[139]": "abs-guide.txt"},{"[140]": "abs-guide.txt"},{"[141]": "abs-guide.txt"},{"[142]": "abs-guide.txt"},{"[143]": "abs-guide.txt"},{"[144]": "abs-guide.txt"},{"[145]": "abs-guide.txt"},{"": "abs-guide.txt"},{"Newer Linux distros automount flash drives in the /media directory without user intervention.": "abs-guide.txt"},{"Certain system commands, such as procinfo, free, vmstat, lsdev, and uptime do this as well.": "abs-guide.txt"},{"By convention, signal 0 is assigned to exit.": "abs-guide.txt"},{"Setting the suid permission on the script itself has no effect in Linux and most other UNIX flavors.": "abs-guide.txt"},{"In this context, \"magic numbers\" have an entirely different meaning than the magic numbers used to": "abs-guide.txt"},{"designate file types.": "abs-guide.txt"},{"Quite a number of Linux utilities are, in fact, shell wrappers. Some examples are": "abs-guide.txt"},{"/usr/bin/pdf2ps, /usr/bin/batch, and /usr/bin/xmkmf.": "abs-guide.txt"},{"ANSI is, of course, the acronym for the American National Standards Institute. This august body": "abs-guide.txt"},{"establishes and maintains various technical and industrial standards.": "abs-guide.txt"},{"This usually means liberal use of functions.": "abs-guide.txt"},{"See Marius van Oers' article, Unix Shell Scripting Malware, and also the Denning reference in the": "abs-guide.txt"},{"bibliography.": "abs-guide.txt"},{"Or, better yet, #!/bin/env sh.": "abs-guide.txt"},{"To be more specific, Bash 4+ has limited support for associative arrays. It's a bare-bones": "abs-guide.txt"},{"implementation, and it lacks the much of the functionality of such arrays in other programming": "abs-guide.txt"},{"languages. Note, however, that associative arrays in Bash seem to execute faster and more efficiently": "abs-guide.txt"},{"than numerically-indexed arrays.": "abs-guide.txt"},{"Copyright 1995-2009 by Chester Ramey.": "abs-guide.txt"},{"This only works with pipes and certain other special files.": "abs-guide.txt"},{"But only in conjunction with readline, i.e., from the command-line.": "abs-guide.txt"},{"And while you're at it, consider fixing the notorious piped read problem.": "abs-guide.txt"},{"This is the notorious flog it to death technique that works so well with slow learners, eccentrics, odd": "abs-guide.txt"},{"ducks, fools and geniuses.": "abs-guide.txt"},{"In fact, he has no credentials or special qualifications. He's a school dropout with no formal credentials": "abs-guide.txt"},{"or professional experience whatsoever. None. Zero. Nada. Aside from the ABS Guide, his major claim": "abs-guide.txt"},{"to fame is a First Place in the sack race at the Colfax Elementary School Field Day in June, 1958.": "abs-guide.txt"},{"Those who can, do. Those who can't . . . get an MCSE.": "abs-guide.txt"},{"Sometimes it seems as if he has spent his entire life flouting conventional wisdom and defying the": "abs-guide.txt"},{"sonorous Voice of Authority: \"Hey, you can't do that!\"": "abs-guide.txt"},{"Well, if you absolutely insist, you can try modifying Example A-44 to suit your purposes.": "abs-guide.txt"},{"It was hard to resist the obvious pun. No slight intended, since the book is a pretty decent introduction": "abs-guide.txt"},{"to the basic concepts of shell scripting.": "abs-guide.txt"},{"Sed executes without user intervention.": "abs-guide.txt"},{"If no address range is specified, the default is all lines.": "abs-guide.txt"},{"Its name derives from the initials of its authors, Aho, Weinberg, and Kernighan.": "abs-guide.txt"},{"Out of range exit values can result in unexpected exit codes. An exit value greater than 255 returns an": "abs-guide.txt"},{"exit code modulo 256. For example, exit 3809 gives an exit code of 225 (3809 % 256 = 225).": "abs-guide.txt"},{"An update of /usr/include/sysexits.h allocates previously unused exit codes from 64 - 78. It": "abs-guide.txt"},{"may be anticipated that the range of unallotted exit codes will be further restricted in the future. The": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix T. ASCII Table": "abs-guide.txt"},{"": "abs-guide.txt"},{"909": "abs-guide.txt"},{"": "abs-guide.txt"},{"\fAdvanced Bash-Scripting Guide": "abs-guide.txt"},{"author of this document will not do fixups on the scripting examples to conform to the changing": "abs-guide.txt"},{"standard. This should not cause any problems, since there is no overlap or conflict in usage of exit": "abs-guide.txt"},{"codes between compiled C/C++ binaries and shell scripts.": "abs-guide.txt"},{"[146] This does not apply to csh, tcsh, and other shells not related to or descended from the classic Bourne": "abs-guide.txt"},{"shell (sh).": "abs-guide.txt"},{"[147] In older versions of UNIX, passwords were stored in /etc/passwd, and that explains the name of": "abs-guide.txt"},{"the file.": "abs-guide.txt"},{"[148] Some early UNIX systems had a fast, small-capacity fixed disk (containing /, the root partition), and a": "abs-guide.txt"},{"second drive which was larger, but slower (containing /usr and other partitions). The most frequently": "abs-guide.txt"},{"used programs and utilities therefore resided on the small-but-fast drive, in /bin, and the others on the": "abs-guide.txt"},{"slower drive, in /usr/bin.": "abs-guide.txt"},{"": "abs-guide.txt"},{"[149]": "abs-guide.txt"},{"[150]": "abs-guide.txt"},{"": "abs-guide.txt"},{"[151]": "abs-guide.txt"},{"[152]": "abs-guide.txt"},{"": "abs-guide.txt"},{"[153]": "abs-guide.txt"},{"": "abs-guide.txt"},{"This likewise accounts for the split between /sbin and /usr/sbin, /lib and /usr/lib, etc.": "abs-guide.txt"},{"This works only from the command line, of course, and not within a script.": "abs-guide.txt"},{"Normally the default parameter completion files reside in either the /etc/profile.d directory or": "abs-guide.txt"},{"in /etc/bash_completion. These autoload on system startup. So, after writing a useful": "abs-guide.txt"},{"completion script, you might wish to move it (as root, of course) to one of these directories.": "abs-guide.txt"},{"It has been extensively documented that programmers are willing to put in long hours of effort in order": "abs-guide.txt"},{"to save ten minutes of \"unnecessary\" labor. This is known as optimization.": "abs-guide.txt"},{"Various readers have suggested modifications of the above batch file to prettify it and make it more": "abs-guide.txt"},{"compact and efficient. In the opinion of the ABS Guide author, this is wasted effort. A Bash script can": "abs-guide.txt"},{"access a DOS filesystem, or even an NTFS partition (with the help of ntfs-3g) to do batch or scripted": "abs-guide.txt"},{"operations.": "abs-guide.txt"},{"For all you clever types who failed intermediate algebra, a determinant is a numerical value associated": "abs-guide.txt"},{"with a multidimensional matrix (array of numbers).": "abs-guide.txt"},{"For the simple case of a 2 x 2 determinant:": "abs-guide.txt"},{"|a": "abs-guide.txt"},{"|b": "abs-guide.txt"},{"": "abs-guide.txt"},{"b|": "abs-guide.txt"},{"a|": "abs-guide.txt"},{"": "abs-guide.txt"},{"The solution is a*a - b*b, where \"a\" and \"b\" represent numbers.": "abs-guide.txt"},{"": "abs-guide.txt"},{"Appendix T. ASCII Table": "abs-guide.txt"},{"": "abs-guide.txt"},{"910": "abs-guide.txt"},{"": "abs-guide.txt"},{"\f": "abs-guide.txt"},{"!!!@tree": "sma.txt"},{"": "sma.txt"},{"": "sma.txt"},{"help": "sma.txt"},{"@@@how to work": "sma.txt"},{"hello": "sma.txt"},{"": "sma.txt"},{"tea": "sma.txt"},{"": "sma.txt"},{"i try to study hard to succed": "sma.txt"},{"": "sma.txt"},{"i love food": "sma.txt"},{"i like food ": "sma.txt"},{"": "sma.txt"},{"": "sma.txt"},{"": "sma.txt"},{"123214": "sma.txt"},{"12": "sma.txt"},{"4": "sma.txt"},{"12": "sma.txt"},{"4": "sma.txt"},{"124": "sma.txt"},{" ": "sma.txt"},{"*HOW ARE YOU??": "sma.txt"},{"": "sma.txt"},{"": "sma.txt"},{"": "sma.txt"},{"": "sma.txt"},{"to be or not to be": "sma.txt"}]